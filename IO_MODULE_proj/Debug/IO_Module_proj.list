
IO_Module_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9b8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800eaf8  0800eaf8  0001eaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ed84  0800ed84  0001ed84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ed8c  0800ed8c  0001ed8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ed90  0800ed90  0001ed90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000008  0800ed94  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000203c  20000080  0800ee08  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200020bc  0800ee08  000220bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c3cc  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000058b7  00000000  00000000  0004c4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002850  00000000  00000000  00051d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f10  00000000  00000000  000545c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00027ba5  00000000  00000000  000564d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000299bc  00000000  00000000  0007e07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fe278  00000000  00000000  000a7a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ad80  00000000  00000000  001a5cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  001b0a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	0800eae0 	.word	0x0800eae0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	0800eae0 	.word	0x0800eae0

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <ADC_Temp_Thread_Start>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

// Initializes the thread and event flags in charge of calculating the temperature values form PT1000
void ADC_Temp_Thread_Start(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	TempCalcHandle = osThreadNew(CalculateTemp_Thread, NULL, &TempCalc_attributes);
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <ADC_Temp_Thread_Start+0x24>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <ADC_Temp_Thread_Start+0x28>)
 8000c22:	f008 fad7 	bl	80091d4 <osThreadNew>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <ADC_Temp_Thread_Start+0x2c>)
 8000c2a:	6013      	str	r3, [r2, #0]
	tempFlagsHandle = osEventFlagsNew(&tempFlags_attributes);
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <ADC_Temp_Thread_Start+0x30>)
 8000c2e:	f008 fb7e 	bl	800932e <osEventFlagsNew>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <ADC_Temp_Thread_Start+0x34>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	0800ebec 	.word	0x0800ebec
 8000c40:	080011f9 	.word	0x080011f9
 8000c44:	200006f0 	.word	0x200006f0
 8000c48:	0800ec34 	.word	0x0800ec34
 8000c4c:	200006f8 	.word	0x200006f8

08000c50 <Control_Thread_Init>:

// Initializes required components for Control algorithm thread
void Control_Thread_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <Control_Thread_Init+0x18>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <Control_Thread_Init+0x1c>)
 8000c5a:	f008 fabb 	bl	80091d4 <osThreadNew>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <Control_Thread_Init+0x20>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	0800ec10 	.word	0x0800ec10
 8000c6c:	080012c1 	.word	0x080012c1
 8000c70:	200006f4 	.word	0x200006f4

08000c74 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c84:	f023 0218 	bic.w	r2, r3, #24
 8000c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b085      	sub	sp, #20
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d08:	f000 fdd4 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0c:	f000 f852 	bl	8000db4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d10:	f000 f8c6 	bl	8000ea0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 f9f0 	bl	80010f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d18:	f000 f9cc 	bl	80010b4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d1c:	f000 f956 	bl	8000fcc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000d20:	f000 f9a0 	bl	8001064 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000d24:	f000 f8ee 	bl	8000f04 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  ModbusH.uModbusType = MB_SLAVE;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <main+0x94>)
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <main+0x94>)
 8000d30:	4a1a      	ldr	r2, [pc, #104]	; (8000d9c <main+0x98>)
 8000d32:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <main+0x94>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <main+0x94>)
 8000d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d40:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <main+0x94>)
 8000d46:	4a16      	ldr	r2, [pc, #88]	; (8000da0 <main+0x9c>)
 8000d48:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <main+0x94>)
 8000d4c:	2208      	movs	r2, #8
 8000d4e:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regs = ModbusDATA;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <main+0x94>)
 8000d52:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <main+0xa0>)
 8000d54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <main+0x94>)
 8000d5a:	2232      	movs	r2, #50	; 0x32
 8000d5c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
  ModbusH.xTypeHW = USART_HW_DMA;
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <main+0x94>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <main+0x94>)
 8000d6a:	f00c fa07 	bl	800d17c <ModbusInit>

 //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000d6e:	480a      	ldr	r0, [pc, #40]	; (8000d98 <main+0x94>)
 8000d70:	f00c faa6 	bl	800d2c0 <ModbusStart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d74:	f008 f9e4 	bl	8009140 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <main+0xa4>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <main+0xa8>)
 8000d7e:	f008 fa29 	bl	80091d4 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <main+0xac>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Temp_Thread_Start();
 8000d88:	f7ff ff46 	bl	8000c18 <ADC_Temp_Thread_Start>
  Control_Thread_Init();
 8000d8c:	f7ff ff60 	bl	8000c50 <Control_Thread_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d90:	f008 f9fa 	bl	8009188 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <main+0x90>
 8000d96:	bf00      	nop
 8000d98:	200005ac 	.word	0x200005ac
 8000d9c:	20000160 	.word	0x20000160
 8000da0:	48000800 	.word	0x48000800
 8000da4:	20000008 	.word	0x20000008
 8000da8:	0800ebc8 	.word	0x0800ebc8
 8000dac:	080012d1 	.word	0x080012d1
 8000db0:	200005a8 	.word	0x200005a8

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09a      	sub	sp, #104	; 0x68
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	2248      	movs	r2, #72	; 0x48
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00d fe52 	bl	800ea6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000de8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	f023 0303 	bic.w	r3, r3, #3
 8000df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dfe:	f003 f93b 	bl	8004078 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ff36 	bl	8000c74 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <SystemClock_Config+0xe8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e10:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <SystemClock_Config+0xe8>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <SystemClock_Config+0xe8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000e24:	2327      	movs	r3, #39	; 0x27
 8000e26:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3c:	2340      	movs	r3, #64	; 0x40
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e44:	2360      	movs	r3, #96	; 0x60
 8000e46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4c:	f107 0320 	add.w	r3, r7, #32
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 fcb1 	bl	80047b8 <HAL_RCC_OscConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e5c:	f000 fa52 	bl	8001304 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000e60:	236f      	movs	r3, #111	; 0x6f
 8000e62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e64:	2302      	movs	r3, #2
 8000e66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4618      	mov	r0, r3
 8000e82:	f004 f80d 	bl	8004ea0 <HAL_RCC_ClockConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000e8c:	f000 fa3a 	bl	8001304 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e90:	f004 fdfa 	bl	8005a88 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e94:	bf00      	nop
 8000e96:	3768      	adds	r7, #104	; 0x68
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	58000400 	.word	0x58000400

08000ea0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b094      	sub	sp, #80	; 0x50
 8000ea4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2250      	movs	r2, #80	; 0x50
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00d fddd 	bl	800ea6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000eb2:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 8000eb6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000eb8:	2318      	movs	r3, #24
 8000eba:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ec6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000ec8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ecc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000ece:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8000ed2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ed4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000eda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 fc56 	bl	800579c <HAL_RCCEx_PeriphCLKConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000ef6:	f000 fa05 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000efa:	bf00      	nop
 8000efc:	3750      	adds	r7, #80	; 0x50
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f1c:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <MX_ADC1_Init+0xc0>)
 8000f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7a:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f7c:	f000 ff1c 	bl	8001db8 <HAL_ADC_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000f86:	f000 f9bd 	bl	8001304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_ADC1_Init+0xc4>)
 8000f8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f8e:	2306      	movs	r3, #6
 8000f90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000f92:	2302      	movs	r3, #2
 8000f94:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f96:	237f      	movs	r3, #127	; 0x7f
 8000f98:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <MX_ADC1_Init+0xbc>)
 8000fa8:	f001 fb0c 	bl	80025c4 <HAL_ADC_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fb2:	f000 f9a7 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000009c 	.word	0x2000009c
 8000fc4:	50040000 	.word	0x50040000
 8000fc8:	14f00020 	.word	0x14f00020

08000fcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <MX_USART1_UART_Init+0x90>)
 8000fd2:	4a23      	ldr	r2, [pc, #140]	; (8001060 <MX_USART1_UART_Init+0x94>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <MX_USART1_UART_Init+0x90>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <MX_USART1_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <MX_USART1_UART_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_USART1_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_USART1_UART_Init+0x90>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <MX_USART1_UART_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_USART1_UART_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_USART1_UART_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_USART1_UART_Init+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_USART1_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001014:	4811      	ldr	r0, [pc, #68]	; (800105c <MX_USART1_UART_Init+0x90>)
 8001016:	f005 f8c9 	bl	80061ac <HAL_UART_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001020:	f000 f970 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001024:	2100      	movs	r1, #0
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_USART1_UART_Init+0x90>)
 8001028:	f007 feeb 	bl	8008e02 <HAL_UARTEx_SetTxFifoThreshold>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001032:	f000 f967 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001036:	2100      	movs	r1, #0
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <MX_USART1_UART_Init+0x90>)
 800103a:	f007 ff20 	bl	8008e7e <HAL_UARTEx_SetRxFifoThreshold>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001044:	f000 f95e 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_USART1_UART_Init+0x90>)
 800104a:	f007 fea1 	bl	8008d90 <HAL_UARTEx_DisableFifoMode>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001054:	f000 f956 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000160 	.word	0x20000160
 8001060:	40013800 	.word	0x40013800

08001064 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_USB_PCD_Init+0x48>)
 800106a:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <MX_USB_PCD_Init+0x4c>)
 800106c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_USB_PCD_Init+0x48>)
 8001070:	2208      	movs	r2, #8
 8001072:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <MX_USB_PCD_Init+0x48>)
 8001076:	2202      	movs	r2, #2
 8001078:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USB_PCD_Init+0x48>)
 800107c:	2202      	movs	r2, #2
 800107e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <MX_USB_PCD_Init+0x48>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USB_PCD_Init+0x48>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MX_USB_PCD_Init+0x48>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USB_PCD_Init+0x48>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_USB_PCD_Init+0x48>)
 800109a:	f002 fee9 	bl	8003e70 <HAL_PCD_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80010a4:	f000 f92e 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200002b4 	.word	0x200002b4
 80010b0:	40006800 	.word	0x40006800

080010b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010b8:	2004      	movs	r0, #4
 80010ba:	f7ff fdf1 	bl	8000ca0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010be:	2001      	movs	r0, #1
 80010c0:	f7ff fdee 	bl	8000ca0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2105      	movs	r1, #5
 80010c8:	200b      	movs	r0, #11
 80010ca:	f002 f9e3 	bl	8003494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010ce:	200b      	movs	r0, #11
 80010d0:	f002 f9fa 	bl	80034c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2105      	movs	r1, #5
 80010d8:	200c      	movs	r0, #12
 80010da:	f002 f9db 	bl	8003494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010de:	200c      	movs	r0, #12
 80010e0:	f002 f9f2 	bl	80034c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2105      	movs	r1, #5
 80010e8:	200d      	movs	r0, #13
 80010ea:	f002 f9d3 	bl	8003494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010ee:	200d      	movs	r0, #13
 80010f0:	f002 f9ea 	bl	80034c8 <HAL_NVIC_EnableIRQ>

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110c:	2004      	movs	r0, #4
 800110e:	f7ff fde0 	bl	8000cd2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff fddd 	bl	8000cd2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff fdda 	bl	8000cd2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	2008      	movs	r0, #8
 8001120:	f7ff fdd7 	bl	8000cd2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2108      	movs	r1, #8
 8001128:	4827      	ldr	r0, [pc, #156]	; (80011c8 <MX_GPIO_Init+0xd0>)
 800112a:	f002 fe89 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2102      	movs	r1, #2
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f002 fe83 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2123      	movs	r1, #35	; 0x23
 800113e:	4823      	ldr	r0, [pc, #140]	; (80011cc <MX_GPIO_Init+0xd4>)
 8001140:	f002 fe7e 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 8001144:	2308      	movs	r3, #8
 8001146:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4619      	mov	r1, r3
 8001158:	481b      	ldr	r0, [pc, #108]	; (80011c8 <MX_GPIO_Init+0xd0>)
 800115a:	f002 fd01 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800115e:	2302      	movs	r3, #2
 8001160:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f002 fcf3 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800117a:	2310      	movs	r3, #16
 800117c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4619      	mov	r1, r3
 800118a:	480f      	ldr	r0, [pc, #60]	; (80011c8 <MX_GPIO_Init+0xd0>)
 800118c:	f002 fce8 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001190:	2323      	movs	r3, #35	; 0x23
 8001192:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <MX_GPIO_Init+0xd4>)
 80011a6:	f002 fcdb 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80011aa:	2303      	movs	r3, #3
 80011ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_GPIO_Init+0xd8>)
 80011bc:	f002 fcd0 	bl	8003b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	48000800 	.word	0x48000800
 80011cc:	48000400 	.word	0x48000400
 80011d0:	48000c00 	.word	0x48000c00

080011d4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

	osEventFlagsSet(tempFlagsHandle,0x01);
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2101      	movs	r1, #1
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 f8e2 	bl	80093ac <osEventFlagsSet>

}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200006f8 	.word	0x200006f8
 80011f4:	00000000 	.word	0x00000000

080011f8 <CalculateTemp_Thread>:

void CalculateTemp_Thread(void *argument){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001200:	217f      	movs	r1, #127	; 0x7f
 8001202:	4829      	ldr	r0, [pc, #164]	; (80012a8 <CalculateTemp_Thread+0xb0>)
 8001204:	f001 fffa 	bl	80031fc <HAL_ADCEx_Calibration_Start>

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8001208:	2201      	movs	r2, #1
 800120a:	4928      	ldr	r1, [pc, #160]	; (80012ac <CalculateTemp_Thread+0xb4>)
 800120c:	4826      	ldr	r0, [pc, #152]	; (80012a8 <CalculateTemp_Thread+0xb0>)
 800120e:	f000 ff1f 	bl	8002050 <HAL_ADC_Start_DMA>
		osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <CalculateTemp_Thread+0xb8>)
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	2201      	movs	r2, #1
 800121c:	2101      	movs	r1, #1
 800121e:	f008 f909 	bl	8009434 <osEventFlagsWait>
		ADCvoltage = ADCrawReading * 0.00073242;
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <CalculateTemp_Thread+0xb4>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f8fb 	bl	8000424 <__aeabi_i2d>
 800122e:	a318      	add	r3, pc, #96	; (adr r3, 8001290 <CalculateTemp_Thread+0x98>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff f960 	bl	80004f8 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	491d      	ldr	r1, [pc, #116]	; (80012b4 <CalculateTemp_Thread+0xbc>)
 800123e:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((ADCvoltage - 0.408)*100) / 2.04;
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <CalculateTemp_Thread+0xbc>)
 8001244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001248:	a313      	add	r3, pc, #76	; (adr r3, 8001298 <CalculateTemp_Thread+0xa0>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7fe ff9b 	bl	8000188 <__aeabi_dsub>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <CalculateTemp_Thread+0xc0>)
 8001260:	f7ff f94a 	bl	80004f8 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	a30c      	add	r3, pc, #48	; (adr r3, 80012a0 <CalculateTemp_Thread+0xa8>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff fa6b 	bl	800074c <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4910      	ldr	r1, [pc, #64]	; (80012bc <CalculateTemp_Thread+0xc4>)
 800127c:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <CalculateTemp_Thread+0xb0>)
 8001282:	f000 ff69 	bl	8002158 <HAL_ADC_Stop_DMA>
		osDelay(2);
 8001286:	2002      	movs	r0, #2
 8001288:	f008 f836 	bl	80092f8 <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 800128c:	e7bc      	b.n	8001208 <CalculateTemp_Thread+0x10>
 800128e:	bf00      	nop
 8001290:	f9353597 	.word	0xf9353597
 8001294:	3f47fffb 	.word	0x3f47fffb
 8001298:	083126e9 	.word	0x083126e9
 800129c:	3fda1cac 	.word	0x3fda1cac
 80012a0:	851eb852 	.word	0x851eb852
 80012a4:	400051eb 	.word	0x400051eb
 80012a8:	2000009c 	.word	0x2000009c
 80012ac:	200006fc 	.word	0x200006fc
 80012b0:	200006f8 	.word	0x200006f8
 80012b4:	20000700 	.word	0x20000700
 80012b8:	40590000 	.word	0x40590000
 80012bc:	20000708 	.word	0x20000708

080012c0 <ControlTask>:
	}

}

void ControlTask(void *argument){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	// Add the control algorithm and schedule the task properly to execute every period of time
	// TODO

	for(;;)
	{
		osDelay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f008 f815 	bl	80092f8 <osDelay>
 80012ce:	e7fb      	b.n	80012c8 <ControlTask+0x8>

080012d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f008 f80d 	bl	80092f8 <osDelay>
 80012de:	e7fb      	b.n	80012d8 <StartDefaultTask+0x8>

080012e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012f2:	f000 faff 	bl	80018f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40014400 	.word	0x40014400

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>

0800130e <LL_AHB2_GRP1_EnableClock>:
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800131c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4313      	orrs	r3, r2
 8001324:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4013      	ands	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800134e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800138a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4013      	ands	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	210f      	movs	r1, #15
 80013ac:	f06f 0001 	mvn.w	r0, #1
 80013b0:	f002 f870 	bl	8003494 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a26      	ldr	r2, [pc, #152]	; (8001470 <HAL_ADC_MspInit+0xb8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d146      	bne.n	8001468 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013de:	f7ff ff96 	bl	800130e <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff ff93 	bl	800130e <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fe:	f002 fbaf 	bl	8003b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 8001404:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <HAL_ADC_MspInit+0xc0>)
 8001406:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 800140a:	2205      	movs	r2, #5
 800140c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 8001422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001426:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 800142a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 8001432:	2220      	movs	r2, #32
 8001434:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 800143e:	f002 f851 	bl	80034e4 <HAL_DMA_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001448:	f7ff ff5c 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 8001450:	64da      	str	r2, [r3, #76]	; 0x4c
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_ADC_MspInit+0xbc>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2105      	movs	r1, #5
 800145c:	2012      	movs	r0, #18
 800145e:	f002 f819 	bl	8003494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001462:	2012      	movs	r0, #18
 8001464:	f002 f830 	bl	80034c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	50040000 	.word	0x50040000
 8001474:	20000100 	.word	0x20000100
 8001478:	40020030 	.word	0x40020030

0800147c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b09c      	sub	sp, #112	; 0x70
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2250      	movs	r2, #80	; 0x50
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f00d fae5 	bl	800ea6c <memset>
  if(huart->Instance==USART1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a43      	ldr	r2, [pc, #268]	; (80015b4 <HAL_UART_MspInit+0x138>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d17f      	bne.n	80015ac <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014ac:	2301      	movs	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 f96f 	bl	800579c <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014c4:	f7ff ff1e 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014cc:	f7ff ff51 	bl	8001372 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	2002      	movs	r0, #2
 80014d2:	f7ff ff1c 	bl	800130e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014d6:	23c0      	movs	r3, #192	; 0xc0
 80014d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014de:	2301      	movs	r3, #1
 80014e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e6:	2307      	movs	r3, #7
 80014e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014ee:	4619      	mov	r1, r3
 80014f0:	4831      	ldr	r0, [pc, #196]	; (80015b8 <HAL_UART_MspInit+0x13c>)
 80014f2:	f002 fb35 	bl	8003b60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <HAL_UART_MspInit+0x140>)
 80014f8:	4a31      	ldr	r2, [pc, #196]	; (80015c0 <HAL_UART_MspInit+0x144>)
 80014fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80014fc:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_UART_MspInit+0x140>)
 80014fe:	220e      	movs	r2, #14
 8001500:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_UART_MspInit+0x140>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001508:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <HAL_UART_MspInit+0x140>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_UART_MspInit+0x140>)
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001514:	4b29      	ldr	r3, [pc, #164]	; (80015bc <HAL_UART_MspInit+0x140>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <HAL_UART_MspInit+0x140>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001520:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_UART_MspInit+0x140>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001526:	4b25      	ldr	r3, [pc, #148]	; (80015bc <HAL_UART_MspInit+0x140>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800152c:	4823      	ldr	r0, [pc, #140]	; (80015bc <HAL_UART_MspInit+0x140>)
 800152e:	f001 ffd9 	bl	80034e4 <HAL_DMA_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001538:	f7ff fee4 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <HAL_UART_MspInit+0x140>)
 8001540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001544:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_UART_MspInit+0x140>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_UART_MspInit+0x148>)
 800154c:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <HAL_UART_MspInit+0x14c>)
 800154e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_UART_MspInit+0x148>)
 8001552:	220f      	movs	r2, #15
 8001554:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_UART_MspInit+0x148>)
 8001558:	2210      	movs	r2, #16
 800155a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_UART_MspInit+0x148>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_UART_MspInit+0x148>)
 8001564:	2280      	movs	r2, #128	; 0x80
 8001566:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_UART_MspInit+0x148>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_UART_MspInit+0x148>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_UART_MspInit+0x148>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_UART_MspInit+0x148>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001580:	4810      	ldr	r0, [pc, #64]	; (80015c4 <HAL_UART_MspInit+0x148>)
 8001582:	f001 ffaf 	bl	80034e4 <HAL_DMA_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 800158c:	f7ff feba 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <HAL_UART_MspInit+0x148>)
 8001594:	67da      	str	r2, [r3, #124]	; 0x7c
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_UART_MspInit+0x148>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2105      	movs	r1, #5
 80015a0:	2024      	movs	r0, #36	; 0x24
 80015a2:	f001 ff77 	bl	8003494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015a6:	2024      	movs	r0, #36	; 0x24
 80015a8:	f001 ff8e 	bl	80034c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3770      	adds	r7, #112	; 0x70
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40013800 	.word	0x40013800
 80015b8:	48000400 	.word	0x48000400
 80015bc:	200001f4 	.word	0x200001f4
 80015c0:	40020008 	.word	0x40020008
 80015c4:	20000254 	.word	0x20000254
 80015c8:	4002001c 	.word	0x4002001c

080015cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_PCD_MspInit+0x5c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d118      	bne.n	8001620 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff fe8d 	bl	800130e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001606:	230a      	movs	r3, #10
 8001608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f002 faa4 	bl	8003b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001618:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800161c:	f7ff fe90 	bl	8001340 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40006800 	.word	0x40006800

0800162c <LL_APB2_GRP1_EnableClock>:
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001638:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800163a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4313      	orrs	r3, r2
 8001642:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001648:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001650:	68fb      	ldr	r3, [r7, #12]
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	2019      	movs	r0, #25
 8001676:	f001 ff0d 	bl	8003494 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800167a:	2019      	movs	r0, #25
 800167c:	f001 ff24 	bl	80034c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001680:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001684:	f7ff ffd2 	bl	800162c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fdf0 	bl	8005278 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001698:	f003 fdd8 	bl	800524c <HAL_RCC_GetPCLK2Freq>
 800169c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a0:	4a12      	ldr	r2, [pc, #72]	; (80016ec <HAL_InitTick+0x8c>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0c9b      	lsrs	r3, r3, #18
 80016a8:	3b01      	subs	r3, #1
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_InitTick+0x90>)
 80016ae:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <HAL_InitTick+0x94>)
 80016b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_InitTick+0x90>)
 80016b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016b8:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_InitTick+0x90>)
 80016bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016be:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_InitTick+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_InitTick+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <HAL_InitTick+0x90>)
 80016ce:	f004 faf2 	bl	8005cb6 <HAL_TIM_Base_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d104      	bne.n	80016e2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <HAL_InitTick+0x90>)
 80016da:	f004 fb4d 	bl	8005d78 <HAL_TIM_Base_Start_IT>
 80016de:	4603      	mov	r3, r0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3730      	adds	r7, #48	; 0x30
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	431bde83 	.word	0x431bde83
 80016f0:	20000710 	.word	0x20000710
 80016f4:	40014400 	.word	0x40014400

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler+0x4>

080016fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler+0x4>

0800170a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler+0x4>

08001716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA1_Channel1_IRQHandler+0x10>)
 800172a:	f002 f8bc 	bl	80038a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200001f4 	.word	0x200001f4

08001738 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <DMA1_Channel2_IRQHandler+0x10>)
 800173e:	f002 f8b2 	bl	80038a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000254 	.word	0x20000254

0800174c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <DMA1_Channel3_IRQHandler+0x10>)
 8001752:	f002 f8a8 	bl	80038a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000100 	.word	0x20000100

08001760 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <ADC1_IRQHandler+0x10>)
 8001766:	f000 fd58 	bl	800221a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000009c 	.word	0x2000009c

08001774 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800177a:	f004 fb4b 	bl	8005e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000710 	.word	0x20000710

08001788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <USART1_IRQHandler+0x10>)
 800178e:	f005 f821 	bl	80067d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000160 	.word	0x20000160

0800179c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <SystemInit+0x98>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a23      	ldr	r2, [pc, #140]	; (8001834 <SystemInit+0x98>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80017c8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <SystemInit+0x9c>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e6:	f023 0305 	bic.w	r3, r3, #5
 80017ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001806:	4a0d      	ldr	r2, [pc, #52]	; (800183c <SystemInit+0xa0>)
 8001808:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <SystemInit+0xa0>)
 8001810:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800181c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001820:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00
 8001838:	faf6fefb 	.word	0xfaf6fefb
 800183c:	22041000 	.word	0x22041000

08001840 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001840:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001842:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001844:	3304      	adds	r3, #4

08001846 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001846:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001848:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800184a:	d3f9      	bcc.n	8001840 <CopyDataInit>
  bx lr
 800184c:	4770      	bx	lr

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800184e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001850:	3004      	adds	r0, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001852:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>
  bx lr
 8001856:	4770      	bx	lr

08001858 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800185a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800185c:	f7ff ff9e 	bl	800179c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001860:	480b      	ldr	r0, [pc, #44]	; (8001890 <LoopForever+0x6>)
 8001862:	490c      	ldr	r1, [pc, #48]	; (8001894 <LoopForever+0xa>)
 8001864:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <LoopForever+0xe>)
 8001866:	2300      	movs	r3, #0
 8001868:	f7ff ffed 	bl	8001846 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <LoopForever+0x12>)
 800186e:	490c      	ldr	r1, [pc, #48]	; (80018a0 <LoopForever+0x16>)
 8001870:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <LoopForever+0x1a>)
 8001872:	2300      	movs	r3, #0
 8001874:	f7ff ffe7 	bl	8001846 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <LoopForever+0x1e>)
 800187a:	490c      	ldr	r1, [pc, #48]	; (80018ac <LoopForever+0x22>)
 800187c:	2300      	movs	r3, #0
 800187e:	f7ff ffe8 	bl	8001852 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001882:	f00d f8fb 	bl	800ea7c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001886:	f7ff fa3d 	bl	8000d04 <main>

0800188a <LoopForever>:

LoopForever:
  b LoopForever
 800188a:	e7fe      	b.n	800188a <LoopForever>
  ldr   r0, =_estack
 800188c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001890:	20000008 	.word	0x20000008
 8001894:	2000007c 	.word	0x2000007c
 8001898:	0800ed94 	.word	0x0800ed94
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800189c:	20030000 	.word	0x20030000
 80018a0:	20030000 	.word	0x20030000
 80018a4:	0800ee08 	.word	0x0800ee08
  INIT_BSS _sbss, _ebss
 80018a8:	20000080 	.word	0x20000080
 80018ac:	200020bc 	.word	0x200020bc

080018b0 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <AES1_IRQHandler>
	...

080018b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_Init+0x3c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_Init+0x3c>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ca:	2003      	movs	r0, #3
 80018cc:	f001 fdd7 	bl	800347e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d0:	200f      	movs	r0, #15
 80018d2:	f7ff fec5 	bl	8001660 <HAL_InitTick>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	e001      	b.n	80018e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e2:	f7ff fd5f 	bl	80013a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e6:	79fb      	ldrb	r3, [r7, #7]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	58004000 	.word	0x58004000

080018f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000074 	.word	0x20000074
 8001918:	2000075c 	.word	0x2000075c

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	2000075c 	.word	0x2000075c

08001934 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTickPrio+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000070 	.word	0x20000070

0800194c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3360      	adds	r3, #96	; 0x60
 80019c6:	461a      	mov	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <LL_ADC_SetOffset+0x44>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	4313      	orrs	r3, r2
 80019e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	03fff000 	.word	0x03fff000

080019fc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3360      	adds	r3, #96	; 0x60
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3360      	adds	r3, #96	; 0x60
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a52:	bf00      	nop
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a76:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3330      	adds	r3, #48	; 0x30
 8001a94:	461a      	mov	r2, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	4413      	add	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	211f      	movs	r1, #31
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	0e9b      	lsrs	r3, r3, #26
 8001abc:	f003 011f 	and.w	r1, r3, #31
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	431a      	orrs	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b087      	sub	sp, #28
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3314      	adds	r3, #20
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	0e5b      	lsrs	r3, r3, #25
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	0d1b      	lsrs	r3, r3, #20
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2107      	movs	r1, #7
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	0d1b      	lsrs	r3, r3, #20
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	431a      	orrs	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001b68:	bf00      	nop
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0318 	and.w	r3, r3, #24
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b98:	40d9      	lsrs	r1, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	0007ffff 	.word	0x0007ffff

08001bbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6093      	str	r3, [r2, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c44:	d101      	bne.n	8001c4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c94:	f043 0202 	orr.w	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <LL_ADC_IsEnabled+0x18>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <LL_ADC_IsEnabled+0x1a>
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d101      	bne.n	8001ce6 <LL_ADC_IsDisableOngoing+0x18>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <LL_ADC_IsDisableOngoing+0x1a>
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d08:	f043 0204 	orr.w	r2, r3, #4
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d30:	f043 0210 	orr.w	r2, r3, #16
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d101      	bne.n	8001d5c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d7e:	f043 0220 	orr.w	r2, r3, #32
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d101      	bne.n	8001daa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e12e      	b.n	8002034 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fae7 	bl	80013b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff feef 	bl	8001be0 <LL_ADC_IsDeepPowerDownEnabled>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fed5 	bl	8001bbc <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff0a 	bl	8001c30 <LL_ADC_IsInternalRegulatorEnabled>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d115      	bne.n	8001e4e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff feee 	bl	8001c08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e2c:	4b83      	ldr	r3, [pc, #524]	; (800203c <HAL_ADC_Init+0x284>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	4a83      	ldr	r2, [pc, #524]	; (8002040 <HAL_ADC_Init+0x288>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e40:	e002      	b.n	8001e48 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f9      	bne.n	8001e42 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff feec 	bl	8001c30 <LL_ADC_IsInternalRegulatorEnabled>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	f043 0210 	orr.w	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff60 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 8001e84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 80c7 	bne.w	8002022 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 80c3 	bne.w	8002022 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ea4:	f043 0202 	orr.w	r2, r3, #2
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fef9 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10b      	bne.n	8001ed4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ebc:	4861      	ldr	r0, [pc, #388]	; (8002044 <HAL_ADC_Init+0x28c>)
 8001ebe:	f7ff fef3 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	485e      	ldr	r0, [pc, #376]	; (8002048 <HAL_ADC_Init+0x290>)
 8001ed0:	f7ff fd3c 	bl	800194c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7e5b      	ldrb	r3, [r3, #25]
 8001ed8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ede:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ee4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001eea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001ef4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d106      	bne.n	8001f14 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	045b      	lsls	r3, r3, #17
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d009      	beq.n	8001f30 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	4b45      	ldr	r3, [pc, #276]	; (800204c <HAL_ADC_Init+0x294>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fefb 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 8001f4e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff1c 	bl	8001d92 <LL_ADC_INJ_IsConversionOngoing>
 8001f5a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d13d      	bne.n	8001fde <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d13a      	bne.n	8001fde <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f6c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f74:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f84:	f023 0302 	bic.w	r3, r3, #2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	69b9      	ldr	r1, [r7, #24]
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d118      	bne.n	8001fce <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fa6:	f023 0304 	bic.w	r3, r3, #4
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fb8:	4311      	orrs	r1, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	611a      	str	r2, [r3, #16]
 8001fcc:	e007      	b.n	8001fde <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10c      	bne.n	8002000 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	f023 010f 	bic.w	r1, r3, #15
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	1e5a      	subs	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffe:	e007      	b.n	8002010 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 020f 	bic.w	r2, r2, #15
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	f023 0303 	bic.w	r3, r3, #3
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
 8002020:	e007      	b.n	8002032 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002032:	7ffb      	ldrb	r3, [r7, #31]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	2000006c 	.word	0x2000006c
 8002040:	053e2d63 	.word	0x053e2d63
 8002044:	50040000 	.word	0x50040000
 8002048:	50040300 	.word	0x50040300
 800204c:	fff0c007 	.word	0xfff0c007

08002050 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fe6f 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d167      	bne.n	800213c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_ADC_Start_DMA+0x2a>
 8002076:	2302      	movs	r3, #2
 8002078:	e063      	b.n	8002142 <HAL_ADC_Start_DMA+0xf2>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 ff20 	bl	8002ec8 <ADC_Enable>
 8002088:	4603      	mov	r3, r0
 800208a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d14f      	bne.n	8002132 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d006      	beq.n	80020c0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	f023 0206 	bic.w	r2, r3, #6
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	659a      	str	r2, [r3, #88]	; 0x58
 80020be:	e002      	b.n	80020c6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	4a20      	ldr	r2, [pc, #128]	; (800214c <HAL_ADC_Start_DMA+0xfc>)
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	4a1f      	ldr	r2, [pc, #124]	; (8002150 <HAL_ADC_Start_DMA+0x100>)
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <HAL_ADC_Start_DMA+0x104>)
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	221c      	movs	r2, #28
 80020e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0210 	orr.w	r2, r2, #16
 80020fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3340      	adds	r3, #64	; 0x40
 8002118:	4619      	mov	r1, r3
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f001 fa89 	bl	8003634 <HAL_DMA_Start_IT>
 8002122:	4603      	mov	r3, r0
 8002124:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fde2 	bl	8001cf4 <LL_ADC_REG_StartConversion>
 8002130:	e006      	b.n	8002140 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800213a:	e001      	b.n	8002140 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800213c:	2302      	movs	r3, #2
 800213e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002140:	7dfb      	ldrb	r3, [r7, #23]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	0800307b 	.word	0x0800307b
 8002150:	08003153 	.word	0x08003153
 8002154:	0800316f 	.word	0x0800316f

08002158 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_ADC_Stop_DMA+0x16>
 800216a:	2302      	movs	r3, #2
 800216c:	e051      	b.n	8002212 <HAL_ADC_Stop_DMA+0xba>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002176:	2103      	movs	r1, #3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fde9 	bl	8002d50 <ADC_ConversionStop>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d13f      	bne.n	8002208 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d10f      	bne.n	80021c6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 fabd 	bl	800372a <HAL_DMA_Abort>
 80021b0:	4603      	mov	r3, r0
 80021b2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0210 	bic.w	r2, r2, #16
 80021d4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 feed 	bl	8002fbc <ADC_Disable>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73fb      	strb	r3, [r7, #15]
 80021e6:	e002      	b.n	80021ee <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fee7 	bl	8002fbc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d109      	bne.n	8002208 <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b088      	sub	sp, #32
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d017      	beq.n	8002270 <HAL_ADC_IRQHandler+0x56>
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d012      	beq.n	8002270 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f001 f854 	bl	8003310 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2202      	movs	r2, #2
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <HAL_ADC_IRQHandler+0x6a>
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800228a:	2b00      	cmp	r3, #0
 800228c:	d05d      	beq.n	800234a <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d058      	beq.n	800234a <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fbd2 	bl	8001a5e <LL_ADC_REG_IsTriggerSourceSWStart>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d03d      	beq.n	800233c <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ce:	d035      	beq.n	800233c <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d12e      	bne.n	800233c <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fd2e 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d11a      	bne.n	8002324 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 020c 	bic.w	r2, r2, #12
 80022fc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d112      	bne.n	800233c <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
 8002322:	e00b      	b.n	800233c <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	f043 0210 	orr.w	r2, r3, #16
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7fe ff49 	bl	80011d4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	220c      	movs	r2, #12
 8002348:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <HAL_ADC_IRQHandler+0x144>
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002364:	2b00      	cmp	r3, #0
 8002366:	d074      	beq.n	8002452 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d06f      	beq.n	8002452 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d105      	bne.n	800238a <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fbb2 	bl	8001af8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002394:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fb5f 	bl	8001a5e <LL_ADC_REG_IsTriggerSourceSWStart>
 80023a0:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d049      	beq.n	8002444 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <HAL_ADC_IRQHandler+0x1b0>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d041      	beq.n	8002444 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d13c      	bne.n	8002444 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d135      	bne.n	8002444 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d12e      	bne.n	8002444 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fcd1 	bl	8001d92 <LL_ADC_INJ_IsConversionOngoing>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11a      	bne.n	800242c <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002404:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d112      	bne.n	8002444 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
 800242a:	e00b      	b.n	8002444 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	f043 0210 	orr.w	r2, r3, #16
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	f043 0201 	orr.w	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 ff3b 	bl	80032c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2260      	movs	r2, #96	; 0x60
 8002450:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002458:	2b00      	cmp	r3, #0
 800245a:	d011      	beq.n	8002480 <HAL_ADC_IRQHandler+0x266>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00c      	beq.n	8002480 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f891 	bl	800259a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2280      	movs	r2, #128	; 0x80
 800247e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d012      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x296>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 ff21 	bl	80032e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d012      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x2c6>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 ff13 	bl	80032fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d02b      	beq.n	8002542 <HAL_ADC_IRQHandler+0x328>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d026      	beq.n	8002542 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80024fc:	2301      	movs	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	e009      	b.n	8002516 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fae8 	bl	8001adc <LL_ADC_REG_GetDMATransfer>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002512:	2301      	movs	r3, #1
 8002514:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d10e      	bne.n	800253a <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f043 0202 	orr.w	r2, r3, #2
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f83a 	bl	80025ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2210      	movs	r2, #16
 8002540:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d018      	beq.n	800257e <HAL_ADC_IRQHandler+0x364>
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d013      	beq.n	800257e <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	f043 0208 	orr.w	r2, r3, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002576:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 feab 	bl	80032d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 800257e:	bf00      	nop
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b0b6      	sub	sp, #216	; 0xd8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x22>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e39f      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x762>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fba6 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 8384 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	f7ff fa39 	bl	8001a84 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fb94 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 800261c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fbb4 	bl	8001d92 <LL_ADC_INJ_IsConversionOngoing>
 800262a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800262e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 81a6 	bne.w	8002984 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002638:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 81a1 	bne.w	8002984 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	461a      	mov	r2, r3
 8002650:	f7ff fa65 	bl	8001b1e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	08db      	lsrs	r3, r3, #3
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b04      	cmp	r3, #4
 8002674:	d00a      	beq.n	800268c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6919      	ldr	r1, [r3, #16]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002686:	f7ff f995 	bl	80019b4 <LL_ADC_SetOffset>
 800268a:	e17b      	b.n	8002984 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff f9b2 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0xf4>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff f9a7 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	f003 021f 	and.w	r2, r3, #31
 80026b6:	e01e      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x132>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f99c 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e004      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80026ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <HAL_ADC_ConfigChannel+0x14a>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	e018      	b.n	8002740 <HAL_ADC_ConfigChannel+0x17c>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002726:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800272a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e004      	b.n	8002740 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	429a      	cmp	r2, r3
 8002742:	d106      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f96b 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2101      	movs	r1, #1
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff f94f 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <HAL_ADC_ConfigChannel+0x1ba>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f944 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	e01e      	b.n	80027bc <HAL_ADC_ConfigChannel+0x1f8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff f939 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800279c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e004      	b.n	80027ba <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80027b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x210>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	e018      	b.n	8002806 <HAL_ADC_ConfigChannel+0x242>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e004      	b.n	8002806 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80027fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	429a      	cmp	r2, r3
 8002808:	d106      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	2101      	movs	r1, #1
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f908 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2102      	movs	r1, #2
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff f8ec 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x280>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2102      	movs	r1, #2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f8e1 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	f003 021f 	and.w	r2, r3, #31
 8002842:	e01e      	b.n	8002882 <HAL_ADC_ConfigChannel+0x2be>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2102      	movs	r1, #2
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff f8d6 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002862:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800286a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002872:	2320      	movs	r3, #32
 8002874:	e004      	b.n	8002880 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002876:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <HAL_ADC_ConfigChannel+0x2d6>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0e9b      	lsrs	r3, r3, #26
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	e016      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x304>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e004      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80028be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d106      	bne.n	80028da <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2102      	movs	r1, #2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff f8a7 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2103      	movs	r1, #3
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff f88b 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x342>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2103      	movs	r1, #3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f880 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	0e9b      	lsrs	r3, r3, #26
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	e017      	b.n	8002936 <HAL_ADC_ConfigChannel+0x372>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2103      	movs	r1, #3
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff f875 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800291e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002920:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e003      	b.n	8002934 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800292c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_ADC_ConfigChannel+0x38a>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0e9b      	lsrs	r3, r3, #26
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	e011      	b.n	8002972 <HAL_ADC_ConfigChannel+0x3ae>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800295c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800295e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002966:	2320      	movs	r3, #32
 8002968:	e003      	b.n	8002972 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800296a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	429a      	cmp	r2, r3
 8002974:	d106      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2200      	movs	r2, #0
 800297c:	2103      	movs	r1, #3
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f852 	bl	8001a28 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f98d 	bl	8001ca8 <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 81c2 	bne.w	8002d1a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7ff f8e6 	bl	8001b74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a8e      	ldr	r2, [pc, #568]	; (8002be8 <HAL_ADC_ConfigChannel+0x624>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	f040 8130 	bne.w	8002c14 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x418>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0e9b      	lsrs	r3, r3, #26
 80029ca:	3301      	adds	r3, #1
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	2b09      	cmp	r3, #9
 80029d2:	bf94      	ite	ls
 80029d4:	2301      	movls	r3, #1
 80029d6:	2300      	movhi	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e019      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x44c>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80029f4:	2320      	movs	r3, #32
 80029f6:	e003      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80029f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	2b09      	cmp	r3, #9
 8002a08:	bf94      	ite	ls
 8002a0a:	2301      	movls	r3, #1
 8002a0c:	2300      	movhi	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d079      	beq.n	8002b08 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x46c>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	3301      	adds	r3, #1
 8002a28:	069b      	lsls	r3, r3, #26
 8002a2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a2e:	e015      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x498>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a40:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	e003      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	069b      	lsls	r3, r3, #26
 8002a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x4b8>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0e9b      	lsrs	r3, r3, #26
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	e017      	b.n	8002aac <HAL_ADC_ConfigChannel+0x4e8>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e003      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	ea42 0103 	orr.w	r1, r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10a      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x50e>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	051b      	lsls	r3, r3, #20
 8002ad0:	e018      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x540>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e003      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b04:	430b      	orrs	r3, r1
 8002b06:	e080      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x560>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	069b      	lsls	r3, r3, #26
 8002b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b22:	e015      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x58c>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e003      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x5ac>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	e017      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x5dc>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	61fb      	str	r3, [r7, #28]
  return result;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e003      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	ea42 0103 	orr.w	r1, r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x608>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b1e      	subs	r3, #30
 8002bc4:	051b      	lsls	r3, r3, #20
 8002bc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bca:	e01d      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x644>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	613b      	str	r3, [r7, #16]
  return result;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e005      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x630>
 8002be8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	f003 021f 	and.w	r2, r3, #31
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	3b1e      	subs	r3, #30
 8002c02:	051b      	lsls	r3, r3, #20
 8002c04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c08:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f7fe ff85 	bl	8001b1e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <HAL_ADC_ConfigChannel+0x76c>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d07c      	beq.n	8002d1a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c20:	4844      	ldr	r0, [pc, #272]	; (8002d34 <HAL_ADC_ConfigChannel+0x770>)
 8002c22:	f7fe feb9 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 8002c26:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c2a:	4843      	ldr	r0, [pc, #268]	; (8002d38 <HAL_ADC_ConfigChannel+0x774>)
 8002c2c:	f7ff f83c 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d15e      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a40      	ldr	r2, [pc, #256]	; (8002d3c <HAL_ADC_ConfigChannel+0x778>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d127      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x6cc>
 8002c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d121      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a39      	ldr	r2, [pc, #228]	; (8002d38 <HAL_ADC_ConfigChannel+0x774>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d161      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4834      	ldr	r0, [pc, #208]	; (8002d34 <HAL_ADC_ConfigChannel+0x770>)
 8002c62:	f7fe fe86 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c66:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_ADC_ConfigChannel+0x77c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	4a35      	ldr	r2, [pc, #212]	; (8002d44 <HAL_ADC_ConfigChannel+0x780>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002c80:	e002      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f9      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c8e:	e044      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a2c      	ldr	r2, [pc, #176]	; (8002d48 <HAL_ADC_ConfigChannel+0x784>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d113      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x6fe>
 8002c9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <HAL_ADC_ConfigChannel+0x774>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d134      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb8:	4619      	mov	r1, r3
 8002cba:	481e      	ldr	r0, [pc, #120]	; (8002d34 <HAL_ADC_ConfigChannel+0x770>)
 8002cbc:	f7fe fe59 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cc0:	e02b      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <HAL_ADC_ConfigChannel+0x788>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d126      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x756>
 8002ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d120      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a16      	ldr	r2, [pc, #88]	; (8002d38 <HAL_ADC_ConfigChannel+0x774>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d11b      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cea:	4619      	mov	r1, r3
 8002cec:	4811      	ldr	r0, [pc, #68]	; (8002d34 <HAL_ADC_ConfigChannel+0x770>)
 8002cee:	f7fe fe40 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
 8002cf2:	e012      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f043 0220 	orr.w	r2, r3, #32
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d06:	e008      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002d22:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	37d8      	adds	r7, #216	; 0xd8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	80080000 	.word	0x80080000
 8002d34:	50040300 	.word	0x50040300
 8002d38:	50040000 	.word	0x50040000
 8002d3c:	c7520000 	.word	0xc7520000
 8002d40:	2000006c 	.word	0x2000006c
 8002d44:	053e2d63 	.word	0x053e2d63
 8002d48:	cb840000 	.word	0xcb840000
 8002d4c:	80000001 	.word	0x80000001

08002d50 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe ffec 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 8002d6c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff f80d 	bl	8001d92 <LL_ADC_INJ_IsConversionOngoing>
 8002d78:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d103      	bne.n	8002d88 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8098 	beq.w	8002eb8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d02a      	beq.n	8002dec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7e5b      	ldrb	r3, [r3, #25]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d126      	bne.n	8002dec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7e1b      	ldrb	r3, [r3, #24]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d122      	bne.n	8002dec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002daa:	e014      	b.n	8002dd6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4a45      	ldr	r2, [pc, #276]	; (8002ec4 <ADC_ConversionStop+0x174>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d90d      	bls.n	8002dd0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	f043 0210 	orr.w	r2, r3, #16
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	f043 0201 	orr.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e074      	b.n	8002eba <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	d1e3      	bne.n	8002dac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2240      	movs	r2, #64	; 0x40
 8002dea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d014      	beq.n	8002e1c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe ffa4 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00c      	beq.n	8002e1c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe ff61 	bl	8001cce <LL_ADC_IsDisableOngoing>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d104      	bne.n	8002e1c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe ff80 	bl	8001d1c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d014      	beq.n	8002e4c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe ffb3 	bl	8001d92 <LL_ADC_INJ_IsConversionOngoing>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00c      	beq.n	8002e4c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe ff49 	bl	8001cce <LL_ADC_IsDisableOngoing>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d104      	bne.n	8002e4c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe ff8f 	bl	8001d6a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d005      	beq.n	8002e5e <ADC_ConversionStop+0x10e>
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d105      	bne.n	8002e64 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e58:	230c      	movs	r3, #12
 8002e5a:	617b      	str	r3, [r7, #20]
        break;
 8002e5c:	e005      	b.n	8002e6a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e5e:	2308      	movs	r3, #8
 8002e60:	617b      	str	r3, [r7, #20]
        break;
 8002e62:	e002      	b.n	8002e6a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e64:	2304      	movs	r3, #4
 8002e66:	617b      	str	r3, [r7, #20]
        break;
 8002e68:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e6a:	f7fe fd57 	bl	800191c <HAL_GetTick>
 8002e6e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e70:	e01b      	b.n	8002eaa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e72:	f7fe fd53 	bl	800191c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d914      	bls.n	8002eaa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00d      	beq.n	8002eaa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	f043 0210 	orr.w	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e007      	b.n	8002eba <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1dc      	bne.n	8002e72 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	a33fffff 	.word	0xa33fffff

08002ec8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe fee5 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d15e      	bne.n	8002fa2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	4b30      	ldr	r3, [pc, #192]	; (8002fac <ADC_Enable+0xe4>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00d      	beq.n	8002f0e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e04a      	b.n	8002fa4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fea0 	bl	8001c58 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f18:	4825      	ldr	r0, [pc, #148]	; (8002fb0 <ADC_Enable+0xe8>)
 8002f1a:	f7fe fd3d 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00f      	beq.n	8002f48 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <ADC_Enable+0xec>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <ADC_Enable+0xf0>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	099b      	lsrs	r3, r3, #6
 8002f36:	3301      	adds	r3, #1
 8002f38:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f3a:	e002      	b.n	8002f42 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f9      	bne.n	8002f3c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002f48:	f7fe fce8 	bl	800191c <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f4e:	e021      	b.n	8002f94 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fea7 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe fe77 	bl	8001c58 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f6a:	f7fe fcd7 	bl	800191c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d90d      	bls.n	8002f94 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7c:	f043 0210 	orr.w	r2, r3, #16
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e007      	b.n	8002fa4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d1d6      	bne.n	8002f50 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	8000003f 	.word	0x8000003f
 8002fb0:	50040300 	.word	0x50040300
 8002fb4:	2000006c 	.word	0x2000006c
 8002fb8:	053e2d63 	.word	0x053e2d63

08002fbc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe fe80 	bl	8001cce <LL_ADC_IsDisableOngoing>
 8002fce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe fe67 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d047      	beq.n	8003070 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d144      	bne.n	8003070 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030d 	and.w	r3, r3, #13
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10c      	bne.n	800300e <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe fe41 	bl	8001c80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2203      	movs	r2, #3
 8003004:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003006:	f7fe fc89 	bl	800191c <HAL_GetTick>
 800300a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800300c:	e029      	b.n	8003062 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	f043 0210 	orr.w	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e023      	b.n	8003072 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800302a:	f7fe fc77 	bl	800191c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d914      	bls.n	8003062 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00d      	beq.n	8003062 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f043 0210 	orr.w	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	f043 0201 	orr.w	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e007      	b.n	8003072 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1dc      	bne.n	800302a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003090:	2b00      	cmp	r3, #0
 8003092:	d14b      	bne.n	800312c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d021      	beq.n	80030f2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fcd3 	bl	8001a5e <LL_ADC_REG_IsTriggerSourceSWStart>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d032      	beq.n	8003124 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d12b      	bne.n	8003124 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11f      	bne.n	8003124 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54
 80030f0:	e018      	b.n	8003124 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d111      	bne.n	8003124 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d105      	bne.n	8003124 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7fe f855 	bl	80011d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800312a:	e00e      	b.n	800314a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fa38 	bl	80025ae <HAL_ADC_ErrorCallback>
}
 800313e:	e004      	b.n	800314a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff fa10 	bl	8002586 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003180:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	f043 0204 	orr.w	r2, r3, #4
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fa0a 	bl	80025ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <LL_ADC_StartCalibration>:
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031be:	4313      	orrs	r3, r2
 80031c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_ADC_IsCalibrationOnGoing>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031e8:	d101      	bne.n	80031ee <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_ADCEx_Calibration_Start+0x1c>
 8003214:	2302      	movs	r3, #2
 8003216:	e04d      	b.n	80032b4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff fecb 	bl	8002fbc <ADC_Disable>
 8003226:	4603      	mov	r3, r0
 8003228:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d136      	bne.n	800329e <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003238:	f023 0302 	bic.w	r3, r3, #2
 800323c:	f043 0202 	orr.w	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6839      	ldr	r1, [r7, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ffa9 	bl	80031a2 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003250:	e014      	b.n	800327c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3301      	adds	r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4a18      	ldr	r2, [pc, #96]	; (80032bc <HAL_ADCEx_Calibration_Start+0xc0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d90d      	bls.n	800327c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f023 0312 	bic.w	r3, r3, #18
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e01b      	b.n	80032b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ffa7 	bl	80031d4 <LL_ADC_IsCalibrationOnGoing>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e2      	bne.n	8003252 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	f023 0303 	bic.w	r3, r3, #3
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
 800329c:	e005      	b.n	80032aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f043 0210 	orr.w	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	00026aaa 	.word	0x00026aaa

080032c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800334c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003356:	4a04      	ldr	r2, [pc, #16]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60d3      	str	r3, [r2, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <__NVIC_EnableIRQ+0x38>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	; (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff4c 	bl	8003324 <__NVIC_SetPriorityGrouping>
}
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034a2:	f7ff ff63 	bl	800336c <__NVIC_GetPriorityGrouping>
 80034a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	6978      	ldr	r0, [r7, #20]
 80034ae:	f7ff ffb3 	bl	8003418 <NVIC_EncodePriority>
 80034b2:	4602      	mov	r2, r0
 80034b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ff82 	bl	80033c4 <__NVIC_SetPriority>
}
 80034c0:	bf00      	nop
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff ff56 	bl	8003388 <__NVIC_EnableIRQ>
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e08e      	b.n	8003614 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_DMA_Init+0x138>)
 80034fe:	429a      	cmp	r2, r3
 8003500:	d80f      	bhi.n	8003522 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	4b45      	ldr	r3, [pc, #276]	; (8003620 <HAL_DMA_Init+0x13c>)
 800350a:	4413      	add	r3, r2
 800350c:	4a45      	ldr	r2, [pc, #276]	; (8003624 <HAL_DMA_Init+0x140>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	009a      	lsls	r2, r3, #2
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a42      	ldr	r2, [pc, #264]	; (8003628 <HAL_DMA_Init+0x144>)
 800351e:	641a      	str	r2, [r3, #64]	; 0x40
 8003520:	e00e      	b.n	8003540 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	4b40      	ldr	r3, [pc, #256]	; (800362c <HAL_DMA_Init+0x148>)
 800352a:	4413      	add	r3, r2
 800352c:	4a3d      	ldr	r2, [pc, #244]	; (8003624 <HAL_DMA_Init+0x140>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	009a      	lsls	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a3c      	ldr	r2, [pc, #240]	; (8003630 <HAL_DMA_Init+0x14c>)
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003564:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fa80 	bl	8003a98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a0:	d102      	bne.n	80035a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80035b4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035be:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d010      	beq.n	80035ea <HAL_DMA_Init+0x106>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d80c      	bhi.n	80035ea <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fa9f 	bl	8003b14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	e008      	b.n	80035fc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40020407 	.word	0x40020407
 8003620:	bffdfff8 	.word	0xbffdfff8
 8003624:	cccccccd 	.word	0xcccccccd
 8003628:	40020000 	.word	0x40020000
 800362c:	bffdfbf8 	.word	0xbffdfbf8
 8003630:	40020400 	.word	0x40020400

08003634 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_DMA_Start_IT+0x20>
 8003650:	2302      	movs	r3, #2
 8003652:	e066      	b.n	8003722 <HAL_DMA_Start_IT+0xee>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	d155      	bne.n	8003714 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f9c5 	bl	8003a1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 020e 	orr.w	r2, r2, #14
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e00f      	b.n	80036cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 020a 	orr.w	r2, r2, #10
 80036ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003700:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e005      	b.n	8003720 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800371c:	2302      	movs	r3, #2
 800371e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003720:	7dfb      	ldrb	r3, [r7, #23]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e04f      	b.n	80037dc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d008      	beq.n	800375a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2204      	movs	r2, #4
 800374c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e040      	b.n	80037dc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 020e 	bic.w	r2, r2, #14
 8003768:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003778:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f003 021c 	and.w	r2, r3, #28
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2101      	movs	r1, #1
 8003798:	fa01 f202 	lsl.w	r2, r1, r2
 800379c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00c      	beq.n	80037ca <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d005      	beq.n	800380c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2204      	movs	r2, #4
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
 800380a:	e047      	b.n	800389c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 020e 	bic.w	r2, r2, #14
 800381a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	f003 021c 	and.w	r2, r3, #28
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	2101      	movs	r1, #1
 800384a:	fa01 f202 	lsl.w	r2, r1, r2
 800384e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003858:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003870:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800387a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
    }
  }
  return status;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f003 031c 	and.w	r3, r3, #28
 80038c6:	2204      	movs	r2, #4
 80038c8:	409a      	lsls	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d026      	beq.n	8003920 <HAL_DMA_IRQHandler+0x7a>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d021      	beq.n	8003920 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d107      	bne.n	80038fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0204 	bic.w	r2, r2, #4
 80038f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f003 021c 	and.w	r2, r3, #28
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2104      	movs	r1, #4
 8003908:	fa01 f202 	lsl.w	r2, r1, r2
 800390c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	2b00      	cmp	r3, #0
 8003914:	d071      	beq.n	80039fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800391e:	e06c      	b.n	80039fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	f003 031c 	and.w	r3, r3, #28
 8003928:	2202      	movs	r2, #2
 800392a:	409a      	lsls	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d02e      	beq.n	8003992 <HAL_DMA_IRQHandler+0xec>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d029      	beq.n	8003992 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 020a 	bic.w	r2, r2, #10
 800395a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	f003 021c 	and.w	r2, r3, #28
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	2102      	movs	r1, #2
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	2b00      	cmp	r3, #0
 8003986:	d038      	beq.n	80039fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003990:	e033      	b.n	80039fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f003 031c 	and.w	r3, r3, #28
 800399a:	2208      	movs	r2, #8
 800399c:	409a      	lsls	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d02a      	beq.n	80039fc <HAL_DMA_IRQHandler+0x156>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d025      	beq.n	80039fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 020e 	bic.w	r2, r2, #14
 80039be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	f003 021c 	and.w	r2, r3, #28
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	2101      	movs	r1, #1
 80039ce:	fa01 f202 	lsl.w	r2, r1, r2
 80039d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039fa:	bf00      	nop
 80039fc:	bf00      	nop
}
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a32:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a44:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f003 021c 	and.w	r2, r3, #28
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	2101      	movs	r1, #1
 8003a54:	fa01 f202 	lsl.w	r2, r1, r2
 8003a58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d108      	bne.n	8003a7c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a7a:	e007      	b.n	8003a8c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d80a      	bhi.n	8003ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ab8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6493      	str	r3, [r2, #72]	; 0x48
 8003ac0:	e007      	b.n	8003ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	009a      	lsls	r2, r3, #2
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003acc:	4413      	add	r3, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	3b08      	subs	r3, #8
 8003ada:	4a0c      	ldr	r2, [pc, #48]	; (8003b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ae8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2201      	movs	r2, #1
 8003af2:	409a      	lsls	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40020407 	.word	0x40020407
 8003b08:	4002081c 	.word	0x4002081c
 8003b0c:	cccccccd 	.word	0xcccccccd
 8003b10:	40020880 	.word	0x40020880

08003b14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b24:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003b38:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2201      	movs	r2, #1
 8003b44:	409a      	lsls	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	1000823f 	.word	0x1000823f
 8003b5c:	40020940 	.word	0x40020940

08003b60 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6e:	e14c      	b.n	8003e0a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	2101      	movs	r1, #1
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 813e 	beq.w	8003e04 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d005      	beq.n	8003ba0 <HAL_GPIO_Init+0x40>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d130      	bne.n	8003c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2203      	movs	r2, #3
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	091b      	lsrs	r3, r3, #4
 8003bec:	f003 0201 	and.w	r2, r3, #1
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d017      	beq.n	8003c3e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	2203      	movs	r2, #3
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d123      	bne.n	8003c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	08da      	lsrs	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3208      	adds	r2, #8
 8003c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	220f      	movs	r2, #15
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	08da      	lsrs	r2, r3, #3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3208      	adds	r2, #8
 8003c8c:	6939      	ldr	r1, [r7, #16]
 8003c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0203 	and.w	r2, r3, #3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 8098 	beq.w	8003e04 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003cd4:	4a54      	ldr	r2, [pc, #336]	; (8003e28 <HAL_GPIO_Init+0x2c8>)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	3302      	adds	r3, #2
 8003cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	220f      	movs	r2, #15
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cfe:	d019      	beq.n	8003d34 <HAL_GPIO_Init+0x1d4>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a4a      	ldr	r2, [pc, #296]	; (8003e2c <HAL_GPIO_Init+0x2cc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <HAL_GPIO_Init+0x1d0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a49      	ldr	r2, [pc, #292]	; (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00d      	beq.n	8003d2c <HAL_GPIO_Init+0x1cc>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a48      	ldr	r2, [pc, #288]	; (8003e34 <HAL_GPIO_Init+0x2d4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d007      	beq.n	8003d28 <HAL_GPIO_Init+0x1c8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a47      	ldr	r2, [pc, #284]	; (8003e38 <HAL_GPIO_Init+0x2d8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_GPIO_Init+0x1c4>
 8003d20:	2304      	movs	r3, #4
 8003d22:	e008      	b.n	8003d36 <HAL_GPIO_Init+0x1d6>
 8003d24:	2307      	movs	r3, #7
 8003d26:	e006      	b.n	8003d36 <HAL_GPIO_Init+0x1d6>
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e004      	b.n	8003d36 <HAL_GPIO_Init+0x1d6>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e002      	b.n	8003d36 <HAL_GPIO_Init+0x1d6>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <HAL_GPIO_Init+0x1d6>
 8003d34:	2300      	movs	r3, #0
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	f002 0203 	and.w	r2, r2, #3
 8003d3c:	0092      	lsls	r2, r2, #2
 8003d3e:	4093      	lsls	r3, r2
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d46:	4938      	ldr	r1, [pc, #224]	; (8003e28 <HAL_GPIO_Init+0x2c8>)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d54:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_GPIO_Init+0x2dc>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d78:	4a30      	ldr	r2, [pc, #192]	; (8003e3c <HAL_GPIO_Init+0x2dc>)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d7e:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <HAL_GPIO_Init+0x2dc>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003da2:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <HAL_GPIO_Init+0x2dc>)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <HAL_GPIO_Init+0x2dc>)
 8003daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dce:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <HAL_GPIO_Init+0x2dc>)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003dd6:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_GPIO_Init+0x2dc>)
 8003dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dfc:	4a0f      	ldr	r2, [pc, #60]	; (8003e3c <HAL_GPIO_Init+0x2dc>)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3301      	adds	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f47f aeab 	bne.w	8003b70 <HAL_GPIO_Init+0x10>
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	48000400 	.word	0x48000400
 8003e30:	48000800 	.word	0x48000800
 8003e34:	48000c00 	.word	0x48000c00
 8003e38:	48001000 	.word	0x48001000
 8003e3c:	58000800 	.word	0x58000800

08003e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	807b      	strh	r3, [r7, #2]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e50:	787b      	ldrb	r3, [r7, #1]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e56:	887a      	ldrh	r2, [r7, #2]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e5c:	e002      	b.n	8003e64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e5e:	887a      	ldrh	r2, [r7, #2]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e72:	b08b      	sub	sp, #44	; 0x2c
 8003e74:	af06      	add	r7, sp, #24
 8003e76:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0cb      	b.n	800401a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fd fb98 	bl	80015cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f005 f8c9 	bl	8009040 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	e040      	b.n	8003f36 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	440b      	add	r3, r1
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	440b      	add	r3, r1
 8003eda:	7bfa      	ldrb	r2, [r7, #15]
 8003edc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	440b      	add	r3, r1
 8003eee:	3303      	adds	r3, #3
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ef4:	7bfa      	ldrb	r2, [r7, #15]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	440b      	add	r3, r1
 8003f02:	3338      	adds	r3, #56	; 0x38
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	440b      	add	r3, r1
 8003f16:	333c      	adds	r3, #60	; 0x3c
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	440b      	add	r3, r1
 8003f2a:	3340      	adds	r3, #64	; 0x40
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	3301      	adds	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d3b9      	bcc.n	8003eb4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f40:	2300      	movs	r3, #0
 8003f42:	73fb      	strb	r3, [r7, #15]
 8003f44:	e044      	b.n	8003fd0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	440b      	add	r3, r1
 8003f54:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	440b      	add	r3, r1
 8003f6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f72:	7bfa      	ldrb	r2, [r7, #15]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	440b      	add	r3, r1
 8003f80:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	440b      	add	r3, r1
 8003f96:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	440b      	add	r3, r1
 8003fac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d3b5      	bcc.n	8003f46 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	687e      	ldr	r6, [r7, #4]
 8003fe2:	466d      	mov	r5, sp
 8003fe4:	f106 0410 	add.w	r4, r6, #16
 8003fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	602b      	str	r3, [r5, #0]
 8003ff0:	1d33      	adds	r3, r6, #4
 8003ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ff4:	6838      	ldr	r0, [r7, #0]
 8003ff6:	f005 f83e 	bl	8009076 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d102      	bne.n	8004018 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f805 	bl	8004022 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004022 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004046:	b29b      	uxth	r3, r3
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800405a:	b29b      	uxth	r3, r3
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a04      	ldr	r2, [pc, #16]	; (8004094 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004086:	6013      	str	r3, [r2, #0]
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	58000400 	.word	0x58000400

08004098 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	58000400 	.word	0x58000400

080040b4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c6:	d101      	bne.n	80040cc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_HSE_Enable>:
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_RCC_HSE_Disable>:
{
 80040f6:	b480      	push	{r7}
 80040f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80040fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004108:	6013      	str	r3, [r2, #0]
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_RCC_HSE_IsReady>:
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004126:	d101      	bne.n	800412c <LL_RCC_HSE_IsReady+0x18>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <LL_RCC_HSE_IsReady+0x1a>
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_RCC_HSI_Enable>:
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <LL_RCC_HSI_Disable>:
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800415a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004168:	6013      	str	r3, [r2, #0]
}
 800416a:	bf00      	nop
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_RCC_HSI_IsReady>:
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004186:	d101      	bne.n	800418c <LL_RCC_HSI_IsReady+0x18>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <LL_RCC_HSI_IsReady+0x1a>
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80041a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <LL_RCC_HSI48_Enable>:
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80041c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_RCC_HSI48_Disable>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80041e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_RCC_HSI48_IsReady>:
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d101      	bne.n	800421e <LL_RCC_HSI48_IsReady+0x18>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <LL_RCC_HSI48_IsReady+0x1a>
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <LL_RCC_LSE_Enable>:
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800422e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004242:	bf00      	nop
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LL_RCC_LSE_Disable>:
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <LL_RCC_LSE_EnableBypass>:
{
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800427e:	f043 0304 	orr.w	r3, r3, #4
 8004282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004286:	bf00      	nop
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_RCC_LSE_DisableBypass>:
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a0:	f023 0304 	bic.w	r3, r3, #4
 80042a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80042b2:	b480      	push	{r7}
 80042b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80042b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d101      	bne.n	80042ca <LL_RCC_LSE_IsReady+0x18>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <LL_RCC_LSE_IsReady+0x1a>
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80042da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80042ee:	bf00      	nop
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	d101      	bne.n	8004332 <LL_RCC_LSI1_IsReady+0x18>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <LL_RCC_LSI1_IsReady+0x1a>
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004356:	bf00      	nop
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004370:	f023 0304 	bic.w	r3, r3, #4
 8004374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004378:	bf00      	nop
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004382:	b480      	push	{r7}
 8004384:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800438a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b08      	cmp	r3, #8
 8004394:	d101      	bne.n	800439a <LL_RCC_LSI2_IsReady+0x18>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <LL_RCC_LSI2_IsReady+0x1a>
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6013      	str	r3, [r2, #0]
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80043f2:	b480      	push	{r7}
 80043f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	6013      	str	r3, [r2, #0]
}
 8004406:	bf00      	nop
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d101      	bne.n	8004426 <LL_RCC_MSI_IsReady+0x16>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <LL_RCC_MSI_IsReady+0x18>
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800443a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2bb0      	cmp	r3, #176	; 0xb0
 8004470:	d901      	bls.n	8004476 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004472:	23b0      	movs	r3, #176	; 0xb0
 8004474:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004476:	687b      	ldr	r3, [r7, #4]
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800448c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80044b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f023 0203 	bic.w	r2, r3, #3
 80044c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80044da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 030c 	and.w	r3, r3, #12
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80044f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800451e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004522:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004526:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800452a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004552:	f023 020f 	bic.w	r2, r3, #15
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4313      	orrs	r3, r2
 800458a:	608b      	str	r3, [r1, #8]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80045a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80045c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80045dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80045f2:	b480      	push	{r7}
 80045f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80045f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800461c:	4618      	mov	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800462a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800464c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004650:	6013      	str	r3, [r2, #0]
}
 8004652:	bf00      	nop
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800466a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466e:	6013      	str	r3, [r2, #0]
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800467a:	b480      	push	{r7}
 800467c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800467e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800468c:	d101      	bne.n	8004692 <LL_RCC_PLL_IsReady+0x18>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <LL_RCC_PLL_IsReady+0x1a>
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800469e:	b480      	push	{r7}
 80046a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80046bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80046de:	4618      	mov	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80046ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0303 	and.w	r3, r3, #3
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004712:	d101      	bne.n	8004718 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004738:	d101      	bne.n	800473e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800474a:	b480      	push	{r7}
 800474c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800474e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004752:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475e:	d101      	bne.n	8004764 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004782:	d101      	bne.n	8004788 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047a6:	d101      	bne.n	80047ac <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b08d      	sub	sp, #52	; 0x34
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e363      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 808d 	beq.w	80048f2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d8:	f7ff fe7d 	bl	80044d6 <LL_RCC_GetSysClkSource>
 80047dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047de:	f7ff ff83 	bl	80046e8 <LL_RCC_PLL_GetMainSource>
 80047e2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_RCC_OscConfig+0x3e>
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	2b0c      	cmp	r3, #12
 80047ee:	d147      	bne.n	8004880 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d144      	bne.n	8004880 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e347      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004806:	f7ff fe28 	bl	800445a <LL_RCC_MSI_GetRange>
 800480a:	4603      	mov	r3, r0
 800480c:	429c      	cmp	r4, r3
 800480e:	d914      	bls.n	800483a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fd61 	bl	80052dc <RCC_SetFlashLatencyFromMSIRange>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e336      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fe02 	bl	8004432 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fe26 	bl	8004484 <LL_RCC_MSI_SetCalibTrimming>
 8004838:	e013      	b.n	8004862 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fdf7 	bl	8004432 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fe1b 	bl	8004484 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fd42 	bl	80052dc <RCC_SetFlashLatencyFromMSIRange>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e317      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004862:	f000 fcc9 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 8004866:	4603      	mov	r3, r0
 8004868:	4aa4      	ldr	r2, [pc, #656]	; (8004afc <HAL_RCC_OscConfig+0x344>)
 800486a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800486c:	4ba4      	ldr	r3, [pc, #656]	; (8004b00 <HAL_RCC_OscConfig+0x348>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f7fc fef5 	bl	8001660 <HAL_InitTick>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d039      	beq.n	80048f0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e308      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01e      	beq.n	80048c6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004888:	f7ff fda4 	bl	80043d4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800488c:	f7fd f846 	bl	800191c <HAL_GetTick>
 8004890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004894:	f7fd f842 	bl	800191c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e2f5      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80048a6:	f7ff fdb3 	bl	8004410 <LL_RCC_MSI_IsReady>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f1      	beq.n	8004894 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff fdbc 	bl	8004432 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fde0 	bl	8004484 <LL_RCC_MSI_SetCalibTrimming>
 80048c4:	e015      	b.n	80048f2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048c6:	f7ff fd94 	bl	80043f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048ca:	f7fd f827 	bl	800191c <HAL_GetTick>
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048d2:	f7fd f823 	bl	800191c <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e2d6      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80048e4:	f7ff fd94 	bl	8004410 <LL_RCC_MSI_IsReady>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f1      	bne.n	80048d2 <HAL_RCC_OscConfig+0x11a>
 80048ee:	e000      	b.n	80048f2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048f0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d047      	beq.n	800498e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fe:	f7ff fdea 	bl	80044d6 <LL_RCC_GetSysClkSource>
 8004902:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004904:	f7ff fef0 	bl	80046e8 <LL_RCC_PLL_GetMainSource>
 8004908:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d005      	beq.n	800491c <HAL_RCC_OscConfig+0x164>
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	2b0c      	cmp	r3, #12
 8004914:	d108      	bne.n	8004928 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d105      	bne.n	8004928 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d134      	bne.n	800498e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e2b4      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004930:	d102      	bne.n	8004938 <HAL_RCC_OscConfig+0x180>
 8004932:	f7ff fbd1 	bl	80040d8 <LL_RCC_HSE_Enable>
 8004936:	e001      	b.n	800493c <HAL_RCC_OscConfig+0x184>
 8004938:	f7ff fbdd 	bl	80040f6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d012      	beq.n	800496a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fc ffea 	bl	800191c <HAL_GetTick>
 8004948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800494c:	f7fc ffe6 	bl	800191c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e299      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800495e:	f7ff fbd9 	bl	8004114 <LL_RCC_HSE_IsReady>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0f1      	beq.n	800494c <HAL_RCC_OscConfig+0x194>
 8004968:	e011      	b.n	800498e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7fc ffd7 	bl	800191c <HAL_GetTick>
 800496e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004972:	f7fc ffd3 	bl	800191c <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b64      	cmp	r3, #100	; 0x64
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e286      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004984:	f7ff fbc6 	bl	8004114 <LL_RCC_HSE_IsReady>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f1      	bne.n	8004972 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d04c      	beq.n	8004a34 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800499a:	f7ff fd9c 	bl	80044d6 <LL_RCC_GetSysClkSource>
 800499e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049a0:	f7ff fea2 	bl	80046e8 <LL_RCC_PLL_GetMainSource>
 80049a4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_OscConfig+0x200>
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b0c      	cmp	r3, #12
 80049b0:	d10e      	bne.n	80049d0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e266      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fbe5 	bl	8004198 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80049ce:	e031      	b.n	8004a34 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d019      	beq.n	8004a0c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d8:	f7ff fbae 	bl	8004138 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fc ff9e 	bl	800191c <HAL_GetTick>
 80049e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e4:	f7fc ff9a 	bl	800191c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e24d      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80049f6:	f7ff fbbd 	bl	8004174 <LL_RCC_HSI_IsReady>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f1      	beq.n	80049e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fbc7 	bl	8004198 <LL_RCC_HSI_SetCalibTrimming>
 8004a0a:	e013      	b.n	8004a34 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a0c:	f7ff fba3 	bl	8004156 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fc ff84 	bl	800191c <HAL_GetTick>
 8004a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a18:	f7fc ff80 	bl	800191c <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e233      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a2a:	f7ff fba3 	bl	8004174 <LL_RCC_HSI_IsReady>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f1      	bne.n	8004a18 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d106      	bne.n	8004a4e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80a3 	beq.w	8004b94 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d076      	beq.n	8004b44 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d046      	beq.n	8004af0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004a62:	f7ff fc5a 	bl	800431a <LL_RCC_LSI1_IsReady>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d113      	bne.n	8004a94 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004a6c:	f7ff fc33 	bl	80042d6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a70:	f7fc ff54 	bl	800191c <HAL_GetTick>
 8004a74:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a78:	f7fc ff50 	bl	800191c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e203      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a8a:	f7ff fc46 	bl	800431a <LL_RCC_LSI1_IsReady>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0f1      	beq.n	8004a78 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004a94:	f7ff fc53 	bl	800433e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fc ff40 	bl	800191c <HAL_GetTick>
 8004a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004aa0:	f7fc ff3c 	bl	800191c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e1ef      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004ab2:	f7ff fc66 	bl	8004382 <LL_RCC_LSI2_IsReady>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f1      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fc70 	bl	80043a6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004ac6:	f7ff fc17 	bl	80042f8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7fc ff27 	bl	800191c <HAL_GetTick>
 8004ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ad2:	f7fc ff23 	bl	800191c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e1d6      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ae4:	f7ff fc19 	bl	800431a <LL_RCC_LSI1_IsReady>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f1      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x31a>
 8004aee:	e051      	b.n	8004b94 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004af0:	f7ff fbf1 	bl	80042d6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fc ff12 	bl	800191c <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004afa:	e00c      	b.n	8004b16 <HAL_RCC_OscConfig+0x35e>
 8004afc:	2000006c 	.word	0x2000006c
 8004b00:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b04:	f7fc ff0a 	bl	800191c <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e1bd      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004b16:	f7ff fc00 	bl	800431a <LL_RCC_LSI1_IsReady>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f1      	beq.n	8004b04 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004b20:	f7ff fc1e 	bl	8004360 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b26:	f7fc fef9 	bl	800191c <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e1ac      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004b38:	f7ff fc23 	bl	8004382 <LL_RCC_LSI2_IsReady>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f1      	bne.n	8004b26 <HAL_RCC_OscConfig+0x36e>
 8004b42:	e027      	b.n	8004b94 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004b44:	f7ff fc0c 	bl	8004360 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fc fee8 	bl	800191c <HAL_GetTick>
 8004b4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b50:	f7fc fee4 	bl	800191c <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e197      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004b62:	f7ff fc0e 	bl	8004382 <LL_RCC_LSI2_IsReady>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f1      	bne.n	8004b50 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004b6c:	f7ff fbc4 	bl	80042f8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b70:	f7fc fed4 	bl	800191c <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b78:	f7fc fed0 	bl	800191c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e183      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b8a:	f7ff fbc6 	bl	800431a <LL_RCC_LSI1_IsReady>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f1      	bne.n	8004b78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d05b      	beq.n	8004c58 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ba0:	4ba7      	ldr	r3, [pc, #668]	; (8004e40 <HAL_RCC_OscConfig+0x688>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d114      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004bac:	f7ff fa64 	bl	8004078 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb0:	f7fc feb4 	bl	800191c <HAL_GetTick>
 8004bb4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb8:	f7fc feb0 	bl	800191c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e163      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bca:	4b9d      	ldr	r3, [pc, #628]	; (8004e40 <HAL_RCC_OscConfig+0x688>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d102      	bne.n	8004be4 <HAL_RCC_OscConfig+0x42c>
 8004bde:	f7ff fb24 	bl	800422a <LL_RCC_LSE_Enable>
 8004be2:	e00c      	b.n	8004bfe <HAL_RCC_OscConfig+0x446>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b05      	cmp	r3, #5
 8004bea:	d104      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x43e>
 8004bec:	f7ff fb3f 	bl	800426e <LL_RCC_LSE_EnableBypass>
 8004bf0:	f7ff fb1b 	bl	800422a <LL_RCC_LSE_Enable>
 8004bf4:	e003      	b.n	8004bfe <HAL_RCC_OscConfig+0x446>
 8004bf6:	f7ff fb29 	bl	800424c <LL_RCC_LSE_Disable>
 8004bfa:	f7ff fb49 	bl	8004290 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d014      	beq.n	8004c30 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fc fe89 	bl	800191c <HAL_GetTick>
 8004c0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c0c:	e00a      	b.n	8004c24 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fc fe85 	bl	800191c <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e136      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c24:	f7ff fb45 	bl	80042b2 <LL_RCC_LSE_IsReady>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0ef      	beq.n	8004c0e <HAL_RCC_OscConfig+0x456>
 8004c2e:	e013      	b.n	8004c58 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c30:	f7fc fe74 	bl	800191c <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c38:	f7fc fe70 	bl	800191c <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e121      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c4e:	f7ff fb30 	bl	80042b2 <LL_RCC_LSE_IsReady>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1ef      	bne.n	8004c38 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02c      	beq.n	8004cbe <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d014      	beq.n	8004c96 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c6c:	f7ff faa9 	bl	80041c2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c70:	f7fc fe54 	bl	800191c <HAL_GetTick>
 8004c74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c78:	f7fc fe50 	bl	800191c <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e103      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c8a:	f7ff fabc 	bl	8004206 <LL_RCC_HSI48_IsReady>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f1      	beq.n	8004c78 <HAL_RCC_OscConfig+0x4c0>
 8004c94:	e013      	b.n	8004cbe <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c96:	f7ff faa5 	bl	80041e4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fc fe3f 	bl	800191c <HAL_GetTick>
 8004c9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ca2:	f7fc fe3b 	bl	800191c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e0ee      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004cb4:	f7ff faa7 	bl	8004206 <LL_RCC_HSI48_IsReady>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f1      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80e4 	beq.w	8004e90 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc8:	f7ff fc05 	bl	80044d6 <LL_RCC_GetSysClkSource>
 8004ccc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	f040 80b4 	bne.w	8004e48 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 0203 	and.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d123      	bne.n	8004d36 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d11c      	bne.n	8004d36 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d114      	bne.n	8004d36 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d10d      	bne.n	8004d36 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d106      	bne.n	8004d36 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d05d      	beq.n	8004df2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	d058      	beq.n	8004dee <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0a1      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d4e:	f7ff fc85 	bl	800465c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d52:	f7fc fde3 	bl	800191c <HAL_GetTick>
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5a:	f7fc fddf 	bl	800191c <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e092      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1ef      	bne.n	8004d5a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	4b30      	ldr	r3, [pc, #192]	; (8004e44 <HAL_RCC_OscConfig+0x68c>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d8c:	4311      	orrs	r1, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d92:	0212      	lsls	r2, r2, #8
 8004d94:	4311      	orrs	r1, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d9a:	4311      	orrs	r1, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004da0:	4311      	orrs	r1, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004da6:	430a      	orrs	r2, r1
 8004da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004db0:	f7ff fc45 	bl	800463e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dc4:	f7fc fdaa 	bl	800191c <HAL_GetTick>
 8004dc8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dcc:	f7fc fda6 	bl	800191c <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e059      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0ef      	beq.n	8004dcc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dec:	e050      	b.n	8004e90 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e04f      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d147      	bne.n	8004e90 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e00:	f7ff fc1d 	bl	800463e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e14:	f7fc fd82 	bl	800191c <HAL_GetTick>
 8004e18:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fc fd7e 	bl	800191c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e031      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0ef      	beq.n	8004e1c <HAL_RCC_OscConfig+0x664>
 8004e3c:	e028      	b.n	8004e90 <HAL_RCC_OscConfig+0x6d8>
 8004e3e:	bf00      	nop
 8004e40:	58000400 	.word	0x58000400
 8004e44:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	2b0c      	cmp	r3, #12
 8004e4c:	d01e      	beq.n	8004e8c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4e:	f7ff fc05 	bl	800465c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7fc fd63 	bl	800191c <HAL_GetTick>
 8004e56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fc fd5f 	bl	800191c <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e012      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1ef      	bne.n	8004e5a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <HAL_RCC_OscConfig+0x6e4>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	60cb      	str	r3, [r1, #12]
 8004e8a:	e001      	b.n	8004e90 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3734      	adds	r7, #52	; 0x34
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd90      	pop	{r4, r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	eefefffc 	.word	0xeefefffc

08004ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e12d      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb4:	4b98      	ldr	r3, [pc, #608]	; (8005118 <HAL_RCC_ClockConfig+0x278>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d91b      	bls.n	8004efa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec2:	4b95      	ldr	r3, [pc, #596]	; (8005118 <HAL_RCC_ClockConfig+0x278>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 0207 	bic.w	r2, r3, #7
 8004eca:	4993      	ldr	r1, [pc, #588]	; (8005118 <HAL_RCC_ClockConfig+0x278>)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed2:	f7fc fd23 	bl	800191c <HAL_GetTick>
 8004ed6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004eda:	f7fc fd1f 	bl	800191c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e111      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eec:	4b8a      	ldr	r3, [pc, #552]	; (8005118 <HAL_RCC_ClockConfig+0x278>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d1ef      	bne.n	8004eda <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d016      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff faef 	bl	80044ee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f10:	f7fc fd04 	bl	800191c <HAL_GetTick>
 8004f14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f18:	f7fc fd00 	bl	800191c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e0f2      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f2a:	f7ff fbe9 	bl	8004700 <LL_RCC_IsActiveFlag_HPRE>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f1      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d016      	beq.n	8004f6e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fae6 	bl	8004516 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f4a:	f7fc fce7 	bl	800191c <HAL_GetTick>
 8004f4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f52:	f7fc fce3 	bl	800191c <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e0d5      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004f64:	f7ff fbde 	bl	8004724 <LL_RCC_IsActiveFlag_C2HPRE>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f1      	beq.n	8004f52 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d016      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fadf 	bl	8004542 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f84:	f7fc fcca 	bl	800191c <HAL_GetTick>
 8004f88:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f8c:	f7fc fcc6 	bl	800191c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e0b8      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f9e:	f7ff fbd4 	bl	800474a <LL_RCC_IsActiveFlag_SHDHPRE>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f1      	beq.n	8004f8c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d016      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fad9 	bl	8004570 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fbe:	f7fc fcad 	bl	800191c <HAL_GetTick>
 8004fc2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fc6:	f7fc fca9 	bl	800191c <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e09b      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004fd8:	f7ff fbca 	bl	8004770 <LL_RCC_IsActiveFlag_PPRE1>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f1      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d017      	beq.n	800501e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff facf 	bl	8004598 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ffa:	f7fc fc8f 	bl	800191c <HAL_GetTick>
 8004ffe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005002:	f7fc fc8b 	bl	800191c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e07d      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005014:	f7ff fbbe 	bl	8004794 <LL_RCC_IsActiveFlag_PPRE2>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f1      	beq.n	8005002 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d043      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d106      	bne.n	8005040 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005032:	f7ff f86f 	bl	8004114 <LL_RCC_HSE_IsReady>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d11e      	bne.n	800507a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e067      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d106      	bne.n	8005056 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005048:	f7ff fb17 	bl	800467a <LL_RCC_PLL_IsReady>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e05c      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800505e:	f7ff f9d7 	bl	8004410 <LL_RCC_MSI_IsReady>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d108      	bne.n	800507a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e051      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800506c:	f7ff f882 	bl	8004174 <LL_RCC_HSI_IsReady>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e04a      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fa15 	bl	80044ae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005084:	f7fc fc4a 	bl	800191c <HAL_GetTick>
 8005088:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508a:	e00a      	b.n	80050a2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508c:	f7fc fc46 	bl	800191c <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f241 3288 	movw	r2, #5000	; 0x1388
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e036      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	f7ff fa18 	bl	80044d6 <LL_RCC_GetSysClkSource>
 80050a6:	4602      	mov	r2, r0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d1ec      	bne.n	800508c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050b2:	4b19      	ldr	r3, [pc, #100]	; (8005118 <HAL_RCC_ClockConfig+0x278>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d21b      	bcs.n	80050f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c0:	4b15      	ldr	r3, [pc, #84]	; (8005118 <HAL_RCC_ClockConfig+0x278>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f023 0207 	bic.w	r2, r3, #7
 80050c8:	4913      	ldr	r1, [pc, #76]	; (8005118 <HAL_RCC_ClockConfig+0x278>)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d0:	f7fc fc24 	bl	800191c <HAL_GetTick>
 80050d4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050d8:	f7fc fc20 	bl	800191c <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e012      	b.n	8005110 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <HAL_RCC_ClockConfig+0x278>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d1ef      	bne.n	80050d8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050f8:	f000 f87e 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 80050fc:	4603      	mov	r3, r0
 80050fe:	4a07      	ldr	r2, [pc, #28]	; (800511c <HAL_RCC_ClockConfig+0x27c>)
 8005100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005102:	f7fc fc17 	bl	8001934 <HAL_GetTickPrio>
 8005106:	4603      	mov	r3, r0
 8005108:	4618      	mov	r0, r3
 800510a:	f7fc faa9 	bl	8001660 <HAL_InitTick>
 800510e:	4603      	mov	r3, r0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	58004000 	.word	0x58004000
 800511c:	2000006c 	.word	0x2000006c

08005120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005126:	f7ff f9d6 	bl	80044d6 <LL_RCC_GetSysClkSource>
 800512a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005132:	f7ff f992 	bl	800445a <LL_RCC_MSI_GetRange>
 8005136:	4603      	mov	r3, r0
 8005138:	091b      	lsrs	r3, r3, #4
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	4a2b      	ldr	r2, [pc, #172]	; (80051ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8005140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	e04b      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b04      	cmp	r3, #4
 800514c:	d102      	bne.n	8005154 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800514e:	4b28      	ldr	r3, [pc, #160]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e045      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b08      	cmp	r3, #8
 8005158:	d10a      	bne.n	8005170 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800515a:	f7fe ffab 	bl	80040b4 <LL_RCC_HSE_IsEnabledDiv2>
 800515e:	4603      	mov	r3, r0
 8005160:	2b01      	cmp	r3, #1
 8005162:	d102      	bne.n	800516a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005164:	4b22      	ldr	r3, [pc, #136]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	e03a      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800516a:	4b22      	ldr	r3, [pc, #136]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	e037      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005170:	f7ff faba 	bl	80046e8 <LL_RCC_PLL_GetMainSource>
 8005174:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d003      	beq.n	8005184 <HAL_RCC_GetSysClockFreq+0x64>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b03      	cmp	r3, #3
 8005180:	d003      	beq.n	800518a <HAL_RCC_GetSysClockFreq+0x6a>
 8005182:	e00d      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005184:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005186:	60bb      	str	r3, [r7, #8]
        break;
 8005188:	e015      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800518a:	f7fe ff93 	bl	80040b4 <LL_RCC_HSE_IsEnabledDiv2>
 800518e:	4603      	mov	r3, r0
 8005190:	2b01      	cmp	r3, #1
 8005192:	d102      	bne.n	800519a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005194:	4b16      	ldr	r3, [pc, #88]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005196:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005198:	e00d      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800519a:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800519c:	60bb      	str	r3, [r7, #8]
        break;
 800519e:	e00a      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80051a0:	f7ff f95b 	bl	800445a <LL_RCC_MSI_GetRange>
 80051a4:	4603      	mov	r3, r0
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	4a0f      	ldr	r2, [pc, #60]	; (80051ec <HAL_RCC_GetSysClockFreq+0xcc>)
 80051ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b2:	60bb      	str	r3, [r7, #8]
        break;
 80051b4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80051b6:	f7ff fa72 	bl	800469e <LL_RCC_PLL_GetN>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	fb03 f402 	mul.w	r4, r3, r2
 80051c2:	f7ff fa85 	bl	80046d0 <LL_RCC_PLL_GetDivider>
 80051c6:	4603      	mov	r3, r0
 80051c8:	091b      	lsrs	r3, r3, #4
 80051ca:	3301      	adds	r3, #1
 80051cc:	fbb4 f4f3 	udiv	r4, r4, r3
 80051d0:	f7ff fa72 	bl	80046b8 <LL_RCC_PLL_GetR>
 80051d4:	4603      	mov	r3, r0
 80051d6:	0f5b      	lsrs	r3, r3, #29
 80051d8:	3301      	adds	r3, #1
 80051da:	fbb4 f3f3 	udiv	r3, r4, r3
 80051de:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80051e0:	68fb      	ldr	r3, [r7, #12]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd90      	pop	{r4, r7, pc}
 80051ea:	bf00      	nop
 80051ec:	0800eca4 	.word	0x0800eca4
 80051f0:	00f42400 	.word	0x00f42400
 80051f4:	01e84800 	.word	0x01e84800

080051f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f8:	b598      	push	{r3, r4, r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80051fc:	f7ff ff90 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 8005200:	4604      	mov	r4, r0
 8005202:	f7ff f9dd 	bl	80045c0 <LL_RCC_GetAHBPrescaler>
 8005206:	4603      	mov	r3, r0
 8005208:	091b      	lsrs	r3, r3, #4
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	4a03      	ldr	r2, [pc, #12]	; (800521c <HAL_RCC_GetHCLKFreq+0x24>)
 8005210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005214:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd98      	pop	{r3, r4, r7, pc}
 800521c:	0800ec44 	.word	0x0800ec44

08005220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005220:	b598      	push	{r3, r4, r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005224:	f7ff ffe8 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 8005228:	4604      	mov	r4, r0
 800522a:	f7ff f9f0 	bl	800460e <LL_RCC_GetAPB1Prescaler>
 800522e:	4603      	mov	r3, r0
 8005230:	0a1b      	lsrs	r3, r3, #8
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd98      	pop	{r3, r4, r7, pc}
 8005248:	0800ec84 	.word	0x0800ec84

0800524c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800524c:	b598      	push	{r3, r4, r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005250:	f7ff ffd2 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 8005254:	4604      	mov	r4, r0
 8005256:	f7ff f9e6 	bl	8004626 <LL_RCC_GetAPB2Prescaler>
 800525a:	4603      	mov	r3, r0
 800525c:	0adb      	lsrs	r3, r3, #11
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	4a04      	ldr	r2, [pc, #16]	; (8005274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd98      	pop	{r3, r4, r7, pc}
 8005274:	0800ec84 	.word	0x0800ec84

08005278 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	226f      	movs	r2, #111	; 0x6f
 8005286:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005288:	f7ff f925 	bl	80044d6 <LL_RCC_GetSysClkSource>
 800528c:	4602      	mov	r2, r0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005292:	f7ff f995 	bl	80045c0 <LL_RCC_GetAHBPrescaler>
 8005296:	4602      	mov	r2, r0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800529c:	f7ff f9b7 	bl	800460e <LL_RCC_GetAPB1Prescaler>
 80052a0:	4602      	mov	r2, r0
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80052a6:	f7ff f9be 	bl	8004626 <LL_RCC_GetAPB2Prescaler>
 80052aa:	4602      	mov	r2, r0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80052b0:	f7ff f992 	bl	80045d8 <LL_C2_RCC_GetAHBPrescaler>
 80052b4:	4602      	mov	r2, r0
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80052ba:	f7ff f99a 	bl	80045f2 <LL_RCC_GetAHB4Prescaler>
 80052be:	4602      	mov	r2, r0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <HAL_RCC_GetClockConfig+0x60>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0207 	and.w	r2, r3, #7
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	601a      	str	r2, [r3, #0]
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	58004000 	.word	0x58004000

080052dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2bb0      	cmp	r3, #176	; 0xb0
 80052e8:	d903      	bls.n	80052f2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80052ea:	4b15      	ldr	r3, [pc, #84]	; (8005340 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e007      	b.n	8005302 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	4a11      	ldr	r2, [pc, #68]	; (8005340 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80052fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005300:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005302:	f7ff f976 	bl	80045f2 <LL_RCC_GetAHB4Prescaler>
 8005306:	4603      	mov	r3, r0
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	4a0d      	ldr	r2, [pc, #52]	; (8005344 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	0c9c      	lsrs	r4, r3, #18
 8005326:	f7fe feb7 	bl	8004098 <HAL_PWREx_GetVoltageRange>
 800532a:	4603      	mov	r3, r0
 800532c:	4619      	mov	r1, r3
 800532e:	4620      	mov	r0, r4
 8005330:	f000 f80c 	bl	800534c <RCC_SetFlashLatency>
 8005334:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	bd90      	pop	{r4, r7, pc}
 800533e:	bf00      	nop
 8005340:	0800eca4 	.word	0x0800eca4
 8005344:	0800ec44 	.word	0x0800ec44
 8005348:	431bde83 	.word	0x431bde83

0800534c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b093      	sub	sp, #76	; 0x4c
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005356:	4b37      	ldr	r3, [pc, #220]	; (8005434 <RCC_SetFlashLatency+0xe8>)
 8005358:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800535c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800535e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005362:	4a35      	ldr	r2, [pc, #212]	; (8005438 <RCC_SetFlashLatency+0xec>)
 8005364:	f107 031c 	add.w	r3, r7, #28
 8005368:	ca07      	ldmia	r2, {r0, r1, r2}
 800536a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800536e:	4b33      	ldr	r3, [pc, #204]	; (800543c <RCC_SetFlashLatency+0xf0>)
 8005370:	f107 040c 	add.w	r4, r7, #12
 8005374:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005376:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800537a:	2300      	movs	r3, #0
 800537c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005384:	d11a      	bne.n	80053bc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005386:	2300      	movs	r3, #0
 8005388:	643b      	str	r3, [r7, #64]	; 0x40
 800538a:	e013      	b.n	80053b4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800538c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	3348      	adds	r3, #72	; 0x48
 8005392:	443b      	add	r3, r7
 8005394:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d807      	bhi.n	80053ae <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800539e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	3348      	adds	r3, #72	; 0x48
 80053a4:	443b      	add	r3, r7
 80053a6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80053aa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80053ac:	e020      	b.n	80053f0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80053ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b0:	3301      	adds	r3, #1
 80053b2:	643b      	str	r3, [r7, #64]	; 0x40
 80053b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d9e8      	bls.n	800538c <RCC_SetFlashLatency+0x40>
 80053ba:	e019      	b.n	80053f0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80053bc:	2300      	movs	r3, #0
 80053be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c0:	e013      	b.n	80053ea <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80053c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	3348      	adds	r3, #72	; 0x48
 80053c8:	443b      	add	r3, r7
 80053ca:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d807      	bhi.n	80053e4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80053d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	3348      	adds	r3, #72	; 0x48
 80053da:	443b      	add	r3, r7
 80053dc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80053e0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80053e2:	e005      	b.n	80053f0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80053e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e6:	3301      	adds	r3, #1
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d9e8      	bls.n	80053c2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <RCC_SetFlashLatency+0xf4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f023 0207 	bic.w	r2, r3, #7
 80053f8:	4911      	ldr	r1, [pc, #68]	; (8005440 <RCC_SetFlashLatency+0xf4>)
 80053fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005400:	f7fc fa8c 	bl	800191c <HAL_GetTick>
 8005404:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005406:	e008      	b.n	800541a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005408:	f7fc fa88 	bl	800191c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e007      	b.n	800542a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <RCC_SetFlashLatency+0xf4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005424:	429a      	cmp	r2, r3
 8005426:	d1ef      	bne.n	8005408 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	374c      	adds	r7, #76	; 0x4c
 800542e:	46bd      	mov	sp, r7
 8005430:	bd90      	pop	{r4, r7, pc}
 8005432:	bf00      	nop
 8005434:	0800eb24 	.word	0x0800eb24
 8005438:	0800eb34 	.word	0x0800eb34
 800543c:	0800eb40 	.word	0x0800eb40
 8005440:	58004000 	.word	0x58004000

08005444 <LL_RCC_LSE_IsEnabled>:
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <LL_RCC_LSE_IsEnabled+0x18>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <LL_RCC_LSE_IsEnabled+0x1a>
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <LL_RCC_LSE_IsReady>:
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800546c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b02      	cmp	r3, #2
 800547a:	d101      	bne.n	8005480 <LL_RCC_LSE_IsReady+0x18>
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <LL_RCC_LSE_IsReady+0x1a>
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <LL_RCC_MSI_EnablePLLMode>:
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800549a:	f043 0304 	orr.w	r3, r3, #4
 800549e:	6013      	str	r3, [r2, #0]
}
 80054a0:	bf00      	nop
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <LL_RCC_SetRFWKPClockSource>:
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80054b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <LL_RCC_SetSMPSClockSource>:
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80054de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f023 0203 	bic.w	r2, r3, #3
 80054e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <LL_RCC_SetSMPSPrescaler>:
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4313      	orrs	r3, r2
 8005518:	624b      	str	r3, [r1, #36]	; 0x24
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <LL_RCC_SetUSARTClockSource>:
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800552e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	f023 0203 	bic.w	r2, r3, #3
 800553a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_RCC_SetLPUARTClockSource>:
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800555a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <LL_RCC_SetI2CClockSource>:
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005596:	43db      	mvns	r3, r3
 8005598:	401a      	ands	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <LL_RCC_SetLPTIMClockSource>:
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80055c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	0c1b      	lsrs	r3, r3, #16
 80055cc:	041b      	lsls	r3, r3, #16
 80055ce:	43db      	mvns	r3, r3
 80055d0:	401a      	ands	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <LL_RCC_SetSAIClockSource>:
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <LL_RCC_SetRNGClockSource>:
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005628:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800562c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <LL_RCC_SetCLK48ClockSource>:
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800564c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <LL_RCC_SetUSBClockSource>:
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff ffe3 	bl	8005644 <LL_RCC_SetCLK48ClockSource>
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <LL_RCC_SetADCClockSource>:
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800568e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800569a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <LL_RCC_SetRTCClockSource>:
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80056ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <LL_RCC_GetRTCClockSource>:
{
 80056de:	b480      	push	{r7}
 80056e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80056e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <LL_RCC_ForceBackupDomainReset>:
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005710:	bf00      	nop
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <LL_RCC_ReleaseBackupDomainReset>:
{
 800571a:	b480      	push	{r7}
 800571c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800572a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005732:	bf00      	nop
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <LL_RCC_PLLSAI1_Enable>:
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800574a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800574e:	6013      	str	r3, [r2, #0]
}
 8005750:	bf00      	nop
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <LL_RCC_PLLSAI1_Disable>:
{
 800575a:	b480      	push	{r7}
 800575c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800575e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005768:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800576c:	6013      	str	r3, [r2, #0]
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <LL_RCC_PLLSAI1_IsReady>:
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800578a:	d101      	bne.n	8005790 <LL_RCC_PLLSAI1_IsReady+0x18>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80057a4:	2300      	movs	r3, #0
 80057a6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80057a8:	2300      	movs	r3, #0
 80057aa:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d034      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057c0:	d021      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80057c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057c6:	d81b      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057cc:	d01d      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80057ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057d2:	d815      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00b      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80057d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057dc:	d110      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ec:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80057ee:	e00d      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 f94d 	bl	8005a94 <RCCEx_PLLSAI1_ConfigNP>
 80057fa:	4603      	mov	r3, r0
 80057fc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057fe:	e005      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	77fb      	strb	r3, [r7, #31]
        break;
 8005804:	e002      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800580a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800580c:	7ffb      	ldrb	r3, [r7, #31]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d105      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fee8 	bl	80055ec <LL_RCC_SetSAIClockSource>
 800581c:	e001      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581e:	7ffb      	ldrb	r3, [r7, #31]
 8005820:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800582a:	2b00      	cmp	r3, #0
 800582c:	d046      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800582e:	f7ff ff56 	bl	80056de <LL_RCC_GetRTCClockSource>
 8005832:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	429a      	cmp	r2, r3
 800583c:	d03c      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800583e:	f7fe fc1b 	bl	8004078 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d105      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff ff30 	bl	80056b2 <LL_RCC_SetRTCClockSource>
 8005852:	e02e      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800585e:	f7ff ff4b 	bl	80056f8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005862:	f7ff ff5a 	bl	800571a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800587e:	f7ff fde1 	bl	8005444 <LL_RCC_LSE_IsEnabled>
 8005882:	4603      	mov	r3, r0
 8005884:	2b01      	cmp	r3, #1
 8005886:	d114      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005888:	f7fc f848 	bl	800191c <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800588e:	e00b      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005890:	f7fc f844 	bl	800191c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f241 3288 	movw	r2, #5000	; 0x1388
 800589e:	4293      	cmp	r3, r2
 80058a0:	d902      	bls.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	77fb      	strb	r3, [r7, #31]
              break;
 80058a6:	e004      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80058a8:	f7ff fdde 	bl	8005468 <LL_RCC_LSE_IsReady>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d1ee      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80058b2:	7ffb      	ldrb	r3, [r7, #31]
 80058b4:	77bb      	strb	r3, [r7, #30]
 80058b6:	e001      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	7ffb      	ldrb	r3, [r7, #31]
 80058ba:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff fe2a 	bl	8005526 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fe35 	bl	8005552 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fe5d 	bl	80055b8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fe52 	bl	80055b8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff fe2a 	bl	800557e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fe1f 	bl	800557e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005948:	2b00      	cmp	r3, #0
 800594a:	d022      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fe8d 	bl	8005670 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800595e:	d107      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800596a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800596e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005978:	d10b      	bne.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3304      	adds	r3, #4
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f8e3 	bl	8005b4a <RCCEx_PLLSAI1_ConfigNQ>
 8005984:	4603      	mov	r3, r0
 8005986:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005988:	7ffb      	ldrb	r3, [r7, #31]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800598e:	7ffb      	ldrb	r3, [r7, #31]
 8005990:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599a:	2b00      	cmp	r3, #0
 800599c:	d02b      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a6:	d008      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b0:	d003      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d105      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fe2a 	bl	8005618 <LL_RCC_SetRNGClockSource>
 80059c4:	e00a      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	2000      	movs	r0, #0
 80059d2:	f7ff fe21 	bl	8005618 <LL_RCC_SetRNGClockSource>
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f7ff fe34 	bl	8005644 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80059e4:	d107      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80059e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059f4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d022      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff fe3d 	bl	8005686 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a14:	d107      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a24:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a2e:	d10b      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 f8e3 	bl	8005c00 <RCCEx_PLLSAI1_ConfigNR>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a3e:	7ffb      	ldrb	r3, [r7, #31]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005a44:	7ffb      	ldrb	r3, [r7, #31]
 8005a46:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff fd26 	bl	80054aa <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fd45 	bl	80054fe <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fd2c 	bl	80054d6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005a7e:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3720      	adds	r7, #32
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005a8c:	f7ff fcfe 	bl	800548c <LL_RCC_MSI_EnablePLLMode>
}
 8005a90:	bf00      	nop
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005aa0:	f7ff fe5b 	bl	800575a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005aa4:	f7fb ff3a 	bl	800191c <HAL_GetTick>
 8005aa8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005aaa:	e009      	b.n	8005ac0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aac:	f7fb ff36 	bl	800191c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d902      	bls.n	8005ac0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	73fb      	strb	r3, [r7, #15]
      break;
 8005abe:	e004      	b.n	8005aca <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ac0:	f7ff fe5a 	bl	8005778 <LL_RCC_PLLSAI1_IsReady>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d137      	bne.n	8005b40 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005afa:	4313      	orrs	r3, r2
 8005afc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005afe:	f7ff fe1d 	bl	800573c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b02:	f7fb ff0b 	bl	800191c <HAL_GetTick>
 8005b06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b08:	e009      	b.n	8005b1e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b0a:	f7fb ff07 	bl	800191c <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d902      	bls.n	8005b1e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	73fb      	strb	r3, [r7, #15]
        break;
 8005b1c:	e004      	b.n	8005b28 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b1e:	f7ff fe2b 	bl	8005778 <LL_RCC_PLLSAI1_IsReady>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d1f0      	bne.n	8005b0a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d108      	bne.n	8005b40 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005b56:	f7ff fe00 	bl	800575a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b5a:	f7fb fedf 	bl	800191c <HAL_GetTick>
 8005b5e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b60:	e009      	b.n	8005b76 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b62:	f7fb fedb 	bl	800191c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d902      	bls.n	8005b76 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	73fb      	strb	r3, [r7, #15]
      break;
 8005b74:	e004      	b.n	8005b80 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b76:	f7ff fdff 	bl	8005778 <LL_RCC_PLLSAI1_IsReady>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1f0      	bne.n	8005b62 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d137      	bne.n	8005bf6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005bb4:	f7ff fdc2 	bl	800573c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bb8:	f7fb feb0 	bl	800191c <HAL_GetTick>
 8005bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bbe:	e009      	b.n	8005bd4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bc0:	f7fb feac 	bl	800191c <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d902      	bls.n	8005bd4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bd2:	e004      	b.n	8005bde <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bd4:	f7ff fdd0 	bl	8005778 <LL_RCC_PLLSAI1_IsReady>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d1f0      	bne.n	8005bc0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d108      	bne.n	8005bf6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c0c:	f7ff fda5 	bl	800575a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c10:	f7fb fe84 	bl	800191c <HAL_GetTick>
 8005c14:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c16:	e009      	b.n	8005c2c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c18:	f7fb fe80 	bl	800191c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d902      	bls.n	8005c2c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2a:	e004      	b.n	8005c36 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c2c:	f7ff fda4 	bl	8005778 <LL_RCC_PLLSAI1_IsReady>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d137      	bne.n	8005cac <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c50:	4313      	orrs	r3, r2
 8005c52:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c66:	4313      	orrs	r3, r2
 8005c68:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c6a:	f7ff fd67 	bl	800573c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6e:	f7fb fe55 	bl	800191c <HAL_GetTick>
 8005c72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c74:	e009      	b.n	8005c8a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c76:	f7fb fe51 	bl	800191c <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d902      	bls.n	8005c8a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	73fb      	strb	r3, [r7, #15]
        break;
 8005c88:	e004      	b.n	8005c94 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c8a:	f7ff fd75 	bl	8005778 <LL_RCC_PLLSAI1_IsReady>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d1f0      	bne.n	8005c76 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d108      	bne.n	8005cac <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e049      	b.n	8005d5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d106      	bne.n	8005ce2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f841 	bl	8005d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f000 f9b7 	bl	8006068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d001      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e036      	b.n	8005dfe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <HAL_TIM_Base_Start_IT+0x94>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_TIM_Base_Start_IT+0x44>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dba:	d115      	bne.n	8005de8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <HAL_TIM_Base_Start_IT+0x98>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b06      	cmp	r3, #6
 8005dcc:	d015      	beq.n	8005dfa <HAL_TIM_Base_Start_IT+0x82>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd4:	d011      	beq.n	8005dfa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0201 	orr.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de6:	e008      	b.n	8005dfa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	e000      	b.n	8005dfc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	00010007 	.word	0x00010007

08005e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d020      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01b      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0202 	mvn.w	r2, #2
 8005e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f8e4 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005e64:	e005      	b.n	8005e72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f8d6 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f8e7 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d020      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01b      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0204 	mvn.w	r2, #4
 8005e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f8be 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005eb0:	e005      	b.n	8005ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f8b0 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f8c1 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d020      	beq.n	8005f10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01b      	beq.n	8005f10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0208 	mvn.w	r2, #8
 8005ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f898 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f88a 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f89b 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d020      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01b      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0210 	mvn.w	r2, #16
 8005f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2208      	movs	r2, #8
 8005f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f872 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005f48:	e005      	b.n	8005f56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f864 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f875 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00c      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0201 	mvn.w	r2, #1
 8005f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fb f9b0 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00c      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f8d0 	bl	8006144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d007      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8c8 	bl	8006158 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00c      	beq.n	8005fec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f834 	bl	8006054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00c      	beq.n	8006010 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0220 	mvn.w	r2, #32
 8006008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f890 	bl	8006130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a2a      	ldr	r2, [pc, #168]	; (8006124 <TIM_Base_SetConfig+0xbc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_Base_SetConfig+0x20>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006086:	d108      	bne.n	800609a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a21      	ldr	r2, [pc, #132]	; (8006124 <TIM_Base_SetConfig+0xbc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00b      	beq.n	80060ba <TIM_Base_SetConfig+0x52>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a8:	d007      	beq.n	80060ba <TIM_Base_SetConfig+0x52>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <TIM_Base_SetConfig+0xc0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d003      	beq.n	80060ba <TIM_Base_SetConfig+0x52>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a1d      	ldr	r2, [pc, #116]	; (800612c <TIM_Base_SetConfig+0xc4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d108      	bne.n	80060cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a0c      	ldr	r2, [pc, #48]	; (8006124 <TIM_Base_SetConfig+0xbc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d007      	beq.n	8006108 <TIM_Base_SetConfig+0xa0>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a0b      	ldr	r2, [pc, #44]	; (8006128 <TIM_Base_SetConfig+0xc0>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_Base_SetConfig+0xa0>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a0a      	ldr	r2, [pc, #40]	; (800612c <TIM_Base_SetConfig+0xc4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d103      	bne.n	8006110 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	615a      	str	r2, [r3, #20]
}
 8006116:	bf00      	nop
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40012c00 	.word	0x40012c00
 8006128:	40014400 	.word	0x40014400
 800612c:	40014800 	.word	0x40014800

08006130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <LL_RCC_GetUSARTClockSource>:
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006178:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4013      	ands	r3, r2
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <LL_RCC_GetLPUARTClockSource>:
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006198:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4013      	ands	r3, r2
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e042      	b.n	8006244 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d106      	bne.n	80061d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7fb f953 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2224      	movs	r2, #36	; 0x24
 80061da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0201 	bic.w	r2, r2, #1
 80061ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 f914 	bl	8007424 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fee9 	bl	8006fd4 <UART_SetConfig>
 8006202:	4603      	mov	r3, r0
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e01b      	b.n	8006244 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800621a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800622a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 f993 	bl	8007568 <UART_CheckIdleState>
 8006242:	4603      	mov	r3, r0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800624c:	b480      	push	{r7}
 800624e:	b091      	sub	sp, #68	; 0x44
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	4613      	mov	r3, r2
 8006258:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006260:	2b20      	cmp	r3, #32
 8006262:	d178      	bne.n	8006356 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <HAL_UART_Transmit_IT+0x24>
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e071      	b.n	8006358 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	88fa      	ldrh	r2, [r7, #6]
 800627e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	88fa      	ldrh	r2, [r7, #6]
 8006286:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2221      	movs	r2, #33	; 0x21
 800629c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062a8:	d12a      	bne.n	8006300 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b2:	d107      	bne.n	80062c4 <HAL_UART_Transmit_IT+0x78>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4a29      	ldr	r2, [pc, #164]	; (8006364 <HAL_UART_Transmit_IT+0x118>)
 80062c0:	679a      	str	r2, [r3, #120]	; 0x78
 80062c2:	e002      	b.n	80062ca <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4a28      	ldr	r2, [pc, #160]	; (8006368 <HAL_UART_Transmit_IT+0x11c>)
 80062c8:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3308      	adds	r3, #8
 80062e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ea:	637a      	str	r2, [r7, #52]	; 0x34
 80062ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e5      	bne.n	80062ca <HAL_UART_Transmit_IT+0x7e>
 80062fe:	e028      	b.n	8006352 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006308:	d107      	bne.n	800631a <HAL_UART_Transmit_IT+0xce>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d103      	bne.n	800631a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4a15      	ldr	r2, [pc, #84]	; (800636c <HAL_UART_Transmit_IT+0x120>)
 8006316:	679a      	str	r2, [r3, #120]	; 0x78
 8006318:	e002      	b.n	8006320 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4a14      	ldr	r2, [pc, #80]	; (8006370 <HAL_UART_Transmit_IT+0x124>)
 800631e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	613b      	str	r3, [r7, #16]
   return(result);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633e:	623b      	str	r3, [r7, #32]
 8006340:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	69f9      	ldr	r1, [r7, #28]
 8006344:	6a3a      	ldr	r2, [r7, #32]
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	61bb      	str	r3, [r7, #24]
   return(result);
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e6      	bne.n	8006320 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	e000      	b.n	8006358 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006356:	2302      	movs	r3, #2
  }
}
 8006358:	4618      	mov	r0, r3
 800635a:	3744      	adds	r7, #68	; 0x44
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	080081db 	.word	0x080081db
 8006368:	080080fb 	.word	0x080080fb
 800636c:	08008039 	.word	0x08008039
 8006370:	08007f81 	.word	0x08007f81

08006374 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08a      	sub	sp, #40	; 0x28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	4613      	mov	r3, r2
 8006380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006388:	2b20      	cmp	r3, #32
 800638a:	d137      	bne.n	80063fc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <HAL_UART_Receive_IT+0x24>
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e030      	b.n	80063fe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a18      	ldr	r2, [pc, #96]	; (8006408 <HAL_UART_Receive_IT+0x94>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d01f      	beq.n	80063ec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d018      	beq.n	80063ec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	613b      	str	r3, [r7, #16]
   return(result);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	623b      	str	r3, [r7, #32]
 80063da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	69f9      	ldr	r1, [r7, #28]
 80063de:	6a3a      	ldr	r2, [r7, #32]
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e6      	bne.n	80063ba <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	461a      	mov	r2, r3
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f001 f9ca 	bl	800778c <UART_Start_Receive_IT>
 80063f8:	4603      	mov	r3, r0
 80063fa:	e000      	b.n	80063fe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063fc:	2302      	movs	r3, #2
  }
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3728      	adds	r7, #40	; 0x28
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40008000 	.word	0x40008000

0800640c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	; 0x28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006420:	2b20      	cmp	r3, #32
 8006422:	d167      	bne.n	80064f4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <HAL_UART_Transmit_DMA+0x24>
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e060      	b.n	80064f6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	88fa      	ldrh	r2, [r7, #6]
 800643e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	88fa      	ldrh	r2, [r7, #6]
 8006446:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2221      	movs	r2, #33	; 0x21
 8006456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d028      	beq.n	80064b4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006466:	4a26      	ldr	r2, [pc, #152]	; (8006500 <HAL_UART_Transmit_DMA+0xf4>)
 8006468:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646e:	4a25      	ldr	r2, [pc, #148]	; (8006504 <HAL_UART_Transmit_DMA+0xf8>)
 8006470:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006476:	4a24      	ldr	r2, [pc, #144]	; (8006508 <HAL_UART_Transmit_DMA+0xfc>)
 8006478:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800647e:	2200      	movs	r2, #0
 8006480:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648a:	4619      	mov	r1, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3328      	adds	r3, #40	; 0x28
 8006492:	461a      	mov	r2, r3
 8006494:	88fb      	ldrh	r3, [r7, #6]
 8006496:	f7fd f8cd 	bl	8003634 <HAL_DMA_Start_IT>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d009      	beq.n	80064b4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2210      	movs	r2, #16
 80064a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e020      	b.n	80064f6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2240      	movs	r2, #64	; 0x40
 80064ba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3308      	adds	r3, #8
 80064c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	613b      	str	r3, [r7, #16]
   return(result);
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3308      	adds	r3, #8
 80064da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064dc:	623a      	str	r2, [r7, #32]
 80064de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	69f9      	ldr	r1, [r7, #28]
 80064e2:	6a3a      	ldr	r2, [r7, #32]
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e5      	bne.n	80064bc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e000      	b.n	80064f6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80064f4:	2302      	movs	r3, #2
  }
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3728      	adds	r7, #40	; 0x28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	08007c6b 	.word	0x08007c6b
 8006504:	08007d05 	.word	0x08007d05
 8006508:	08007e8b 	.word	0x08007e8b

0800650c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b090      	sub	sp, #64	; 0x40
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006522:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652e:	2b80      	cmp	r3, #128	; 0x80
 8006530:	d139      	bne.n	80065a6 <HAL_UART_DMAStop+0x9a>
 8006532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006534:	2b21      	cmp	r3, #33	; 0x21
 8006536:	d136      	bne.n	80065a6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3308      	adds	r3, #8
 800653e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	61fb      	str	r3, [r7, #28]
   return(result);
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800654e:	637b      	str	r3, [r7, #52]	; 0x34
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006558:	62fa      	str	r2, [r7, #44]	; 0x2c
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800655e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e5      	bne.n	8006538 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d015      	beq.n	80065a0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006578:	4618      	mov	r0, r3
 800657a:	f7fd f8d6 	bl	800372a <HAL_DMA_Abort>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00d      	beq.n	80065a0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006588:	4618      	mov	r0, r3
 800658a:	f7fd fa3b 	bl	8003a04 <HAL_DMA_GetError>
 800658e:	4603      	mov	r3, r0
 8006590:	2b20      	cmp	r3, #32
 8006592:	d105      	bne.n	80065a0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2210      	movs	r2, #16
 8006598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e047      	b.n	8006630 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 fabb 	bl	8007b1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b0:	2b40      	cmp	r3, #64	; 0x40
 80065b2:	d13c      	bne.n	800662e <HAL_UART_DMAStop+0x122>
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	2b22      	cmp	r3, #34	; 0x22
 80065b8:	d139      	bne.n	800662e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d0:	633b      	str	r3, [r7, #48]	; 0x30
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3308      	adds	r3, #8
 80065d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065da:	61ba      	str	r2, [r7, #24]
 80065dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6979      	ldr	r1, [r7, #20]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	613b      	str	r3, [r7, #16]
   return(result);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e5      	bne.n	80065ba <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d017      	beq.n	8006628 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fd f893 	bl	800372a <HAL_DMA_Abort>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00e      	beq.n	8006628 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006610:	4618      	mov	r0, r3
 8006612:	f7fd f9f7 	bl	8003a04 <HAL_DMA_GetError>
 8006616:	4603      	mov	r3, r0
 8006618:	2b20      	cmp	r3, #32
 800661a:	d105      	bne.n	8006628 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2210      	movs	r2, #16
 8006620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e003      	b.n	8006630 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 fab8 	bl	8007b9e <UART_EndRxTransfer>
  }

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3740      	adds	r7, #64	; 0x40
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b09a      	sub	sp, #104	; 0x68
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800664e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006654:	667b      	str	r3, [r7, #100]	; 0x64
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800665e:	657b      	str	r3, [r7, #84]	; 0x54
 8006660:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006664:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800666c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e6      	bne.n	8006640 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3308      	adds	r3, #8
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	663b      	str	r3, [r7, #96]	; 0x60
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006696:	643a      	str	r2, [r7, #64]	; 0x40
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800669c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e3      	bne.n	8006672 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d118      	bne.n	80066e4 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	61fb      	str	r3, [r7, #28]
   return(result);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f023 0310 	bic.w	r3, r3, #16
 80066c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e6      	bne.n	80066b2 <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ee:	2b40      	cmp	r3, #64	; 0x40
 80066f0:	d154      	bne.n	800679c <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3308      	adds	r3, #8
 80066f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	60bb      	str	r3, [r7, #8]
   return(result);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006708:	65bb      	str	r3, [r7, #88]	; 0x58
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3308      	adds	r3, #8
 8006710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006712:	61ba      	str	r2, [r7, #24]
 8006714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6979      	ldr	r1, [r7, #20]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	613b      	str	r3, [r7, #16]
   return(result);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800672c:	2b00      	cmp	r3, #0
 800672e:	d017      	beq.n	8006760 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006736:	4a26      	ldr	r2, [pc, #152]	; (80067d0 <HAL_UART_AbortReceive_IT+0x198>)
 8006738:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006740:	4618      	mov	r0, r3
 8006742:	f7fd f851 	bl	80037e8 <HAL_DMA_Abort_IT>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d03c      	beq.n	80067c6 <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800675a:	4610      	mov	r0, r2
 800675c:	4798      	blx	r3
 800675e:	e032      	b.n	80067c6 <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	220f      	movs	r2, #15
 8006774:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699a      	ldr	r2, [r3, #24]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0208 	orr.w	r2, r2, #8
 8006784:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fb55 	bl	8006e44 <HAL_UART_AbortReceiveCpltCallback>
 800679a:	e014      	b.n	80067c6 <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	220f      	movs	r2, #15
 80067b0:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fb3f 	bl	8006e44 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3768      	adds	r7, #104	; 0x68
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	08007f37 	.word	0x08007f37

080067d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b0ba      	sub	sp, #232	; 0xe8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80067fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006802:	4013      	ands	r3, r2
 8006804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d11b      	bne.n	8006848 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	d015      	beq.n	8006848 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800681c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d105      	bne.n	8006834 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800682c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d009      	beq.n	8006848 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 82e3 	beq.w	8006e04 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	4798      	blx	r3
      }
      return;
 8006846:	e2dd      	b.n	8006e04 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8123 	beq.w	8006a98 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006852:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006856:	4b8d      	ldr	r3, [pc, #564]	; (8006a8c <HAL_UART_IRQHandler+0x2b8>)
 8006858:	4013      	ands	r3, r2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800685e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006862:	4b8b      	ldr	r3, [pc, #556]	; (8006a90 <HAL_UART_IRQHandler+0x2bc>)
 8006864:	4013      	ands	r3, r2
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 8116 	beq.w	8006a98 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800686c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d011      	beq.n	800689c <HAL_UART_IRQHandler+0xc8>
 8006878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2201      	movs	r2, #1
 800688a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006892:	f043 0201 	orr.w	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800689c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d011      	beq.n	80068cc <HAL_UART_IRQHandler+0xf8>
 80068a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2202      	movs	r2, #2
 80068ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c2:	f043 0204 	orr.w	r2, r3, #4
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d011      	beq.n	80068fc <HAL_UART_IRQHandler+0x128>
 80068d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2204      	movs	r2, #4
 80068ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f2:	f043 0202 	orr.w	r2, r3, #2
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d017      	beq.n	8006938 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d105      	bne.n	8006920 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006914:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006918:	4b5c      	ldr	r3, [pc, #368]	; (8006a8c <HAL_UART_IRQHandler+0x2b8>)
 800691a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2208      	movs	r2, #8
 8006926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692e:	f043 0208 	orr.w	r2, r3, #8
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006940:	2b00      	cmp	r3, #0
 8006942:	d012      	beq.n	800696a <HAL_UART_IRQHandler+0x196>
 8006944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00c      	beq.n	800696a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006958:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006960:	f043 0220 	orr.w	r2, r3, #32
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8249 	beq.w	8006e08 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d013      	beq.n	80069aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800698e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d007      	beq.n	80069aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069be:	2b40      	cmp	r3, #64	; 0x40
 80069c0:	d005      	beq.n	80069ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d054      	beq.n	8006a78 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 f8e5 	bl	8007b9e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d146      	bne.n	8006a70 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3308      	adds	r3, #8
 80069e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1d9      	bne.n	80069e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d017      	beq.n	8006a68 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a3e:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <HAL_UART_IRQHandler+0x2c0>)
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fc fecd 	bl	80037e8 <HAL_DMA_Abort_IT>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d019      	beq.n	8006a88 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006a62:	4610      	mov	r0, r2
 8006a64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a66:	e00f      	b.n	8006a88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f007 ff1b 	bl	800e8a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6e:	e00b      	b.n	8006a88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f007 ff17 	bl	800e8a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a76:	e007      	b.n	8006a88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f007 ff13 	bl	800e8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006a86:	e1bf      	b.n	8006e08 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a88:	bf00      	nop
    return;
 8006a8a:	e1bd      	b.n	8006e08 <HAL_UART_IRQHandler+0x634>
 8006a8c:	10000001 	.word	0x10000001
 8006a90:	04000120 	.word	0x04000120
 8006a94:	08007f0b 	.word	0x08007f0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	f040 8153 	bne.w	8006d48 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 814c 	beq.w	8006d48 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 8145 	beq.w	8006d48 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	f040 80bb 	bne.w	8006c4c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ae4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 818f 	beq.w	8006e0c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006af8:	429a      	cmp	r2, r3
 8006afa:	f080 8187 	bcs.w	8006e0c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f040 8087 	bne.w	8006c2a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1da      	bne.n	8006b1c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3308      	adds	r3, #8
 8006b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e1      	bne.n	8006b66 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e3      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf8:	f023 0310 	bic.w	r3, r3, #16
 8006bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e4      	bne.n	8006be8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fc fd80 	bl	800372a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f007 fe87 	bl	800e958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c4a:	e0df      	b.n	8006e0c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 80d1 	beq.w	8006e10 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006c6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 80cc 	beq.w	8006e10 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ca0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e4      	bne.n	8006c78 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc4:	f023 0301 	bic.w	r3, r3, #1
 8006cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cd6:	633a      	str	r2, [r7, #48]	; 0x30
 8006cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e1      	bne.n	8006cae <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0310 	bic.w	r3, r3, #16
 8006d12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	69b9      	ldr	r1, [r7, #24]
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e4      	bne.n	8006cfe <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f007 fe09 	bl	800e958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d46:	e063      	b.n	8006e10 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00e      	beq.n	8006d72 <HAL_UART_IRQHandler+0x59e>
 8006d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fff2 	bl	8008d54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d70:	e051      	b.n	8006e16 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d014      	beq.n	8006da8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d105      	bne.n	8006d96 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d008      	beq.n	8006da8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d03a      	beq.n	8006e14 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	4798      	blx	r3
    }
    return;
 8006da6:	e035      	b.n	8006e14 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d009      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x5f4>
 8006db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fa7f 	bl	80082c4 <UART_EndTransmit_IT>
    return;
 8006dc6:	e026      	b.n	8006e16 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d009      	beq.n	8006de8 <HAL_UART_IRQHandler+0x614>
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 ffcb 	bl	8008d7c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006de6:	e016      	b.n	8006e16 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d010      	beq.n	8006e16 <HAL_UART_IRQHandler+0x642>
 8006df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	da0c      	bge.n	8006e16 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 ffb3 	bl	8008d68 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e02:	e008      	b.n	8006e16 <HAL_UART_IRQHandler+0x642>
      return;
 8006e04:	bf00      	nop
 8006e06:	e006      	b.n	8006e16 <HAL_UART_IRQHandler+0x642>
    return;
 8006e08:	bf00      	nop
 8006e0a:	e004      	b.n	8006e16 <HAL_UART_IRQHandler+0x642>
      return;
 8006e0c:	bf00      	nop
 8006e0e:	e002      	b.n	8006e16 <HAL_UART_IRQHandler+0x642>
      return;
 8006e10:	bf00      	nop
 8006e12:	e000      	b.n	8006e16 <HAL_UART_IRQHandler+0x642>
    return;
 8006e14:	bf00      	nop
  }
}
 8006e16:	37e8      	adds	r7, #232	; 0xe8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b08f      	sub	sp, #60	; 0x3c
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_HalfDuplex_EnableTransmitter+0x16>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e042      	b.n	8006ef4 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2224      	movs	r2, #36	; 0x24
 8006e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f023 030c 	bic.w	r3, r3, #12
 8006e92:	637b      	str	r3, [r7, #52]	; 0x34
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e6      	bne.n	8006e7e <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f043 0308 	orr.w	r3, r3, #8
 8006ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	61bb      	str	r3, [r7, #24]
 8006ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6979      	ldr	r1, [r7, #20]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	613b      	str	r3, [r7, #16]
   return(result);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e6      	bne.n	8006eb0 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	373c      	adds	r7, #60	; 0x3c
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b08f      	sub	sp, #60	; 0x3c
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_HalfDuplex_EnableReceiver+0x16>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e042      	b.n	8006f9c <HAL_HalfDuplex_EnableReceiver+0x9c>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2224      	movs	r2, #36	; 0x24
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f023 030c 	bic.w	r3, r3, #12
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f46:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e6      	bne.n	8006f26 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f043 0304 	orr.w	r3, r3, #4
 8006f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6979      	ldr	r1, [r7, #20]
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	613b      	str	r3, [r7, #16]
   return(result);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e6      	bne.n	8006f58 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	373c      	adds	r7, #60	; 0x3c
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb6:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fbe:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4313      	orrs	r3, r2
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
	...

08006fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd8:	b08c      	sub	sp, #48	; 0x30
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4baf      	ldr	r3, [pc, #700]	; (80072c0 <UART_SetConfig+0x2ec>)
 8007004:	4013      	ands	r3, r2
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800700c:	430b      	orrs	r3, r1
 800700e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4aa4      	ldr	r2, [pc, #656]	; (80072c4 <UART_SetConfig+0x2f0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800703c:	4313      	orrs	r3, r2
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800704a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007054:	430b      	orrs	r3, r1
 8007056:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	f023 010f 	bic.w	r1, r3, #15
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a95      	ldr	r2, [pc, #596]	; (80072c8 <UART_SetConfig+0x2f4>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d125      	bne.n	80070c4 <UART_SetConfig+0xf0>
 8007078:	2003      	movs	r0, #3
 800707a:	f7ff f877 	bl	800616c <LL_RCC_GetUSARTClockSource>
 800707e:	4603      	mov	r3, r0
 8007080:	2b03      	cmp	r3, #3
 8007082:	d81b      	bhi.n	80070bc <UART_SetConfig+0xe8>
 8007084:	a201      	add	r2, pc, #4	; (adr r2, 800708c <UART_SetConfig+0xb8>)
 8007086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708a:	bf00      	nop
 800708c:	0800709d 	.word	0x0800709d
 8007090:	080070ad 	.word	0x080070ad
 8007094:	080070a5 	.word	0x080070a5
 8007098:	080070b5 	.word	0x080070b5
 800709c:	2301      	movs	r3, #1
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a2:	e042      	b.n	800712a <UART_SetConfig+0x156>
 80070a4:	2302      	movs	r3, #2
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070aa:	e03e      	b.n	800712a <UART_SetConfig+0x156>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070b2:	e03a      	b.n	800712a <UART_SetConfig+0x156>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ba:	e036      	b.n	800712a <UART_SetConfig+0x156>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070c2:	e032      	b.n	800712a <UART_SetConfig+0x156>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a7e      	ldr	r2, [pc, #504]	; (80072c4 <UART_SetConfig+0x2f0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d12a      	bne.n	8007124 <UART_SetConfig+0x150>
 80070ce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80070d2:	f7ff f85b 	bl	800618c <LL_RCC_GetLPUARTClockSource>
 80070d6:	4603      	mov	r3, r0
 80070d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070dc:	d01a      	beq.n	8007114 <UART_SetConfig+0x140>
 80070de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070e2:	d81b      	bhi.n	800711c <UART_SetConfig+0x148>
 80070e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e8:	d00c      	beq.n	8007104 <UART_SetConfig+0x130>
 80070ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ee:	d815      	bhi.n	800711c <UART_SetConfig+0x148>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <UART_SetConfig+0x128>
 80070f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f8:	d008      	beq.n	800710c <UART_SetConfig+0x138>
 80070fa:	e00f      	b.n	800711c <UART_SetConfig+0x148>
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007102:	e012      	b.n	800712a <UART_SetConfig+0x156>
 8007104:	2302      	movs	r3, #2
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710a:	e00e      	b.n	800712a <UART_SetConfig+0x156>
 800710c:	2304      	movs	r3, #4
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007112:	e00a      	b.n	800712a <UART_SetConfig+0x156>
 8007114:	2308      	movs	r3, #8
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711a:	e006      	b.n	800712a <UART_SetConfig+0x156>
 800711c:	2310      	movs	r3, #16
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007122:	e002      	b.n	800712a <UART_SetConfig+0x156>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a65      	ldr	r2, [pc, #404]	; (80072c4 <UART_SetConfig+0x2f0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	f040 8097 	bne.w	8007264 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007136:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800713a:	2b08      	cmp	r3, #8
 800713c:	d823      	bhi.n	8007186 <UART_SetConfig+0x1b2>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <UART_SetConfig+0x170>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007169 	.word	0x08007169
 8007148:	08007187 	.word	0x08007187
 800714c:	08007171 	.word	0x08007171
 8007150:	08007187 	.word	0x08007187
 8007154:	08007177 	.word	0x08007177
 8007158:	08007187 	.word	0x08007187
 800715c:	08007187 	.word	0x08007187
 8007160:	08007187 	.word	0x08007187
 8007164:	0800717f 	.word	0x0800717f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007168:	f7fe f85a 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 800716c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800716e:	e010      	b.n	8007192 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007170:	4b56      	ldr	r3, [pc, #344]	; (80072cc <UART_SetConfig+0x2f8>)
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007174:	e00d      	b.n	8007192 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007176:	f7fd ffd3 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 800717a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800717c:	e009      	b.n	8007192 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800717e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007184:	e005      	b.n	8007192 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007190:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 812b 	beq.w	80073f0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	4a4c      	ldr	r2, [pc, #304]	; (80072d0 <UART_SetConfig+0x2fc>)
 80071a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a4:	461a      	mov	r2, r3
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80071ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	4613      	mov	r3, r2
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4413      	add	r3, r2
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d305      	bcc.n	80071ca <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d903      	bls.n	80071d2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071d0:	e10e      	b.n	80073f0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	2200      	movs	r2, #0
 80071d6:	60bb      	str	r3, [r7, #8]
 80071d8:	60fa      	str	r2, [r7, #12]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	4a3c      	ldr	r2, [pc, #240]	; (80072d0 <UART_SetConfig+0x2fc>)
 80071e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2200      	movs	r2, #0
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071f4:	f7f9 fb92 	bl	800091c <__aeabi_uldivmod>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	4610      	mov	r0, r2
 80071fe:	4619      	mov	r1, r3
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	020b      	lsls	r3, r1, #8
 800720a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800720e:	0202      	lsls	r2, r0, #8
 8007210:	6979      	ldr	r1, [r7, #20]
 8007212:	6849      	ldr	r1, [r1, #4]
 8007214:	0849      	lsrs	r1, r1, #1
 8007216:	2000      	movs	r0, #0
 8007218:	460c      	mov	r4, r1
 800721a:	4605      	mov	r5, r0
 800721c:	eb12 0804 	adds.w	r8, r2, r4
 8007220:	eb43 0905 	adc.w	r9, r3, r5
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	469a      	mov	sl, r3
 800722c:	4693      	mov	fp, r2
 800722e:	4652      	mov	r2, sl
 8007230:	465b      	mov	r3, fp
 8007232:	4640      	mov	r0, r8
 8007234:	4649      	mov	r1, r9
 8007236:	f7f9 fb71 	bl	800091c <__aeabi_uldivmod>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4613      	mov	r3, r2
 8007240:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007248:	d308      	bcc.n	800725c <UART_SetConfig+0x288>
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007250:	d204      	bcs.n	800725c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6a3a      	ldr	r2, [r7, #32]
 8007258:	60da      	str	r2, [r3, #12]
 800725a:	e0c9      	b.n	80073f0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007262:	e0c5      	b.n	80073f0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800726c:	d16d      	bne.n	800734a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800726e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007272:	3b01      	subs	r3, #1
 8007274:	2b07      	cmp	r3, #7
 8007276:	d82d      	bhi.n	80072d4 <UART_SetConfig+0x300>
 8007278:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <UART_SetConfig+0x2ac>)
 800727a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727e:	bf00      	nop
 8007280:	080072a1 	.word	0x080072a1
 8007284:	080072a9 	.word	0x080072a9
 8007288:	080072d5 	.word	0x080072d5
 800728c:	080072af 	.word	0x080072af
 8007290:	080072d5 	.word	0x080072d5
 8007294:	080072d5 	.word	0x080072d5
 8007298:	080072d5 	.word	0x080072d5
 800729c:	080072b7 	.word	0x080072b7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a0:	f7fd ffd4 	bl	800524c <HAL_RCC_GetPCLK2Freq>
 80072a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072a6:	e01b      	b.n	80072e0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a8:	4b08      	ldr	r3, [pc, #32]	; (80072cc <UART_SetConfig+0x2f8>)
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072ac:	e018      	b.n	80072e0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ae:	f7fd ff37 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 80072b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072b4:	e014      	b.n	80072e0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072bc:	e010      	b.n	80072e0 <UART_SetConfig+0x30c>
 80072be:	bf00      	nop
 80072c0:	cfff69f3 	.word	0xcfff69f3
 80072c4:	40008000 	.word	0x40008000
 80072c8:	40013800 	.word	0x40013800
 80072cc:	00f42400 	.word	0x00f42400
 80072d0:	0800ece4 	.word	0x0800ece4
      default:
        pclk = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80072de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 8084 	beq.w	80073f0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	4a4b      	ldr	r2, [pc, #300]	; (800741c <UART_SetConfig+0x448>)
 80072ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072f2:	461a      	mov	r2, r3
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80072fa:	005a      	lsls	r2, r3, #1
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	085b      	lsrs	r3, r3, #1
 8007302:	441a      	add	r2, r3
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	fbb2 f3f3 	udiv	r3, r2, r3
 800730c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	2b0f      	cmp	r3, #15
 8007312:	d916      	bls.n	8007342 <UART_SetConfig+0x36e>
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731a:	d212      	bcs.n	8007342 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	b29b      	uxth	r3, r3
 8007320:	f023 030f 	bic.w	r3, r3, #15
 8007324:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	085b      	lsrs	r3, r3, #1
 800732a:	b29b      	uxth	r3, r3
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	b29a      	uxth	r2, r3
 8007332:	8bfb      	ldrh	r3, [r7, #30]
 8007334:	4313      	orrs	r3, r2
 8007336:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	8bfa      	ldrh	r2, [r7, #30]
 800733e:	60da      	str	r2, [r3, #12]
 8007340:	e056      	b.n	80073f0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007348:	e052      	b.n	80073f0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800734a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800734e:	3b01      	subs	r3, #1
 8007350:	2b07      	cmp	r3, #7
 8007352:	d822      	bhi.n	800739a <UART_SetConfig+0x3c6>
 8007354:	a201      	add	r2, pc, #4	; (adr r2, 800735c <UART_SetConfig+0x388>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	0800737d 	.word	0x0800737d
 8007360:	08007385 	.word	0x08007385
 8007364:	0800739b 	.word	0x0800739b
 8007368:	0800738b 	.word	0x0800738b
 800736c:	0800739b 	.word	0x0800739b
 8007370:	0800739b 	.word	0x0800739b
 8007374:	0800739b 	.word	0x0800739b
 8007378:	08007393 	.word	0x08007393
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800737c:	f7fd ff66 	bl	800524c <HAL_RCC_GetPCLK2Freq>
 8007380:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007382:	e010      	b.n	80073a6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007384:	4b26      	ldr	r3, [pc, #152]	; (8007420 <UART_SetConfig+0x44c>)
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007388:	e00d      	b.n	80073a6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800738a:	f7fd fec9 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 800738e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007390:	e009      	b.n	80073a6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007398:	e005      	b.n	80073a6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073a4:	bf00      	nop
    }

    if (pclk != 0U)
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d021      	beq.n	80073f0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	4a1a      	ldr	r2, [pc, #104]	; (800741c <UART_SetConfig+0x448>)
 80073b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073b6:	461a      	mov	r2, r3
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	085b      	lsrs	r3, r3, #1
 80073c4:	441a      	add	r2, r3
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	2b0f      	cmp	r3, #15
 80073d4:	d909      	bls.n	80073ea <UART_SetConfig+0x416>
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073dc:	d205      	bcs.n	80073ea <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60da      	str	r2, [r3, #12]
 80073e8:	e002      	b.n	80073f0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2200      	movs	r2, #0
 8007404:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2200      	movs	r2, #0
 800740a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800740c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007410:	4618      	mov	r0, r3
 8007412:	3730      	adds	r7, #48	; 0x30
 8007414:	46bd      	mov	sp, r7
 8007416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800741a:	bf00      	nop
 800741c:	0800ece4 	.word	0x0800ece4
 8007420:	00f42400 	.word	0x00f42400

08007424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007430:	f003 0308 	and.w	r3, r3, #8
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01a      	beq.n	800753a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007522:	d10a      	bne.n	800753a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	605a      	str	r2, [r3, #4]
  }
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b098      	sub	sp, #96	; 0x60
 800756c:	af02      	add	r7, sp, #8
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007578:	f7fa f9d0 	bl	800191c <HAL_GetTick>
 800757c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b08      	cmp	r3, #8
 800758a:	d12f      	bne.n	80075ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800758c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007594:	2200      	movs	r2, #0
 8007596:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f88e 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d022      	beq.n	80075ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075ba:	653b      	str	r3, [r7, #80]	; 0x50
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c4:	647b      	str	r3, [r7, #68]	; 0x44
 80075c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e6      	bne.n	80075a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e063      	b.n	80076b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d149      	bne.n	800768e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007602:	2200      	movs	r2, #0
 8007604:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f857 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d03c      	beq.n	800768e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	623b      	str	r3, [r7, #32]
   return(result);
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007632:	633b      	str	r3, [r7, #48]	; 0x30
 8007634:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e6      	bne.n	8007614 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	60fb      	str	r3, [r7, #12]
   return(result);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	64bb      	str	r3, [r7, #72]	; 0x48
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3308      	adds	r3, #8
 8007664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007666:	61fa      	str	r2, [r7, #28]
 8007668:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	69b9      	ldr	r1, [r7, #24]
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	617b      	str	r3, [r7, #20]
   return(result);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e012      	b.n	80076b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3758      	adds	r7, #88	; 0x58
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	4613      	mov	r3, r2
 80076ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076cc:	e049      	b.n	8007762 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d045      	beq.n	8007762 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d6:	f7fa f921 	bl	800191c <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d302      	bcc.n	80076ec <UART_WaitOnFlagUntilTimeout+0x30>
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e048      	b.n	8007782 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d031      	beq.n	8007762 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b08      	cmp	r3, #8
 800770a:	d110      	bne.n	800772e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2208      	movs	r2, #8
 8007712:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fa42 	bl	8007b9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2208      	movs	r2, #8
 800771e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e029      	b.n	8007782 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800773c:	d111      	bne.n	8007762 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fa28 	bl	8007b9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2220      	movs	r2, #32
 8007752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e00f      	b.n	8007782 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69da      	ldr	r2, [r3, #28]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4013      	ands	r3, r2
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	429a      	cmp	r2, r3
 8007770:	bf0c      	ite	eq
 8007772:	2301      	moveq	r3, #1
 8007774:	2300      	movne	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	461a      	mov	r2, r3
 800777a:	79fb      	ldrb	r3, [r7, #7]
 800777c:	429a      	cmp	r2, r3
 800777e:	d0a6      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800778c:	b480      	push	{r7}
 800778e:	b0a3      	sub	sp, #140	; 0x8c
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	4613      	mov	r3, r2
 8007798:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	88fa      	ldrh	r2, [r7, #6]
 80077a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077be:	d10e      	bne.n	80077de <UART_Start_Receive_IT+0x52>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d105      	bne.n	80077d4 <UART_Start_Receive_IT+0x48>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077d2:	e02d      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	22ff      	movs	r2, #255	; 0xff
 80077d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077dc:	e028      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10d      	bne.n	8007802 <UART_Start_Receive_IT+0x76>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <UART_Start_Receive_IT+0x6c>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	22ff      	movs	r2, #255	; 0xff
 80077f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077f6:	e01b      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	227f      	movs	r2, #127	; 0x7f
 80077fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007800:	e016      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800780a:	d10d      	bne.n	8007828 <UART_Start_Receive_IT+0x9c>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <UART_Start_Receive_IT+0x92>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	227f      	movs	r2, #127	; 0x7f
 8007818:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800781c:	e008      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	223f      	movs	r2, #63	; 0x3f
 8007822:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007826:	e003      	b.n	8007830 <UART_Start_Receive_IT+0xa4>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2222      	movs	r2, #34	; 0x22
 800783c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007864:	673a      	str	r2, [r7, #112]	; 0x70
 8007866:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800786a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007872:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e3      	bne.n	8007840 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800787c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007880:	d14f      	bne.n	8007922 <UART_Start_Receive_IT+0x196>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	429a      	cmp	r2, r3
 800788c:	d349      	bcc.n	8007922 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007896:	d107      	bne.n	80078a8 <UART_Start_Receive_IT+0x11c>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d103      	bne.n	80078a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4a47      	ldr	r2, [pc, #284]	; (80079c0 <UART_Start_Receive_IT+0x234>)
 80078a4:	675a      	str	r2, [r3, #116]	; 0x74
 80078a6:	e002      	b.n	80078ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4a46      	ldr	r2, [pc, #280]	; (80079c4 <UART_Start_Receive_IT+0x238>)
 80078ac:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01a      	beq.n	80078ec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078da:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e4      	bne.n	80078b6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007902:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3308      	adds	r3, #8
 800790a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800790c:	64ba      	str	r2, [r7, #72]	; 0x48
 800790e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800791a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e5      	bne.n	80078ec <UART_Start_Receive_IT+0x160>
 8007920:	e046      	b.n	80079b0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792a:	d107      	bne.n	800793c <UART_Start_Receive_IT+0x1b0>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d103      	bne.n	800793c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4a24      	ldr	r2, [pc, #144]	; (80079c8 <UART_Start_Receive_IT+0x23c>)
 8007938:	675a      	str	r2, [r3, #116]	; 0x74
 800793a:	e002      	b.n	8007942 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4a23      	ldr	r2, [pc, #140]	; (80079cc <UART_Start_Receive_IT+0x240>)
 8007940:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d019      	beq.n	800797e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800795e:	677b      	str	r3, [r7, #116]	; 0x74
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	461a      	mov	r2, r3
 8007966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
 800796a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800796e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007970:	e841 2300 	strex	r3, r2, [r1]
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e6      	bne.n	800794a <UART_Start_Receive_IT+0x1be>
 800797c:	e018      	b.n	80079b0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	613b      	str	r3, [r7, #16]
   return(result);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f043 0320 	orr.w	r3, r3, #32
 8007992:	67bb      	str	r3, [r7, #120]	; 0x78
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800799c:	623b      	str	r3, [r7, #32]
 800799e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	69f9      	ldr	r1, [r7, #28]
 80079a2:	6a3a      	ldr	r2, [r7, #32]
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e6      	bne.n	800797e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	378c      	adds	r7, #140	; 0x8c
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	080089ed 	.word	0x080089ed
 80079c4:	0800868d 	.word	0x0800868d
 80079c8:	080084d5 	.word	0x080084d5
 80079cc:	0800831d 	.word	0x0800831d

080079d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b096      	sub	sp, #88	; 0x58
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	88fa      	ldrh	r2, [r7, #6]
 80079e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2222      	movs	r2, #34	; 0x22
 80079f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d02d      	beq.n	8007a62 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a0c:	4a40      	ldr	r2, [pc, #256]	; (8007b10 <UART_Start_Receive_DMA+0x140>)
 8007a0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a16:	4a3f      	ldr	r2, [pc, #252]	; (8007b14 <UART_Start_Receive_DMA+0x144>)
 8007a18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a20:	4a3d      	ldr	r2, [pc, #244]	; (8007b18 <UART_Start_Receive_DMA+0x148>)
 8007a22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3324      	adds	r3, #36	; 0x24
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a40:	461a      	mov	r2, r3
 8007a42:	88fb      	ldrh	r3, [r7, #6]
 8007a44:	f7fb fdf6 	bl	8003634 <HAL_DMA_Start_IT>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2210      	movs	r2, #16
 8007a52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e051      	b.n	8007b06 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d018      	beq.n	8007a9c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a88:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a8a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e6      	bne.n	8007a6a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	f043 0301 	orr.w	r3, r3, #1
 8007ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3308      	adds	r3, #8
 8007aba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007abc:	637a      	str	r2, [r7, #52]	; 0x34
 8007abe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e5      	bne.n	8007a9c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007af0:	623a      	str	r2, [r7, #32]
 8007af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69f9      	ldr	r1, [r7, #28]
 8007af6:	6a3a      	ldr	r2, [r7, #32]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3758      	adds	r7, #88	; 0x58
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	08007d21 	.word	0x08007d21
 8007b14:	08007e4d 	.word	0x08007e4d
 8007b18:	08007e8b 	.word	0x08007e8b

08007b1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b08f      	sub	sp, #60	; 0x3c
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	e853 3f00 	ldrex	r3, [r3]
 8007b30:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b44:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1e6      	bne.n	8007b24 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3308      	adds	r3, #8
 8007b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b76:	61ba      	str	r2, [r7, #24]
 8007b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	6979      	ldr	r1, [r7, #20]
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	613b      	str	r3, [r7, #16]
   return(result);
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e5      	bne.n	8007b56 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007b92:	bf00      	nop
 8007b94:	373c      	adds	r7, #60	; 0x3c
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b095      	sub	sp, #84	; 0x54
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8007bc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e6      	bne.n	8007ba6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3308      	adds	r3, #8
 8007bde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bee:	f023 0301 	bic.w	r3, r3, #1
 8007bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e3      	bne.n	8007bd8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d118      	bne.n	8007c4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f023 0310 	bic.w	r3, r3, #16
 8007c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c36:	61bb      	str	r3, [r7, #24]
 8007c38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6979      	ldr	r1, [r7, #20]
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	613b      	str	r3, [r7, #16]
   return(result);
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e6      	bne.n	8007c18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c5e:	bf00      	nop
 8007c60:	3754      	adds	r7, #84	; 0x54
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b090      	sub	sp, #64	; 0x40
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d137      	bne.n	8007cf6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3308      	adds	r3, #8
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3308      	adds	r3, #8
 8007cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cae:	633a      	str	r2, [r7, #48]	; 0x30
 8007cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e5      	bne.n	8007c8e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce0:	61fb      	str	r3, [r7, #28]
 8007ce2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	69b9      	ldr	r1, [r7, #24]
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	617b      	str	r3, [r7, #20]
   return(result);
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e6      	bne.n	8007cc2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cf4:	e002      	b.n	8007cfc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007cf6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007cf8:	f006 fd2c 	bl	800e754 <HAL_UART_TxCpltCallback>
}
 8007cfc:	bf00      	nop
 8007cfe:	3740      	adds	r7, #64	; 0x40
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff f882 	bl	8006e1c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b09c      	sub	sp, #112	; 0x70
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d171      	bne.n	8007e20 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d62:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e6      	bne.n	8007d44 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d88:	f023 0301 	bic.w	r3, r3, #1
 8007d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d96:	647a      	str	r2, [r7, #68]	; 0x44
 8007d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e5      	bne.n	8007d76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3308      	adds	r3, #8
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8007dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dca:	633a      	str	r2, [r7, #48]	; 0x30
 8007dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e5      	bne.n	8007daa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de0:	2220      	movs	r2, #32
 8007de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d118      	bne.n	8007e20 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 0310 	bic.w	r3, r3, #16
 8007e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	69b9      	ldr	r1, [r7, #24]
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	617b      	str	r3, [r7, #20]
   return(result);
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e6      	bne.n	8007dee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e22:	2200      	movs	r2, #0
 8007e24:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d107      	bne.n	8007e3e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e34:	4619      	mov	r1, r3
 8007e36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e38:	f006 fd8e 	bl	800e958 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e3c:	e002      	b.n	8007e44 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007e3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e40:	f006 fcc6 	bl	800e7d0 <HAL_UART_RxCpltCallback>
}
 8007e44:	bf00      	nop
 8007e46:	3770      	adds	r7, #112	; 0x70
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d109      	bne.n	8007e7c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e6e:	085b      	lsrs	r3, r3, #1
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	4619      	mov	r1, r3
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f006 fd6f 	bl	800e958 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e7a:	e002      	b.n	8007e82 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7fe ffd7 	bl	8006e30 <HAL_UART_RxHalfCpltCallback>
}
 8007e82:	bf00      	nop
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b086      	sub	sp, #24
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb2:	2b80      	cmp	r3, #128	; 0x80
 8007eb4:	d109      	bne.n	8007eca <UART_DMAError+0x40>
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	2b21      	cmp	r3, #33	; 0x21
 8007eba:	d106      	bne.n	8007eca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007ec4:	6978      	ldr	r0, [r7, #20]
 8007ec6:	f7ff fe29 	bl	8007b1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed4:	2b40      	cmp	r3, #64	; 0x40
 8007ed6:	d109      	bne.n	8007eec <UART_DMAError+0x62>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b22      	cmp	r3, #34	; 0x22
 8007edc:	d106      	bne.n	8007eec <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007ee6:	6978      	ldr	r0, [r7, #20]
 8007ee8:	f7ff fe59 	bl	8007b9e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef2:	f043 0210 	orr.w	r2, r3, #16
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007efc:	6978      	ldr	r0, [r7, #20]
 8007efe:	f006 fcd1 	bl	800e8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f02:	bf00      	nop
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f006 fcbb 	bl	800e8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	220f      	movs	r2, #15
 8007f52:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699a      	ldr	r2, [r3, #24]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0208 	orr.w	r2, r2, #8
 8007f62:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f7fe ff66 	bl	8006e44 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f78:	bf00      	nop
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b08f      	sub	sp, #60	; 0x3c
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8e:	2b21      	cmp	r3, #33	; 0x21
 8007f90:	d14c      	bne.n	800802c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d132      	bne.n	8008004 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fbe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e6      	bne.n	8007f9e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	61bb      	str	r3, [r7, #24]
 8007ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6979      	ldr	r1, [r7, #20]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e6      	bne.n	8007fd0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008002:	e013      	b.n	800802c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008008:	781a      	ldrb	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800802c:	bf00      	nop
 800802e:	373c      	adds	r7, #60	; 0x3c
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008038:	b480      	push	{r7}
 800803a:	b091      	sub	sp, #68	; 0x44
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008046:	2b21      	cmp	r3, #33	; 0x21
 8008048:	d151      	bne.n	80080ee <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d132      	bne.n	80080bc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	e853 3f00 	ldrex	r3, [r3]
 8008062:	623b      	str	r3, [r7, #32]
   return(result);
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800806a:	63bb      	str	r3, [r7, #56]	; 0x38
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	461a      	mov	r2, r3
 8008072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008074:	633b      	str	r3, [r7, #48]	; 0x30
 8008076:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008078:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800807a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800807c:	e841 2300 	strex	r3, r2, [r1]
 8008080:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1e6      	bne.n	8008056 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	e853 3f00 	ldrex	r3, [r3]
 8008094:	60fb      	str	r3, [r7, #12]
   return(result);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809c:	637b      	str	r3, [r7, #52]	; 0x34
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a6:	61fb      	str	r3, [r7, #28]
 80080a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	69b9      	ldr	r1, [r7, #24]
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	617b      	str	r3, [r7, #20]
   return(result);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e6      	bne.n	8008088 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80080ba:	e018      	b.n	80080ee <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80080c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080d0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d6:	1c9a      	adds	r2, r3, #2
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80080ee:	bf00      	nop
 80080f0:	3744      	adds	r7, #68	; 0x44
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b091      	sub	sp, #68	; 0x44
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008108:	2b21      	cmp	r3, #33	; 0x21
 800810a:	d160      	bne.n	80081ce <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008112:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008114:	e057      	b.n	80081c6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d133      	bne.n	800818a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3308      	adds	r3, #8
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	e853 3f00 	ldrex	r3, [r3]
 8008130:	623b      	str	r3, [r7, #32]
   return(result);
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008138:	63bb      	str	r3, [r7, #56]	; 0x38
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3308      	adds	r3, #8
 8008140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008142:	633a      	str	r2, [r7, #48]	; 0x30
 8008144:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800814a:	e841 2300 	strex	r3, r2, [r1]
 800814e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1e5      	bne.n	8008122 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	60fb      	str	r3, [r7, #12]
   return(result);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800816a:	637b      	str	r3, [r7, #52]	; 0x34
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008174:	61fb      	str	r3, [r7, #28]
 8008176:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	69b9      	ldr	r1, [r7, #24]
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	617b      	str	r3, [r7, #20]
   return(result);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e6      	bne.n	8008156 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008188:	e021      	b.n	80081ce <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008194:	2b00      	cmp	r3, #0
 8008196:	d013      	beq.n	80081c0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800819c:	781a      	ldrb	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081c2:	3b01      	subs	r3, #1
 80081c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1a4      	bne.n	8008116 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80081cc:	e7ff      	b.n	80081ce <UART_TxISR_8BIT_FIFOEN+0xd4>
 80081ce:	bf00      	nop
 80081d0:	3744      	adds	r7, #68	; 0x44
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081da:	b480      	push	{r7}
 80081dc:	b091      	sub	sp, #68	; 0x44
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e8:	2b21      	cmp	r3, #33	; 0x21
 80081ea:	d165      	bne.n	80082b8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081f4:	e05c      	b.n	80082b0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d133      	bne.n	800826a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3308      	adds	r3, #8
 8008208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	61fb      	str	r3, [r7, #28]
   return(result);
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3308      	adds	r3, #8
 8008220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008224:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e5      	bne.n	8008202 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	e853 3f00 	ldrex	r3, [r3]
 8008242:	60bb      	str	r3, [r7, #8]
   return(result);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800824a:	633b      	str	r3, [r7, #48]	; 0x30
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	461a      	mov	r2, r3
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	61bb      	str	r3, [r7, #24]
 8008256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008258:	6979      	ldr	r1, [r7, #20]
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	e841 2300 	strex	r3, r2, [r1]
 8008260:	613b      	str	r3, [r7, #16]
   return(result);
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1e6      	bne.n	8008236 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008268:	e026      	b.n	80082b8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008274:	2b00      	cmp	r3, #0
 8008276:	d018      	beq.n	80082aa <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800828c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008292:	1c9a      	adds	r2, r3, #2
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80082aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80082ac:	3b01      	subs	r3, #1
 80082ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80082b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d19f      	bne.n	80081f6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80082b6:	e7ff      	b.n	80082b8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80082b8:	bf00      	nop
 80082ba:	3744      	adds	r7, #68	; 0x44
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	e853 3f00 	ldrex	r3, [r3]
 80082d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082e0:	61fb      	str	r3, [r7, #28]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	61bb      	str	r3, [r7, #24]
 80082ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ee:	6979      	ldr	r1, [r7, #20]
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	613b      	str	r3, [r7, #16]
   return(result);
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1e6      	bne.n	80082cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2220      	movs	r2, #32
 8008302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f006 fa21 	bl	800e754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008312:	bf00      	nop
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b09c      	sub	sp, #112	; 0x70
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800832a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008334:	2b22      	cmp	r3, #34	; 0x22
 8008336:	f040 80be 	bne.w	80084b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008344:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008348:	b2d9      	uxtb	r1, r3
 800834a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800834e:	b2da      	uxtb	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008354:	400a      	ands	r2, r1
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800836a:	b29b      	uxth	r3, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	b29a      	uxth	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800837c:	b29b      	uxth	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	f040 80a1 	bne.w	80084c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008398:	66bb      	str	r3, [r7, #104]	; 0x68
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80083a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083aa:	e841 2300 	strex	r3, r2, [r1]
 80083ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e6      	bne.n	8008384 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3308      	adds	r3, #8
 80083bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c8:	f023 0301 	bic.w	r3, r3, #1
 80083cc:	667b      	str	r3, [r7, #100]	; 0x64
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3308      	adds	r3, #8
 80083d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80083d6:	647a      	str	r2, [r7, #68]	; 0x44
 80083d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083de:	e841 2300 	strex	r3, r2, [r1]
 80083e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e5      	bne.n	80083b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a33      	ldr	r2, [pc, #204]	; (80084d0 <UART_RxISR_8BIT+0x1b4>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d01f      	beq.n	8008448 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d018      	beq.n	8008448 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	e853 3f00 	ldrex	r3, [r3]
 8008422:	623b      	str	r3, [r7, #32]
   return(result);
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800842a:	663b      	str	r3, [r7, #96]	; 0x60
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008434:	633b      	str	r3, [r7, #48]	; 0x30
 8008436:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800843a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800843c:	e841 2300 	strex	r3, r2, [r1]
 8008440:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1e6      	bne.n	8008416 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800844c:	2b01      	cmp	r3, #1
 800844e:	d12e      	bne.n	80084ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	60fb      	str	r3, [r7, #12]
   return(result);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0310 	bic.w	r3, r3, #16
 800846a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008474:	61fb      	str	r3, [r7, #28]
 8008476:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	69b9      	ldr	r1, [r7, #24]
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	617b      	str	r3, [r7, #20]
   return(result);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e6      	bne.n	8008456 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	f003 0310 	and.w	r3, r3, #16
 8008492:	2b10      	cmp	r3, #16
 8008494:	d103      	bne.n	800849e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2210      	movs	r2, #16
 800849c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f006 fa56 	bl	800e958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084ac:	e00b      	b.n	80084c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f006 f98e 	bl	800e7d0 <HAL_UART_RxCpltCallback>
}
 80084b4:	e007      	b.n	80084c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699a      	ldr	r2, [r3, #24]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f042 0208 	orr.w	r2, r2, #8
 80084c4:	619a      	str	r2, [r3, #24]
}
 80084c6:	bf00      	nop
 80084c8:	3770      	adds	r7, #112	; 0x70
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	40008000 	.word	0x40008000

080084d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b09c      	sub	sp, #112	; 0x70
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ec:	2b22      	cmp	r3, #34	; 0x22
 80084ee:	f040 80be 	bne.w	800866e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008500:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008502:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008506:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800850a:	4013      	ands	r3, r2
 800850c:	b29a      	uxth	r2, r3
 800850e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008510:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008516:	1c9a      	adds	r2, r3, #2
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008534:	b29b      	uxth	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	f040 80a1 	bne.w	800867e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008544:	e853 3f00 	ldrex	r3, [r3]
 8008548:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800854a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800854c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008550:	667b      	str	r3, [r7, #100]	; 0x64
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800855a:	657b      	str	r3, [r7, #84]	; 0x54
 800855c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e6      	bne.n	800853c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3308      	adds	r3, #8
 8008574:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	f023 0301 	bic.w	r3, r3, #1
 8008584:	663b      	str	r3, [r7, #96]	; 0x60
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3308      	adds	r3, #8
 800858c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800858e:	643a      	str	r2, [r7, #64]	; 0x40
 8008590:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008594:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e5      	bne.n	800856e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a33      	ldr	r2, [pc, #204]	; (8008688 <UART_RxISR_16BIT+0x1b4>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d01f      	beq.n	8008600 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d018      	beq.n	8008600 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	61fb      	str	r3, [r7, #28]
   return(result);
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e6      	bne.n	80085ce <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008604:	2b01      	cmp	r3, #1
 8008606:	d12e      	bne.n	8008666 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	e853 3f00 	ldrex	r3, [r3]
 800861a:	60bb      	str	r3, [r7, #8]
   return(result);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f023 0310 	bic.w	r3, r3, #16
 8008622:	65bb      	str	r3, [r7, #88]	; 0x58
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800862c:	61bb      	str	r3, [r7, #24]
 800862e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	6979      	ldr	r1, [r7, #20]
 8008632:	69ba      	ldr	r2, [r7, #24]
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	613b      	str	r3, [r7, #16]
   return(result);
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e6      	bne.n	800860e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	2b10      	cmp	r3, #16
 800864c:	d103      	bne.n	8008656 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2210      	movs	r2, #16
 8008654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f006 f97a 	bl	800e958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008664:	e00b      	b.n	800867e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f006 f8b2 	bl	800e7d0 <HAL_UART_RxCpltCallback>
}
 800866c:	e007      	b.n	800867e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	699a      	ldr	r2, [r3, #24]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f042 0208 	orr.w	r2, r2, #8
 800867c:	619a      	str	r2, [r3, #24]
}
 800867e:	bf00      	nop
 8008680:	3770      	adds	r7, #112	; 0x70
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	40008000 	.word	0x40008000

0800868c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b0ac      	sub	sp, #176	; 0xb0
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800869a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086c2:	2b22      	cmp	r3, #34	; 0x22
 80086c4:	f040 8182 	bne.w	80089cc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086ce:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086d2:	e125      	b.n	8008920 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80086e2:	b2d9      	uxtb	r1, r3
 80086e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ee:	400a      	ands	r2, r1
 80086f0:	b2d2      	uxtb	r2, r2
 80086f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008704:	b29b      	uxth	r3, r3
 8008706:	3b01      	subs	r3, #1
 8008708:	b29a      	uxth	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800871a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800871e:	f003 0307 	and.w	r3, r3, #7
 8008722:	2b00      	cmp	r3, #0
 8008724:	d053      	beq.n	80087ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d011      	beq.n	8008756 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00b      	beq.n	8008756 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2201      	movs	r2, #1
 8008744:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874c:	f043 0201 	orr.w	r2, r3, #1
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d011      	beq.n	8008786 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00b      	beq.n	8008786 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2202      	movs	r2, #2
 8008774:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800877c:	f043 0204 	orr.w	r2, r3, #4
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800878a:	f003 0304 	and.w	r3, r3, #4
 800878e:	2b00      	cmp	r3, #0
 8008790:	d011      	beq.n	80087b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00b      	beq.n	80087b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2204      	movs	r2, #4
 80087a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ac:	f043 0202 	orr.w	r2, r3, #2
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d006      	beq.n	80087ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f006 f86f 	bl	800e8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f040 80a2 	bne.w	8008920 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80087ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008800:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008804:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800880c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e4      	bne.n	80087dc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3308      	adds	r3, #8
 8008818:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008828:	f023 0301 	bic.w	r3, r3, #1
 800882c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3308      	adds	r3, #8
 8008836:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800883a:	66ba      	str	r2, [r7, #104]	; 0x68
 800883c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008840:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1e1      	bne.n	8008812 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2220      	movs	r2, #32
 8008852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a5f      	ldr	r2, [pc, #380]	; (80089e4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d021      	beq.n	80088b0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d01a      	beq.n	80088b0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008882:	e853 3f00 	ldrex	r3, [r3]
 8008886:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800888e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800889c:	657b      	str	r3, [r7, #84]	; 0x54
 800889e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e4      	bne.n	800887a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d130      	bne.n	800891a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	f023 0310 	bic.w	r3, r3, #16
 80088d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088e0:	643b      	str	r3, [r7, #64]	; 0x40
 80088e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e4      	bne.n	80088be <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	f003 0310 	and.w	r3, r3, #16
 80088fe:	2b10      	cmp	r3, #16
 8008900:	d103      	bne.n	800890a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2210      	movs	r2, #16
 8008908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f006 f820 	bl	800e958 <HAL_UARTEx_RxEventCallback>
 8008918:	e002      	b.n	8008920 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f005 ff58 	bl	800e7d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008920:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008924:	2b00      	cmp	r3, #0
 8008926:	d006      	beq.n	8008936 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800892c:	f003 0320 	and.w	r3, r3, #32
 8008930:	2b00      	cmp	r3, #0
 8008932:	f47f aecf 	bne.w	80086d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800893c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008940:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008944:	2b00      	cmp	r3, #0
 8008946:	d049      	beq.n	80089dc <UART_RxISR_8BIT_FIFOEN+0x350>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800894e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008952:	429a      	cmp	r2, r3
 8008954:	d242      	bcs.n	80089dc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3308      	adds	r3, #8
 800895c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	61fb      	str	r3, [r7, #28]
   return(result);
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800896c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3308      	adds	r3, #8
 8008976:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800897a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800897c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e3      	bne.n	8008956 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a15      	ldr	r2, [pc, #84]	; (80089e8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008992:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	e853 3f00 	ldrex	r3, [r3]
 80089a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f043 0320 	orr.w	r3, r3, #32
 80089a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089b6:	61bb      	str	r3, [r7, #24]
 80089b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	6979      	ldr	r1, [r7, #20]
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	613b      	str	r3, [r7, #16]
   return(result);
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e4      	bne.n	8008994 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089ca:	e007      	b.n	80089dc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0208 	orr.w	r2, r2, #8
 80089da:	619a      	str	r2, [r3, #24]
}
 80089dc:	bf00      	nop
 80089de:	37b0      	adds	r7, #176	; 0xb0
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	40008000 	.word	0x40008000
 80089e8:	0800831d 	.word	0x0800831d

080089ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b0ae      	sub	sp, #184	; 0xb8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089fa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a22:	2b22      	cmp	r3, #34	; 0x22
 8008a24:	f040 8186 	bne.w	8008d34 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a2e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a32:	e129      	b.n	8008c88 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a46:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008a4a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008a4e:	4013      	ands	r3, r2
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5c:	1c9a      	adds	r2, r3, #2
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d053      	beq.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d011      	beq.n	8008aba <UART_RxISR_16BIT_FIFOEN+0xce>
 8008a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00b      	beq.n	8008aba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ab0:	f043 0201 	orr.w	r2, r3, #1
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d011      	beq.n	8008aea <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008ac6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00b      	beq.n	8008aea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae0:	f043 0204 	orr.w	r2, r3, #4
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008aea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008aee:	f003 0304 	and.w	r3, r3, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d011      	beq.n	8008b1a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00b      	beq.n	8008b1a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2204      	movs	r2, #4
 8008b08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b10:	f043 0202 	orr.w	r2, r3, #2
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d006      	beq.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f005 febd 	bl	800e8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f040 80a4 	bne.w	8008c88 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b66:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e2      	bne.n	8008b40 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3308      	adds	r3, #8
 8008b80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b90:	f023 0301 	bic.w	r3, r3, #1
 8008b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3308      	adds	r3, #8
 8008b9e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008ba2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ba4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ba8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e1      	bne.n	8008b7a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a5f      	ldr	r2, [pc, #380]	; (8008d4c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d021      	beq.n	8008c18 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01a      	beq.n	8008c18 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c04:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c0c:	e841 2300 	strex	r3, r2, [r1]
 8008c10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e4      	bne.n	8008be2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d130      	bne.n	8008c82 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	e853 3f00 	ldrex	r3, [r3]
 8008c32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c36:	f023 0310 	bic.w	r3, r3, #16
 8008c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c48:	647b      	str	r3, [r7, #68]	; 0x44
 8008c4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e4      	bne.n	8008c26 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	f003 0310 	and.w	r3, r3, #16
 8008c66:	2b10      	cmp	r3, #16
 8008c68:	d103      	bne.n	8008c72 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2210      	movs	r2, #16
 8008c70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f005 fe6c 	bl	800e958 <HAL_UARTEx_RxEventCallback>
 8008c80:	e002      	b.n	8008c88 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f005 fda4 	bl	800e7d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c88:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d006      	beq.n	8008c9e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008c90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c94:	f003 0320 	and.w	r3, r3, #32
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f47f aecb 	bne.w	8008a34 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ca4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ca8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d049      	beq.n	8008d44 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cb6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d242      	bcs.n	8008d44 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008ce2:	633a      	str	r2, [r7, #48]	; 0x30
 8008ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e3      	bne.n	8008cbe <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a15      	ldr	r2, [pc, #84]	; (8008d50 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008cfa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f043 0320 	orr.w	r3, r3, #32
 8008d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	69b9      	ldr	r1, [r7, #24]
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e4      	bne.n	8008cfc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d32:	e007      	b.n	8008d44 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	699a      	ldr	r2, [r3, #24]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f042 0208 	orr.w	r2, r2, #8
 8008d42:	619a      	str	r2, [r3, #24]
}
 8008d44:	bf00      	nop
 8008d46:	37b8      	adds	r7, #184	; 0xb8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	40008000 	.word	0x40008000
 8008d50:	080084d5 	.word	0x080084d5

08008d54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d101      	bne.n	8008da6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008da2:	2302      	movs	r3, #2
 8008da4:	e027      	b.n	8008df6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2224      	movs	r2, #36	; 0x24
 8008db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 0201 	bic.w	r2, r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008dd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2220      	movs	r2, #32
 8008de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d101      	bne.n	8008e1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e16:	2302      	movs	r3, #2
 8008e18:	e02d      	b.n	8008e76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2224      	movs	r2, #36	; 0x24
 8008e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 0201 	bic.w	r2, r2, #1
 8008e40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f8a4 	bl	8008fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d101      	bne.n	8008e96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e92:	2302      	movs	r3, #2
 8008e94:	e02d      	b.n	8008ef2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2224      	movs	r2, #36	; 0x24
 8008ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f022 0201 	bic.w	r2, r2, #1
 8008ebc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f866 	bl	8008fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b08c      	sub	sp, #48	; 0x30
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	4613      	mov	r3, r2
 8008f06:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	d142      	bne.n	8008f98 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008f18:	88fb      	ldrh	r3, [r7, #6]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e03b      	b.n	8008f9a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2201      	movs	r2, #1
 8008f26:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008f2e:	88fb      	ldrh	r3, [r7, #6]
 8008f30:	461a      	mov	r2, r3
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7fe fd4b 	bl	80079d0 <UART_Start_Receive_DMA>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008f40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d124      	bne.n	8008f92 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d11d      	bne.n	8008f8c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2210      	movs	r2, #16
 8008f56:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	617b      	str	r3, [r7, #20]
   return(result);
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f043 0310 	orr.w	r3, r3, #16
 8008f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
 8008f78:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6a39      	ldr	r1, [r7, #32]
 8008f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e6      	bne.n	8008f58 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008f8a:	e002      	b.n	8008f92 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008f92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f96:	e000      	b.n	8008f9a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008f98:	2302      	movs	r3, #2
  }
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3730      	adds	r7, #48	; 0x30
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d108      	bne.n	8008fc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fc4:	e031      	b.n	800902a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fc6:	2308      	movs	r3, #8
 8008fc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fca:	2308      	movs	r3, #8
 8008fcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	0e5b      	lsrs	r3, r3, #25
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	0f5b      	lsrs	r3, r3, #29
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	7b3a      	ldrb	r2, [r7, #12]
 8008ff2:	4911      	ldr	r1, [pc, #68]	; (8009038 <UARTEx_SetNbDataToProcess+0x94>)
 8008ff4:	5c8a      	ldrb	r2, [r1, r2]
 8008ff6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ffa:	7b3a      	ldrb	r2, [r7, #12]
 8008ffc:	490f      	ldr	r1, [pc, #60]	; (800903c <UARTEx_SetNbDataToProcess+0x98>)
 8008ffe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009000:	fb93 f3f2 	sdiv	r3, r3, r2
 8009004:	b29a      	uxth	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	7b7a      	ldrb	r2, [r7, #13]
 8009010:	4909      	ldr	r1, [pc, #36]	; (8009038 <UARTEx_SetNbDataToProcess+0x94>)
 8009012:	5c8a      	ldrb	r2, [r1, r2]
 8009014:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009018:	7b7a      	ldrb	r2, [r7, #13]
 800901a:	4908      	ldr	r1, [pc, #32]	; (800903c <UARTEx_SetNbDataToProcess+0x98>)
 800901c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800901e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009022:	b29a      	uxth	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	0800ecfc 	.word	0x0800ecfc
 800903c:	0800ed04 	.word	0x0800ed04

08009040 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009048:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800904c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009054:	b29a      	uxth	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	b29b      	uxth	r3, r3
 800905a:	43db      	mvns	r3, r3
 800905c:	b29b      	uxth	r3, r3
 800905e:	4013      	ands	r3, r2
 8009060:	b29a      	uxth	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009076:	b084      	sub	sp, #16
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	f107 0014 	add.w	r0, r7, #20
 8009084:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	b004      	add	sp, #16
 80090b6:	4770      	bx	lr

080090b8 <__NVIC_SetPriority>:
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	db0a      	blt.n	80090e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	490c      	ldr	r1, [pc, #48]	; (8009104 <__NVIC_SetPriority+0x4c>)
 80090d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d6:	0112      	lsls	r2, r2, #4
 80090d8:	b2d2      	uxtb	r2, r2
 80090da:	440b      	add	r3, r1
 80090dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80090e0:	e00a      	b.n	80090f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	4908      	ldr	r1, [pc, #32]	; (8009108 <__NVIC_SetPriority+0x50>)
 80090e8:	79fb      	ldrb	r3, [r7, #7]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	3b04      	subs	r3, #4
 80090f0:	0112      	lsls	r2, r2, #4
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	440b      	add	r3, r1
 80090f6:	761a      	strb	r2, [r3, #24]
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	e000e100 	.word	0xe000e100
 8009108:	e000ed00 	.word	0xe000ed00

0800910c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800910c:	b580      	push	{r7, lr}
 800910e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009110:	4b05      	ldr	r3, [pc, #20]	; (8009128 <SysTick_Handler+0x1c>)
 8009112:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009114:	f002 fb96 	bl	800b844 <xTaskGetSchedulerState>
 8009118:	4603      	mov	r3, r0
 800911a:	2b01      	cmp	r3, #1
 800911c:	d001      	beq.n	8009122 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800911e:	f003 fceb 	bl	800caf8 <xPortSysTickHandler>
  }
}
 8009122:	bf00      	nop
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	e000e010 	.word	0xe000e010

0800912c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009130:	2100      	movs	r1, #0
 8009132:	f06f 0004 	mvn.w	r0, #4
 8009136:	f7ff ffbf 	bl	80090b8 <__NVIC_SetPriority>
#endif
}
 800913a:	bf00      	nop
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009146:	f3ef 8305 	mrs	r3, IPSR
 800914a:	603b      	str	r3, [r7, #0]
  return(result);
 800914c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009152:	f06f 0305 	mvn.w	r3, #5
 8009156:	607b      	str	r3, [r7, #4]
 8009158:	e00c      	b.n	8009174 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800915a:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <osKernelInitialize+0x44>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d105      	bne.n	800916e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009162:	4b08      	ldr	r3, [pc, #32]	; (8009184 <osKernelInitialize+0x44>)
 8009164:	2201      	movs	r2, #1
 8009166:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009168:	2300      	movs	r3, #0
 800916a:	607b      	str	r3, [r7, #4]
 800916c:	e002      	b.n	8009174 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800916e:	f04f 33ff 	mov.w	r3, #4294967295
 8009172:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009174:	687b      	ldr	r3, [r7, #4]
}
 8009176:	4618      	mov	r0, r3
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	20000760 	.word	0x20000760

08009188 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800918e:	f3ef 8305 	mrs	r3, IPSR
 8009192:	603b      	str	r3, [r7, #0]
  return(result);
 8009194:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800919a:	f06f 0305 	mvn.w	r3, #5
 800919e:	607b      	str	r3, [r7, #4]
 80091a0:	e010      	b.n	80091c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80091a2:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <osKernelStart+0x48>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d109      	bne.n	80091be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80091aa:	f7ff ffbf 	bl	800912c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80091ae:	4b08      	ldr	r3, [pc, #32]	; (80091d0 <osKernelStart+0x48>)
 80091b0:	2202      	movs	r2, #2
 80091b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80091b4:	f001 fe4e 	bl	800ae54 <vTaskStartScheduler>
      stat = osOK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	607b      	str	r3, [r7, #4]
 80091bc:	e002      	b.n	80091c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80091be:	f04f 33ff 	mov.w	r3, #4294967295
 80091c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80091c4:	687b      	ldr	r3, [r7, #4]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20000760 	.word	0x20000760

080091d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b08e      	sub	sp, #56	; 0x38
 80091d8:	af04      	add	r7, sp, #16
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091e4:	f3ef 8305 	mrs	r3, IPSR
 80091e8:	617b      	str	r3, [r7, #20]
  return(result);
 80091ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d17e      	bne.n	80092ee <osThreadNew+0x11a>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d07b      	beq.n	80092ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091f6:	2380      	movs	r3, #128	; 0x80
 80091f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091fa:	2318      	movs	r3, #24
 80091fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091fe:	2300      	movs	r3, #0
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009202:	f04f 33ff 	mov.w	r3, #4294967295
 8009206:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d045      	beq.n	800929a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <osThreadNew+0x48>
        name = attr->name;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d008      	beq.n	8009242 <osThreadNew+0x6e>
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	2b38      	cmp	r3, #56	; 0x38
 8009234:	d805      	bhi.n	8009242 <osThreadNew+0x6e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <osThreadNew+0x72>
        return (NULL);
 8009242:	2300      	movs	r3, #0
 8009244:	e054      	b.n	80092f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	089b      	lsrs	r3, r3, #2
 8009254:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00e      	beq.n	800927c <osThreadNew+0xa8>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	2b5b      	cmp	r3, #91	; 0x5b
 8009264:	d90a      	bls.n	800927c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800926a:	2b00      	cmp	r3, #0
 800926c:	d006      	beq.n	800927c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <osThreadNew+0xa8>
        mem = 1;
 8009276:	2301      	movs	r3, #1
 8009278:	61bb      	str	r3, [r7, #24]
 800927a:	e010      	b.n	800929e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10c      	bne.n	800929e <osThreadNew+0xca>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d108      	bne.n	800929e <osThreadNew+0xca>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d104      	bne.n	800929e <osThreadNew+0xca>
          mem = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	61bb      	str	r3, [r7, #24]
 8009298:	e001      	b.n	800929e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d110      	bne.n	80092c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092ac:	9202      	str	r2, [sp, #8]
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	6a3a      	ldr	r2, [r7, #32]
 80092b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f001 fbf4 	bl	800aaa8 <xTaskCreateStatic>
 80092c0:	4603      	mov	r3, r0
 80092c2:	613b      	str	r3, [r7, #16]
 80092c4:	e013      	b.n	80092ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d110      	bne.n	80092ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092cc:	6a3b      	ldr	r3, [r7, #32]
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	f107 0310 	add.w	r3, r7, #16
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f001 fc3f 	bl	800ab62 <xTaskCreate>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d001      	beq.n	80092ee <osThreadNew+0x11a>
            hTask = NULL;
 80092ea:	2300      	movs	r3, #0
 80092ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092ee:	693b      	ldr	r3, [r7, #16]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3728      	adds	r7, #40	; 0x28
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009300:	f3ef 8305 	mrs	r3, IPSR
 8009304:	60bb      	str	r3, [r7, #8]
  return(result);
 8009306:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <osDelay+0x1c>
    stat = osErrorISR;
 800930c:	f06f 0305 	mvn.w	r3, #5
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	e007      	b.n	8009324 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009314:	2300      	movs	r3, #0
 8009316:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <osDelay+0x2c>
      vTaskDelay(ticks);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 fd64 	bl	800adec <vTaskDelay>
    }
  }

  return (stat);
 8009324:	68fb      	ldr	r3, [r7, #12]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800932e:	b580      	push	{r7, lr}
 8009330:	b086      	sub	sp, #24
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800933a:	f3ef 8305 	mrs	r3, IPSR
 800933e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009340:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009342:	2b00      	cmp	r3, #0
 8009344:	d12d      	bne.n	80093a2 <osEventFlagsNew+0x74>
    mem = -1;
 8009346:	f04f 33ff 	mov.w	r3, #4294967295
 800934a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d015      	beq.n	800937e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d006      	beq.n	8009368 <osEventFlagsNew+0x3a>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	2b1f      	cmp	r3, #31
 8009360:	d902      	bls.n	8009368 <osEventFlagsNew+0x3a>
        mem = 1;
 8009362:	2301      	movs	r3, #1
 8009364:	613b      	str	r3, [r7, #16]
 8009366:	e00c      	b.n	8009382 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d108      	bne.n	8009382 <osEventFlagsNew+0x54>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <osEventFlagsNew+0x54>
          mem = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	613b      	str	r3, [r7, #16]
 800937c:	e001      	b.n	8009382 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d106      	bne.n	8009396 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	4618      	mov	r0, r3
 800938e:	f000 f9e7 	bl	8009760 <xEventGroupCreateStatic>
 8009392:	6178      	str	r0, [r7, #20]
 8009394:	e005      	b.n	80093a2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d102      	bne.n	80093a2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800939c:	f000 fa17 	bl	80097ce <xEventGroupCreate>
 80093a0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80093a2:	697b      	ldr	r3, [r7, #20]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d004      	beq.n	80093ca <osEventFlagsSet+0x1e>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80093ca:	f06f 0303 	mvn.w	r3, #3
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	e028      	b.n	8009424 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093d2:	f3ef 8305 	mrs	r3, IPSR
 80093d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80093d8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d01d      	beq.n	800941a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80093de:	2300      	movs	r3, #0
 80093e0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80093e2:	f107 0308 	add.w	r3, r7, #8
 80093e6:	461a      	mov	r2, r3
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6938      	ldr	r0, [r7, #16]
 80093ec:	f000 fb92 	bl	8009b14 <xEventGroupSetBitsFromISR>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d103      	bne.n	80093fe <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80093f6:	f06f 0302 	mvn.w	r3, #2
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	e012      	b.n	8009424 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00d      	beq.n	8009424 <osEventFlagsSet+0x78>
 8009408:	4b09      	ldr	r3, [pc, #36]	; (8009430 <osEventFlagsSet+0x84>)
 800940a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	e004      	b.n	8009424 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6938      	ldr	r0, [r7, #16]
 800941e:	f000 fabf 	bl	80099a0 <xEventGroupSetBits>
 8009422:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8009424:	697b      	ldr	r3, [r7, #20]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8009434:	b580      	push	{r7, lr}
 8009436:	b08c      	sub	sp, #48	; 0x30
 8009438:	af02      	add	r7, sp, #8
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d004      	beq.n	8009456 <osEventFlagsWait+0x22>
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8009456:	f06f 0303 	mvn.w	r3, #3
 800945a:	61fb      	str	r3, [r7, #28]
 800945c:	e04b      	b.n	80094f6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800945e:	f3ef 8305 	mrs	r3, IPSR
 8009462:	617b      	str	r3, [r7, #20]
  return(result);
 8009464:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009466:	2b00      	cmp	r3, #0
 8009468:	d003      	beq.n	8009472 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800946a:	f06f 0305 	mvn.w	r3, #5
 800946e:	61fb      	str	r3, [r7, #28]
 8009470:	e041      	b.n	80094f6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800947c:	2301      	movs	r3, #1
 800947e:	627b      	str	r3, [r7, #36]	; 0x24
 8009480:	e001      	b.n	8009486 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8009482:	2300      	movs	r3, #0
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d002      	beq.n	8009496 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8009490:	2300      	movs	r3, #0
 8009492:	623b      	str	r3, [r7, #32]
 8009494:	e001      	b.n	800949a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8009496:	2301      	movs	r3, #1
 8009498:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	6a3a      	ldr	r2, [r7, #32]
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	69b8      	ldr	r0, [r7, #24]
 80094a6:	f000 f9ad 	bl	8009804 <xEventGroupWaitBits>
 80094aa:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d010      	beq.n	80094d8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	4013      	ands	r3, r2
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d019      	beq.n	80094f6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80094c8:	f06f 0301 	mvn.w	r3, #1
 80094cc:	61fb      	str	r3, [r7, #28]
 80094ce:	e012      	b.n	80094f6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80094d0:	f06f 0302 	mvn.w	r3, #2
 80094d4:	61fb      	str	r3, [r7, #28]
 80094d6:	e00e      	b.n	80094f6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	4013      	ands	r3, r2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d109      	bne.n	80094f6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d003      	beq.n	80094f0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80094e8:	f06f 0301 	mvn.w	r3, #1
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	e002      	b.n	80094f6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80094f0:	f06f 0302 	mvn.w	r3, #2
 80094f4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80094f6:	69fb      	ldr	r3, [r7, #28]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3728      	adds	r7, #40	; 0x28
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009500:	b580      	push	{r7, lr}
 8009502:	b08a      	sub	sp, #40	; 0x28
 8009504:	af02      	add	r7, sp, #8
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800950c:	2300      	movs	r3, #0
 800950e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009510:	f3ef 8305 	mrs	r3, IPSR
 8009514:	613b      	str	r3, [r7, #16]
  return(result);
 8009516:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009518:	2b00      	cmp	r3, #0
 800951a:	d175      	bne.n	8009608 <osSemaphoreNew+0x108>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d072      	beq.n	8009608 <osSemaphoreNew+0x108>
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	429a      	cmp	r2, r3
 8009528:	d86e      	bhi.n	8009608 <osSemaphoreNew+0x108>
    mem = -1;
 800952a:	f04f 33ff 	mov.w	r3, #4294967295
 800952e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d015      	beq.n	8009562 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d006      	beq.n	800954c <osSemaphoreNew+0x4c>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	2b4f      	cmp	r3, #79	; 0x4f
 8009544:	d902      	bls.n	800954c <osSemaphoreNew+0x4c>
        mem = 1;
 8009546:	2301      	movs	r3, #1
 8009548:	61bb      	str	r3, [r7, #24]
 800954a:	e00c      	b.n	8009566 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d108      	bne.n	8009566 <osSemaphoreNew+0x66>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d104      	bne.n	8009566 <osSemaphoreNew+0x66>
          mem = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	61bb      	str	r3, [r7, #24]
 8009560:	e001      	b.n	8009566 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956c:	d04c      	beq.n	8009608 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d128      	bne.n	80095c6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d10a      	bne.n	8009590 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	2203      	movs	r2, #3
 8009580:	9200      	str	r2, [sp, #0]
 8009582:	2200      	movs	r2, #0
 8009584:	2100      	movs	r1, #0
 8009586:	2001      	movs	r0, #1
 8009588:	f000 fbf4 	bl	8009d74 <xQueueGenericCreateStatic>
 800958c:	61f8      	str	r0, [r7, #28]
 800958e:	e005      	b.n	800959c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009590:	2203      	movs	r2, #3
 8009592:	2100      	movs	r1, #0
 8009594:	2001      	movs	r0, #1
 8009596:	f000 fc65 	bl	8009e64 <xQueueGenericCreate>
 800959a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d022      	beq.n	80095e8 <osSemaphoreNew+0xe8>
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01f      	beq.n	80095e8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80095a8:	2300      	movs	r3, #0
 80095aa:	2200      	movs	r2, #0
 80095ac:	2100      	movs	r1, #0
 80095ae:	69f8      	ldr	r0, [r7, #28]
 80095b0:	f000 fd20 	bl	8009ff4 <xQueueGenericSend>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d016      	beq.n	80095e8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80095ba:	69f8      	ldr	r0, [r7, #28]
 80095bc:	f001 f8a0 	bl	800a700 <vQueueDelete>
            hSemaphore = NULL;
 80095c0:	2300      	movs	r3, #0
 80095c2:	61fb      	str	r3, [r7, #28]
 80095c4:	e010      	b.n	80095e8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d108      	bne.n	80095de <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	461a      	mov	r2, r3
 80095d2:	68b9      	ldr	r1, [r7, #8]
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 fca2 	bl	8009f1e <xQueueCreateCountingSemaphoreStatic>
 80095da:	61f8      	str	r0, [r7, #28]
 80095dc:	e004      	b.n	80095e8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80095de:	68b9      	ldr	r1, [r7, #8]
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 fcd3 	bl	8009f8c <xQueueCreateCountingSemaphore>
 80095e6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00c      	beq.n	8009608 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <osSemaphoreNew+0xfc>
          name = attr->name;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	617b      	str	r3, [r7, #20]
 80095fa:	e001      	b.n	8009600 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80095fc:	2300      	movs	r3, #0
 80095fe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009600:	6979      	ldr	r1, [r7, #20]
 8009602:	69f8      	ldr	r0, [r7, #28]
 8009604:	f001 f9c8 	bl	800a998 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009608:	69fb      	ldr	r3, [r7, #28]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3720      	adds	r7, #32
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009612:	b580      	push	{r7, lr}
 8009614:	b08a      	sub	sp, #40	; 0x28
 8009616:	af02      	add	r7, sp, #8
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009622:	f3ef 8305 	mrs	r3, IPSR
 8009626:	613b      	str	r3, [r7, #16]
  return(result);
 8009628:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800962a:	2b00      	cmp	r3, #0
 800962c:	d15f      	bne.n	80096ee <osMessageQueueNew+0xdc>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d05c      	beq.n	80096ee <osMessageQueueNew+0xdc>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d059      	beq.n	80096ee <osMessageQueueNew+0xdc>
    mem = -1;
 800963a:	f04f 33ff 	mov.w	r3, #4294967295
 800963e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d029      	beq.n	800969a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d012      	beq.n	8009674 <osMessageQueueNew+0x62>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	2b4f      	cmp	r3, #79	; 0x4f
 8009654:	d90e      	bls.n	8009674 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	695a      	ldr	r2, [r3, #20]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	fb01 f303 	mul.w	r3, r1, r3
 800966a:	429a      	cmp	r2, r3
 800966c:	d302      	bcc.n	8009674 <osMessageQueueNew+0x62>
        mem = 1;
 800966e:	2301      	movs	r3, #1
 8009670:	61bb      	str	r3, [r7, #24]
 8009672:	e014      	b.n	800969e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d110      	bne.n	800969e <osMessageQueueNew+0x8c>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10c      	bne.n	800969e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009688:	2b00      	cmp	r3, #0
 800968a:	d108      	bne.n	800969e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d104      	bne.n	800969e <osMessageQueueNew+0x8c>
          mem = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	61bb      	str	r3, [r7, #24]
 8009698:	e001      	b.n	800969e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800969a:	2300      	movs	r3, #0
 800969c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d10b      	bne.n	80096bc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691a      	ldr	r2, [r3, #16]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	2100      	movs	r1, #0
 80096ae:	9100      	str	r1, [sp, #0]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 fb5e 	bl	8009d74 <xQueueGenericCreateStatic>
 80096b8:	61f8      	str	r0, [r7, #28]
 80096ba:	e008      	b.n	80096ce <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d105      	bne.n	80096ce <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80096c2:	2200      	movs	r2, #0
 80096c4:	68b9      	ldr	r1, [r7, #8]
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 fbcc 	bl	8009e64 <xQueueGenericCreate>
 80096cc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00c      	beq.n	80096ee <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d003      	beq.n	80096e2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	617b      	str	r3, [r7, #20]
 80096e0:	e001      	b.n	80096e6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80096e6:	6979      	ldr	r1, [r7, #20]
 80096e8:	69f8      	ldr	r0, [r7, #28]
 80096ea:	f001 f955 	bl	800a998 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80096ee:	69fb      	ldr	r3, [r7, #28]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3720      	adds	r7, #32
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4a07      	ldr	r2, [pc, #28]	; (8009724 <vApplicationGetIdleTaskMemory+0x2c>)
 8009708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	4a06      	ldr	r2, [pc, #24]	; (8009728 <vApplicationGetIdleTaskMemory+0x30>)
 800970e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2280      	movs	r2, #128	; 0x80
 8009714:	601a      	str	r2, [r3, #0]
}
 8009716:	bf00      	nop
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20000764 	.word	0x20000764
 8009728:	200007c0 	.word	0x200007c0

0800972c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4a07      	ldr	r2, [pc, #28]	; (8009758 <vApplicationGetTimerTaskMemory+0x2c>)
 800973c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	4a06      	ldr	r2, [pc, #24]	; (800975c <vApplicationGetTimerTaskMemory+0x30>)
 8009742:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800974a:	601a      	str	r2, [r3, #0]
}
 800974c:	bf00      	nop
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	200009c0 	.word	0x200009c0
 800975c:	20000a1c 	.word	0x20000a1c

08009760 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10a      	bne.n	8009784 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009784:	2320      	movs	r3, #32
 8009786:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b20      	cmp	r3, #32
 800978c:	d00a      	beq.n	80097a4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	60fb      	str	r3, [r7, #12]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2200      	movs	r2, #0
 80097b2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	3304      	adds	r3, #4
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 f9bf 	bl	8009b3c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2201      	movs	r2, #1
 80097c2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80097c4:	697b      	ldr	r3, [r7, #20]
	}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80097d4:	2020      	movs	r0, #32
 80097d6:	f003 fa1f 	bl	800cc18 <pvPortMalloc>
 80097da:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3304      	adds	r3, #4
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 f9a5 	bl	8009b3c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80097f8:	687b      	ldr	r3, [r7, #4]
	}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b090      	sub	sp, #64	; 0x40
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800981a:	2300      	movs	r3, #0
 800981c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <xEventGroupWaitBits+0x36>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	623b      	str	r3, [r7, #32]
}
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00a      	beq.n	800985a <xEventGroupWaitBits+0x56>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	61fb      	str	r3, [r7, #28]
}
 8009856:	bf00      	nop
 8009858:	e7fe      	b.n	8009858 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10a      	bne.n	8009876 <xEventGroupWaitBits+0x72>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	61bb      	str	r3, [r7, #24]
}
 8009872:	bf00      	nop
 8009874:	e7fe      	b.n	8009874 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009876:	f001 ffe5 	bl	800b844 <xTaskGetSchedulerState>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <xEventGroupWaitBits+0x82>
 8009880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <xEventGroupWaitBits+0x86>
 8009886:	2301      	movs	r3, #1
 8009888:	e000      	b.n	800988c <xEventGroupWaitBits+0x88>
 800988a:	2300      	movs	r3, #0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10a      	bne.n	80098a6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	617b      	str	r3, [r7, #20]
}
 80098a2:	bf00      	nop
 80098a4:	e7fe      	b.n	80098a4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80098a6:	f001 fb3b 	bl	800af20 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80098aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	68b9      	ldr	r1, [r7, #8]
 80098b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098b6:	f000 f90b 	bl	8009ad0 <prvTestWaitCondition>
 80098ba:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00e      	beq.n	80098e0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80098c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d028      	beq.n	8009922 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80098d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	43db      	mvns	r3, r3
 80098d8:	401a      	ands	r2, r3
 80098da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	e020      	b.n	8009922 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80098e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d104      	bne.n	80098f0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80098ea:	2301      	movs	r3, #1
 80098ec:	633b      	str	r3, [r7, #48]	; 0x30
 80098ee:	e018      	b.n	8009922 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80098f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098fc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800990a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800990c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990e:	1d18      	adds	r0, r3, #4
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009914:	4313      	orrs	r3, r2
 8009916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009918:	4619      	mov	r1, r3
 800991a:	f001 fd0b 	bl	800b334 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009922:	f001 fb0b 	bl	800af3c <xTaskResumeAll>
 8009926:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800992a:	2b00      	cmp	r3, #0
 800992c:	d031      	beq.n	8009992 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	2b00      	cmp	r3, #0
 8009932:	d107      	bne.n	8009944 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8009934:	4b19      	ldr	r3, [pc, #100]	; (800999c <xEventGroupWaitBits+0x198>)
 8009936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009944:	f002 f8f4 	bl	800bb30 <uxTaskResetEventItemValue>
 8009948:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800994a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800994c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d11a      	bne.n	800998a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8009954:	f003 f83e 	bl	800c9d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	68b9      	ldr	r1, [r7, #8]
 8009962:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009964:	f000 f8b4 	bl	8009ad0 <prvTestWaitCondition>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d009      	beq.n	8009982 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d006      	beq.n	8009982 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	43db      	mvns	r3, r3
 800997c:	401a      	ands	r2, r3
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009980:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8009982:	2301      	movs	r3, #1
 8009984:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8009986:	f003 f855 	bl	800ca34 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800998a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800998c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009990:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8009992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009994:	4618      	mov	r0, r3
 8009996:	3740      	adds	r7, #64	; 0x40
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	e000ed04 	.word	0xe000ed04

080099a0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08e      	sub	sp, #56	; 0x38
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80099aa:	2300      	movs	r3, #0
 80099ac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80099b2:	2300      	movs	r3, #0
 80099b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10a      	bne.n	80099d2 <xEventGroupSetBits+0x32>
	__asm volatile
 80099bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	613b      	str	r3, [r7, #16]
}
 80099ce:	bf00      	nop
 80099d0:	e7fe      	b.n	80099d0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00a      	beq.n	80099f2 <xEventGroupSetBits+0x52>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	60fb      	str	r3, [r7, #12]
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80099f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f4:	3304      	adds	r3, #4
 80099f6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	3308      	adds	r3, #8
 80099fc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80099fe:	f001 fa8f 	bl	800af20 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8009a14:	e03c      	b.n	8009a90 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8009a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8009a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009a2c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a34:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d108      	bne.n	8009a52 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	4013      	ands	r3, r2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00b      	beq.n	8009a64 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a50:	e008      	b.n	8009a64 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	4013      	ands	r3, r2
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d101      	bne.n	8009a64 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009a60:	2301      	movs	r3, #1
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8009a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d010      	beq.n	8009a8c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d003      	beq.n	8009a7c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a84:	4619      	mov	r1, r3
 8009a86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009a88:	f001 fd20 	bl	800b4cc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8009a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d1be      	bne.n	8009a16 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9e:	43db      	mvns	r3, r3
 8009aa0:	401a      	ands	r2, r3
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8009aa6:	f001 fa49 	bl	800af3c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8009aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aac:	681b      	ldr	r3, [r3, #0]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3738      	adds	r7, #56	; 0x38
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b082      	sub	sp, #8
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7ff ff6c 	bl	80099a0 <xEventGroupSetBits>
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b087      	sub	sp, #28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8009adc:	2300      	movs	r3, #0
 8009ade:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d107      	bne.n	8009af6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	4013      	ands	r3, r2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00a      	beq.n	8009b06 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009af0:	2301      	movs	r3, #1
 8009af2:	617b      	str	r3, [r7, #20]
 8009af4:	e007      	b.n	8009b06 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	4013      	ands	r3, r2
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d101      	bne.n	8009b06 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009b02:	2301      	movs	r3, #1
 8009b04:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009b06:	697b      	ldr	r3, [r7, #20]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	371c      	adds	r7, #28
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	68f9      	ldr	r1, [r7, #12]
 8009b26:	4804      	ldr	r0, [pc, #16]	; (8009b38 <xEventGroupSetBitsFromISR+0x24>)
 8009b28:	f002 fe08 	bl	800c73c <xTimerPendFunctionCallFromISR>
 8009b2c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8009b2e:	697b      	ldr	r3, [r7, #20]
	}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	08009ab7 	.word	0x08009ab7

08009b3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f103 0208 	add.w	r2, r3, #8
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f04f 32ff 	mov.w	r2, #4294967295
 8009b54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f103 0208 	add.w	r2, r3, #8
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f103 0208 	add.w	r2, r3, #8
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b8a:	bf00      	nop
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b96:	b480      	push	{r7}
 8009b98:	b085      	sub	sp, #20
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	689a      	ldr	r2, [r3, #8]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	601a      	str	r2, [r3, #0]
}
 8009bd2:	bf00      	nop
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bde:	b480      	push	{r7}
 8009be0:	b085      	sub	sp, #20
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf4:	d103      	bne.n	8009bfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	e00c      	b.n	8009c18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3308      	adds	r3, #8
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e002      	b.n	8009c0c <vListInsert+0x2e>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	60fb      	str	r3, [r7, #12]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d2f6      	bcs.n	8009c06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	601a      	str	r2, [r3, #0]
}
 8009c44:	bf00      	nop
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	6892      	ldr	r2, [r2, #8]
 8009c66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	6852      	ldr	r2, [r2, #4]
 8009c70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d103      	bne.n	8009c84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	689a      	ldr	r2, [r3, #8]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	1e5a      	subs	r2, r3, #1
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <xQueueGenericReset+0x2a>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	60bb      	str	r3, [r7, #8]
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009cce:	f002 fe81 	bl	800c9d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cda:	68f9      	ldr	r1, [r7, #12]
 8009cdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cde:	fb01 f303 	mul.w	r3, r1, r3
 8009ce2:	441a      	add	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	68f9      	ldr	r1, [r7, #12]
 8009d02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d04:	fb01 f303 	mul.w	r3, r1, r3
 8009d08:	441a      	add	r2, r3
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	22ff      	movs	r2, #255	; 0xff
 8009d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	22ff      	movs	r2, #255	; 0xff
 8009d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d114      	bne.n	8009d4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d01a      	beq.n	8009d62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3310      	adds	r3, #16
 8009d30:	4618      	mov	r0, r3
 8009d32:	f001 fb67 	bl	800b404 <xTaskRemoveFromEventList>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d012      	beq.n	8009d62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d3c:	4b0c      	ldr	r3, [pc, #48]	; (8009d70 <xQueueGenericReset+0xcc>)
 8009d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	e009      	b.n	8009d62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3310      	adds	r3, #16
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7ff fef2 	bl	8009b3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	3324      	adds	r3, #36	; 0x24
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff feed 	bl	8009b3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d62:	f002 fe67 	bl	800ca34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d66:	2301      	movs	r3, #1
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	e000ed04 	.word	0xe000ed04

08009d74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b08e      	sub	sp, #56	; 0x38
 8009d78:	af02      	add	r7, sp, #8
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10a      	bne.n	8009d9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d9a:	bf00      	nop
 8009d9c:	e7fe      	b.n	8009d9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10a      	bne.n	8009dba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <xQueueGenericCreateStatic+0x52>
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <xQueueGenericCreateStatic+0x56>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e000      	b.n	8009dcc <xQueueGenericCreateStatic+0x58>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10a      	bne.n	8009de6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	623b      	str	r3, [r7, #32]
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d102      	bne.n	8009df2 <xQueueGenericCreateStatic+0x7e>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <xQueueGenericCreateStatic+0x82>
 8009df2:	2301      	movs	r3, #1
 8009df4:	e000      	b.n	8009df8 <xQueueGenericCreateStatic+0x84>
 8009df6:	2300      	movs	r3, #0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10a      	bne.n	8009e12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	61fb      	str	r3, [r7, #28]
}
 8009e0e:	bf00      	nop
 8009e10:	e7fe      	b.n	8009e10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e12:	2350      	movs	r3, #80	; 0x50
 8009e14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b50      	cmp	r3, #80	; 0x50
 8009e1a:	d00a      	beq.n	8009e32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	61bb      	str	r3, [r7, #24]
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00d      	beq.n	8009e5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 f83f 	bl	8009ed8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3730      	adds	r7, #48	; 0x30
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08a      	sub	sp, #40	; 0x28
 8009e68:	af02      	add	r7, sp, #8
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10a      	bne.n	8009e8e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	613b      	str	r3, [r7, #16]
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	fb02 f303 	mul.w	r3, r2, r3
 8009e96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	3350      	adds	r3, #80	; 0x50
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f002 febb 	bl	800cc18 <pvPortMalloc>
 8009ea2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d011      	beq.n	8009ece <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	3350      	adds	r3, #80	; 0x50
 8009eb2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ebc:	79fa      	ldrb	r2, [r7, #7]
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	68b9      	ldr	r1, [r7, #8]
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 f805 	bl	8009ed8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ece:	69bb      	ldr	r3, [r7, #24]
	}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3720      	adds	r7, #32
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
 8009ee4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d103      	bne.n	8009ef4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	69ba      	ldr	r2, [r7, #24]
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	e002      	b.n	8009efa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f06:	2101      	movs	r1, #1
 8009f08:	69b8      	ldr	r0, [r7, #24]
 8009f0a:	f7ff fecb 	bl	8009ca4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	78fa      	ldrb	r2, [r7, #3]
 8009f12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f16:	bf00      	nop
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b08a      	sub	sp, #40	; 0x28
 8009f22:	af02      	add	r7, sp, #8
 8009f24:	60f8      	str	r0, [r7, #12]
 8009f26:	60b9      	str	r1, [r7, #8]
 8009f28:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10a      	bne.n	8009f46 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	61bb      	str	r3, [r7, #24]
}
 8009f42:	bf00      	nop
 8009f44:	e7fe      	b.n	8009f44 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d90a      	bls.n	8009f64 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	617b      	str	r3, [r7, #20]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f64:	2302      	movs	r3, #2
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f7ff ff00 	bl	8009d74 <xQueueGenericCreateStatic>
 8009f74:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f82:	69fb      	ldr	r3, [r7, #28]
	}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3720      	adds	r7, #32
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	613b      	str	r3, [r7, #16]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d90a      	bls.n	8009fd0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	60fb      	str	r3, [r7, #12]
}
 8009fcc:	bf00      	nop
 8009fce:	e7fe      	b.n	8009fce <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff ff45 	bl	8009e64 <xQueueGenericCreate>
 8009fda:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	683a      	ldr	r2, [r7, #0]
 8009fe6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009fe8:	697b      	ldr	r3, [r7, #20]
	}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3718      	adds	r7, #24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
	...

08009ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b08e      	sub	sp, #56	; 0x38
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
 800a000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a002:	2300      	movs	r3, #0
 800a004:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <xQueueGenericSend+0x32>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d103      	bne.n	800a034 <xQueueGenericSend+0x40>
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <xQueueGenericSend+0x44>
 800a034:	2301      	movs	r3, #1
 800a036:	e000      	b.n	800a03a <xQueueGenericSend+0x46>
 800a038:	2300      	movs	r3, #0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10a      	bne.n	800a054 <xQueueGenericSend+0x60>
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a050:	bf00      	nop
 800a052:	e7fe      	b.n	800a052 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	2b02      	cmp	r3, #2
 800a058:	d103      	bne.n	800a062 <xQueueGenericSend+0x6e>
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d101      	bne.n	800a066 <xQueueGenericSend+0x72>
 800a062:	2301      	movs	r3, #1
 800a064:	e000      	b.n	800a068 <xQueueGenericSend+0x74>
 800a066:	2300      	movs	r3, #0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <xQueueGenericSend+0x8e>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	623b      	str	r3, [r7, #32]
}
 800a07e:	bf00      	nop
 800a080:	e7fe      	b.n	800a080 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a082:	f001 fbdf 	bl	800b844 <xTaskGetSchedulerState>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d102      	bne.n	800a092 <xQueueGenericSend+0x9e>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <xQueueGenericSend+0xa2>
 800a092:	2301      	movs	r3, #1
 800a094:	e000      	b.n	800a098 <xQueueGenericSend+0xa4>
 800a096:	2300      	movs	r3, #0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10a      	bne.n	800a0b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	61fb      	str	r3, [r7, #28]
}
 800a0ae:	bf00      	nop
 800a0b0:	e7fe      	b.n	800a0b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0b2:	f002 fc8f 	bl	800c9d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d302      	bcc.n	800a0c8 <xQueueGenericSend+0xd4>
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d129      	bne.n	800a11c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	68b9      	ldr	r1, [r7, #8]
 800a0cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0ce:	f000 fb52 	bl	800a776 <prvCopyDataToQueue>
 800a0d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d010      	beq.n	800a0fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0de:	3324      	adds	r3, #36	; 0x24
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f001 f98f 	bl	800b404 <xTaskRemoveFromEventList>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d013      	beq.n	800a114 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0ec:	4b3f      	ldr	r3, [pc, #252]	; (800a1ec <xQueueGenericSend+0x1f8>)
 800a0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	e00a      	b.n	800a114 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a104:	4b39      	ldr	r3, [pc, #228]	; (800a1ec <xQueueGenericSend+0x1f8>)
 800a106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a114:	f002 fc8e 	bl	800ca34 <vPortExitCritical>
				return pdPASS;
 800a118:	2301      	movs	r3, #1
 800a11a:	e063      	b.n	800a1e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d103      	bne.n	800a12a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a122:	f002 fc87 	bl	800ca34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a126:	2300      	movs	r3, #0
 800a128:	e05c      	b.n	800a1e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d106      	bne.n	800a13e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a130:	f107 0314 	add.w	r3, r7, #20
 800a134:	4618      	mov	r0, r3
 800a136:	f001 fa2b 	bl	800b590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a13a:	2301      	movs	r3, #1
 800a13c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a13e:	f002 fc79 	bl	800ca34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a142:	f000 feed 	bl	800af20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a146:	f002 fc45 	bl	800c9d4 <vPortEnterCritical>
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a150:	b25b      	sxtb	r3, r3
 800a152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a156:	d103      	bne.n	800a160 <xQueueGenericSend+0x16c>
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a166:	b25b      	sxtb	r3, r3
 800a168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16c:	d103      	bne.n	800a176 <xQueueGenericSend+0x182>
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a176:	f002 fc5d 	bl	800ca34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a17a:	1d3a      	adds	r2, r7, #4
 800a17c:	f107 0314 	add.w	r3, r7, #20
 800a180:	4611      	mov	r1, r2
 800a182:	4618      	mov	r0, r3
 800a184:	f001 fa1a 	bl	800b5bc <xTaskCheckForTimeOut>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d124      	bne.n	800a1d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a18e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a190:	f000 fbe9 	bl	800a966 <prvIsQueueFull>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d018      	beq.n	800a1cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19c:	3310      	adds	r3, #16
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 f8a2 	bl	800b2ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a1a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1aa:	f000 fb74 	bl	800a896 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a1ae:	f000 fec5 	bl	800af3c <xTaskResumeAll>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f47f af7c 	bne.w	800a0b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a1ba:	4b0c      	ldr	r3, [pc, #48]	; (800a1ec <xQueueGenericSend+0x1f8>)
 800a1bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c0:	601a      	str	r2, [r3, #0]
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	e772      	b.n	800a0b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a1cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ce:	f000 fb62 	bl	800a896 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1d2:	f000 feb3 	bl	800af3c <xTaskResumeAll>
 800a1d6:	e76c      	b.n	800a0b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a1d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1da:	f000 fb5c 	bl	800a896 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1de:	f000 fead 	bl	800af3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3738      	adds	r7, #56	; 0x38
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	e000ed04 	.word	0xe000ed04

0800a1f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b090      	sub	sp, #64	; 0x40
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a21a:	bf00      	nop
 800a21c:	e7fe      	b.n	800a21c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d103      	bne.n	800a22c <xQueueGenericSendFromISR+0x3c>
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <xQueueGenericSendFromISR+0x40>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e000      	b.n	800a232 <xQueueGenericSendFromISR+0x42>
 800a230:	2300      	movs	r3, #0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10a      	bne.n	800a24c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a248:	bf00      	nop
 800a24a:	e7fe      	b.n	800a24a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d103      	bne.n	800a25a <xQueueGenericSendFromISR+0x6a>
 800a252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a256:	2b01      	cmp	r3, #1
 800a258:	d101      	bne.n	800a25e <xQueueGenericSendFromISR+0x6e>
 800a25a:	2301      	movs	r3, #1
 800a25c:	e000      	b.n	800a260 <xQueueGenericSendFromISR+0x70>
 800a25e:	2300      	movs	r3, #0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	623b      	str	r3, [r7, #32]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a27a:	f002 fc8d 	bl	800cb98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a27e:	f3ef 8211 	mrs	r2, BASEPRI
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	61fa      	str	r2, [r7, #28]
 800a294:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a296:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a298:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d302      	bcc.n	800a2ac <xQueueGenericSendFromISR+0xbc>
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d12f      	bne.n	800a30c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	68b9      	ldr	r1, [r7, #8]
 800a2c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2c2:	f000 fa58 	bl	800a776 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ce:	d112      	bne.n	800a2f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d016      	beq.n	800a306 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	3324      	adds	r3, #36	; 0x24
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f001 f891 	bl	800b404 <xTaskRemoveFromEventList>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00e      	beq.n	800a306 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00b      	beq.n	800a306 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	e007      	b.n	800a306 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	b25a      	sxtb	r2, r3
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a306:	2301      	movs	r3, #1
 800a308:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a30a:	e001      	b.n	800a310 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a30c:	2300      	movs	r3, #0
 800a30e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a312:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a31a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3740      	adds	r7, #64	; 0x40
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b08c      	sub	sp, #48	; 0x30
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a334:	2300      	movs	r3, #0
 800a336:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10a      	bne.n	800a358 <xQueueReceive+0x30>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	623b      	str	r3, [r7, #32]
}
 800a354:	bf00      	nop
 800a356:	e7fe      	b.n	800a356 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d103      	bne.n	800a366 <xQueueReceive+0x3e>
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <xQueueReceive+0x42>
 800a366:	2301      	movs	r3, #1
 800a368:	e000      	b.n	800a36c <xQueueReceive+0x44>
 800a36a:	2300      	movs	r3, #0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10a      	bne.n	800a386 <xQueueReceive+0x5e>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	61fb      	str	r3, [r7, #28]
}
 800a382:	bf00      	nop
 800a384:	e7fe      	b.n	800a384 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a386:	f001 fa5d 	bl	800b844 <xTaskGetSchedulerState>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d102      	bne.n	800a396 <xQueueReceive+0x6e>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <xQueueReceive+0x72>
 800a396:	2301      	movs	r3, #1
 800a398:	e000      	b.n	800a39c <xQueueReceive+0x74>
 800a39a:	2300      	movs	r3, #0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10a      	bne.n	800a3b6 <xQueueReceive+0x8e>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	61bb      	str	r3, [r7, #24]
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3b6:	f002 fb0d 	bl	800c9d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d01f      	beq.n	800a406 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3c6:	68b9      	ldr	r1, [r7, #8]
 800a3c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ca:	f000 fa3e 	bl	800a84a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	1e5a      	subs	r2, r3, #1
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00f      	beq.n	800a3fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	3310      	adds	r3, #16
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f001 f80e 	bl	800b404 <xTaskRemoveFromEventList>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d007      	beq.n	800a3fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3ee:	4b3d      	ldr	r3, [pc, #244]	; (800a4e4 <xQueueReceive+0x1bc>)
 800a3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3f4:	601a      	str	r2, [r3, #0]
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3fe:	f002 fb19 	bl	800ca34 <vPortExitCritical>
				return pdPASS;
 800a402:	2301      	movs	r3, #1
 800a404:	e069      	b.n	800a4da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d103      	bne.n	800a414 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a40c:	f002 fb12 	bl	800ca34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a410:	2300      	movs	r3, #0
 800a412:	e062      	b.n	800a4da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a416:	2b00      	cmp	r3, #0
 800a418:	d106      	bne.n	800a428 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a41a:	f107 0310 	add.w	r3, r7, #16
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 f8b6 	bl	800b590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a424:	2301      	movs	r3, #1
 800a426:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a428:	f002 fb04 	bl	800ca34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a42c:	f000 fd78 	bl	800af20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a430:	f002 fad0 	bl	800c9d4 <vPortEnterCritical>
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a43a:	b25b      	sxtb	r3, r3
 800a43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a440:	d103      	bne.n	800a44a <xQueueReceive+0x122>
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a450:	b25b      	sxtb	r3, r3
 800a452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a456:	d103      	bne.n	800a460 <xQueueReceive+0x138>
 800a458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a460:	f002 fae8 	bl	800ca34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a464:	1d3a      	adds	r2, r7, #4
 800a466:	f107 0310 	add.w	r3, r7, #16
 800a46a:	4611      	mov	r1, r2
 800a46c:	4618      	mov	r0, r3
 800a46e:	f001 f8a5 	bl	800b5bc <xTaskCheckForTimeOut>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d123      	bne.n	800a4c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a47a:	f000 fa5e 	bl	800a93a <prvIsQueueEmpty>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d017      	beq.n	800a4b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	3324      	adds	r3, #36	; 0x24
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	4611      	mov	r1, r2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 ff2d 	bl	800b2ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a494:	f000 f9ff 	bl	800a896 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a498:	f000 fd50 	bl	800af3c <xTaskResumeAll>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d189      	bne.n	800a3b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a4a2:	4b10      	ldr	r3, [pc, #64]	; (800a4e4 <xQueueReceive+0x1bc>)
 800a4a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	e780      	b.n	800a3b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b6:	f000 f9ee 	bl	800a896 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4ba:	f000 fd3f 	bl	800af3c <xTaskResumeAll>
 800a4be:	e77a      	b.n	800a3b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c2:	f000 f9e8 	bl	800a896 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4c6:	f000 fd39 	bl	800af3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4cc:	f000 fa35 	bl	800a93a <prvIsQueueEmpty>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f43f af6f 	beq.w	800a3b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3730      	adds	r7, #48	; 0x30
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	e000ed04 	.word	0xe000ed04

0800a4e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b08e      	sub	sp, #56	; 0x38
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	623b      	str	r3, [r7, #32]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	61fb      	str	r3, [r7, #28]
}
 800a534:	bf00      	nop
 800a536:	e7fe      	b.n	800a536 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a538:	f001 f984 	bl	800b844 <xTaskGetSchedulerState>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d102      	bne.n	800a548 <xQueueSemaphoreTake+0x60>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <xQueueSemaphoreTake+0x64>
 800a548:	2301      	movs	r3, #1
 800a54a:	e000      	b.n	800a54e <xQueueSemaphoreTake+0x66>
 800a54c:	2300      	movs	r3, #0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10a      	bne.n	800a568 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	61bb      	str	r3, [r7, #24]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a568:	f002 fa34 	bl	800c9d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a570:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	2b00      	cmp	r3, #0
 800a576:	d024      	beq.n	800a5c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57a:	1e5a      	subs	r2, r3, #1
 800a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d104      	bne.n	800a592 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a588:	f001 faea 	bl	800bb60 <pvTaskIncrementMutexHeldCount>
 800a58c:	4602      	mov	r2, r0
 800a58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a590:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00f      	beq.n	800a5ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	3310      	adds	r3, #16
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 ff30 	bl	800b404 <xTaskRemoveFromEventList>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d007      	beq.n	800a5ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5aa:	4b54      	ldr	r3, [pc, #336]	; (800a6fc <xQueueSemaphoreTake+0x214>)
 800a5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5ba:	f002 fa3b 	bl	800ca34 <vPortExitCritical>
				return pdPASS;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e097      	b.n	800a6f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d111      	bne.n	800a5ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	617b      	str	r3, [r7, #20]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a5e4:	f002 fa26 	bl	800ca34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	e082      	b.n	800a6f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d106      	bne.n	800a600 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5f2:	f107 030c 	add.w	r3, r7, #12
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 ffca 	bl	800b590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a600:	f002 fa18 	bl	800ca34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a604:	f000 fc8c 	bl	800af20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a608:	f002 f9e4 	bl	800c9d4 <vPortEnterCritical>
 800a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a612:	b25b      	sxtb	r3, r3
 800a614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a618:	d103      	bne.n	800a622 <xQueueSemaphoreTake+0x13a>
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a628:	b25b      	sxtb	r3, r3
 800a62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62e:	d103      	bne.n	800a638 <xQueueSemaphoreTake+0x150>
 800a630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a632:	2200      	movs	r2, #0
 800a634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a638:	f002 f9fc 	bl	800ca34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a63c:	463a      	mov	r2, r7
 800a63e:	f107 030c 	add.w	r3, r7, #12
 800a642:	4611      	mov	r1, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f000 ffb9 	bl	800b5bc <xTaskCheckForTimeOut>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d132      	bne.n	800a6b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a652:	f000 f972 	bl	800a93a <prvIsQueueEmpty>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d026      	beq.n	800a6aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d109      	bne.n	800a678 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a664:	f002 f9b6 	bl	800c9d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f001 f907 	bl	800b880 <xTaskPriorityInherit>
 800a672:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a674:	f002 f9de 	bl	800ca34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	3324      	adds	r3, #36	; 0x24
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	4611      	mov	r1, r2
 800a680:	4618      	mov	r0, r3
 800a682:	f000 fe33 	bl	800b2ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a688:	f000 f905 	bl	800a896 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a68c:	f000 fc56 	bl	800af3c <xTaskResumeAll>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	f47f af68 	bne.w	800a568 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a698:	4b18      	ldr	r3, [pc, #96]	; (800a6fc <xQueueSemaphoreTake+0x214>)
 800a69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69e:	601a      	str	r2, [r3, #0]
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	e75e      	b.n	800a568 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a6aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6ac:	f000 f8f3 	bl	800a896 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6b0:	f000 fc44 	bl	800af3c <xTaskResumeAll>
 800a6b4:	e758      	b.n	800a568 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a6b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6b8:	f000 f8ed 	bl	800a896 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6bc:	f000 fc3e 	bl	800af3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6c2:	f000 f93a 	bl	800a93a <prvIsQueueEmpty>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f43f af4d 	beq.w	800a568 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00d      	beq.n	800a6f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a6d4:	f002 f97e 	bl	800c9d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a6d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6da:	f000 f834 	bl	800a746 <prvGetDisinheritPriorityAfterTimeout>
 800a6de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f001 f9a0 	bl	800ba2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6ec:	f002 f9a2 	bl	800ca34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3738      	adds	r7, #56	; 0x38
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	e000ed04 	.word	0xe000ed04

0800a700 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10a      	bne.n	800a728 <vQueueDelete+0x28>
	__asm volatile
 800a712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	60bb      	str	r3, [r7, #8]
}
 800a724:	bf00      	nop
 800a726:	e7fe      	b.n	800a726 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 f95f 	bl	800a9ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a734:	2b00      	cmp	r3, #0
 800a736:	d102      	bne.n	800a73e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f002 fb39 	bl	800cdb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a73e:	bf00      	nop
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a746:	b480      	push	{r7}
 800a748:	b085      	sub	sp, #20
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a752:	2b00      	cmp	r3, #0
 800a754:	d006      	beq.n	800a764 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a760:	60fb      	str	r3, [r7, #12]
 800a762:	e001      	b.n	800a768 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a764:	2300      	movs	r3, #0
 800a766:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a768:	68fb      	ldr	r3, [r7, #12]
	}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b086      	sub	sp, #24
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a782:	2300      	movs	r3, #0
 800a784:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10d      	bne.n	800a7b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d14d      	bne.n	800a838 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f001 f8d5 	bl	800b950 <xTaskPriorityDisinherit>
 800a7a6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	609a      	str	r2, [r3, #8]
 800a7ae:	e043      	b.n	800a838 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d119      	bne.n	800a7ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6858      	ldr	r0, [r3, #4]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	461a      	mov	r2, r3
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	f004 f97f 	bl	800eac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ce:	441a      	add	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d32b      	bcc.n	800a838 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	605a      	str	r2, [r3, #4]
 800a7e8:	e026      	b.n	800a838 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	68d8      	ldr	r0, [r3, #12]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	68b9      	ldr	r1, [r7, #8]
 800a7f6:	f004 f965 	bl	800eac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	68da      	ldr	r2, [r3, #12]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a802:	425b      	negs	r3, r3
 800a804:	441a      	add	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	68da      	ldr	r2, [r3, #12]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	429a      	cmp	r2, r3
 800a814:	d207      	bcs.n	800a826 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	689a      	ldr	r2, [r3, #8]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81e:	425b      	negs	r3, r3
 800a820:	441a      	add	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d105      	bne.n	800a838 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d002      	beq.n	800a838 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	3b01      	subs	r3, #1
 800a836:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a840:	697b      	ldr	r3, [r7, #20]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3718      	adds	r7, #24
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d018      	beq.n	800a88e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	68da      	ldr	r2, [r3, #12]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a864:	441a      	add	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68da      	ldr	r2, [r3, #12]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	429a      	cmp	r2, r3
 800a874:	d303      	bcc.n	800a87e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68d9      	ldr	r1, [r3, #12]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a886:	461a      	mov	r2, r3
 800a888:	6838      	ldr	r0, [r7, #0]
 800a88a:	f004 f91b 	bl	800eac4 <memcpy>
	}
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a89e:	f002 f899 	bl	800c9d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8aa:	e011      	b.n	800a8d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d012      	beq.n	800a8da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3324      	adds	r3, #36	; 0x24
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fda3 	bl	800b404 <xTaskRemoveFromEventList>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a8c4:	f000 fedc 	bl	800b680 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dce9      	bgt.n	800a8ac <prvUnlockQueue+0x16>
 800a8d8:	e000      	b.n	800a8dc <prvUnlockQueue+0x46>
					break;
 800a8da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	22ff      	movs	r2, #255	; 0xff
 800a8e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a8e4:	f002 f8a6 	bl	800ca34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8e8:	f002 f874 	bl	800c9d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8f4:	e011      	b.n	800a91a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d012      	beq.n	800a924 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	3310      	adds	r3, #16
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fd7e 	bl	800b404 <xTaskRemoveFromEventList>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a90e:	f000 feb7 	bl	800b680 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	3b01      	subs	r3, #1
 800a916:	b2db      	uxtb	r3, r3
 800a918:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a91a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	dce9      	bgt.n	800a8f6 <prvUnlockQueue+0x60>
 800a922:	e000      	b.n	800a926 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a924:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	22ff      	movs	r2, #255	; 0xff
 800a92a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a92e:	f002 f881 	bl	800ca34 <vPortExitCritical>
}
 800a932:	bf00      	nop
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a942:	f002 f847 	bl	800c9d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d102      	bne.n	800a954 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a94e:	2301      	movs	r3, #1
 800a950:	60fb      	str	r3, [r7, #12]
 800a952:	e001      	b.n	800a958 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a954:	2300      	movs	r3, #0
 800a956:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a958:	f002 f86c 	bl	800ca34 <vPortExitCritical>

	return xReturn;
 800a95c:	68fb      	ldr	r3, [r7, #12]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a96e:	f002 f831 	bl	800c9d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d102      	bne.n	800a984 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a97e:	2301      	movs	r3, #1
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	e001      	b.n	800a988 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a984:	2300      	movs	r3, #0
 800a986:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a988:	f002 f854 	bl	800ca34 <vPortExitCritical>

	return xReturn;
 800a98c:	68fb      	ldr	r3, [r7, #12]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
	...

0800a998 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60fb      	str	r3, [r7, #12]
 800a9a6:	e014      	b.n	800a9d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a9a8:	4a0f      	ldr	r2, [pc, #60]	; (800a9e8 <vQueueAddToRegistry+0x50>)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10b      	bne.n	800a9cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a9b4:	490c      	ldr	r1, [pc, #48]	; (800a9e8 <vQueueAddToRegistry+0x50>)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	683a      	ldr	r2, [r7, #0]
 800a9ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9be:	4a0a      	ldr	r2, [pc, #40]	; (800a9e8 <vQueueAddToRegistry+0x50>)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	4413      	add	r3, r2
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9ca:	e006      	b.n	800a9da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2b07      	cmp	r3, #7
 800a9d6:	d9e7      	bls.n	800a9a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9d8:	bf00      	nop
 800a9da:	bf00      	nop
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	20000e1c 	.word	0x20000e1c

0800a9ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	e016      	b.n	800aa28 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a9fa:	4a10      	ldr	r2, [pc, #64]	; (800aa3c <vQueueUnregisterQueue+0x50>)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	00db      	lsls	r3, r3, #3
 800aa00:	4413      	add	r3, r2
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d10b      	bne.n	800aa22 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aa0a:	4a0c      	ldr	r2, [pc, #48]	; (800aa3c <vQueueUnregisterQueue+0x50>)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2100      	movs	r1, #0
 800aa10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aa14:	4a09      	ldr	r2, [pc, #36]	; (800aa3c <vQueueUnregisterQueue+0x50>)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	00db      	lsls	r3, r3, #3
 800aa1a:	4413      	add	r3, r2
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	605a      	str	r2, [r3, #4]
				break;
 800aa20:	e006      	b.n	800aa30 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3301      	adds	r3, #1
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2b07      	cmp	r3, #7
 800aa2c:	d9e5      	bls.n	800a9fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aa2e:	bf00      	nop
 800aa30:	bf00      	nop
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	20000e1c 	.word	0x20000e1c

0800aa40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa50:	f001 ffc0 	bl	800c9d4 <vPortEnterCritical>
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa5a:	b25b      	sxtb	r3, r3
 800aa5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa60:	d103      	bne.n	800aa6a <vQueueWaitForMessageRestricted+0x2a>
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa70:	b25b      	sxtb	r3, r3
 800aa72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa76:	d103      	bne.n	800aa80 <vQueueWaitForMessageRestricted+0x40>
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa80:	f001 ffd8 	bl	800ca34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d106      	bne.n	800aa9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	3324      	adds	r3, #36	; 0x24
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	68b9      	ldr	r1, [r7, #8]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 fc89 	bl	800b3ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa9a:	6978      	ldr	r0, [r7, #20]
 800aa9c:	f7ff fefb 	bl	800a896 <prvUnlockQueue>
	}
 800aaa0:	bf00      	nop
 800aaa2:	3718      	adds	r7, #24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08e      	sub	sp, #56	; 0x38
 800aaac:	af04      	add	r7, sp, #16
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10a      	bne.n	800aad2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	623b      	str	r3, [r7, #32]
}
 800aace:	bf00      	nop
 800aad0:	e7fe      	b.n	800aad0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <xTaskCreateStatic+0x46>
	__asm volatile
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	61fb      	str	r3, [r7, #28]
}
 800aaea:	bf00      	nop
 800aaec:	e7fe      	b.n	800aaec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aaee:	235c      	movs	r3, #92	; 0x5c
 800aaf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	2b5c      	cmp	r3, #92	; 0x5c
 800aaf6:	d00a      	beq.n	800ab0e <xTaskCreateStatic+0x66>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	61bb      	str	r3, [r7, #24]
}
 800ab0a:	bf00      	nop
 800ab0c:	e7fe      	b.n	800ab0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d01e      	beq.n	800ab54 <xTaskCreateStatic+0xac>
 800ab16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d01b      	beq.n	800ab54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	2202      	movs	r2, #2
 800ab2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab2e:	2300      	movs	r3, #0
 800ab30:	9303      	str	r3, [sp, #12]
 800ab32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab34:	9302      	str	r3, [sp, #8]
 800ab36:	f107 0314 	add.w	r3, r7, #20
 800ab3a:	9301      	str	r3, [sp, #4]
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	68b9      	ldr	r1, [r7, #8]
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f000 f850 	bl	800abec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab4e:	f000 f8dd 	bl	800ad0c <prvAddNewTaskToReadyList>
 800ab52:	e001      	b.n	800ab58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ab54:	2300      	movs	r3, #0
 800ab56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab58:	697b      	ldr	r3, [r7, #20]
	}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3728      	adds	r7, #40	; 0x28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b08c      	sub	sp, #48	; 0x30
 800ab66:	af04      	add	r7, sp, #16
 800ab68:	60f8      	str	r0, [r7, #12]
 800ab6a:	60b9      	str	r1, [r7, #8]
 800ab6c:	603b      	str	r3, [r7, #0]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab72:	88fb      	ldrh	r3, [r7, #6]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4618      	mov	r0, r3
 800ab78:	f002 f84e 	bl	800cc18 <pvPortMalloc>
 800ab7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00e      	beq.n	800aba2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab84:	205c      	movs	r0, #92	; 0x5c
 800ab86:	f002 f847 	bl	800cc18 <pvPortMalloc>
 800ab8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d003      	beq.n	800ab9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	631a      	str	r2, [r3, #48]	; 0x30
 800ab98:	e005      	b.n	800aba6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab9a:	6978      	ldr	r0, [r7, #20]
 800ab9c:	f002 f908 	bl	800cdb0 <vPortFree>
 800aba0:	e001      	b.n	800aba6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d017      	beq.n	800abdc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abb4:	88fa      	ldrh	r2, [r7, #6]
 800abb6:	2300      	movs	r3, #0
 800abb8:	9303      	str	r3, [sp, #12]
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	9302      	str	r3, [sp, #8]
 800abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc0:	9301      	str	r3, [sp, #4]
 800abc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68b9      	ldr	r1, [r7, #8]
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f000 f80e 	bl	800abec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abd0:	69f8      	ldr	r0, [r7, #28]
 800abd2:	f000 f89b 	bl	800ad0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abd6:	2301      	movs	r3, #1
 800abd8:	61bb      	str	r3, [r7, #24]
 800abda:	e002      	b.n	800abe2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abdc:	f04f 33ff 	mov.w	r3, #4294967295
 800abe0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abe2:	69bb      	ldr	r3, [r7, #24]
	}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3720      	adds	r7, #32
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b088      	sub	sp, #32
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	461a      	mov	r2, r3
 800ac04:	21a5      	movs	r1, #165	; 0xa5
 800ac06:	f003 ff31 	bl	800ea6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac14:	3b01      	subs	r3, #1
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	f023 0307 	bic.w	r3, r3, #7
 800ac22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	f003 0307 	and.w	r3, r3, #7
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00a      	beq.n	800ac44 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	617b      	str	r3, [r7, #20]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d01f      	beq.n	800ac8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	61fb      	str	r3, [r7, #28]
 800ac4e:	e012      	b.n	800ac76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	4413      	add	r3, r2
 800ac56:	7819      	ldrb	r1, [r3, #0]
 800ac58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	3334      	adds	r3, #52	; 0x34
 800ac60:	460a      	mov	r2, r1
 800ac62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	4413      	add	r3, r2
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d006      	beq.n	800ac7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	3301      	adds	r3, #1
 800ac74:	61fb      	str	r3, [r7, #28]
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	2b0f      	cmp	r3, #15
 800ac7a:	d9e9      	bls.n	800ac50 <prvInitialiseNewTask+0x64>
 800ac7c:	e000      	b.n	800ac80 <prvInitialiseNewTask+0x94>
			{
				break;
 800ac7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac88:	e003      	b.n	800ac92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac94:	2b37      	cmp	r3, #55	; 0x37
 800ac96:	d901      	bls.n	800ac9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac98:	2337      	movs	r3, #55	; 0x37
 800ac9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aca0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aca6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acaa:	2200      	movs	r2, #0
 800acac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	3304      	adds	r3, #4
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe ff62 	bl	8009b7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	3318      	adds	r3, #24
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fe ff5d 	bl	8009b7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acda:	2200      	movs	r2, #0
 800acdc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	68f9      	ldr	r1, [r7, #12]
 800acea:	69b8      	ldr	r0, [r7, #24]
 800acec:	f001 fd46 	bl	800c77c <pxPortInitialiseStack>
 800acf0:	4602      	mov	r2, r0
 800acf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad02:	bf00      	nop
 800ad04:	3720      	adds	r7, #32
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
	...

0800ad0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad14:	f001 fe5e 	bl	800c9d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad18:	4b2d      	ldr	r3, [pc, #180]	; (800add0 <prvAddNewTaskToReadyList+0xc4>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	4a2c      	ldr	r2, [pc, #176]	; (800add0 <prvAddNewTaskToReadyList+0xc4>)
 800ad20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad22:	4b2c      	ldr	r3, [pc, #176]	; (800add4 <prvAddNewTaskToReadyList+0xc8>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d109      	bne.n	800ad3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad2a:	4a2a      	ldr	r2, [pc, #168]	; (800add4 <prvAddNewTaskToReadyList+0xc8>)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad30:	4b27      	ldr	r3, [pc, #156]	; (800add0 <prvAddNewTaskToReadyList+0xc4>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d110      	bne.n	800ad5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad38:	f000 fcc6 	bl	800b6c8 <prvInitialiseTaskLists>
 800ad3c:	e00d      	b.n	800ad5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad3e:	4b26      	ldr	r3, [pc, #152]	; (800add8 <prvAddNewTaskToReadyList+0xcc>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d109      	bne.n	800ad5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad46:	4b23      	ldr	r3, [pc, #140]	; (800add4 <prvAddNewTaskToReadyList+0xc8>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d802      	bhi.n	800ad5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad54:	4a1f      	ldr	r2, [pc, #124]	; (800add4 <prvAddNewTaskToReadyList+0xc8>)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad5a:	4b20      	ldr	r3, [pc, #128]	; (800addc <prvAddNewTaskToReadyList+0xd0>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	4a1e      	ldr	r2, [pc, #120]	; (800addc <prvAddNewTaskToReadyList+0xd0>)
 800ad62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad64:	4b1d      	ldr	r3, [pc, #116]	; (800addc <prvAddNewTaskToReadyList+0xd0>)
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad70:	4b1b      	ldr	r3, [pc, #108]	; (800ade0 <prvAddNewTaskToReadyList+0xd4>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d903      	bls.n	800ad80 <prvAddNewTaskToReadyList+0x74>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	4a18      	ldr	r2, [pc, #96]	; (800ade0 <prvAddNewTaskToReadyList+0xd4>)
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad84:	4613      	mov	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4a15      	ldr	r2, [pc, #84]	; (800ade4 <prvAddNewTaskToReadyList+0xd8>)
 800ad8e:	441a      	add	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3304      	adds	r3, #4
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f7fe fefd 	bl	8009b96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad9c:	f001 fe4a 	bl	800ca34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ada0:	4b0d      	ldr	r3, [pc, #52]	; (800add8 <prvAddNewTaskToReadyList+0xcc>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00e      	beq.n	800adc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <prvAddNewTaskToReadyList+0xc8>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d207      	bcs.n	800adc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adb6:	4b0c      	ldr	r3, [pc, #48]	; (800ade8 <prvAddNewTaskToReadyList+0xdc>)
 800adb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adbc:	601a      	str	r2, [r3, #0]
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	20001330 	.word	0x20001330
 800add4:	20000e5c 	.word	0x20000e5c
 800add8:	2000133c 	.word	0x2000133c
 800addc:	2000134c 	.word	0x2000134c
 800ade0:	20001338 	.word	0x20001338
 800ade4:	20000e60 	.word	0x20000e60
 800ade8:	e000ed04 	.word	0xe000ed04

0800adec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800adf4:	2300      	movs	r3, #0
 800adf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d017      	beq.n	800ae2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800adfe:	4b13      	ldr	r3, [pc, #76]	; (800ae4c <vTaskDelay+0x60>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00a      	beq.n	800ae1c <vTaskDelay+0x30>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	60bb      	str	r3, [r7, #8]
}
 800ae18:	bf00      	nop
 800ae1a:	e7fe      	b.n	800ae1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae1c:	f000 f880 	bl	800af20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae20:	2100      	movs	r1, #0
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f001 f88c 	bl	800bf40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae28:	f000 f888 	bl	800af3c <xTaskResumeAll>
 800ae2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d107      	bne.n	800ae44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae34:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <vTaskDelay+0x64>)
 800ae36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae3a:	601a      	str	r2, [r3, #0]
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae44:	bf00      	nop
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	20001358 	.word	0x20001358
 800ae50:	e000ed04 	.word	0xe000ed04

0800ae54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b08a      	sub	sp, #40	; 0x28
 800ae58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae62:	463a      	mov	r2, r7
 800ae64:	1d39      	adds	r1, r7, #4
 800ae66:	f107 0308 	add.w	r3, r7, #8
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fe fc44 	bl	80096f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae70:	6839      	ldr	r1, [r7, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	9202      	str	r2, [sp, #8]
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	460a      	mov	r2, r1
 800ae82:	4921      	ldr	r1, [pc, #132]	; (800af08 <vTaskStartScheduler+0xb4>)
 800ae84:	4821      	ldr	r0, [pc, #132]	; (800af0c <vTaskStartScheduler+0xb8>)
 800ae86:	f7ff fe0f 	bl	800aaa8 <xTaskCreateStatic>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	4a20      	ldr	r2, [pc, #128]	; (800af10 <vTaskStartScheduler+0xbc>)
 800ae8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae90:	4b1f      	ldr	r3, [pc, #124]	; (800af10 <vTaskStartScheduler+0xbc>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	e001      	b.n	800aea2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d102      	bne.n	800aeae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aea8:	f001 f89e 	bl	800bfe8 <xTimerCreateTimerTask>
 800aeac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d116      	bne.n	800aee2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800aeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb8:	f383 8811 	msr	BASEPRI, r3
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	613b      	str	r3, [r7, #16]
}
 800aec6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aec8:	4b12      	ldr	r3, [pc, #72]	; (800af14 <vTaskStartScheduler+0xc0>)
 800aeca:	f04f 32ff 	mov.w	r2, #4294967295
 800aece:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aed0:	4b11      	ldr	r3, [pc, #68]	; (800af18 <vTaskStartScheduler+0xc4>)
 800aed2:	2201      	movs	r2, #1
 800aed4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aed6:	4b11      	ldr	r3, [pc, #68]	; (800af1c <vTaskStartScheduler+0xc8>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aedc:	f001 fcd8 	bl	800c890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aee0:	e00e      	b.n	800af00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee8:	d10a      	bne.n	800af00 <vTaskStartScheduler+0xac>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	60fb      	str	r3, [r7, #12]
}
 800aefc:	bf00      	nop
 800aefe:	e7fe      	b.n	800aefe <vTaskStartScheduler+0xaa>
}
 800af00:	bf00      	nop
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	0800eb50 	.word	0x0800eb50
 800af0c:	0800b699 	.word	0x0800b699
 800af10:	20001354 	.word	0x20001354
 800af14:	20001350 	.word	0x20001350
 800af18:	2000133c 	.word	0x2000133c
 800af1c:	20001334 	.word	0x20001334

0800af20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af20:	b480      	push	{r7}
 800af22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af24:	4b04      	ldr	r3, [pc, #16]	; (800af38 <vTaskSuspendAll+0x18>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3301      	adds	r3, #1
 800af2a:	4a03      	ldr	r2, [pc, #12]	; (800af38 <vTaskSuspendAll+0x18>)
 800af2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af2e:	bf00      	nop
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	20001358 	.word	0x20001358

0800af3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af42:	2300      	movs	r3, #0
 800af44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af46:	2300      	movs	r3, #0
 800af48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af4a:	4b42      	ldr	r3, [pc, #264]	; (800b054 <xTaskResumeAll+0x118>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10a      	bne.n	800af68 <xTaskResumeAll+0x2c>
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	603b      	str	r3, [r7, #0]
}
 800af64:	bf00      	nop
 800af66:	e7fe      	b.n	800af66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af68:	f001 fd34 	bl	800c9d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af6c:	4b39      	ldr	r3, [pc, #228]	; (800b054 <xTaskResumeAll+0x118>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3b01      	subs	r3, #1
 800af72:	4a38      	ldr	r2, [pc, #224]	; (800b054 <xTaskResumeAll+0x118>)
 800af74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af76:	4b37      	ldr	r3, [pc, #220]	; (800b054 <xTaskResumeAll+0x118>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d162      	bne.n	800b044 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af7e:	4b36      	ldr	r3, [pc, #216]	; (800b058 <xTaskResumeAll+0x11c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d05e      	beq.n	800b044 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af86:	e02f      	b.n	800afe8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af88:	4b34      	ldr	r3, [pc, #208]	; (800b05c <xTaskResumeAll+0x120>)
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3318      	adds	r3, #24
 800af94:	4618      	mov	r0, r3
 800af96:	f7fe fe5b 	bl	8009c50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	3304      	adds	r3, #4
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fe fe56 	bl	8009c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa8:	4b2d      	ldr	r3, [pc, #180]	; (800b060 <xTaskResumeAll+0x124>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	429a      	cmp	r2, r3
 800afae:	d903      	bls.n	800afb8 <xTaskResumeAll+0x7c>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb4:	4a2a      	ldr	r2, [pc, #168]	; (800b060 <xTaskResumeAll+0x124>)
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbc:	4613      	mov	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	4413      	add	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4a27      	ldr	r2, [pc, #156]	; (800b064 <xTaskResumeAll+0x128>)
 800afc6:	441a      	add	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	3304      	adds	r3, #4
 800afcc:	4619      	mov	r1, r3
 800afce:	4610      	mov	r0, r2
 800afd0:	f7fe fde1 	bl	8009b96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd8:	4b23      	ldr	r3, [pc, #140]	; (800b068 <xTaskResumeAll+0x12c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afde:	429a      	cmp	r2, r3
 800afe0:	d302      	bcc.n	800afe8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800afe2:	4b22      	ldr	r3, [pc, #136]	; (800b06c <xTaskResumeAll+0x130>)
 800afe4:	2201      	movs	r2, #1
 800afe6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afe8:	4b1c      	ldr	r3, [pc, #112]	; (800b05c <xTaskResumeAll+0x120>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1cb      	bne.n	800af88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aff6:	f000 fc05 	bl	800b804 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800affa:	4b1d      	ldr	r3, [pc, #116]	; (800b070 <xTaskResumeAll+0x134>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d010      	beq.n	800b028 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b006:	f000 f859 	bl	800b0bc <xTaskIncrementTick>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b010:	4b16      	ldr	r3, [pc, #88]	; (800b06c <xTaskResumeAll+0x130>)
 800b012:	2201      	movs	r2, #1
 800b014:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	3b01      	subs	r3, #1
 800b01a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1f1      	bne.n	800b006 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b022:	4b13      	ldr	r3, [pc, #76]	; (800b070 <xTaskResumeAll+0x134>)
 800b024:	2200      	movs	r2, #0
 800b026:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b028:	4b10      	ldr	r3, [pc, #64]	; (800b06c <xTaskResumeAll+0x130>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d009      	beq.n	800b044 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b030:	2301      	movs	r3, #1
 800b032:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b034:	4b0f      	ldr	r3, [pc, #60]	; (800b074 <xTaskResumeAll+0x138>)
 800b036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b044:	f001 fcf6 	bl	800ca34 <vPortExitCritical>

	return xAlreadyYielded;
 800b048:	68bb      	ldr	r3, [r7, #8]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20001358 	.word	0x20001358
 800b058:	20001330 	.word	0x20001330
 800b05c:	200012f0 	.word	0x200012f0
 800b060:	20001338 	.word	0x20001338
 800b064:	20000e60 	.word	0x20000e60
 800b068:	20000e5c 	.word	0x20000e5c
 800b06c:	20001344 	.word	0x20001344
 800b070:	20001340 	.word	0x20001340
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b07e:	4b05      	ldr	r3, [pc, #20]	; (800b094 <xTaskGetTickCount+0x1c>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b084:	687b      	ldr	r3, [r7, #4]
}
 800b086:	4618      	mov	r0, r3
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	20001334 	.word	0x20001334

0800b098 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b09e:	f001 fd7b 	bl	800cb98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b0a6:	4b04      	ldr	r3, [pc, #16]	; (800b0b8 <xTaskGetTickCountFromISR+0x20>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0ac:	683b      	ldr	r3, [r7, #0]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20001334 	.word	0x20001334

0800b0bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0c6:	4b4f      	ldr	r3, [pc, #316]	; (800b204 <xTaskIncrementTick+0x148>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f040 808f 	bne.w	800b1ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0d0:	4b4d      	ldr	r3, [pc, #308]	; (800b208 <xTaskIncrementTick+0x14c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0d8:	4a4b      	ldr	r2, [pc, #300]	; (800b208 <xTaskIncrementTick+0x14c>)
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d120      	bne.n	800b126 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0e4:	4b49      	ldr	r3, [pc, #292]	; (800b20c <xTaskIncrementTick+0x150>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00a      	beq.n	800b104 <xTaskIncrementTick+0x48>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	603b      	str	r3, [r7, #0]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <xTaskIncrementTick+0x46>
 800b104:	4b41      	ldr	r3, [pc, #260]	; (800b20c <xTaskIncrementTick+0x150>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	60fb      	str	r3, [r7, #12]
 800b10a:	4b41      	ldr	r3, [pc, #260]	; (800b210 <xTaskIncrementTick+0x154>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a3f      	ldr	r2, [pc, #252]	; (800b20c <xTaskIncrementTick+0x150>)
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	4a3f      	ldr	r2, [pc, #252]	; (800b210 <xTaskIncrementTick+0x154>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	4b3e      	ldr	r3, [pc, #248]	; (800b214 <xTaskIncrementTick+0x158>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3301      	adds	r3, #1
 800b11e:	4a3d      	ldr	r2, [pc, #244]	; (800b214 <xTaskIncrementTick+0x158>)
 800b120:	6013      	str	r3, [r2, #0]
 800b122:	f000 fb6f 	bl	800b804 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b126:	4b3c      	ldr	r3, [pc, #240]	; (800b218 <xTaskIncrementTick+0x15c>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	693a      	ldr	r2, [r7, #16]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d349      	bcc.n	800b1c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b130:	4b36      	ldr	r3, [pc, #216]	; (800b20c <xTaskIncrementTick+0x150>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d104      	bne.n	800b144 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b13a:	4b37      	ldr	r3, [pc, #220]	; (800b218 <xTaskIncrementTick+0x15c>)
 800b13c:	f04f 32ff 	mov.w	r2, #4294967295
 800b140:	601a      	str	r2, [r3, #0]
					break;
 800b142:	e03f      	b.n	800b1c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b144:	4b31      	ldr	r3, [pc, #196]	; (800b20c <xTaskIncrementTick+0x150>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d203      	bcs.n	800b164 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b15c:	4a2e      	ldr	r2, [pc, #184]	; (800b218 <xTaskIncrementTick+0x15c>)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b162:	e02f      	b.n	800b1c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	3304      	adds	r3, #4
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe fd71 	bl	8009c50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b172:	2b00      	cmp	r3, #0
 800b174:	d004      	beq.n	800b180 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	3318      	adds	r3, #24
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe fd68 	bl	8009c50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b184:	4b25      	ldr	r3, [pc, #148]	; (800b21c <xTaskIncrementTick+0x160>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d903      	bls.n	800b194 <xTaskIncrementTick+0xd8>
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b190:	4a22      	ldr	r2, [pc, #136]	; (800b21c <xTaskIncrementTick+0x160>)
 800b192:	6013      	str	r3, [r2, #0]
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b198:	4613      	mov	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4a1f      	ldr	r2, [pc, #124]	; (800b220 <xTaskIncrementTick+0x164>)
 800b1a2:	441a      	add	r2, r3
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4610      	mov	r0, r2
 800b1ac:	f7fe fcf3 	bl	8009b96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b4:	4b1b      	ldr	r3, [pc, #108]	; (800b224 <xTaskIncrementTick+0x168>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d3b8      	bcc.n	800b130 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1c2:	e7b5      	b.n	800b130 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1c4:	4b17      	ldr	r3, [pc, #92]	; (800b224 <xTaskIncrementTick+0x168>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ca:	4915      	ldr	r1, [pc, #84]	; (800b220 <xTaskIncrementTick+0x164>)
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	440b      	add	r3, r1
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d901      	bls.n	800b1e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1e0:	4b11      	ldr	r3, [pc, #68]	; (800b228 <xTaskIncrementTick+0x16c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d007      	beq.n	800b1f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	617b      	str	r3, [r7, #20]
 800b1ec:	e004      	b.n	800b1f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	; (800b22c <xTaskIncrementTick+0x170>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	4a0d      	ldr	r2, [pc, #52]	; (800b22c <xTaskIncrementTick+0x170>)
 800b1f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1f8:	697b      	ldr	r3, [r7, #20]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20001358 	.word	0x20001358
 800b208:	20001334 	.word	0x20001334
 800b20c:	200012e8 	.word	0x200012e8
 800b210:	200012ec 	.word	0x200012ec
 800b214:	20001348 	.word	0x20001348
 800b218:	20001350 	.word	0x20001350
 800b21c:	20001338 	.word	0x20001338
 800b220:	20000e60 	.word	0x20000e60
 800b224:	20000e5c 	.word	0x20000e5c
 800b228:	20001344 	.word	0x20001344
 800b22c:	20001340 	.word	0x20001340

0800b230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b236:	4b28      	ldr	r3, [pc, #160]	; (800b2d8 <vTaskSwitchContext+0xa8>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d003      	beq.n	800b246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b23e:	4b27      	ldr	r3, [pc, #156]	; (800b2dc <vTaskSwitchContext+0xac>)
 800b240:	2201      	movs	r2, #1
 800b242:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b244:	e041      	b.n	800b2ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b246:	4b25      	ldr	r3, [pc, #148]	; (800b2dc <vTaskSwitchContext+0xac>)
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b24c:	4b24      	ldr	r3, [pc, #144]	; (800b2e0 <vTaskSwitchContext+0xb0>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	60fb      	str	r3, [r7, #12]
 800b252:	e010      	b.n	800b276 <vTaskSwitchContext+0x46>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10a      	bne.n	800b270 <vTaskSwitchContext+0x40>
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	607b      	str	r3, [r7, #4]
}
 800b26c:	bf00      	nop
 800b26e:	e7fe      	b.n	800b26e <vTaskSwitchContext+0x3e>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3b01      	subs	r3, #1
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	491b      	ldr	r1, [pc, #108]	; (800b2e4 <vTaskSwitchContext+0xb4>)
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	4613      	mov	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	440b      	add	r3, r1
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d0e4      	beq.n	800b254 <vTaskSwitchContext+0x24>
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	4613      	mov	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4a13      	ldr	r2, [pc, #76]	; (800b2e4 <vTaskSwitchContext+0xb4>)
 800b296:	4413      	add	r3, r2
 800b298:	60bb      	str	r3, [r7, #8]
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	605a      	str	r2, [r3, #4]
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d104      	bne.n	800b2ba <vTaskSwitchContext+0x8a>
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	605a      	str	r2, [r3, #4]
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	4a09      	ldr	r2, [pc, #36]	; (800b2e8 <vTaskSwitchContext+0xb8>)
 800b2c2:	6013      	str	r3, [r2, #0]
 800b2c4:	4a06      	ldr	r2, [pc, #24]	; (800b2e0 <vTaskSwitchContext+0xb0>)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6013      	str	r3, [r2, #0]
}
 800b2ca:	bf00      	nop
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	20001358 	.word	0x20001358
 800b2dc:	20001344 	.word	0x20001344
 800b2e0:	20001338 	.word	0x20001338
 800b2e4:	20000e60 	.word	0x20000e60
 800b2e8:	20000e5c 	.word	0x20000e5c

0800b2ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10a      	bne.n	800b312 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	60fb      	str	r3, [r7, #12]
}
 800b30e:	bf00      	nop
 800b310:	e7fe      	b.n	800b310 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b312:	4b07      	ldr	r3, [pc, #28]	; (800b330 <vTaskPlaceOnEventList+0x44>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3318      	adds	r3, #24
 800b318:	4619      	mov	r1, r3
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7fe fc5f 	bl	8009bde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b320:	2101      	movs	r1, #1
 800b322:	6838      	ldr	r0, [r7, #0]
 800b324:	f000 fe0c 	bl	800bf40 <prvAddCurrentTaskToDelayedList>
}
 800b328:	bf00      	nop
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20000e5c 	.word	0x20000e5c

0800b334 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10a      	bne.n	800b35c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	617b      	str	r3, [r7, #20]
}
 800b358:	bf00      	nop
 800b35a:	e7fe      	b.n	800b35a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b35c:	4b11      	ldr	r3, [pc, #68]	; (800b3a4 <vTaskPlaceOnUnorderedEventList+0x70>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10a      	bne.n	800b37a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	613b      	str	r3, [r7, #16]
}
 800b376:	bf00      	nop
 800b378:	e7fe      	b.n	800b378 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b37a:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b384:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b386:	4b08      	ldr	r3, [pc, #32]	; (800b3a8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3318      	adds	r3, #24
 800b38c:	4619      	mov	r1, r3
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f7fe fc01 	bl	8009b96 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b394:	2101      	movs	r1, #1
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fdd2 	bl	800bf40 <prvAddCurrentTaskToDelayedList>
}
 800b39c:	bf00      	nop
 800b39e:	3718      	adds	r7, #24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	20001358 	.word	0x20001358
 800b3a8:	20000e5c 	.word	0x20000e5c

0800b3ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10a      	bne.n	800b3d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	617b      	str	r3, [r7, #20]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3d4:	4b0a      	ldr	r3, [pc, #40]	; (800b400 <vTaskPlaceOnEventListRestricted+0x54>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3318      	adds	r3, #24
 800b3da:	4619      	mov	r1, r3
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f7fe fbda 	bl	8009b96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3ee:	6879      	ldr	r1, [r7, #4]
 800b3f0:	68b8      	ldr	r0, [r7, #8]
 800b3f2:	f000 fda5 	bl	800bf40 <prvAddCurrentTaskToDelayedList>
	}
 800b3f6:	bf00      	nop
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	20000e5c 	.word	0x20000e5c

0800b404 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10a      	bne.n	800b430 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	60fb      	str	r3, [r7, #12]
}
 800b42c:	bf00      	nop
 800b42e:	e7fe      	b.n	800b42e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	3318      	adds	r3, #24
 800b434:	4618      	mov	r0, r3
 800b436:	f7fe fc0b 	bl	8009c50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b43a:	4b1e      	ldr	r3, [pc, #120]	; (800b4b4 <xTaskRemoveFromEventList+0xb0>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d11d      	bne.n	800b47e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	3304      	adds	r3, #4
 800b446:	4618      	mov	r0, r3
 800b448:	f7fe fc02 	bl	8009c50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b450:	4b19      	ldr	r3, [pc, #100]	; (800b4b8 <xTaskRemoveFromEventList+0xb4>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	429a      	cmp	r2, r3
 800b456:	d903      	bls.n	800b460 <xTaskRemoveFromEventList+0x5c>
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	4a16      	ldr	r2, [pc, #88]	; (800b4b8 <xTaskRemoveFromEventList+0xb4>)
 800b45e:	6013      	str	r3, [r2, #0]
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4a13      	ldr	r2, [pc, #76]	; (800b4bc <xTaskRemoveFromEventList+0xb8>)
 800b46e:	441a      	add	r2, r3
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	3304      	adds	r3, #4
 800b474:	4619      	mov	r1, r3
 800b476:	4610      	mov	r0, r2
 800b478:	f7fe fb8d 	bl	8009b96 <vListInsertEnd>
 800b47c:	e005      	b.n	800b48a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	3318      	adds	r3, #24
 800b482:	4619      	mov	r1, r3
 800b484:	480e      	ldr	r0, [pc, #56]	; (800b4c0 <xTaskRemoveFromEventList+0xbc>)
 800b486:	f7fe fb86 	bl	8009b96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48e:	4b0d      	ldr	r3, [pc, #52]	; (800b4c4 <xTaskRemoveFromEventList+0xc0>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b494:	429a      	cmp	r2, r3
 800b496:	d905      	bls.n	800b4a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b498:	2301      	movs	r3, #1
 800b49a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b49c:	4b0a      	ldr	r3, [pc, #40]	; (800b4c8 <xTaskRemoveFromEventList+0xc4>)
 800b49e:	2201      	movs	r2, #1
 800b4a0:	601a      	str	r2, [r3, #0]
 800b4a2:	e001      	b.n	800b4a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b4a8:	697b      	ldr	r3, [r7, #20]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20001358 	.word	0x20001358
 800b4b8:	20001338 	.word	0x20001338
 800b4bc:	20000e60 	.word	0x20000e60
 800b4c0:	200012f0 	.word	0x200012f0
 800b4c4:	20000e5c 	.word	0x20000e5c
 800b4c8:	20001344 	.word	0x20001344

0800b4cc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b4d6:	4b29      	ldr	r3, [pc, #164]	; (800b57c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10a      	bne.n	800b4f4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	613b      	str	r3, [r7, #16]
}
 800b4f0:	bf00      	nop
 800b4f2:	e7fe      	b.n	800b4f2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10a      	bne.n	800b520 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800b50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50e:	f383 8811 	msr	BASEPRI, r3
 800b512:	f3bf 8f6f 	isb	sy
 800b516:	f3bf 8f4f 	dsb	sy
 800b51a:	60fb      	str	r3, [r7, #12]
}
 800b51c:	bf00      	nop
 800b51e:	e7fe      	b.n	800b51e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7fe fb95 	bl	8009c50 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	3304      	adds	r3, #4
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fe fb90 	bl	8009c50 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b534:	4b12      	ldr	r3, [pc, #72]	; (800b580 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d903      	bls.n	800b544 <vTaskRemoveFromUnorderedEventList+0x78>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b540:	4a0f      	ldr	r2, [pc, #60]	; (800b580 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b542:	6013      	str	r3, [r2, #0]
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b548:	4613      	mov	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	4a0c      	ldr	r2, [pc, #48]	; (800b584 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b552:	441a      	add	r2, r3
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	3304      	adds	r3, #4
 800b558:	4619      	mov	r1, r3
 800b55a:	4610      	mov	r0, r2
 800b55c:	f7fe fb1b 	bl	8009b96 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b564:	4b08      	ldr	r3, [pc, #32]	; (800b588 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d902      	bls.n	800b574 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b56e:	4b07      	ldr	r3, [pc, #28]	; (800b58c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b570:	2201      	movs	r2, #1
 800b572:	601a      	str	r2, [r3, #0]
	}
}
 800b574:	bf00      	nop
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	20001358 	.word	0x20001358
 800b580:	20001338 	.word	0x20001338
 800b584:	20000e60 	.word	0x20000e60
 800b588:	20000e5c 	.word	0x20000e5c
 800b58c:	20001344 	.word	0x20001344

0800b590 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b598:	4b06      	ldr	r3, [pc, #24]	; (800b5b4 <vTaskInternalSetTimeOutState+0x24>)
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5a0:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <vTaskInternalSetTimeOutState+0x28>)
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	605a      	str	r2, [r3, #4]
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	20001348 	.word	0x20001348
 800b5b8:	20001334 	.word	0x20001334

0800b5bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	613b      	str	r3, [r7, #16]
}
 800b5de:	bf00      	nop
 800b5e0:	e7fe      	b.n	800b5e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10a      	bne.n	800b5fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	60fb      	str	r3, [r7, #12]
}
 800b5fa:	bf00      	nop
 800b5fc:	e7fe      	b.n	800b5fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b5fe:	f001 f9e9 	bl	800c9d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b602:	4b1d      	ldr	r3, [pc, #116]	; (800b678 <xTaskCheckForTimeOut+0xbc>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	69ba      	ldr	r2, [r7, #24]
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b61a:	d102      	bne.n	800b622 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b61c:	2300      	movs	r3, #0
 800b61e:	61fb      	str	r3, [r7, #28]
 800b620:	e023      	b.n	800b66a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	4b15      	ldr	r3, [pc, #84]	; (800b67c <xTaskCheckForTimeOut+0xc0>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d007      	beq.n	800b63e <xTaskCheckForTimeOut+0x82>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	69ba      	ldr	r2, [r7, #24]
 800b634:	429a      	cmp	r2, r3
 800b636:	d302      	bcc.n	800b63e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b638:	2301      	movs	r3, #1
 800b63a:	61fb      	str	r3, [r7, #28]
 800b63c:	e015      	b.n	800b66a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	429a      	cmp	r2, r3
 800b646:	d20b      	bcs.n	800b660 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	1ad2      	subs	r2, r2, r3
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff ff9b 	bl	800b590 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b65a:	2300      	movs	r3, #0
 800b65c:	61fb      	str	r3, [r7, #28]
 800b65e:	e004      	b.n	800b66a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b666:	2301      	movs	r3, #1
 800b668:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b66a:	f001 f9e3 	bl	800ca34 <vPortExitCritical>

	return xReturn;
 800b66e:	69fb      	ldr	r3, [r7, #28]
}
 800b670:	4618      	mov	r0, r3
 800b672:	3720      	adds	r7, #32
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	20001334 	.word	0x20001334
 800b67c:	20001348 	.word	0x20001348

0800b680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b680:	b480      	push	{r7}
 800b682:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b684:	4b03      	ldr	r3, [pc, #12]	; (800b694 <vTaskMissedYield+0x14>)
 800b686:	2201      	movs	r2, #1
 800b688:	601a      	str	r2, [r3, #0]
}
 800b68a:	bf00      	nop
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	20001344 	.word	0x20001344

0800b698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6a0:	f000 f852 	bl	800b748 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6a4:	4b06      	ldr	r3, [pc, #24]	; (800b6c0 <prvIdleTask+0x28>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d9f9      	bls.n	800b6a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6ac:	4b05      	ldr	r3, [pc, #20]	; (800b6c4 <prvIdleTask+0x2c>)
 800b6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b2:	601a      	str	r2, [r3, #0]
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6bc:	e7f0      	b.n	800b6a0 <prvIdleTask+0x8>
 800b6be:	bf00      	nop
 800b6c0:	20000e60 	.word	0x20000e60
 800b6c4:	e000ed04 	.word	0xe000ed04

0800b6c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	607b      	str	r3, [r7, #4]
 800b6d2:	e00c      	b.n	800b6ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4a12      	ldr	r2, [pc, #72]	; (800b728 <prvInitialiseTaskLists+0x60>)
 800b6e0:	4413      	add	r3, r2
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fe fa2a 	bl	8009b3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	607b      	str	r3, [r7, #4]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2b37      	cmp	r3, #55	; 0x37
 800b6f2:	d9ef      	bls.n	800b6d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6f4:	480d      	ldr	r0, [pc, #52]	; (800b72c <prvInitialiseTaskLists+0x64>)
 800b6f6:	f7fe fa21 	bl	8009b3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6fa:	480d      	ldr	r0, [pc, #52]	; (800b730 <prvInitialiseTaskLists+0x68>)
 800b6fc:	f7fe fa1e 	bl	8009b3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b700:	480c      	ldr	r0, [pc, #48]	; (800b734 <prvInitialiseTaskLists+0x6c>)
 800b702:	f7fe fa1b 	bl	8009b3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b706:	480c      	ldr	r0, [pc, #48]	; (800b738 <prvInitialiseTaskLists+0x70>)
 800b708:	f7fe fa18 	bl	8009b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b70c:	480b      	ldr	r0, [pc, #44]	; (800b73c <prvInitialiseTaskLists+0x74>)
 800b70e:	f7fe fa15 	bl	8009b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b712:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <prvInitialiseTaskLists+0x78>)
 800b714:	4a05      	ldr	r2, [pc, #20]	; (800b72c <prvInitialiseTaskLists+0x64>)
 800b716:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b718:	4b0a      	ldr	r3, [pc, #40]	; (800b744 <prvInitialiseTaskLists+0x7c>)
 800b71a:	4a05      	ldr	r2, [pc, #20]	; (800b730 <prvInitialiseTaskLists+0x68>)
 800b71c:	601a      	str	r2, [r3, #0]
}
 800b71e:	bf00      	nop
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20000e60 	.word	0x20000e60
 800b72c:	200012c0 	.word	0x200012c0
 800b730:	200012d4 	.word	0x200012d4
 800b734:	200012f0 	.word	0x200012f0
 800b738:	20001304 	.word	0x20001304
 800b73c:	2000131c 	.word	0x2000131c
 800b740:	200012e8 	.word	0x200012e8
 800b744:	200012ec 	.word	0x200012ec

0800b748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b74e:	e019      	b.n	800b784 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b750:	f001 f940 	bl	800c9d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b754:	4b10      	ldr	r3, [pc, #64]	; (800b798 <prvCheckTasksWaitingTermination+0x50>)
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3304      	adds	r3, #4
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fa75 	bl	8009c50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b766:	4b0d      	ldr	r3, [pc, #52]	; (800b79c <prvCheckTasksWaitingTermination+0x54>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3b01      	subs	r3, #1
 800b76c:	4a0b      	ldr	r2, [pc, #44]	; (800b79c <prvCheckTasksWaitingTermination+0x54>)
 800b76e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b770:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <prvCheckTasksWaitingTermination+0x58>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3b01      	subs	r3, #1
 800b776:	4a0a      	ldr	r2, [pc, #40]	; (800b7a0 <prvCheckTasksWaitingTermination+0x58>)
 800b778:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b77a:	f001 f95b 	bl	800ca34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f810 	bl	800b7a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b784:	4b06      	ldr	r3, [pc, #24]	; (800b7a0 <prvCheckTasksWaitingTermination+0x58>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e1      	bne.n	800b750 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b78c:	bf00      	nop
 800b78e:	bf00      	nop
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20001304 	.word	0x20001304
 800b79c:	20001330 	.word	0x20001330
 800b7a0:	20001318 	.word	0x20001318

0800b7a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d108      	bne.n	800b7c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f001 faf8 	bl	800cdb0 <vPortFree>
				vPortFree( pxTCB );
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f001 faf5 	bl	800cdb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7c6:	e018      	b.n	800b7fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d103      	bne.n	800b7da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f001 faec 	bl	800cdb0 <vPortFree>
	}
 800b7d8:	e00f      	b.n	800b7fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d00a      	beq.n	800b7fa <prvDeleteTCB+0x56>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	60fb      	str	r3, [r7, #12]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <prvDeleteTCB+0x54>
	}
 800b7fa:	bf00      	nop
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b80a:	4b0c      	ldr	r3, [pc, #48]	; (800b83c <prvResetNextTaskUnblockTime+0x38>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d104      	bne.n	800b81e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b814:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <prvResetNextTaskUnblockTime+0x3c>)
 800b816:	f04f 32ff 	mov.w	r2, #4294967295
 800b81a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b81c:	e008      	b.n	800b830 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b81e:	4b07      	ldr	r3, [pc, #28]	; (800b83c <prvResetNextTaskUnblockTime+0x38>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	4a04      	ldr	r2, [pc, #16]	; (800b840 <prvResetNextTaskUnblockTime+0x3c>)
 800b82e:	6013      	str	r3, [r2, #0]
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	200012e8 	.word	0x200012e8
 800b840:	20001350 	.word	0x20001350

0800b844 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b84a:	4b0b      	ldr	r3, [pc, #44]	; (800b878 <xTaskGetSchedulerState+0x34>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d102      	bne.n	800b858 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b852:	2301      	movs	r3, #1
 800b854:	607b      	str	r3, [r7, #4]
 800b856:	e008      	b.n	800b86a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b858:	4b08      	ldr	r3, [pc, #32]	; (800b87c <xTaskGetSchedulerState+0x38>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d102      	bne.n	800b866 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b860:	2302      	movs	r3, #2
 800b862:	607b      	str	r3, [r7, #4]
 800b864:	e001      	b.n	800b86a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b866:	2300      	movs	r3, #0
 800b868:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b86a:	687b      	ldr	r3, [r7, #4]
	}
 800b86c:	4618      	mov	r0, r3
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	2000133c 	.word	0x2000133c
 800b87c:	20001358 	.word	0x20001358

0800b880 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b88c:	2300      	movs	r3, #0
 800b88e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d051      	beq.n	800b93a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89a:	4b2a      	ldr	r3, [pc, #168]	; (800b944 <xTaskPriorityInherit+0xc4>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d241      	bcs.n	800b928 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	db06      	blt.n	800b8ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8ac:	4b25      	ldr	r3, [pc, #148]	; (800b944 <xTaskPriorityInherit+0xc4>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	6959      	ldr	r1, [r3, #20]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	4413      	add	r3, r2
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	4a1f      	ldr	r2, [pc, #124]	; (800b948 <xTaskPriorityInherit+0xc8>)
 800b8cc:	4413      	add	r3, r2
 800b8ce:	4299      	cmp	r1, r3
 800b8d0:	d122      	bne.n	800b918 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fe f9ba 	bl	8009c50 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b8dc:	4b19      	ldr	r3, [pc, #100]	; (800b944 <xTaskPriorityInherit+0xc4>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ea:	4b18      	ldr	r3, [pc, #96]	; (800b94c <xTaskPriorityInherit+0xcc>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d903      	bls.n	800b8fa <xTaskPriorityInherit+0x7a>
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f6:	4a15      	ldr	r2, [pc, #84]	; (800b94c <xTaskPriorityInherit+0xcc>)
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fe:	4613      	mov	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4a10      	ldr	r2, [pc, #64]	; (800b948 <xTaskPriorityInherit+0xc8>)
 800b908:	441a      	add	r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	3304      	adds	r3, #4
 800b90e:	4619      	mov	r1, r3
 800b910:	4610      	mov	r0, r2
 800b912:	f7fe f940 	bl	8009b96 <vListInsertEnd>
 800b916:	e004      	b.n	800b922 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b918:	4b0a      	ldr	r3, [pc, #40]	; (800b944 <xTaskPriorityInherit+0xc4>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b922:	2301      	movs	r3, #1
 800b924:	60fb      	str	r3, [r7, #12]
 800b926:	e008      	b.n	800b93a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b92c:	4b05      	ldr	r3, [pc, #20]	; (800b944 <xTaskPriorityInherit+0xc4>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b932:	429a      	cmp	r2, r3
 800b934:	d201      	bcs.n	800b93a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b936:	2301      	movs	r3, #1
 800b938:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b93a:	68fb      	ldr	r3, [r7, #12]
	}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	20000e5c 	.word	0x20000e5c
 800b948:	20000e60 	.word	0x20000e60
 800b94c:	20001338 	.word	0x20001338

0800b950 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b95c:	2300      	movs	r3, #0
 800b95e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d056      	beq.n	800ba14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b966:	4b2e      	ldr	r3, [pc, #184]	; (800ba20 <xTaskPriorityDisinherit+0xd0>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d00a      	beq.n	800b986 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b974:	f383 8811 	msr	BASEPRI, r3
 800b978:	f3bf 8f6f 	isb	sy
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	60fb      	str	r3, [r7, #12]
}
 800b982:	bf00      	nop
 800b984:	e7fe      	b.n	800b984 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10a      	bne.n	800b9a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	60bb      	str	r3, [r7, #8]
}
 800b9a0:	bf00      	nop
 800b9a2:	e7fe      	b.n	800b9a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9a8:	1e5a      	subs	r2, r3, #1
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d02c      	beq.n	800ba14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d128      	bne.n	800ba14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fe f942 	bl	8009c50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e4:	4b0f      	ldr	r3, [pc, #60]	; (800ba24 <xTaskPriorityDisinherit+0xd4>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d903      	bls.n	800b9f4 <xTaskPriorityDisinherit+0xa4>
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f0:	4a0c      	ldr	r2, [pc, #48]	; (800ba24 <xTaskPriorityDisinherit+0xd4>)
 800b9f2:	6013      	str	r3, [r2, #0]
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	4413      	add	r3, r2
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	4a09      	ldr	r2, [pc, #36]	; (800ba28 <xTaskPriorityDisinherit+0xd8>)
 800ba02:	441a      	add	r2, r3
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	3304      	adds	r3, #4
 800ba08:	4619      	mov	r1, r3
 800ba0a:	4610      	mov	r0, r2
 800ba0c:	f7fe f8c3 	bl	8009b96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba10:	2301      	movs	r3, #1
 800ba12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba14:	697b      	ldr	r3, [r7, #20]
	}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	20000e5c 	.word	0x20000e5c
 800ba24:	20001338 	.word	0x20001338
 800ba28:	20000e60 	.word	0x20000e60

0800ba2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b088      	sub	sp, #32
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d06a      	beq.n	800bb1a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10a      	bne.n	800ba62 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	60fb      	str	r3, [r7, #12]
}
 800ba5e:	bf00      	nop
 800ba60:	e7fe      	b.n	800ba60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d902      	bls.n	800ba72 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	61fb      	str	r3, [r7, #28]
 800ba70:	e002      	b.n	800ba78 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba76:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	69fa      	ldr	r2, [r7, #28]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d04b      	beq.n	800bb1a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba86:	697a      	ldr	r2, [r7, #20]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d146      	bne.n	800bb1a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ba8c:	4b25      	ldr	r3, [pc, #148]	; (800bb24 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	69ba      	ldr	r2, [r7, #24]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d10a      	bne.n	800baac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ba96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9a:	f383 8811 	msr	BASEPRI, r3
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	60bb      	str	r3, [r7, #8]
}
 800baa8:	bf00      	nop
 800baaa:	e7fe      	b.n	800baaa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	69fa      	ldr	r2, [r7, #28]
 800bab6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	2b00      	cmp	r3, #0
 800babe:	db04      	blt.n	800baca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	6959      	ldr	r1, [r3, #20]
 800bace:	693a      	ldr	r2, [r7, #16]
 800bad0:	4613      	mov	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4a13      	ldr	r2, [pc, #76]	; (800bb28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bada:	4413      	add	r3, r2
 800badc:	4299      	cmp	r1, r3
 800bade:	d11c      	bne.n	800bb1a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	3304      	adds	r3, #4
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7fe f8b3 	bl	8009c50 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baee:	4b0f      	ldr	r3, [pc, #60]	; (800bb2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d903      	bls.n	800bafe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafa:	4a0c      	ldr	r2, [pc, #48]	; (800bb2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bafc:	6013      	str	r3, [r2, #0]
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb02:	4613      	mov	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4a07      	ldr	r2, [pc, #28]	; (800bb28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb0c:	441a      	add	r2, r3
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	3304      	adds	r3, #4
 800bb12:	4619      	mov	r1, r3
 800bb14:	4610      	mov	r0, r2
 800bb16:	f7fe f83e 	bl	8009b96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb1a:	bf00      	nop
 800bb1c:	3720      	adds	r7, #32
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	20000e5c 	.word	0x20000e5c
 800bb28:	20000e60 	.word	0x20000e60
 800bb2c:	20001338 	.word	0x20001338

0800bb30 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bb36:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <uxTaskResetEventItemValue+0x2c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	699b      	ldr	r3, [r3, #24]
 800bb3c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb3e:	4b07      	ldr	r3, [pc, #28]	; (800bb5c <uxTaskResetEventItemValue+0x2c>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb44:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <uxTaskResetEventItemValue+0x2c>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bb4c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800bb4e:	687b      	ldr	r3, [r7, #4]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	20000e5c 	.word	0x20000e5c

0800bb60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb60:	b480      	push	{r7}
 800bb62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb64:	4b07      	ldr	r3, [pc, #28]	; (800bb84 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bb6c:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb72:	3201      	adds	r2, #1
 800bb74:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bb76:	4b03      	ldr	r3, [pc, #12]	; (800bb84 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb78:	681b      	ldr	r3, [r3, #0]
	}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	20000e5c 	.word	0x20000e5c

0800bb88 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bb92:	f000 ff1f 	bl	800c9d4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bb96:	4b1e      	ldr	r3, [pc, #120]	; (800bc10 <ulTaskNotifyTake+0x88>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d113      	bne.n	800bbc8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bba0:	4b1b      	ldr	r3, [pc, #108]	; (800bc10 <ulTaskNotifyTake+0x88>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2201      	movs	r2, #1
 800bba6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00b      	beq.n	800bbc8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	6838      	ldr	r0, [r7, #0]
 800bbb4:	f000 f9c4 	bl	800bf40 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bbb8:	4b16      	ldr	r3, [pc, #88]	; (800bc14 <ulTaskNotifyTake+0x8c>)
 800bbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbbe:	601a      	str	r2, [r3, #0]
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bbc8:	f000 ff34 	bl	800ca34 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bbcc:	f000 ff02 	bl	800c9d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bbd0:	4b0f      	ldr	r3, [pc, #60]	; (800bc10 <ulTaskNotifyTake+0x88>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00c      	beq.n	800bbf8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d004      	beq.n	800bbee <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bbe4:	4b0a      	ldr	r3, [pc, #40]	; (800bc10 <ulTaskNotifyTake+0x88>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	655a      	str	r2, [r3, #84]	; 0x54
 800bbec:	e004      	b.n	800bbf8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bbee:	4b08      	ldr	r3, [pc, #32]	; (800bc10 <ulTaskNotifyTake+0x88>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	3a01      	subs	r2, #1
 800bbf6:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bbf8:	4b05      	ldr	r3, [pc, #20]	; (800bc10 <ulTaskNotifyTake+0x88>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bc02:	f000 ff17 	bl	800ca34 <vPortExitCritical>

		return ulReturn;
 800bc06:	68fb      	ldr	r3, [r7, #12]
	}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20000e5c 	.word	0x20000e5c
 800bc14:	e000ed04 	.word	0xe000ed04

0800bc18 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08a      	sub	sp, #40	; 0x28
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	4613      	mov	r3, r2
 800bc26:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10a      	bne.n	800bc48 <xTaskGenericNotify+0x30>
	__asm volatile
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	61bb      	str	r3, [r7, #24]
}
 800bc44:	bf00      	nop
 800bc46:	e7fe      	b.n	800bc46 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bc4c:	f000 fec2 	bl	800c9d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d003      	beq.n	800bc5e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bc56:	6a3b      	ldr	r3, [r7, #32]
 800bc58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bc5e:	6a3b      	ldr	r3, [r7, #32]
 800bc60:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bc64:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	2202      	movs	r2, #2
 800bc6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800bc6e:	79fb      	ldrb	r3, [r7, #7]
 800bc70:	2b04      	cmp	r3, #4
 800bc72:	d828      	bhi.n	800bcc6 <xTaskGenericNotify+0xae>
 800bc74:	a201      	add	r2, pc, #4	; (adr r2, 800bc7c <xTaskGenericNotify+0x64>)
 800bc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7a:	bf00      	nop
 800bc7c:	0800bce7 	.word	0x0800bce7
 800bc80:	0800bc91 	.word	0x0800bc91
 800bc84:	0800bc9f 	.word	0x0800bc9f
 800bc88:	0800bcab 	.word	0x0800bcab
 800bc8c:	0800bcb3 	.word	0x0800bcb3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	431a      	orrs	r2, r3
 800bc98:	6a3b      	ldr	r3, [r7, #32]
 800bc9a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bc9c:	e026      	b.n	800bcec <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bc9e:	6a3b      	ldr	r3, [r7, #32]
 800bca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	6a3b      	ldr	r3, [r7, #32]
 800bca6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bca8:	e020      	b.n	800bcec <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bcaa:	6a3b      	ldr	r3, [r7, #32]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bcb0:	e01c      	b.n	800bcec <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bcb2:	7ffb      	ldrb	r3, [r7, #31]
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d003      	beq.n	800bcc0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bcb8:	6a3b      	ldr	r3, [r7, #32]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bcbe:	e015      	b.n	800bcec <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bcc4:	e012      	b.n	800bcec <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bcc6:	6a3b      	ldr	r3, [r7, #32]
 800bcc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcce:	d00c      	beq.n	800bcea <xTaskGenericNotify+0xd2>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	617b      	str	r3, [r7, #20]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xTaskGenericNotify+0xcc>
					break;
 800bce6:	bf00      	nop
 800bce8:	e000      	b.n	800bcec <xTaskGenericNotify+0xd4>

					break;
 800bcea:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bcec:	7ffb      	ldrb	r3, [r7, #31]
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d13a      	bne.n	800bd68 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcf2:	6a3b      	ldr	r3, [r7, #32]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fd ffaa 	bl	8009c50 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd00:	4b1d      	ldr	r3, [pc, #116]	; (800bd78 <xTaskGenericNotify+0x160>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d903      	bls.n	800bd10 <xTaskGenericNotify+0xf8>
 800bd08:	6a3b      	ldr	r3, [r7, #32]
 800bd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0c:	4a1a      	ldr	r2, [pc, #104]	; (800bd78 <xTaskGenericNotify+0x160>)
 800bd0e:	6013      	str	r3, [r2, #0]
 800bd10:	6a3b      	ldr	r3, [r7, #32]
 800bd12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd14:	4613      	mov	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4413      	add	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4a17      	ldr	r2, [pc, #92]	; (800bd7c <xTaskGenericNotify+0x164>)
 800bd1e:	441a      	add	r2, r3
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	3304      	adds	r3, #4
 800bd24:	4619      	mov	r1, r3
 800bd26:	4610      	mov	r0, r2
 800bd28:	f7fd ff35 	bl	8009b96 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bd2c:	6a3b      	ldr	r3, [r7, #32]
 800bd2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00a      	beq.n	800bd4a <xTaskGenericNotify+0x132>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	613b      	str	r3, [r7, #16]
}
 800bd46:	bf00      	nop
 800bd48:	e7fe      	b.n	800bd48 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4e:	4b0c      	ldr	r3, [pc, #48]	; (800bd80 <xTaskGenericNotify+0x168>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d907      	bls.n	800bd68 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bd58:	4b0a      	ldr	r3, [pc, #40]	; (800bd84 <xTaskGenericNotify+0x16c>)
 800bd5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bd68:	f000 fe64 	bl	800ca34 <vPortExitCritical>

		return xReturn;
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3728      	adds	r7, #40	; 0x28
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20001338 	.word	0x20001338
 800bd7c:	20000e60 	.word	0x20000e60
 800bd80:	20000e5c 	.word	0x20000e5c
 800bd84:	e000ed04 	.word	0xe000ed04

0800bd88 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08e      	sub	sp, #56	; 0x38
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	603b      	str	r3, [r7, #0]
 800bd94:	4613      	mov	r3, r2
 800bd96:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10a      	bne.n	800bdb8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800bda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda6:	f383 8811 	msr	BASEPRI, r3
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bdb4:	bf00      	nop
 800bdb6:	e7fe      	b.n	800bdb6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdb8:	f000 feee 	bl	800cb98 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800bdc0:	f3ef 8211 	mrs	r2, BASEPRI
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	623a      	str	r2, [r7, #32]
 800bdd6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bdd8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdda:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d003      	beq.n	800bdea <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bdf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	2b04      	cmp	r3, #4
 800be00:	d828      	bhi.n	800be54 <xTaskGenericNotifyFromISR+0xcc>
 800be02:	a201      	add	r2, pc, #4	; (adr r2, 800be08 <xTaskGenericNotifyFromISR+0x80>)
 800be04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be08:	0800be75 	.word	0x0800be75
 800be0c:	0800be1d 	.word	0x0800be1d
 800be10:	0800be2b 	.word	0x0800be2b
 800be14:	0800be37 	.word	0x0800be37
 800be18:	0800be3f 	.word	0x0800be3f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	431a      	orrs	r2, r3
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800be28:	e027      	b.n	800be7a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800be34:	e021      	b.n	800be7a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800be3c:	e01d      	b.n	800be7a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800be3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be42:	2b02      	cmp	r3, #2
 800be44:	d003      	beq.n	800be4e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800be46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800be4c:	e015      	b.n	800be7a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800be4e:	2300      	movs	r3, #0
 800be50:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800be52:	e012      	b.n	800be7a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800be54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be5c:	d00c      	beq.n	800be78 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	61bb      	str	r3, [r7, #24]
}
 800be70:	bf00      	nop
 800be72:	e7fe      	b.n	800be72 <xTaskGenericNotifyFromISR+0xea>
					break;
 800be74:	bf00      	nop
 800be76:	e000      	b.n	800be7a <xTaskGenericNotifyFromISR+0xf2>
					break;
 800be78:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800be7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d146      	bne.n	800bf10 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00a      	beq.n	800bea0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	617b      	str	r3, [r7, #20]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bea0:	4b21      	ldr	r3, [pc, #132]	; (800bf28 <xTaskGenericNotifyFromISR+0x1a0>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d11d      	bne.n	800bee4 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beaa:	3304      	adds	r3, #4
 800beac:	4618      	mov	r0, r3
 800beae:	f7fd fecf 	bl	8009c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb6:	4b1d      	ldr	r3, [pc, #116]	; (800bf2c <xTaskGenericNotifyFromISR+0x1a4>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d903      	bls.n	800bec6 <xTaskGenericNotifyFromISR+0x13e>
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec2:	4a1a      	ldr	r2, [pc, #104]	; (800bf2c <xTaskGenericNotifyFromISR+0x1a4>)
 800bec4:	6013      	str	r3, [r2, #0]
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beca:	4613      	mov	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4413      	add	r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	4a17      	ldr	r2, [pc, #92]	; (800bf30 <xTaskGenericNotifyFromISR+0x1a8>)
 800bed4:	441a      	add	r2, r3
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	3304      	adds	r3, #4
 800beda:	4619      	mov	r1, r3
 800bedc:	4610      	mov	r0, r2
 800bede:	f7fd fe5a 	bl	8009b96 <vListInsertEnd>
 800bee2:	e005      	b.n	800bef0 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee6:	3318      	adds	r3, #24
 800bee8:	4619      	mov	r1, r3
 800beea:	4812      	ldr	r0, [pc, #72]	; (800bf34 <xTaskGenericNotifyFromISR+0x1ac>)
 800beec:	f7fd fe53 	bl	8009b96 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef4:	4b10      	ldr	r3, [pc, #64]	; (800bf38 <xTaskGenericNotifyFromISR+0x1b0>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befa:	429a      	cmp	r2, r3
 800befc:	d908      	bls.n	800bf10 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800befe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d002      	beq.n	800bf0a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bf04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf06:	2201      	movs	r2, #1
 800bf08:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800bf0a:	4b0c      	ldr	r3, [pc, #48]	; (800bf3c <xTaskGenericNotifyFromISR+0x1b4>)
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf12:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	f383 8811 	msr	BASEPRI, r3
}
 800bf1a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800bf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3738      	adds	r7, #56	; 0x38
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20001358 	.word	0x20001358
 800bf2c:	20001338 	.word	0x20001338
 800bf30:	20000e60 	.word	0x20000e60
 800bf34:	200012f0 	.word	0x200012f0
 800bf38:	20000e5c 	.word	0x20000e5c
 800bf3c:	20001344 	.word	0x20001344

0800bf40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf4a:	4b21      	ldr	r3, [pc, #132]	; (800bfd0 <prvAddCurrentTaskToDelayedList+0x90>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf50:	4b20      	ldr	r3, [pc, #128]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3304      	adds	r3, #4
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fd fe7a 	bl	8009c50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d10a      	bne.n	800bf7a <prvAddCurrentTaskToDelayedList+0x3a>
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d007      	beq.n	800bf7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf6a:	4b1a      	ldr	r3, [pc, #104]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3304      	adds	r3, #4
 800bf70:	4619      	mov	r1, r3
 800bf72:	4819      	ldr	r0, [pc, #100]	; (800bfd8 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf74:	f7fd fe0f 	bl	8009b96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf78:	e026      	b.n	800bfc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4413      	add	r3, r2
 800bf80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf82:	4b14      	ldr	r3, [pc, #80]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d209      	bcs.n	800bfa6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf92:	4b12      	ldr	r3, [pc, #72]	; (800bfdc <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	4b0f      	ldr	r3, [pc, #60]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	f7fd fe1d 	bl	8009bde <vListInsert>
}
 800bfa4:	e010      	b.n	800bfc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfa6:	4b0e      	ldr	r3, [pc, #56]	; (800bfe0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3304      	adds	r3, #4
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	f7fd fe13 	bl	8009bde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfb8:	4b0a      	ldr	r3, [pc, #40]	; (800bfe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d202      	bcs.n	800bfc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bfc2:	4a08      	ldr	r2, [pc, #32]	; (800bfe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	6013      	str	r3, [r2, #0]
}
 800bfc8:	bf00      	nop
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	20001334 	.word	0x20001334
 800bfd4:	20000e5c 	.word	0x20000e5c
 800bfd8:	2000131c 	.word	0x2000131c
 800bfdc:	200012ec 	.word	0x200012ec
 800bfe0:	200012e8 	.word	0x200012e8
 800bfe4:	20001350 	.word	0x20001350

0800bfe8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	; 0x28
 800bfec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bfee:	2300      	movs	r3, #0
 800bff0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bff2:	f000 fb63 	bl	800c6bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bff6:	4b1c      	ldr	r3, [pc, #112]	; (800c068 <xTimerCreateTimerTask+0x80>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d021      	beq.n	800c042 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bffe:	2300      	movs	r3, #0
 800c000:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c002:	2300      	movs	r3, #0
 800c004:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c006:	1d3a      	adds	r2, r7, #4
 800c008:	f107 0108 	add.w	r1, r7, #8
 800c00c:	f107 030c 	add.w	r3, r7, #12
 800c010:	4618      	mov	r0, r3
 800c012:	f7fd fb8b 	bl	800972c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c016:	6879      	ldr	r1, [r7, #4]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	9202      	str	r2, [sp, #8]
 800c01e:	9301      	str	r3, [sp, #4]
 800c020:	2302      	movs	r3, #2
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	2300      	movs	r3, #0
 800c026:	460a      	mov	r2, r1
 800c028:	4910      	ldr	r1, [pc, #64]	; (800c06c <xTimerCreateTimerTask+0x84>)
 800c02a:	4811      	ldr	r0, [pc, #68]	; (800c070 <xTimerCreateTimerTask+0x88>)
 800c02c:	f7fe fd3c 	bl	800aaa8 <xTaskCreateStatic>
 800c030:	4603      	mov	r3, r0
 800c032:	4a10      	ldr	r2, [pc, #64]	; (800c074 <xTimerCreateTimerTask+0x8c>)
 800c034:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c036:	4b0f      	ldr	r3, [pc, #60]	; (800c074 <xTimerCreateTimerTask+0x8c>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c03e:	2301      	movs	r3, #1
 800c040:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10a      	bne.n	800c05e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04c:	f383 8811 	msr	BASEPRI, r3
 800c050:	f3bf 8f6f 	isb	sy
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	613b      	str	r3, [r7, #16]
}
 800c05a:	bf00      	nop
 800c05c:	e7fe      	b.n	800c05c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c05e:	697b      	ldr	r3, [r7, #20]
}
 800c060:	4618      	mov	r0, r3
 800c062:	3718      	adds	r7, #24
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	2000138c 	.word	0x2000138c
 800c06c:	0800eb58 	.word	0x0800eb58
 800c070:	0800c265 	.word	0x0800c265
 800c074:	20001390 	.word	0x20001390

0800c078 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b088      	sub	sp, #32
 800c07c:	af02      	add	r7, sp, #8
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c086:	202c      	movs	r0, #44	; 0x2c
 800c088:	f000 fdc6 	bl	800cc18 <pvPortMalloc>
 800c08c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00d      	beq.n	800c0b0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	6a3b      	ldr	r3, [r7, #32]
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	68b9      	ldr	r1, [r7, #8]
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 f805 	bl	800c0ba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c0b0:	697b      	ldr	r3, [r7, #20]
	}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b086      	sub	sp, #24
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	60b9      	str	r1, [r7, #8]
 800c0c4:	607a      	str	r2, [r7, #4]
 800c0c6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	617b      	str	r3, [r7, #20]
}
 800c0e0:	bf00      	nop
 800c0e2:	e7fe      	b.n	800c0e2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d01e      	beq.n	800c128 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c0ea:	f000 fae7 	bl	800c6bc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	6a3a      	ldr	r2, [r7, #32]
 800c104:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c108:	3304      	adds	r3, #4
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7fd fd36 	bl	8009b7c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d008      	beq.n	800c128 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c11c:	f043 0304 	orr.w	r3, r3, #4
 800c120:	b2da      	uxtb	r2, r3
 800c122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c128:	bf00      	nop
 800c12a:	3718      	adds	r7, #24
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b08a      	sub	sp, #40	; 0x28
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
 800c13c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c13e:	2300      	movs	r3, #0
 800c140:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10a      	bne.n	800c15e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	623b      	str	r3, [r7, #32]
}
 800c15a:	bf00      	nop
 800c15c:	e7fe      	b.n	800c15c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c15e:	4b1a      	ldr	r3, [pc, #104]	; (800c1c8 <xTimerGenericCommand+0x98>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d02a      	beq.n	800c1bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	2b05      	cmp	r3, #5
 800c176:	dc18      	bgt.n	800c1aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c178:	f7ff fb64 	bl	800b844 <xTaskGetSchedulerState>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b02      	cmp	r3, #2
 800c180:	d109      	bne.n	800c196 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c182:	4b11      	ldr	r3, [pc, #68]	; (800c1c8 <xTimerGenericCommand+0x98>)
 800c184:	6818      	ldr	r0, [r3, #0]
 800c186:	f107 0110 	add.w	r1, r7, #16
 800c18a:	2300      	movs	r3, #0
 800c18c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c18e:	f7fd ff31 	bl	8009ff4 <xQueueGenericSend>
 800c192:	6278      	str	r0, [r7, #36]	; 0x24
 800c194:	e012      	b.n	800c1bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c196:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <xTimerGenericCommand+0x98>)
 800c198:	6818      	ldr	r0, [r3, #0]
 800c19a:	f107 0110 	add.w	r1, r7, #16
 800c19e:	2300      	movs	r3, #0
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f7fd ff27 	bl	8009ff4 <xQueueGenericSend>
 800c1a6:	6278      	str	r0, [r7, #36]	; 0x24
 800c1a8:	e008      	b.n	800c1bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1aa:	4b07      	ldr	r3, [pc, #28]	; (800c1c8 <xTimerGenericCommand+0x98>)
 800c1ac:	6818      	ldr	r0, [r3, #0]
 800c1ae:	f107 0110 	add.w	r1, r7, #16
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	683a      	ldr	r2, [r7, #0]
 800c1b6:	f7fe f81b 	bl	800a1f0 <xQueueGenericSendFromISR>
 800c1ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3728      	adds	r7, #40	; 0x28
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	2000138c 	.word	0x2000138c

0800c1cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b088      	sub	sp, #32
 800c1d0:	af02      	add	r7, sp, #8
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1d6:	4b22      	ldr	r3, [pc, #136]	; (800c260 <prvProcessExpiredTimer+0x94>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fd fd33 	bl	8009c50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1f0:	f003 0304 	and.w	r3, r3, #4
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d022      	beq.n	800c23e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	699a      	ldr	r2, [r3, #24]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	18d1      	adds	r1, r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	683a      	ldr	r2, [r7, #0]
 800c204:	6978      	ldr	r0, [r7, #20]
 800c206:	f000 f8d1 	bl	800c3ac <prvInsertTimerInActiveList>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d01f      	beq.n	800c250 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c210:	2300      	movs	r3, #0
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	2300      	movs	r3, #0
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	2100      	movs	r1, #0
 800c21a:	6978      	ldr	r0, [r7, #20]
 800c21c:	f7ff ff88 	bl	800c130 <xTimerGenericCommand>
 800c220:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d113      	bne.n	800c250 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	60fb      	str	r3, [r7, #12]
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c244:	f023 0301 	bic.w	r3, r3, #1
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	6a1b      	ldr	r3, [r3, #32]
 800c254:	6978      	ldr	r0, [r7, #20]
 800c256:	4798      	blx	r3
}
 800c258:	bf00      	nop
 800c25a:	3718      	adds	r7, #24
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	20001384 	.word	0x20001384

0800c264 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c26c:	f107 0308 	add.w	r3, r7, #8
 800c270:	4618      	mov	r0, r3
 800c272:	f000 f857 	bl	800c324 <prvGetNextExpireTime>
 800c276:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	4619      	mov	r1, r3
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f000 f803 	bl	800c288 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c282:	f000 f8d5 	bl	800c430 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c286:	e7f1      	b.n	800c26c <prvTimerTask+0x8>

0800c288 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c292:	f7fe fe45 	bl	800af20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c296:	f107 0308 	add.w	r3, r7, #8
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 f866 	bl	800c36c <prvSampleTimeNow>
 800c2a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d130      	bne.n	800c30a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d10a      	bne.n	800c2c4 <prvProcessTimerOrBlockTask+0x3c>
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d806      	bhi.n	800c2c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2b6:	f7fe fe41 	bl	800af3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2ba:	68f9      	ldr	r1, [r7, #12]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f7ff ff85 	bl	800c1cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2c2:	e024      	b.n	800c30e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d008      	beq.n	800c2dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2ca:	4b13      	ldr	r3, [pc, #76]	; (800c318 <prvProcessTimerOrBlockTask+0x90>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d101      	bne.n	800c2d8 <prvProcessTimerOrBlockTask+0x50>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e000      	b.n	800c2da <prvProcessTimerOrBlockTask+0x52>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2dc:	4b0f      	ldr	r3, [pc, #60]	; (800c31c <prvProcessTimerOrBlockTask+0x94>)
 800c2de:	6818      	ldr	r0, [r3, #0]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	1ad3      	subs	r3, r2, r3
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	f7fe fba9 	bl	800aa40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2ee:	f7fe fe25 	bl	800af3c <xTaskResumeAll>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d10a      	bne.n	800c30e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c2f8:	4b09      	ldr	r3, [pc, #36]	; (800c320 <prvProcessTimerOrBlockTask+0x98>)
 800c2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2fe:	601a      	str	r2, [r3, #0]
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	f3bf 8f6f 	isb	sy
}
 800c308:	e001      	b.n	800c30e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c30a:	f7fe fe17 	bl	800af3c <xTaskResumeAll>
}
 800c30e:	bf00      	nop
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20001388 	.word	0x20001388
 800c31c:	2000138c 	.word	0x2000138c
 800c320:	e000ed04 	.word	0xe000ed04

0800c324 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c32c:	4b0e      	ldr	r3, [pc, #56]	; (800c368 <prvGetNextExpireTime+0x44>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <prvGetNextExpireTime+0x16>
 800c336:	2201      	movs	r2, #1
 800c338:	e000      	b.n	800c33c <prvGetNextExpireTime+0x18>
 800c33a:	2200      	movs	r2, #0
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d105      	bne.n	800c354 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c348:	4b07      	ldr	r3, [pc, #28]	; (800c368 <prvGetNextExpireTime+0x44>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	60fb      	str	r3, [r7, #12]
 800c352:	e001      	b.n	800c358 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c354:	2300      	movs	r3, #0
 800c356:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c358:	68fb      	ldr	r3, [r7, #12]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3714      	adds	r7, #20
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	20001384 	.word	0x20001384

0800c36c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c374:	f7fe fe80 	bl	800b078 <xTaskGetTickCount>
 800c378:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c37a:	4b0b      	ldr	r3, [pc, #44]	; (800c3a8 <prvSampleTimeNow+0x3c>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	429a      	cmp	r2, r3
 800c382:	d205      	bcs.n	800c390 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c384:	f000 f936 	bl	800c5f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	601a      	str	r2, [r3, #0]
 800c38e:	e002      	b.n	800c396 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c396:	4a04      	ldr	r2, [pc, #16]	; (800c3a8 <prvSampleTimeNow+0x3c>)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c39c:	68fb      	ldr	r3, [r7, #12]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	20001394 	.word	0x20001394

0800c3ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
 800c3b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d812      	bhi.n	800c3f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	1ad2      	subs	r2, r2, r3
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	699b      	ldr	r3, [r3, #24]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d302      	bcc.n	800c3e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	617b      	str	r3, [r7, #20]
 800c3e4:	e01b      	b.n	800c41e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3e6:	4b10      	ldr	r3, [pc, #64]	; (800c428 <prvInsertTimerInActiveList+0x7c>)
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	f7fd fbf4 	bl	8009bde <vListInsert>
 800c3f6:	e012      	b.n	800c41e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d206      	bcs.n	800c40e <prvInsertTimerInActiveList+0x62>
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	429a      	cmp	r2, r3
 800c406:	d302      	bcc.n	800c40e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c408:	2301      	movs	r3, #1
 800c40a:	617b      	str	r3, [r7, #20]
 800c40c:	e007      	b.n	800c41e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c40e:	4b07      	ldr	r3, [pc, #28]	; (800c42c <prvInsertTimerInActiveList+0x80>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	3304      	adds	r3, #4
 800c416:	4619      	mov	r1, r3
 800c418:	4610      	mov	r0, r2
 800c41a:	f7fd fbe0 	bl	8009bde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c41e:	697b      	ldr	r3, [r7, #20]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3718      	adds	r7, #24
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	20001388 	.word	0x20001388
 800c42c:	20001384 	.word	0x20001384

0800c430 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b08e      	sub	sp, #56	; 0x38
 800c434:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c436:	e0ca      	b.n	800c5ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	da18      	bge.n	800c470 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c43e:	1d3b      	adds	r3, r7, #4
 800c440:	3304      	adds	r3, #4
 800c442:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	2b00      	cmp	r3, #0
 800c448:	d10a      	bne.n	800c460 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	61fb      	str	r3, [r7, #28]
}
 800c45c:	bf00      	nop
 800c45e:	e7fe      	b.n	800c45e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c466:	6850      	ldr	r0, [r2, #4]
 800c468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c46a:	6892      	ldr	r2, [r2, #8]
 800c46c:	4611      	mov	r1, r2
 800c46e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	f2c0 80ab 	blt.w	800c5ce <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47e:	695b      	ldr	r3, [r3, #20]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d004      	beq.n	800c48e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c486:	3304      	adds	r3, #4
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fd fbe1 	bl	8009c50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c48e:	463b      	mov	r3, r7
 800c490:	4618      	mov	r0, r3
 800c492:	f7ff ff6b 	bl	800c36c <prvSampleTimeNow>
 800c496:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b09      	cmp	r3, #9
 800c49c:	f200 8096 	bhi.w	800c5cc <prvProcessReceivedCommands+0x19c>
 800c4a0:	a201      	add	r2, pc, #4	; (adr r2, 800c4a8 <prvProcessReceivedCommands+0x78>)
 800c4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a6:	bf00      	nop
 800c4a8:	0800c4d1 	.word	0x0800c4d1
 800c4ac:	0800c4d1 	.word	0x0800c4d1
 800c4b0:	0800c4d1 	.word	0x0800c4d1
 800c4b4:	0800c545 	.word	0x0800c545
 800c4b8:	0800c559 	.word	0x0800c559
 800c4bc:	0800c5a3 	.word	0x0800c5a3
 800c4c0:	0800c4d1 	.word	0x0800c4d1
 800c4c4:	0800c4d1 	.word	0x0800c4d1
 800c4c8:	0800c545 	.word	0x0800c545
 800c4cc:	0800c559 	.word	0x0800c559
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4d6:	f043 0301 	orr.w	r3, r3, #1
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	18d1      	adds	r1, r2, r3
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4f0:	f7ff ff5c 	bl	800c3ac <prvInsertTimerInActiveList>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d069      	beq.n	800c5ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fc:	6a1b      	ldr	r3, [r3, #32]
 800c4fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c500:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c508:	f003 0304 	and.w	r3, r3, #4
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d05e      	beq.n	800c5ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	441a      	add	r2, r3
 800c518:	2300      	movs	r3, #0
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	2300      	movs	r3, #0
 800c51e:	2100      	movs	r1, #0
 800c520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c522:	f7ff fe05 	bl	800c130 <xTimerGenericCommand>
 800c526:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d14f      	bne.n	800c5ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	61bb      	str	r3, [r7, #24]
}
 800c540:	bf00      	nop
 800c542:	e7fe      	b.n	800c542 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c54a:	f023 0301 	bic.w	r3, r3, #1
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c556:	e03a      	b.n	800c5ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c55e:	f043 0301 	orr.w	r3, r3, #1
 800c562:	b2da      	uxtb	r2, r3
 800c564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c572:	699b      	ldr	r3, [r3, #24]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10a      	bne.n	800c58e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57c:	f383 8811 	msr	BASEPRI, r3
 800c580:	f3bf 8f6f 	isb	sy
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	617b      	str	r3, [r7, #20]
}
 800c58a:	bf00      	nop
 800c58c:	e7fe      	b.n	800c58c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	699a      	ldr	r2, [r3, #24]
 800c592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c594:	18d1      	adds	r1, r2, r3
 800c596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c59a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c59c:	f7ff ff06 	bl	800c3ac <prvInsertTimerInActiveList>
					break;
 800c5a0:	e015      	b.n	800c5ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5a8:	f003 0302 	and.w	r3, r3, #2
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d103      	bne.n	800c5b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c5b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5b2:	f000 fbfd 	bl	800cdb0 <vPortFree>
 800c5b6:	e00a      	b.n	800c5ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5be:	f023 0301 	bic.w	r3, r3, #1
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5ca:	e000      	b.n	800c5ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c5cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5ce:	4b08      	ldr	r3, [pc, #32]	; (800c5f0 <prvProcessReceivedCommands+0x1c0>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	1d39      	adds	r1, r7, #4
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fd fea6 	bl	800a328 <xQueueReceive>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f47f af2a 	bne.w	800c438 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c5e4:	bf00      	nop
 800c5e6:	bf00      	nop
 800c5e8:	3730      	adds	r7, #48	; 0x30
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	2000138c 	.word	0x2000138c

0800c5f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b088      	sub	sp, #32
 800c5f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5fa:	e048      	b.n	800c68e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5fc:	4b2d      	ldr	r3, [pc, #180]	; (800c6b4 <prvSwitchTimerLists+0xc0>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c606:	4b2b      	ldr	r3, [pc, #172]	; (800c6b4 <prvSwitchTimerLists+0xc0>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	3304      	adds	r3, #4
 800c614:	4618      	mov	r0, r3
 800c616:	f7fd fb1b 	bl	8009c50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d02e      	beq.n	800c68e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	4413      	add	r3, r2
 800c638:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d90e      	bls.n	800c660 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c64e:	4b19      	ldr	r3, [pc, #100]	; (800c6b4 <prvSwitchTimerLists+0xc0>)
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	3304      	adds	r3, #4
 800c656:	4619      	mov	r1, r3
 800c658:	4610      	mov	r0, r2
 800c65a:	f7fd fac0 	bl	8009bde <vListInsert>
 800c65e:	e016      	b.n	800c68e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c660:	2300      	movs	r3, #0
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	2300      	movs	r3, #0
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	2100      	movs	r1, #0
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f7ff fd60 	bl	800c130 <xTimerGenericCommand>
 800c670:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10a      	bne.n	800c68e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67c:	f383 8811 	msr	BASEPRI, r3
 800c680:	f3bf 8f6f 	isb	sy
 800c684:	f3bf 8f4f 	dsb	sy
 800c688:	603b      	str	r3, [r7, #0]
}
 800c68a:	bf00      	nop
 800c68c:	e7fe      	b.n	800c68c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c68e:	4b09      	ldr	r3, [pc, #36]	; (800c6b4 <prvSwitchTimerLists+0xc0>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1b1      	bne.n	800c5fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c698:	4b06      	ldr	r3, [pc, #24]	; (800c6b4 <prvSwitchTimerLists+0xc0>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c69e:	4b06      	ldr	r3, [pc, #24]	; (800c6b8 <prvSwitchTimerLists+0xc4>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a04      	ldr	r2, [pc, #16]	; (800c6b4 <prvSwitchTimerLists+0xc0>)
 800c6a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6a6:	4a04      	ldr	r2, [pc, #16]	; (800c6b8 <prvSwitchTimerLists+0xc4>)
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	6013      	str	r3, [r2, #0]
}
 800c6ac:	bf00      	nop
 800c6ae:	3718      	adds	r7, #24
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	20001384 	.word	0x20001384
 800c6b8:	20001388 	.word	0x20001388

0800c6bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6c2:	f000 f987 	bl	800c9d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6c6:	4b15      	ldr	r3, [pc, #84]	; (800c71c <prvCheckForValidListAndQueue+0x60>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d120      	bne.n	800c710 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6ce:	4814      	ldr	r0, [pc, #80]	; (800c720 <prvCheckForValidListAndQueue+0x64>)
 800c6d0:	f7fd fa34 	bl	8009b3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6d4:	4813      	ldr	r0, [pc, #76]	; (800c724 <prvCheckForValidListAndQueue+0x68>)
 800c6d6:	f7fd fa31 	bl	8009b3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6da:	4b13      	ldr	r3, [pc, #76]	; (800c728 <prvCheckForValidListAndQueue+0x6c>)
 800c6dc:	4a10      	ldr	r2, [pc, #64]	; (800c720 <prvCheckForValidListAndQueue+0x64>)
 800c6de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6e0:	4b12      	ldr	r3, [pc, #72]	; (800c72c <prvCheckForValidListAndQueue+0x70>)
 800c6e2:	4a10      	ldr	r2, [pc, #64]	; (800c724 <prvCheckForValidListAndQueue+0x68>)
 800c6e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	4b11      	ldr	r3, [pc, #68]	; (800c730 <prvCheckForValidListAndQueue+0x74>)
 800c6ec:	4a11      	ldr	r2, [pc, #68]	; (800c734 <prvCheckForValidListAndQueue+0x78>)
 800c6ee:	2110      	movs	r1, #16
 800c6f0:	200a      	movs	r0, #10
 800c6f2:	f7fd fb3f 	bl	8009d74 <xQueueGenericCreateStatic>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	4a08      	ldr	r2, [pc, #32]	; (800c71c <prvCheckForValidListAndQueue+0x60>)
 800c6fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c6fc:	4b07      	ldr	r3, [pc, #28]	; (800c71c <prvCheckForValidListAndQueue+0x60>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d005      	beq.n	800c710 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c704:	4b05      	ldr	r3, [pc, #20]	; (800c71c <prvCheckForValidListAndQueue+0x60>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	490b      	ldr	r1, [pc, #44]	; (800c738 <prvCheckForValidListAndQueue+0x7c>)
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fe f944 	bl	800a998 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c710:	f000 f990 	bl	800ca34 <vPortExitCritical>
}
 800c714:	bf00      	nop
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	2000138c 	.word	0x2000138c
 800c720:	2000135c 	.word	0x2000135c
 800c724:	20001370 	.word	0x20001370
 800c728:	20001384 	.word	0x20001384
 800c72c:	20001388 	.word	0x20001388
 800c730:	20001438 	.word	0x20001438
 800c734:	20001398 	.word	0x20001398
 800c738:	0800eb60 	.word	0x0800eb60

0800c73c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b08a      	sub	sp, #40	; 0x28
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
 800c748:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c74a:	f06f 0301 	mvn.w	r3, #1
 800c74e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c75c:	4b06      	ldr	r3, [pc, #24]	; (800c778 <xTimerPendFunctionCallFromISR+0x3c>)
 800c75e:	6818      	ldr	r0, [r3, #0]
 800c760:	f107 0114 	add.w	r1, r7, #20
 800c764:	2300      	movs	r3, #0
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	f7fd fd42 	bl	800a1f0 <xQueueGenericSendFromISR>
 800c76c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c770:	4618      	mov	r0, r3
 800c772:	3728      	adds	r7, #40	; 0x28
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	2000138c 	.word	0x2000138c

0800c77c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	3b04      	subs	r3, #4
 800c78c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3b04      	subs	r3, #4
 800c79a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	f023 0201 	bic.w	r2, r3, #1
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	3b04      	subs	r3, #4
 800c7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c7ac:	4a0c      	ldr	r2, [pc, #48]	; (800c7e0 <pxPortInitialiseStack+0x64>)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	3b14      	subs	r3, #20
 800c7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	3b04      	subs	r3, #4
 800c7c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f06f 0202 	mvn.w	r2, #2
 800c7ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	3b20      	subs	r3, #32
 800c7d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3714      	adds	r7, #20
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr
 800c7e0:	0800c7e5 	.word	0x0800c7e5

0800c7e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7ee:	4b12      	ldr	r3, [pc, #72]	; (800c838 <prvTaskExitError+0x54>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f6:	d00a      	beq.n	800c80e <prvTaskExitError+0x2a>
	__asm volatile
 800c7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	60fb      	str	r3, [r7, #12]
}
 800c80a:	bf00      	nop
 800c80c:	e7fe      	b.n	800c80c <prvTaskExitError+0x28>
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	60bb      	str	r3, [r7, #8]
}
 800c820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c822:	bf00      	nop
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d0fc      	beq.n	800c824 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c82a:	bf00      	nop
 800c82c:	bf00      	nop
 800c82e:	3714      	adds	r7, #20
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr
 800c838:	20000078 	.word	0x20000078
 800c83c:	00000000 	.word	0x00000000

0800c840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c840:	4b07      	ldr	r3, [pc, #28]	; (800c860 <pxCurrentTCBConst2>)
 800c842:	6819      	ldr	r1, [r3, #0]
 800c844:	6808      	ldr	r0, [r1, #0]
 800c846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84a:	f380 8809 	msr	PSP, r0
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f04f 0000 	mov.w	r0, #0
 800c856:	f380 8811 	msr	BASEPRI, r0
 800c85a:	4770      	bx	lr
 800c85c:	f3af 8000 	nop.w

0800c860 <pxCurrentTCBConst2>:
 800c860:	20000e5c 	.word	0x20000e5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop

0800c868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c868:	4808      	ldr	r0, [pc, #32]	; (800c88c <prvPortStartFirstTask+0x24>)
 800c86a:	6800      	ldr	r0, [r0, #0]
 800c86c:	6800      	ldr	r0, [r0, #0]
 800c86e:	f380 8808 	msr	MSP, r0
 800c872:	f04f 0000 	mov.w	r0, #0
 800c876:	f380 8814 	msr	CONTROL, r0
 800c87a:	b662      	cpsie	i
 800c87c:	b661      	cpsie	f
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	df00      	svc	0
 800c888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c88a:	bf00      	nop
 800c88c:	e000ed08 	.word	0xe000ed08

0800c890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b086      	sub	sp, #24
 800c894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c896:	4b46      	ldr	r3, [pc, #280]	; (800c9b0 <xPortStartScheduler+0x120>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a46      	ldr	r2, [pc, #280]	; (800c9b4 <xPortStartScheduler+0x124>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d10a      	bne.n	800c8b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a4:	f383 8811 	msr	BASEPRI, r3
 800c8a8:	f3bf 8f6f 	isb	sy
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	613b      	str	r3, [r7, #16]
}
 800c8b2:	bf00      	nop
 800c8b4:	e7fe      	b.n	800c8b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c8b6:	4b3e      	ldr	r3, [pc, #248]	; (800c9b0 <xPortStartScheduler+0x120>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a3f      	ldr	r2, [pc, #252]	; (800c9b8 <xPortStartScheduler+0x128>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d10a      	bne.n	800c8d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	60fb      	str	r3, [r7, #12]
}
 800c8d2:	bf00      	nop
 800c8d4:	e7fe      	b.n	800c8d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8d6:	4b39      	ldr	r3, [pc, #228]	; (800c9bc <xPortStartScheduler+0x12c>)
 800c8d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	22ff      	movs	r2, #255	; 0xff
 800c8e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8f0:	78fb      	ldrb	r3, [r7, #3]
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	4b31      	ldr	r3, [pc, #196]	; (800c9c0 <xPortStartScheduler+0x130>)
 800c8fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8fe:	4b31      	ldr	r3, [pc, #196]	; (800c9c4 <xPortStartScheduler+0x134>)
 800c900:	2207      	movs	r2, #7
 800c902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c904:	e009      	b.n	800c91a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c906:	4b2f      	ldr	r3, [pc, #188]	; (800c9c4 <xPortStartScheduler+0x134>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3b01      	subs	r3, #1
 800c90c:	4a2d      	ldr	r2, [pc, #180]	; (800c9c4 <xPortStartScheduler+0x134>)
 800c90e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c910:	78fb      	ldrb	r3, [r7, #3]
 800c912:	b2db      	uxtb	r3, r3
 800c914:	005b      	lsls	r3, r3, #1
 800c916:	b2db      	uxtb	r3, r3
 800c918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c91a:	78fb      	ldrb	r3, [r7, #3]
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c922:	2b80      	cmp	r3, #128	; 0x80
 800c924:	d0ef      	beq.n	800c906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c926:	4b27      	ldr	r3, [pc, #156]	; (800c9c4 <xPortStartScheduler+0x134>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f1c3 0307 	rsb	r3, r3, #7
 800c92e:	2b04      	cmp	r3, #4
 800c930:	d00a      	beq.n	800c948 <xPortStartScheduler+0xb8>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	60bb      	str	r3, [r7, #8]
}
 800c944:	bf00      	nop
 800c946:	e7fe      	b.n	800c946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c948:	4b1e      	ldr	r3, [pc, #120]	; (800c9c4 <xPortStartScheduler+0x134>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	021b      	lsls	r3, r3, #8
 800c94e:	4a1d      	ldr	r2, [pc, #116]	; (800c9c4 <xPortStartScheduler+0x134>)
 800c950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c952:	4b1c      	ldr	r3, [pc, #112]	; (800c9c4 <xPortStartScheduler+0x134>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c95a:	4a1a      	ldr	r2, [pc, #104]	; (800c9c4 <xPortStartScheduler+0x134>)
 800c95c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	b2da      	uxtb	r2, r3
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c966:	4b18      	ldr	r3, [pc, #96]	; (800c9c8 <xPortStartScheduler+0x138>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a17      	ldr	r2, [pc, #92]	; (800c9c8 <xPortStartScheduler+0x138>)
 800c96c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c972:	4b15      	ldr	r3, [pc, #84]	; (800c9c8 <xPortStartScheduler+0x138>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a14      	ldr	r2, [pc, #80]	; (800c9c8 <xPortStartScheduler+0x138>)
 800c978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c97c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c97e:	f000 f8dd 	bl	800cb3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c982:	4b12      	ldr	r3, [pc, #72]	; (800c9cc <xPortStartScheduler+0x13c>)
 800c984:	2200      	movs	r2, #0
 800c986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c988:	f000 f8fc 	bl	800cb84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c98c:	4b10      	ldr	r3, [pc, #64]	; (800c9d0 <xPortStartScheduler+0x140>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a0f      	ldr	r2, [pc, #60]	; (800c9d0 <xPortStartScheduler+0x140>)
 800c992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c998:	f7ff ff66 	bl	800c868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c99c:	f7fe fc48 	bl	800b230 <vTaskSwitchContext>
	prvTaskExitError();
 800c9a0:	f7ff ff20 	bl	800c7e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3718      	adds	r7, #24
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	e000ed00 	.word	0xe000ed00
 800c9b4:	410fc271 	.word	0x410fc271
 800c9b8:	410fc270 	.word	0x410fc270
 800c9bc:	e000e400 	.word	0xe000e400
 800c9c0:	20001488 	.word	0x20001488
 800c9c4:	2000148c 	.word	0x2000148c
 800c9c8:	e000ed20 	.word	0xe000ed20
 800c9cc:	20000078 	.word	0x20000078
 800c9d0:	e000ef34 	.word	0xe000ef34

0800c9d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	607b      	str	r3, [r7, #4]
}
 800c9ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9ee:	4b0f      	ldr	r3, [pc, #60]	; (800ca2c <vPortEnterCritical+0x58>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	4a0d      	ldr	r2, [pc, #52]	; (800ca2c <vPortEnterCritical+0x58>)
 800c9f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9f8:	4b0c      	ldr	r3, [pc, #48]	; (800ca2c <vPortEnterCritical+0x58>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d10f      	bne.n	800ca20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca00:	4b0b      	ldr	r3, [pc, #44]	; (800ca30 <vPortEnterCritical+0x5c>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00a      	beq.n	800ca20 <vPortEnterCritical+0x4c>
	__asm volatile
 800ca0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	603b      	str	r3, [r7, #0]
}
 800ca1c:	bf00      	nop
 800ca1e:	e7fe      	b.n	800ca1e <vPortEnterCritical+0x4a>
	}
}
 800ca20:	bf00      	nop
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr
 800ca2c:	20000078 	.word	0x20000078
 800ca30:	e000ed04 	.word	0xe000ed04

0800ca34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca3a:	4b12      	ldr	r3, [pc, #72]	; (800ca84 <vPortExitCritical+0x50>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d10a      	bne.n	800ca58 <vPortExitCritical+0x24>
	__asm volatile
 800ca42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca46:	f383 8811 	msr	BASEPRI, r3
 800ca4a:	f3bf 8f6f 	isb	sy
 800ca4e:	f3bf 8f4f 	dsb	sy
 800ca52:	607b      	str	r3, [r7, #4]
}
 800ca54:	bf00      	nop
 800ca56:	e7fe      	b.n	800ca56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca58:	4b0a      	ldr	r3, [pc, #40]	; (800ca84 <vPortExitCritical+0x50>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	4a09      	ldr	r2, [pc, #36]	; (800ca84 <vPortExitCritical+0x50>)
 800ca60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca62:	4b08      	ldr	r3, [pc, #32]	; (800ca84 <vPortExitCritical+0x50>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d105      	bne.n	800ca76 <vPortExitCritical+0x42>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	f383 8811 	msr	BASEPRI, r3
}
 800ca74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca76:	bf00      	nop
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	20000078 	.word	0x20000078
	...

0800ca90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca90:	f3ef 8009 	mrs	r0, PSP
 800ca94:	f3bf 8f6f 	isb	sy
 800ca98:	4b15      	ldr	r3, [pc, #84]	; (800caf0 <pxCurrentTCBConst>)
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	f01e 0f10 	tst.w	lr, #16
 800caa0:	bf08      	it	eq
 800caa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800caa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caaa:	6010      	str	r0, [r2, #0]
 800caac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cab4:	f380 8811 	msr	BASEPRI, r0
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f7fe fbb6 	bl	800b230 <vTaskSwitchContext>
 800cac4:	f04f 0000 	mov.w	r0, #0
 800cac8:	f380 8811 	msr	BASEPRI, r0
 800cacc:	bc09      	pop	{r0, r3}
 800cace:	6819      	ldr	r1, [r3, #0]
 800cad0:	6808      	ldr	r0, [r1, #0]
 800cad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad6:	f01e 0f10 	tst.w	lr, #16
 800cada:	bf08      	it	eq
 800cadc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cae0:	f380 8809 	msr	PSP, r0
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	f3af 8000 	nop.w

0800caf0 <pxCurrentTCBConst>:
 800caf0:	20000e5c 	.word	0x20000e5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop

0800caf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	607b      	str	r3, [r7, #4]
}
 800cb10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb12:	f7fe fad3 	bl	800b0bc <xTaskIncrementTick>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d003      	beq.n	800cb24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb1c:	4b06      	ldr	r3, [pc, #24]	; (800cb38 <xPortSysTickHandler+0x40>)
 800cb1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb22:	601a      	str	r2, [r3, #0]
 800cb24:	2300      	movs	r3, #0
 800cb26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	f383 8811 	msr	BASEPRI, r3
}
 800cb2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	e000ed04 	.word	0xe000ed04

0800cb3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb40:	4b0b      	ldr	r3, [pc, #44]	; (800cb70 <vPortSetupTimerInterrupt+0x34>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb46:	4b0b      	ldr	r3, [pc, #44]	; (800cb74 <vPortSetupTimerInterrupt+0x38>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb4c:	4b0a      	ldr	r3, [pc, #40]	; (800cb78 <vPortSetupTimerInterrupt+0x3c>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a0a      	ldr	r2, [pc, #40]	; (800cb7c <vPortSetupTimerInterrupt+0x40>)
 800cb52:	fba2 2303 	umull	r2, r3, r2, r3
 800cb56:	099b      	lsrs	r3, r3, #6
 800cb58:	4a09      	ldr	r2, [pc, #36]	; (800cb80 <vPortSetupTimerInterrupt+0x44>)
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb5e:	4b04      	ldr	r3, [pc, #16]	; (800cb70 <vPortSetupTimerInterrupt+0x34>)
 800cb60:	2207      	movs	r2, #7
 800cb62:	601a      	str	r2, [r3, #0]
}
 800cb64:	bf00      	nop
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	e000e010 	.word	0xe000e010
 800cb74:	e000e018 	.word	0xe000e018
 800cb78:	2000006c 	.word	0x2000006c
 800cb7c:	10624dd3 	.word	0x10624dd3
 800cb80:	e000e014 	.word	0xe000e014

0800cb84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb94 <vPortEnableVFP+0x10>
 800cb88:	6801      	ldr	r1, [r0, #0]
 800cb8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb8e:	6001      	str	r1, [r0, #0]
 800cb90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb92:	bf00      	nop
 800cb94:	e000ed88 	.word	0xe000ed88

0800cb98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb9e:	f3ef 8305 	mrs	r3, IPSR
 800cba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2b0f      	cmp	r3, #15
 800cba8:	d914      	bls.n	800cbd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cbaa:	4a17      	ldr	r2, [pc, #92]	; (800cc08 <vPortValidateInterruptPriority+0x70>)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	4413      	add	r3, r2
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cbb4:	4b15      	ldr	r3, [pc, #84]	; (800cc0c <vPortValidateInterruptPriority+0x74>)
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	7afa      	ldrb	r2, [r7, #11]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d20a      	bcs.n	800cbd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc2:	f383 8811 	msr	BASEPRI, r3
 800cbc6:	f3bf 8f6f 	isb	sy
 800cbca:	f3bf 8f4f 	dsb	sy
 800cbce:	607b      	str	r3, [r7, #4]
}
 800cbd0:	bf00      	nop
 800cbd2:	e7fe      	b.n	800cbd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cbd4:	4b0e      	ldr	r3, [pc, #56]	; (800cc10 <vPortValidateInterruptPriority+0x78>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cbdc:	4b0d      	ldr	r3, [pc, #52]	; (800cc14 <vPortValidateInterruptPriority+0x7c>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d90a      	bls.n	800cbfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	603b      	str	r3, [r7, #0]
}
 800cbf6:	bf00      	nop
 800cbf8:	e7fe      	b.n	800cbf8 <vPortValidateInterruptPriority+0x60>
	}
 800cbfa:	bf00      	nop
 800cbfc:	3714      	adds	r7, #20
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	e000e3f0 	.word	0xe000e3f0
 800cc0c:	20001488 	.word	0x20001488
 800cc10:	e000ed0c 	.word	0xe000ed0c
 800cc14:	2000148c 	.word	0x2000148c

0800cc18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b08a      	sub	sp, #40	; 0x28
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc20:	2300      	movs	r3, #0
 800cc22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc24:	f7fe f97c 	bl	800af20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc28:	4b5b      	ldr	r3, [pc, #364]	; (800cd98 <pvPortMalloc+0x180>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d101      	bne.n	800cc34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc30:	f000 f920 	bl	800ce74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc34:	4b59      	ldr	r3, [pc, #356]	; (800cd9c <pvPortMalloc+0x184>)
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f040 8093 	bne.w	800cd68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d01d      	beq.n	800cc84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cc48:	2208      	movs	r2, #8
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f003 0307 	and.w	r3, r3, #7
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d014      	beq.n	800cc84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f023 0307 	bic.w	r3, r3, #7
 800cc60:	3308      	adds	r3, #8
 800cc62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f003 0307 	and.w	r3, r3, #7
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00a      	beq.n	800cc84 <pvPortMalloc+0x6c>
	__asm volatile
 800cc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc72:	f383 8811 	msr	BASEPRI, r3
 800cc76:	f3bf 8f6f 	isb	sy
 800cc7a:	f3bf 8f4f 	dsb	sy
 800cc7e:	617b      	str	r3, [r7, #20]
}
 800cc80:	bf00      	nop
 800cc82:	e7fe      	b.n	800cc82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d06e      	beq.n	800cd68 <pvPortMalloc+0x150>
 800cc8a:	4b45      	ldr	r3, [pc, #276]	; (800cda0 <pvPortMalloc+0x188>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d869      	bhi.n	800cd68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc94:	4b43      	ldr	r3, [pc, #268]	; (800cda4 <pvPortMalloc+0x18c>)
 800cc96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc98:	4b42      	ldr	r3, [pc, #264]	; (800cda4 <pvPortMalloc+0x18c>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc9e:	e004      	b.n	800ccaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d903      	bls.n	800ccbc <pvPortMalloc+0xa4>
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1f1      	bne.n	800cca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ccbc:	4b36      	ldr	r3, [pc, #216]	; (800cd98 <pvPortMalloc+0x180>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d050      	beq.n	800cd68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ccc6:	6a3b      	ldr	r3, [r7, #32]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2208      	movs	r2, #8
 800cccc:	4413      	add	r3, r2
 800ccce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	6a3b      	ldr	r3, [r7, #32]
 800ccd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ccd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccda:	685a      	ldr	r2, [r3, #4]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	1ad2      	subs	r2, r2, r3
 800cce0:	2308      	movs	r3, #8
 800cce2:	005b      	lsls	r3, r3, #1
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d91f      	bls.n	800cd28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4413      	add	r3, r2
 800ccee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	f003 0307 	and.w	r3, r3, #7
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <pvPortMalloc+0xf8>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	613b      	str	r3, [r7, #16]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd12:	685a      	ldr	r2, [r3, #4]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	1ad2      	subs	r2, r2, r3
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd22:	69b8      	ldr	r0, [r7, #24]
 800cd24:	f000 f908 	bl	800cf38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd28:	4b1d      	ldr	r3, [pc, #116]	; (800cda0 <pvPortMalloc+0x188>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	1ad3      	subs	r3, r2, r3
 800cd32:	4a1b      	ldr	r2, [pc, #108]	; (800cda0 <pvPortMalloc+0x188>)
 800cd34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd36:	4b1a      	ldr	r3, [pc, #104]	; (800cda0 <pvPortMalloc+0x188>)
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	4b1b      	ldr	r3, [pc, #108]	; (800cda8 <pvPortMalloc+0x190>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d203      	bcs.n	800cd4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd42:	4b17      	ldr	r3, [pc, #92]	; (800cda0 <pvPortMalloc+0x188>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a18      	ldr	r2, [pc, #96]	; (800cda8 <pvPortMalloc+0x190>)
 800cd48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	4b13      	ldr	r3, [pc, #76]	; (800cd9c <pvPortMalloc+0x184>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	431a      	orrs	r2, r3
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd5e:	4b13      	ldr	r3, [pc, #76]	; (800cdac <pvPortMalloc+0x194>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3301      	adds	r3, #1
 800cd64:	4a11      	ldr	r2, [pc, #68]	; (800cdac <pvPortMalloc+0x194>)
 800cd66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd68:	f7fe f8e8 	bl	800af3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	f003 0307 	and.w	r3, r3, #7
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00a      	beq.n	800cd8c <pvPortMalloc+0x174>
	__asm volatile
 800cd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	60fb      	str	r3, [r7, #12]
}
 800cd88:	bf00      	nop
 800cd8a:	e7fe      	b.n	800cd8a <pvPortMalloc+0x172>
	return pvReturn;
 800cd8c:	69fb      	ldr	r3, [r7, #28]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3728      	adds	r7, #40	; 0x28
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	20002098 	.word	0x20002098
 800cd9c:	200020ac 	.word	0x200020ac
 800cda0:	2000209c 	.word	0x2000209c
 800cda4:	20002090 	.word	0x20002090
 800cda8:	200020a0 	.word	0x200020a0
 800cdac:	200020a4 	.word	0x200020a4

0800cdb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d04d      	beq.n	800ce5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cdc2:	2308      	movs	r3, #8
 800cdc4:	425b      	negs	r3, r3
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	4413      	add	r3, r2
 800cdca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	685a      	ldr	r2, [r3, #4]
 800cdd4:	4b24      	ldr	r3, [pc, #144]	; (800ce68 <vPortFree+0xb8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4013      	ands	r3, r2
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d10a      	bne.n	800cdf4 <vPortFree+0x44>
	__asm volatile
 800cdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	60fb      	str	r3, [r7, #12]
}
 800cdf0:	bf00      	nop
 800cdf2:	e7fe      	b.n	800cdf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00a      	beq.n	800ce12 <vPortFree+0x62>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce00:	f383 8811 	msr	BASEPRI, r3
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	60bb      	str	r3, [r7, #8]
}
 800ce0e:	bf00      	nop
 800ce10:	e7fe      	b.n	800ce10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	685a      	ldr	r2, [r3, #4]
 800ce16:	4b14      	ldr	r3, [pc, #80]	; (800ce68 <vPortFree+0xb8>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4013      	ands	r3, r2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d01e      	beq.n	800ce5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d11a      	bne.n	800ce5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	4b0e      	ldr	r3, [pc, #56]	; (800ce68 <vPortFree+0xb8>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	43db      	mvns	r3, r3
 800ce32:	401a      	ands	r2, r3
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce38:	f7fe f872 	bl	800af20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	685a      	ldr	r2, [r3, #4]
 800ce40:	4b0a      	ldr	r3, [pc, #40]	; (800ce6c <vPortFree+0xbc>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4413      	add	r3, r2
 800ce46:	4a09      	ldr	r2, [pc, #36]	; (800ce6c <vPortFree+0xbc>)
 800ce48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce4a:	6938      	ldr	r0, [r7, #16]
 800ce4c:	f000 f874 	bl	800cf38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce50:	4b07      	ldr	r3, [pc, #28]	; (800ce70 <vPortFree+0xc0>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3301      	adds	r3, #1
 800ce56:	4a06      	ldr	r2, [pc, #24]	; (800ce70 <vPortFree+0xc0>)
 800ce58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce5a:	f7fe f86f 	bl	800af3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce5e:	bf00      	nop
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	200020ac 	.word	0x200020ac
 800ce6c:	2000209c 	.word	0x2000209c
 800ce70:	200020a8 	.word	0x200020a8

0800ce74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ce7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce80:	4b27      	ldr	r3, [pc, #156]	; (800cf20 <prvHeapInit+0xac>)
 800ce82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f003 0307 	and.w	r3, r3, #7
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00c      	beq.n	800cea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	3307      	adds	r3, #7
 800ce92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f023 0307 	bic.w	r3, r3, #7
 800ce9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	4a1f      	ldr	r2, [pc, #124]	; (800cf20 <prvHeapInit+0xac>)
 800cea4:	4413      	add	r3, r2
 800cea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ceac:	4a1d      	ldr	r2, [pc, #116]	; (800cf24 <prvHeapInit+0xb0>)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ceb2:	4b1c      	ldr	r3, [pc, #112]	; (800cf24 <prvHeapInit+0xb0>)
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	4413      	add	r3, r2
 800cebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cec0:	2208      	movs	r2, #8
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	1a9b      	subs	r3, r3, r2
 800cec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f023 0307 	bic.w	r3, r3, #7
 800cece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	4a15      	ldr	r2, [pc, #84]	; (800cf28 <prvHeapInit+0xb4>)
 800ced4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ced6:	4b14      	ldr	r3, [pc, #80]	; (800cf28 <prvHeapInit+0xb4>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2200      	movs	r2, #0
 800cedc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cede:	4b12      	ldr	r3, [pc, #72]	; (800cf28 <prvHeapInit+0xb4>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2200      	movs	r2, #0
 800cee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	1ad2      	subs	r2, r2, r3
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cef4:	4b0c      	ldr	r3, [pc, #48]	; (800cf28 <prvHeapInit+0xb4>)
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	4a0a      	ldr	r2, [pc, #40]	; (800cf2c <prvHeapInit+0xb8>)
 800cf02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	4a09      	ldr	r2, [pc, #36]	; (800cf30 <prvHeapInit+0xbc>)
 800cf0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf0c:	4b09      	ldr	r3, [pc, #36]	; (800cf34 <prvHeapInit+0xc0>)
 800cf0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cf12:	601a      	str	r2, [r3, #0]
}
 800cf14:	bf00      	nop
 800cf16:	3714      	adds	r7, #20
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr
 800cf20:	20001490 	.word	0x20001490
 800cf24:	20002090 	.word	0x20002090
 800cf28:	20002098 	.word	0x20002098
 800cf2c:	200020a0 	.word	0x200020a0
 800cf30:	2000209c 	.word	0x2000209c
 800cf34:	200020ac 	.word	0x200020ac

0800cf38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf40:	4b28      	ldr	r3, [pc, #160]	; (800cfe4 <prvInsertBlockIntoFreeList+0xac>)
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	e002      	b.n	800cf4c <prvInsertBlockIntoFreeList+0x14>
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	60fb      	str	r3, [r7, #12]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d8f7      	bhi.n	800cf46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	68ba      	ldr	r2, [r7, #8]
 800cf60:	4413      	add	r3, r2
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d108      	bne.n	800cf7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	685a      	ldr	r2, [r3, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	441a      	add	r2, r3
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	68ba      	ldr	r2, [r7, #8]
 800cf84:	441a      	add	r2, r3
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d118      	bne.n	800cfc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	4b15      	ldr	r3, [pc, #84]	; (800cfe8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d00d      	beq.n	800cfb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	685a      	ldr	r2, [r3, #4]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	441a      	add	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	e008      	b.n	800cfc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cfb6:	4b0c      	ldr	r3, [pc, #48]	; (800cfe8 <prvInsertBlockIntoFreeList+0xb0>)
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	601a      	str	r2, [r3, #0]
 800cfbe:	e003      	b.n	800cfc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d002      	beq.n	800cfd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfd6:	bf00      	nop
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	20002090 	.word	0x20002090
 800cfe8:	20002098 	.word	0x20002098

0800cfec <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cffe:	4619      	mov	r1, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	78fa      	ldrb	r2, [r7, #3]
 800d004:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d00c:	3301      	adds	r3, #1
 800d00e:	425a      	negs	r2, r3
 800d010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d014:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d018:	bf58      	it	pl
 800d01a:	4253      	negpl	r3, r2
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d02a:	2b80      	cmp	r3, #128	; 0x80
 800d02c:	d113      	bne.n	800d056 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2201      	movs	r2, #1
 800d032:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d03c:	3301      	adds	r3, #1
 800d03e:	425a      	negs	r2, r3
 800d040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d044:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d048:	bf58      	it	pl
 800d04a:	4253      	negpl	r3, r2
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800d054:	e00b      	b.n	800d06e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d064:	3301      	adds	r3, #1
 800d066:	b2da      	uxtb	r2, r3
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800d06e:	bf00      	nop
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b082      	sub	sp, #8
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d08a:	461a      	mov	r2, r3
 800d08c:	6839      	ldr	r1, [r7, #0]
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f805 	bl	800d09e <RingGetNBytes>
 800d094:	4603      	mov	r3, r0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b086      	sub	sp, #24
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	60f8      	str	r0, [r7, #12]
 800d0a6:	60b9      	str	r1, [r7, #8]
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d002      	beq.n	800d0bc <RingGetNBytes+0x1e>
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <RingGetNBytes+0x22>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	e03e      	b.n	800d13e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800d0c0:	79fb      	ldrb	r3, [r7, #7]
 800d0c2:	2b80      	cmp	r3, #128	; 0x80
 800d0c4:	d901      	bls.n	800d0ca <RingGetNBytes+0x2c>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	e039      	b.n	800d13e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	75fb      	strb	r3, [r7, #23]
 800d0ce:	e01b      	b.n	800d108 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	7dfb      	ldrb	r3, [r7, #23]
 800d0da:	68ba      	ldr	r2, [r7, #8]
 800d0dc:	4413      	add	r3, r2
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	5c52      	ldrb	r2, [r2, r1]
 800d0e2:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	425a      	negs	r2, r3
 800d0ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d0f6:	bf58      	it	pl
 800d0f8:	4253      	negpl	r3, r2
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d102:	7dfb      	ldrb	r3, [r7, #23]
 800d104:	3301      	adds	r3, #1
 800d106:	75fb      	strb	r3, [r7, #23]
 800d108:	7dfa      	ldrb	r2, [r7, #23]
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d205      	bcs.n	800d11c <RingGetNBytes+0x7e>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d116:	7dfa      	ldrb	r2, [r7, #23]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d3d9      	bcc.n	800d0d0 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800d122:	7dfb      	ldrb	r3, [r7, #23]
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	b2da      	uxtb	r2, r3
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2200      	movs	r2, #0
 800d132:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	f000 f805 	bl	800d146 <RingClear>

	return uCounter;
 800d13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3718      	adds	r7, #24
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800d146:	b480      	push	{r7}
 800d148:	b083      	sub	sp, #12
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800d16e:	bf00      	nop
 800d170:	370c      	adds	r7, #12
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
	...

0800d17c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af02      	add	r7, sp, #8
 800d182:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800d184:	4b42      	ldr	r3, [pc, #264]	; (800d290 <ModbusInit+0x114>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d87d      	bhi.n	800d288 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	33bc      	adds	r3, #188	; 0xbc
 800d190:	4618      	mov	r0, r3
 800d192:	f7ff ffd8 	bl	800d146 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	2b03      	cmp	r3, #3
 800d19c:	d109      	bne.n	800d1b2 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800d19e:	4a3d      	ldr	r2, [pc, #244]	; (800d294 <ModbusInit+0x118>)
 800d1a0:	6879      	ldr	r1, [r7, #4]
 800d1a2:	483d      	ldr	r0, [pc, #244]	; (800d298 <ModbusInit+0x11c>)
 800d1a4:	f7fc f816 	bl	80091d4 <osThreadNew>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800d1b0:	e033      	b.n	800d21a <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	2b04      	cmp	r3, #4
 800d1b8:	d12e      	bne.n	800d218 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800d1ba:	4a38      	ldr	r2, [pc, #224]	; (800d29c <ModbusInit+0x120>)
 800d1bc:	6879      	ldr	r1, [r7, #4]
 800d1be:	4838      	ldr	r0, [pc, #224]	; (800d2a0 <ModbusInit+0x124>)
 800d1c0:	f7fc f808 	bl	80091d4 <osThreadNew>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d1d2:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d1da:	4a32      	ldr	r2, [pc, #200]	; (800d2a4 <ModbusInit+0x128>)
 800d1dc:	9200      	str	r2, [sp, #0]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	4831      	ldr	r0, [pc, #196]	; (800d2a8 <ModbusInit+0x12c>)
 800d1e2:	f7fe ff49 	bl	800c078 <xTimerCreate>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d100      	bne.n	800d1fa <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800d1f8:	e7fe      	b.n	800d1f8 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800d1fa:	4a2c      	ldr	r2, [pc, #176]	; (800d2ac <ModbusInit+0x130>)
 800d1fc:	2110      	movs	r1, #16
 800d1fe:	2002      	movs	r0, #2
 800d200:	f7fc fa07 	bl	8009612 <osMessageQueueNew>
 800d204:	4602      	mov	r2, r0
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d212:	2b00      	cmp	r3, #0
 800d214:	d101      	bne.n	800d21a <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800d216:	e7fe      	b.n	800d216 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800d218:	e7fe      	b.n	800d218 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d220:	2b00      	cmp	r3, #0
 800d222:	d100      	bne.n	800d226 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800d224:	e7fe      	b.n	800d224 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800d22c:	4a20      	ldr	r2, [pc, #128]	; (800d2b0 <ModbusInit+0x134>)
 800d22e:	9200      	str	r2, [sp, #0]
 800d230:	2200      	movs	r2, #0
 800d232:	2105      	movs	r1, #5
 800d234:	481f      	ldr	r0, [pc, #124]	; (800d2b4 <ModbusInit+0x138>)
 800d236:	f7fe ff1f 	bl	800c078 <xTimerCreate>
 800d23a:	4602      	mov	r2, r0
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d100      	bne.n	800d24e <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800d24c:	e7fe      	b.n	800d24c <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800d24e:	4a1a      	ldr	r2, [pc, #104]	; (800d2b8 <ModbusInit+0x13c>)
 800d250:	2101      	movs	r1, #1
 800d252:	2001      	movs	r0, #1
 800d254:	f7fc f954 	bl	8009500 <osSemaphoreNew>
 800d258:	4602      	mov	r2, r0
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d266:	2b00      	cmp	r3, #0
 800d268:	d100      	bne.n	800d26c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800d26a:	e7fe      	b.n	800d26a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800d26c:	4b08      	ldr	r3, [pc, #32]	; (800d290 <ModbusInit+0x114>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	4619      	mov	r1, r3
 800d272:	4a12      	ldr	r2, [pc, #72]	; (800d2bc <ModbusInit+0x140>)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800d27a:	4b05      	ldr	r3, [pc, #20]	; (800d290 <ModbusInit+0x114>)
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	3301      	adds	r3, #1
 800d280:	b2da      	uxtb	r2, r3
 800d282:	4b03      	ldr	r3, [pc, #12]	; (800d290 <ModbusInit+0x114>)
 800d284:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800d286:	e000      	b.n	800d28a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800d288:	e7fe      	b.n	800d288 <ModbusInit+0x10c>
}
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	200020b8 	.word	0x200020b8
 800d294:	0800ed24 	.word	0x0800ed24
 800d298:	0800d4c9 	.word	0x0800d4c9
 800d29c:	0800ed48 	.word	0x0800ed48
 800d2a0:	0800d93d 	.word	0x0800d93d
 800d2a4:	0800d46d 	.word	0x0800d46d
 800d2a8:	0800ebac 	.word	0x0800ebac
 800d2ac:	0800ed0c 	.word	0x0800ed0c
 800d2b0:	0800d3e9 	.word	0x0800d3e9
 800d2b4:	0800ebbc 	.word	0x0800ebbc
 800d2b8:	0800ed6c 	.word	0x0800ed6c
 800d2bc:	200020b0 	.word	0x200020b0

0800d2c0 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d005      	beq.n	800d2de <ModbusStart+0x1e>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d2d8:	2b04      	cmp	r3, #4
 800d2da:	d000      	beq.n	800d2de <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800d2dc:	e7fe      	b.n	800d2dc <ModbusStart+0x1c>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d004      	beq.n	800d2f2 <ModbusStart+0x32>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d2ee:	2b04      	cmp	r3, #4
 800d2f0:	d15c      	bne.n	800d3ac <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d007      	beq.n	800d30a <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	68d8      	ldr	r0, [r3, #12]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	8a1b      	ldrh	r3, [r3, #16]
 800d302:	2200      	movs	r2, #0
 800d304:	4619      	mov	r1, r3
 800d306:	f7f6 fd9b 	bl	8003e40 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	2b03      	cmp	r3, #3
 800d310:	d105      	bne.n	800d31e <ModbusStart+0x5e>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d100      	bne.n	800d31e <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800d31c:	e7fe      	b.n	800d31c <ModbusStart+0x5c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800d31e:	bf00      	nop
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	4618      	mov	r0, r3
 800d326:	f7f9 fe3f 	bl	8006fa8 <HAL_UART_GetState>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b20      	cmp	r3, #32
 800d32e:	d1f7      	bne.n	800d320 <ModbusStart+0x60>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d336:	2b04      	cmp	r3, #4
 800d338:	d11a      	bne.n	800d370 <ModbusStart+0xb0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6858      	ldr	r0, [r3, #4]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	33bc      	adds	r3, #188	; 0xbc
 800d342:	2280      	movs	r2, #128	; 0x80
 800d344:	4619      	mov	r1, r3
 800d346:	f7fb fdd8 	bl	8008efa <HAL_UARTEx_ReceiveToIdle_DMA>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d000      	beq.n	800d352 <ModbusStart+0x92>
        	   {
        	         while(1)
 800d350:	e7fe      	b.n	800d350 <ModbusStart+0x90>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f022 0204 	bic.w	r2, r2, #4
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	e00b      	b.n	800d388 <ModbusStart+0xc8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6858      	ldr	r0, [r3, #4]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	33a6      	adds	r3, #166	; 0xa6
 800d378:	2201      	movs	r2, #1
 800d37a:	4619      	mov	r1, r3
 800d37c:	f7f8 fffa 	bl	8006374 <HAL_UART_Receive_IT>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d000      	beq.n	800d388 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800d386:	e7fe      	b.n	800d386 <ModbusStart+0xc6>
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	7a1b      	ldrb	r3, [r3, #8]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d004      	beq.n	800d39a <ModbusStart+0xda>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b04      	cmp	r3, #4
 800d396:	d100      	bne.n	800d39a <ModbusStart+0xda>
          {
        	  while(1)
 800d398:	e7fe      	b.n	800d398 <ModbusStart+0xd8>
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	7a1b      	ldrb	r3, [r3, #8]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d104      	bne.n	800d3ac <ModbusStart+0xec>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	d100      	bne.n	800d3ac <ModbusStart+0xec>
          {
             	  while(1)
 800d3aa:	e7fe      	b.n	800d3aa <ModbusStart+0xea>
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 800d3e0:	bf00      	nop
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b086      	sub	sp, #24
 800d3ec:	af02      	add	r7, sp, #8
 800d3ee:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	60fb      	str	r3, [r7, #12]
 800d3f4:	e02a      	b.n	800d44c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800d3f6:	4a1b      	ldr	r2, [pc, #108]	; (800d464 <vTimerCallbackT35+0x7c>)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	429a      	cmp	r2, r3
 800d406:	d11e      	bne.n	800d446 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800d408:	4a16      	ldr	r2, [pc, #88]	; (800d464 <vTimerCallbackT35+0x7c>)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	2b04      	cmp	r3, #4
 800d414:	d10c      	bne.n	800d430 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800d416:	4a13      	ldr	r2, [pc, #76]	; (800d464 <vTimerCallbackT35+0x7c>)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d41e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800d422:	2300      	movs	r3, #0
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	2300      	movs	r3, #0
 800d428:	2200      	movs	r2, #0
 800d42a:	2103      	movs	r1, #3
 800d42c:	f7fe fe80 	bl	800c130 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800d430:	4a0c      	ldr	r2, [pc, #48]	; (800d464 <vTimerCallbackT35+0x7c>)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d438:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800d43c:	2300      	movs	r3, #0
 800d43e:	2203      	movs	r2, #3
 800d440:	2100      	movs	r1, #0
 800d442:	f7fe fbe9 	bl	800bc18 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	3301      	adds	r3, #1
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	4b06      	ldr	r3, [pc, #24]	; (800d468 <vTimerCallbackT35+0x80>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	461a      	mov	r2, r3
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	4293      	cmp	r3, r2
 800d456:	dbce      	blt.n	800d3f6 <vTimerCallbackT35+0xe>
		}

	}
}
 800d458:	bf00      	nop
 800d45a:	bf00      	nop
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	200020b0 	.word	0x200020b0
 800d468:	200020b8 	.word	0x200020b8

0800d46c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d474:	2300      	movs	r3, #0
 800d476:	60fb      	str	r3, [r7, #12]
 800d478:	e017      	b.n	800d4aa <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800d47a:	4a11      	ldr	r2, [pc, #68]	; (800d4c0 <vTimerCallbackTimeout+0x54>)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d482:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d10b      	bne.n	800d4a4 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800d48c:	4a0c      	ldr	r2, [pc, #48]	; (800d4c0 <vTimerCallbackTimeout+0x54>)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d494:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800d498:	2300      	movs	r3, #0
 800d49a:	2203      	movs	r2, #3
 800d49c:	f06f 0107 	mvn.w	r1, #7
 800d4a0:	f7fe fbba 	bl	800bc18 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	60fb      	str	r3, [r7, #12]
 800d4aa:	4b06      	ldr	r3, [pc, #24]	; (800d4c4 <vTimerCallbackTimeout+0x58>)
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	dbe1      	blt.n	800d47a <vTimerCallbackTimeout+0xe>
		}

	}

}
 800d4b6:	bf00      	nop
 800d4b8:	bf00      	nop
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	200020b0 	.word	0x200020b0
 800d4c4:	200020b8 	.word	0x200020b8

0800d4c8 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d004      	beq.n	800d4ee <StartTaskModbusSlave+0x26>
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d4ea:	2b04      	cmp	r3, #4
 800d4ec:	d117      	bne.n	800d51e <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800d4ee:	f04f 31ff 	mov.w	r1, #4294967295
 800d4f2:	2001      	movs	r0, #1
 800d4f4:	f7fe fb48 	bl	800bb88 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f000 fbed 	bl	800dcd8 <getRxBuffer>
 800d4fe:	4603      	mov	r3, r0
 800d500:	f113 0f03 	cmn.w	r3, #3
 800d504:	d10b      	bne.n	800d51e <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	22fd      	movs	r2, #253	; 0xfd
 800d50a:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d512:	3301      	adds	r3, #1
 800d514:	b29a      	uxth	r2, r3
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 800d51c:	e0a1      	b.n	800d662 <StartTaskModbusSlave+0x19a>
	  }
   }

   if (modH->u8BufferSize < 7)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d524:	2b06      	cmp	r3, #6
 800d526:	d80b      	bhi.n	800d540 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	22fa      	movs	r2, #250	; 0xfa
 800d52c:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d534:	3301      	adds	r3, #1
 800d536:	b29a      	uxth	r2, r3
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 800d53e:	e090      	b.n	800d662 <StartTaskModbusSlave+0x19a>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	7cda      	ldrb	r2, [r3, #19]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	7a1b      	ldrb	r3, [r3, #8]
 800d548:	429a      	cmp	r2, r3
 800d54a:	f040 8089 	bne.w	800d660 <StartTaskModbusSlave+0x198>
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f000 fc0c 	bl	800dd6c <validateRequest>
 800d554:	4603      	mov	r3, r0
 800d556:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800d558:	7afb      	ldrb	r3, [r7, #11]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00c      	beq.n	800d578 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800d55e:	7afb      	ldrb	r3, [r7, #11]
 800d560:	68f9      	ldr	r1, [r7, #12]
 800d562:	4618      	mov	r0, r3
 800d564:	f000 fda6 	bl	800e0b4 <buildException>
			sendTxBuffer(modH);
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f000 fdc2 	bl	800e0f2 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800d56e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800d576:	e074      	b.n	800d662 <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2200      	movs	r2, #0
 800d57c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d584:	f04f 31ff 	mov.w	r1, #4294967295
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fc ffad 	bl	800a4e8 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	7d1b      	ldrb	r3, [r3, #20]
 800d592:	3b01      	subs	r3, #1
 800d594:	2b0f      	cmp	r3, #15
 800d596:	d859      	bhi.n	800d64c <StartTaskModbusSlave+0x184>
 800d598:	a201      	add	r2, pc, #4	; (adr r2, 800d5a0 <StartTaskModbusSlave+0xd8>)
 800d59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d59e:	bf00      	nop
 800d5a0:	0800d5e1 	.word	0x0800d5e1
 800d5a4:	0800d5e1 	.word	0x0800d5e1
 800d5a8:	0800d5f3 	.word	0x0800d5f3
 800d5ac:	0800d5f3 	.word	0x0800d5f3
 800d5b0:	0800d605 	.word	0x0800d605
 800d5b4:	0800d617 	.word	0x0800d617
 800d5b8:	0800d64d 	.word	0x0800d64d
 800d5bc:	0800d64d 	.word	0x0800d64d
 800d5c0:	0800d64d 	.word	0x0800d64d
 800d5c4:	0800d64d 	.word	0x0800d64d
 800d5c8:	0800d64d 	.word	0x0800d64d
 800d5cc:	0800d64d 	.word	0x0800d64d
 800d5d0:	0800d64d 	.word	0x0800d64d
 800d5d4:	0800d64d 	.word	0x0800d64d
 800d5d8:	0800d629 	.word	0x0800d629
 800d5dc:	0800d63b 	.word	0x0800d63b
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f000 fe28 	bl	800e236 <process_FC1>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d5f0:	e02d      	b.n	800d64e <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f000 fed4 	bl	800e3a0 <process_FC3>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d602:	e024      	b.n	800d64e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 ff36 	bl	800e476 <process_FC5>
 800d60a:	4603      	mov	r3, r0
 800d60c:	461a      	mov	r2, r3
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d614:	e01b      	b.n	800d64e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f000 ff86 	bl	800e528 <process_FC6>
 800d61c:	4603      	mov	r3, r0
 800d61e:	461a      	mov	r2, r3
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d626:	e012      	b.n	800d64e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f000 ffaf 	bl	800e58c <process_FC15>
 800d62e:	4603      	mov	r3, r0
 800d630:	461a      	mov	r2, r3
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d638:	e009      	b.n	800d64e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f001 f834 	bl	800e6a8 <process_FC16>
 800d640:	4603      	mov	r3, r0
 800d642:	461a      	mov	r2, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d64a:	e000      	b.n	800d64e <StartTaskModbusSlave+0x186>
			default:
				break;
 800d64c:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d654:	2300      	movs	r3, #0
 800d656:	2200      	movs	r2, #0
 800d658:	2100      	movs	r1, #0
 800d65a:	f7fc fccb 	bl	8009ff4 <xQueueGenericSend>

	 continue;
 800d65e:	e000      	b.n	800d662 <StartTaskModbusSlave+0x19a>
    	continue;
 800d660:	bf00      	nop
  {
 800d662:	e737      	b.n	800d4d4 <StartTaskModbusSlave+0xc>

0800d664 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 800d664:	b084      	sub	sp, #16
 800d666:	b580      	push	{r7, lr}
 800d668:	b084      	sub	sp, #16
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	f107 001c 	add.w	r0, r7, #28
 800d672:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d680:	f04f 31ff 	mov.w	r1, #4294967295
 800d684:	4618      	mov	r0, r3
 800d686:	f7fc ff2f 	bl	800a4e8 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	7a1b      	ldrb	r3, [r3, #8]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d001      	beq.n	800d696 <SendQuery+0x32>
 800d692:	23ff      	movs	r3, #255	; 0xff
 800d694:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d001      	beq.n	800d6a4 <SendQuery+0x40>
 800d6a0:	23fe      	movs	r3, #254	; 0xfe
 800d6a2:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800d6a4:	7f3b      	ldrb	r3, [r7, #28]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d002      	beq.n	800d6b0 <SendQuery+0x4c>
 800d6aa:	7f3b      	ldrb	r3, [r7, #28]
 800d6ac:	2bf7      	cmp	r3, #247	; 0xf7
 800d6ae:	d901      	bls.n	800d6b4 <SendQuery+0x50>
 800d6b0:	23f7      	movs	r3, #247	; 0xf7
 800d6b2:	73bb      	strb	r3, [r7, #14]


	if(error)
 800d6b4:	7bbb      	ldrb	r3, [r7, #14]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00e      	beq.n	800d6d8 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800d6ba:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	f7fc fc91 	bl	8009ff4 <xQueueGenericSend>
		 return error;
 800d6d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6d6:	e129      	b.n	800d92c <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 800d6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800d6e0:	7f3a      	ldrb	r2, [r7, #28]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800d6e6:	7f7a      	ldrb	r2, [r7, #29]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800d6ec:	8bfb      	ldrh	r3, [r7, #30]
 800d6ee:	0a1b      	lsrs	r3, r3, #8
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	b2da      	uxtb	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800d6f8:	8bfb      	ldrh	r3, [r7, #30]
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800d700:	7f7b      	ldrb	r3, [r7, #29]
 800d702:	3b01      	subs	r3, #1
 800d704:	2b0f      	cmp	r3, #15
 800d706:	f200 80fe 	bhi.w	800d906 <SendQuery+0x2a2>
 800d70a:	a201      	add	r2, pc, #4	; (adr r2, 800d710 <SendQuery+0xac>)
 800d70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d710:	0800d751 	.word	0x0800d751
 800d714:	0800d751 	.word	0x0800d751
 800d718:	0800d751 	.word	0x0800d751
 800d71c:	0800d751 	.word	0x0800d751
 800d720:	0800d76f 	.word	0x0800d76f
 800d724:	0800d791 	.word	0x0800d791
 800d728:	0800d907 	.word	0x0800d907
 800d72c:	0800d907 	.word	0x0800d907
 800d730:	0800d907 	.word	0x0800d907
 800d734:	0800d907 	.word	0x0800d907
 800d738:	0800d907 	.word	0x0800d907
 800d73c:	0800d907 	.word	0x0800d907
 800d740:	0800d907 	.word	0x0800d907
 800d744:	0800d907 	.word	0x0800d907
 800d748:	0800d7b3 	.word	0x0800d7b3
 800d74c:	0800d871 	.word	0x0800d871
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800d750:	8c3b      	ldrh	r3, [r7, #32]
 800d752:	0a1b      	lsrs	r3, r3, #8
 800d754:	b29b      	uxth	r3, r3
 800d756:	b2da      	uxtb	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800d75c:	8c3b      	ldrh	r3, [r7, #32]
 800d75e:	b2da      	uxtb	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2206      	movs	r2, #6
 800d768:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800d76c:	e0cb      	b.n	800d906 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	881b      	ldrh	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d001      	beq.n	800d77a <SendQuery+0x116>
 800d776:	22ff      	movs	r2, #255	; 0xff
 800d778:	e000      	b.n	800d77c <SendQuery+0x118>
 800d77a:	2200      	movs	r2, #0
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2206      	movs	r2, #6
 800d78a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800d78e:	e0ba      	b.n	800d906 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	881b      	ldrh	r3, [r3, #0]
 800d794:	0a1b      	lsrs	r3, r3, #8
 800d796:	b29b      	uxth	r3, r3
 800d798:	b2da      	uxtb	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800d79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	b2da      	uxtb	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2206      	movs	r2, #6
 800d7ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800d7b0:	e0a9      	b.n	800d906 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800d7b2:	8c3b      	ldrh	r3, [r7, #32]
 800d7b4:	091b      	lsrs	r3, r3, #4
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800d7ba:	7a7b      	ldrb	r3, [r7, #9]
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800d7c0:	8c3b      	ldrh	r3, [r7, #32]
 800d7c2:	f003 030f 	and.w	r3, r3, #15
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d005      	beq.n	800d7d8 <SendQuery+0x174>
	    {
	        u8bytesno++;
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800d7d2:	7a7b      	ldrb	r3, [r7, #9]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800d7d8:	8c3b      	ldrh	r3, [r7, #32]
 800d7da:	0a1b      	lsrs	r3, r3, #8
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	b2da      	uxtb	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800d7e4:	8c3b      	ldrh	r3, [r7, #32]
 800d7e6:	b2da      	uxtb	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	7bfa      	ldrb	r2, [r7, #15]
 800d7f0:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2207      	movs	r2, #7
 800d7f6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	81bb      	strh	r3, [r7, #12]
 800d7fe:	e031      	b.n	800d864 <SendQuery+0x200>
	    {
	        if(i%2)
 800d800:	89bb      	ldrh	r3, [r7, #12]
 800d802:	f003 0301 	and.w	r3, r3, #1
 800d806:	b29b      	uxth	r3, r3
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00f      	beq.n	800d82c <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800d80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d80e:	89bb      	ldrh	r3, [r7, #12]
 800d810:	085b      	lsrs	r3, r3, #1
 800d812:	b29b      	uxth	r3, r3
 800d814:	005b      	lsls	r3, r3, #1
 800d816:	4413      	add	r3, r2
 800d818:	881a      	ldrh	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d820:	4619      	mov	r1, r3
 800d822:	b2d2      	uxtb	r2, r2
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	440b      	add	r3, r1
 800d828:	74da      	strb	r2, [r3, #19]
 800d82a:	e010      	b.n	800d84e <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800d82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d82e:	89bb      	ldrh	r3, [r7, #12]
 800d830:	085b      	lsrs	r3, r3, #1
 800d832:	b29b      	uxth	r3, r3
 800d834:	005b      	lsls	r3, r3, #1
 800d836:	4413      	add	r3, r2
 800d838:	881b      	ldrh	r3, [r3, #0]
 800d83a:	0a1b      	lsrs	r3, r3, #8
 800d83c:	b29a      	uxth	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d844:	4619      	mov	r1, r3
 800d846:	b2d2      	uxtb	r2, r2
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	440b      	add	r3, r1
 800d84c:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d854:	3301      	adds	r3, #1
 800d856:	b2da      	uxtb	r2, r3
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800d85e:	89bb      	ldrh	r3, [r7, #12]
 800d860:	3301      	adds	r3, #1
 800d862:	81bb      	strh	r3, [r7, #12]
 800d864:	7bfb      	ldrb	r3, [r7, #15]
 800d866:	b29b      	uxth	r3, r3
 800d868:	89ba      	ldrh	r2, [r7, #12]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d3c8      	bcc.n	800d800 <SendQuery+0x19c>
	    }
	    break;
 800d86e:	e04a      	b.n	800d906 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800d870:	8c3b      	ldrh	r3, [r7, #32]
 800d872:	0a1b      	lsrs	r3, r3, #8
 800d874:	b29b      	uxth	r3, r3
 800d876:	b2da      	uxtb	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800d87c:	8c3b      	ldrh	r3, [r7, #32]
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800d884:	8c3b      	ldrh	r3, [r7, #32]
 800d886:	b2db      	uxtb	r3, r3
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2207      	movs	r2, #7
 800d894:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800d898:	2300      	movs	r3, #0
 800d89a:	817b      	strh	r3, [r7, #10]
 800d89c:	e02e      	b.n	800d8fc <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800d89e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8a0:	897b      	ldrh	r3, [r7, #10]
 800d8a2:	005b      	lsls	r3, r3, #1
 800d8a4:	4413      	add	r3, r2
 800d8a6:	881b      	ldrh	r3, [r3, #0]
 800d8a8:	0a1b      	lsrs	r3, r3, #8
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	b2d2      	uxtb	r2, r2
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	440b      	add	r3, r1
 800d8ba:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800d8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ce:	897b      	ldrh	r3, [r7, #10]
 800d8d0:	005b      	lsls	r3, r3, #1
 800d8d2:	4413      	add	r3, r2
 800d8d4:	881a      	ldrh	r2, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d8dc:	4619      	mov	r1, r3
 800d8de:	b2d2      	uxtb	r2, r2
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	440b      	add	r3, r1
 800d8e4:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800d8f6:	897b      	ldrh	r3, [r7, #10]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	817b      	strh	r3, [r7, #10]
 800d8fc:	8c3b      	ldrh	r3, [r7, #32]
 800d8fe:	897a      	ldrh	r2, [r7, #10]
 800d900:	429a      	cmp	r2, r3
 800d902:	d3cc      	bcc.n	800d89e <SendQuery+0x23a>
	    }
	    break;
 800d904:	bf00      	nop
	}


	sendTxBuffer(modH);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 fbf3 	bl	800e0f2 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d912:	2300      	movs	r3, #0
 800d914:	2200      	movs	r2, #0
 800d916:	2100      	movs	r1, #0
 800d918:	f7fc fb6c 	bl	8009ff4 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	749a      	strb	r2, [r3, #18]
	return 0;
 800d92a:	2300      	movs	r3, #0


}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d936:	b004      	add	sp, #16
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop

0800d93c <StartTaskModbusMaster>:


void StartTaskModbusMaster(void *argument)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b08c      	sub	sp, #48	; 0x30
 800d940:	af02      	add	r7, sp, #8
 800d942:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d94e:	f107 010c 	add.w	r1, r7, #12
 800d952:	f04f 32ff 	mov.w	r2, #4294967295
 800d956:	4618      	mov	r0, r3
 800d958:	f7fc fce6 	bl	800a328 <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	f107 030c 	add.w	r3, r7, #12
 800d964:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d968:	f7ff fe7c 	bl	800d664 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800d96c:	f04f 31ff 	mov.w	r1, #4294967295
 800d970:	2001      	movs	r0, #1
 800d972:	f7fe f909 	bl	800bb88 <ulTaskNotifyTake>
 800d976:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800d978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97a:	2200      	movs	r2, #0
 800d97c:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d018      	beq.n	800d9b6 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	2200      	movs	r2, #0
 800d988:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	22f8      	movs	r2, #248	; 0xf8
 800d990:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d998:	3301      	adds	r3, #1
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800d9a2:	69b8      	ldr	r0, [r7, #24]
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	2203      	movs	r2, #3
 800d9b0:	f7fe f932 	bl	800bc18 <xTaskGenericNotify>
    	  continue;
 800d9b4:	e09a      	b.n	800daec <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800d9b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9b8:	f000 f98e 	bl	800dcd8 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9be:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d9c2:	2b05      	cmp	r3, #5
 800d9c4:	d818      	bhi.n	800d9f8 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800d9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 800d9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d0:	22fa      	movs	r2, #250	; 0xfa
 800d9d2:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d9da:	3301      	adds	r3, #1
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800d9e4:	69b8      	ldr	r0, [r7, #24]
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e8:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	2203      	movs	r2, #3
 800d9f2:	f7fe f911 	bl	800bc18 <xTaskGenericNotify>
		  continue;
 800d9f6:	e079      	b.n	800daec <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fa:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800d9fe:	2300      	movs	r3, #0
 800da00:	9300      	str	r3, [sp, #0]
 800da02:	2300      	movs	r3, #0
 800da04:	2200      	movs	r2, #0
 800da06:	2103      	movs	r1, #3
 800da08:	f7fe fb92 	bl	800c130 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800da0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da0e:	f000 f8f5 	bl	800dbfc <validateAnswer>
 800da12:	4603      	mov	r3, r0
 800da14:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800da16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d010      	beq.n	800da40 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800da1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da20:	2200      	movs	r2, #0
 800da22:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	7ffa      	ldrb	r2, [r7, #31]
 800da2a:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800da2c:	69b8      	ldr	r0, [r7, #24]
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800da34:	4619      	mov	r1, r3
 800da36:	2300      	movs	r3, #0
 800da38:	2203      	movs	r2, #3
 800da3a:	f7fe f8ed 	bl	800bc18 <xTaskGenericNotify>
	     continue;
 800da3e:	e055      	b.n	800daec <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	7ffa      	ldrb	r2, [r7, #31]
 800da44:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800da4c:	f04f 31ff 	mov.w	r1, #4294967295
 800da50:	4618      	mov	r0, r3
 800da52:	f7fc fd49 	bl	800a4e8 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	7d1b      	ldrb	r3, [r3, #20]
 800da5a:	3b01      	subs	r3, #1
 800da5c:	2b0f      	cmp	r3, #15
 800da5e:	d82b      	bhi.n	800dab8 <StartTaskModbusMaster+0x17c>
 800da60:	a201      	add	r2, pc, #4	; (adr r2, 800da68 <StartTaskModbusMaster+0x12c>)
 800da62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da66:	bf00      	nop
 800da68:	0800daa9 	.word	0x0800daa9
 800da6c:	0800daa9 	.word	0x0800daa9
 800da70:	0800dab1 	.word	0x0800dab1
 800da74:	0800dab1 	.word	0x0800dab1
 800da78:	0800dab9 	.word	0x0800dab9
 800da7c:	0800dab9 	.word	0x0800dab9
 800da80:	0800dab9 	.word	0x0800dab9
 800da84:	0800dab9 	.word	0x0800dab9
 800da88:	0800dab9 	.word	0x0800dab9
 800da8c:	0800dab9 	.word	0x0800dab9
 800da90:	0800dab9 	.word	0x0800dab9
 800da94:	0800dab9 	.word	0x0800dab9
 800da98:	0800dab9 	.word	0x0800dab9
 800da9c:	0800dab9 	.word	0x0800dab9
 800daa0:	0800dab9 	.word	0x0800dab9
 800daa4:	0800dab9 	.word	0x0800dab9
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 800daa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800daaa:	f000 f821 	bl	800daf0 <get_FC1>
	      break;
 800daae:	e004      	b.n	800daba <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800dab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dab2:	f000 f874 	bl	800db9e <get_FC3>
	      break;
 800dab6:	e000      	b.n	800daba <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 800dab8:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabc:	2200      	movs	r2, #0
 800dabe:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800dac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac4:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10e      	bne.n	800daea <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800dacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dace:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800dad2:	2300      	movs	r3, #0
 800dad4:	2200      	movs	r2, #0
 800dad6:	2100      	movs	r1, #0
 800dad8:	f7fc fa8c 	bl	8009ff4 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800dadc:	69b8      	ldr	r0, [r7, #24]
 800dade:	2300      	movs	r3, #0
 800dae0:	2203      	movs	r2, #3
 800dae2:	f06f 010a 	mvn.w	r1, #10
 800dae6:	f7fe f897 	bl	800bc18 <xTaskGenericNotify>
	  }


	  continue;
 800daea:	bf00      	nop
  {
 800daec:	e72c      	b.n	800d948 <StartTaskModbusMaster+0xc>
 800daee:	bf00      	nop

0800daf0 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800daf0:	b590      	push	{r4, r7, lr}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800daf8:	2303      	movs	r3, #3
 800dafa:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800dafc:	2300      	movs	r3, #0
 800dafe:	73fb      	strb	r3, [r7, #15]
 800db00:	e043      	b.n	800db8a <get_FC1+0x9a>

        if(i%2)
 800db02:	7bfb      	ldrb	r3, [r7, #15]
 800db04:	f003 0301 	and.w	r3, r3, #1
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d01c      	beq.n	800db48 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 800db0e:	7bfa      	ldrb	r2, [r7, #15]
 800db10:	7bbb      	ldrb	r3, [r7, #14]
 800db12:	4413      	add	r3, r2
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	4413      	add	r3, r2
 800db18:	7cd8      	ldrb	r0, [r3, #19]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db20:	7bfb      	ldrb	r3, [r7, #15]
 800db22:	085b      	lsrs	r3, r3, #1
 800db24:	b2db      	uxtb	r3, r3
 800db26:	005b      	lsls	r3, r3, #1
 800db28:	4413      	add	r3, r2
 800db2a:	881b      	ldrh	r3, [r3, #0]
 800db2c:	b2d9      	uxtb	r1, r3
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db34:	7bfb      	ldrb	r3, [r7, #15]
 800db36:	085b      	lsrs	r3, r3, #1
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	005b      	lsls	r3, r3, #1
 800db3c:	18d4      	adds	r4, r2, r3
 800db3e:	f000 fa5f 	bl	800e000 <word>
 800db42:	4603      	mov	r3, r0
 800db44:	8023      	strh	r3, [r4, #0]
 800db46:	e01d      	b.n	800db84 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db4e:	7bfb      	ldrb	r3, [r7, #15]
 800db50:	085b      	lsrs	r3, r3, #1
 800db52:	b2db      	uxtb	r3, r3
 800db54:	005b      	lsls	r3, r3, #1
 800db56:	4413      	add	r3, r2
 800db58:	881b      	ldrh	r3, [r3, #0]
 800db5a:	0a1b      	lsrs	r3, r3, #8
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	b2d8      	uxtb	r0, r3
 800db60:	7bfa      	ldrb	r2, [r7, #15]
 800db62:	7bbb      	ldrb	r3, [r7, #14]
 800db64:	4413      	add	r3, r2
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	4413      	add	r3, r2
 800db6a:	7cd9      	ldrb	r1, [r3, #19]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db72:	7bfb      	ldrb	r3, [r7, #15]
 800db74:	085b      	lsrs	r3, r3, #1
 800db76:	b2db      	uxtb	r3, r3
 800db78:	005b      	lsls	r3, r3, #1
 800db7a:	18d4      	adds	r4, r2, r3
 800db7c:	f000 fa40 	bl	800e000 <word>
 800db80:	4603      	mov	r3, r0
 800db82:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800db84:	7bfb      	ldrb	r3, [r7, #15]
 800db86:	3301      	adds	r3, #1
 800db88:	73fb      	strb	r3, [r7, #15]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	7d5b      	ldrb	r3, [r3, #21]
 800db8e:	7bfa      	ldrb	r2, [r7, #15]
 800db90:	429a      	cmp	r2, r3
 800db92:	d3b6      	bcc.n	800db02 <get_FC1+0x12>
        }

     }
}
 800db94:	bf00      	nop
 800db96:	bf00      	nop
 800db98:	3714      	adds	r7, #20
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd90      	pop	{r4, r7, pc}

0800db9e <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800db9e:	b590      	push	{r4, r7, lr}
 800dba0:	b085      	sub	sp, #20
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800dba6:	2303      	movs	r3, #3
 800dba8:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800dbaa:	2300      	movs	r3, #0
 800dbac:	73bb      	strb	r3, [r7, #14]
 800dbae:	e018      	b.n	800dbe2 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800dbb0:	7bfb      	ldrb	r3, [r7, #15]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	7cd8      	ldrb	r0, [r3, #19]
 800dbb8:	7bfb      	ldrb	r3, [r7, #15]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	7cd9      	ldrb	r1, [r3, #19]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800dbc8:	7bbb      	ldrb	r3, [r7, #14]
 800dbca:	005b      	lsls	r3, r3, #1
 800dbcc:	18d4      	adds	r4, r2, r3
 800dbce:	f000 fa17 	bl	800e000 <word>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800dbd6:	7bfb      	ldrb	r3, [r7, #15]
 800dbd8:	3302      	adds	r3, #2
 800dbda:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800dbdc:	7bbb      	ldrb	r3, [r7, #14]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	73bb      	strb	r3, [r7, #14]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	7d5b      	ldrb	r3, [r3, #21]
 800dbe6:	085b      	lsrs	r3, r3, #1
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	7bba      	ldrb	r2, [r7, #14]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d3df      	bcc.n	800dbb0 <get_FC3+0x12>
    }
}
 800dbf0:	bf00      	nop
 800dbf2:	bf00      	nop
 800dbf4:	3714      	adds	r7, #20
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd90      	pop	{r4, r7, pc}
	...

0800dbfc <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc0a:	3b02      	subs	r3, #2
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	4413      	add	r3, r2
 800dc10:	7cdb      	ldrb	r3, [r3, #19]
 800dc12:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800dc14:	b21a      	sxth	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	6879      	ldr	r1, [r7, #4]
 800dc20:	440b      	add	r3, r1
 800dc22:	7cdb      	ldrb	r3, [r3, #19]
 800dc24:	b21b      	sxth	r3, r3
 800dc26:	4313      	orrs	r3, r2
 800dc28:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800dc2a:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f103 0213 	add.w	r2, r3, #19
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc38:	3b02      	subs	r3, #2
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	4610      	mov	r0, r2
 800dc40:	f000 f9f1 	bl	800e026 <calcCRC>
 800dc44:	4603      	mov	r3, r0
 800dc46:	461a      	mov	r2, r3
 800dc48:	89bb      	ldrh	r3, [r7, #12]
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d009      	beq.n	800dc62 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800dc54:	3301      	adds	r3, #1
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 800dc5e:	23fc      	movs	r3, #252	; 0xfc
 800dc60:	e034      	b.n	800dccc <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	7d1b      	ldrb	r3, [r3, #20]
 800dc66:	b25b      	sxtb	r3, r3
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	da09      	bge.n	800dc80 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800dc72:	3301      	adds	r3, #1
 800dc74:	b29a      	uxth	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 800dc7c:	23fb      	movs	r3, #251	; 0xfb
 800dc7e:	e025      	b.n	800dccc <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 800dc80:	2300      	movs	r3, #0
 800dc82:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800dc84:	2300      	movs	r3, #0
 800dc86:	73bb      	strb	r3, [r7, #14]
 800dc88:	e00c      	b.n	800dca4 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800dc8a:	7bbb      	ldrb	r3, [r7, #14]
 800dc8c:	4a11      	ldr	r2, [pc, #68]	; (800dcd4 <validateAnswer+0xd8>)
 800dc8e:	5cd2      	ldrb	r2, [r2, r3]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	7d1b      	ldrb	r3, [r3, #20]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d102      	bne.n	800dc9e <validateAnswer+0xa2>
        {
            isSupported = 1;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	73fb      	strb	r3, [r7, #15]
            break;
 800dc9c:	e005      	b.n	800dcaa <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800dc9e:	7bbb      	ldrb	r3, [r7, #14]
 800dca0:	3301      	adds	r3, #1
 800dca2:	73bb      	strb	r3, [r7, #14]
 800dca4:	7bbb      	ldrb	r3, [r7, #14]
 800dca6:	2b07      	cmp	r3, #7
 800dca8:	d9ef      	bls.n	800dc8a <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800dcaa:	7bfb      	ldrb	r3, [r7, #15]
 800dcac:	f083 0301 	eor.w	r3, r3, #1
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d009      	beq.n	800dcca <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e000      	b.n	800dccc <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3710      	adds	r7, #16
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	0800ed7c 	.word	0x0800ed7c

0800dcd8 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d104      	bne.n	800dcf4 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7f8 fca2 	bl	8006638 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d008      	beq.n	800dd10 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	33bc      	adds	r3, #188	; 0xbc
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7ff fa1f 	bl	800d146 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800dd08:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800dd0c:	81fb      	strh	r3, [r7, #14]
 800dd0e:	e019      	b.n	800dd44 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	3313      	adds	r3, #19
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	f7ff f9ac 	bl	800d07a <RingGetAllBytes>
 800dd22:	4603      	mov	r3, r0
 800dd24:	461a      	mov	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800dd32:	3301      	adds	r3, #1
 800dd34:	b29a      	uxth	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd42:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d107      	bne.n	800dd5e <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6858      	ldr	r0, [r3, #4]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	33a6      	adds	r3, #166	; 0xa6
 800dd56:	2201      	movs	r2, #1
 800dd58:	4619      	mov	r1, r3
 800dd5a:	f7f8 fb0b 	bl	8006374 <HAL_UART_Receive_IT>
	}

    return i16result;
 800dd5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
	...

0800dd6c <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd7a:	3b02      	subs	r3, #2
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	4413      	add	r3, r2
 800dd80:	7cdb      	ldrb	r3, [r3, #19]
 800dd82:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800dd84:	b21a      	sxth	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd8c:	3b01      	subs	r3, #1
 800dd8e:	6879      	ldr	r1, [r7, #4]
 800dd90:	440b      	add	r3, r1
 800dd92:	7cdb      	ldrb	r3, [r3, #19]
 800dd94:	b21b      	sxth	r3, r3
 800dd96:	4313      	orrs	r3, r2
 800dd98:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800dd9a:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f103 0213 	add.w	r2, r3, #19
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dda8:	3b02      	subs	r3, #2
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	4619      	mov	r1, r3
 800ddae:	4610      	mov	r0, r2
 800ddb0:	f000 f939 	bl	800e026 <calcCRC>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	893b      	ldrh	r3, [r7, #8]
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d009      	beq.n	800ddd2 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	b29a      	uxth	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 800ddce:	23fc      	movs	r3, #252	; 0xfc
 800ddd0:	e10f      	b.n	800dff2 <validateRequest+0x286>
	    }



	    // check fct code
	    bool isSupported = false;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	73bb      	strb	r3, [r7, #14]
 800ddda:	e00c      	b.n	800ddf6 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800dddc:	7bbb      	ldrb	r3, [r7, #14]
 800ddde:	4a87      	ldr	r2, [pc, #540]	; (800dffc <validateRequest+0x290>)
 800dde0:	5cd2      	ldrb	r2, [r2, r3]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	7d1b      	ldrb	r3, [r3, #20]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d102      	bne.n	800ddf0 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800ddea:	2301      	movs	r3, #1
 800ddec:	73fb      	strb	r3, [r7, #15]
	            break;
 800ddee:	e005      	b.n	800ddfc <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800ddf0:	7bbb      	ldrb	r3, [r7, #14]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	73bb      	strb	r3, [r7, #14]
 800ddf6:	7bbb      	ldrb	r3, [r7, #14]
 800ddf8:	2b07      	cmp	r3, #7
 800ddfa:	d9ef      	bls.n	800dddc <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
 800ddfe:	f083 0301 	eor.w	r3, r3, #1
 800de02:	b2db      	uxtb	r3, r3
 800de04:	2b00      	cmp	r3, #0
 800de06:	d009      	beq.n	800de1c <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800de0e:	3301      	adds	r3, #1
 800de10:	b29a      	uxth	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 800de18:	2301      	movs	r3, #1
 800de1a:	e0ea      	b.n	800dff2 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 800de1c:	2300      	movs	r3, #0
 800de1e:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800de20:	2300      	movs	r3, #0
 800de22:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	7d1b      	ldrb	r3, [r3, #20]
 800de28:	3b01      	subs	r3, #1
 800de2a:	2b0f      	cmp	r3, #15
 800de2c:	f200 80e0 	bhi.w	800dff0 <validateRequest+0x284>
 800de30:	a201      	add	r2, pc, #4	; (adr r2, 800de38 <validateRequest+0xcc>)
 800de32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de36:	bf00      	nop
 800de38:	0800de79 	.word	0x0800de79
 800de3c:	0800de79 	.word	0x0800de79
 800de40:	0800df91 	.word	0x0800df91
 800de44:	0800df91 	.word	0x0800df91
 800de48:	0800df25 	.word	0x0800df25
 800de4c:	0800df6d 	.word	0x0800df6d
 800de50:	0800dff1 	.word	0x0800dff1
 800de54:	0800dff1 	.word	0x0800dff1
 800de58:	0800dff1 	.word	0x0800dff1
 800de5c:	0800dff1 	.word	0x0800dff1
 800de60:	0800dff1 	.word	0x0800dff1
 800de64:	0800dff1 	.word	0x0800dff1
 800de68:	0800dff1 	.word	0x0800dff1
 800de6c:	0800dff1 	.word	0x0800dff1
 800de70:	0800de79 	.word	0x0800de79
 800de74:	0800df91 	.word	0x0800df91
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7d5a      	ldrb	r2, [r3, #21]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	7d9b      	ldrb	r3, [r3, #22]
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f000 f8bc 	bl	800e000 <word>
 800de88:	4603      	mov	r3, r0
 800de8a:	091b      	lsrs	r3, r3, #4
 800de8c:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	7dda      	ldrb	r2, [r3, #23]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	7e1b      	ldrb	r3, [r3, #24]
 800de96:	4619      	mov	r1, r3
 800de98:	4610      	mov	r0, r2
 800de9a:	f000 f8b1 	bl	800e000 <word>
 800de9e:	4603      	mov	r3, r0
 800dea0:	091b      	lsrs	r3, r3, #4
 800dea2:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	7dda      	ldrb	r2, [r3, #23]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	7e1b      	ldrb	r3, [r3, #24]
 800deac:	4619      	mov	r1, r3
 800deae:	4610      	mov	r0, r2
 800deb0:	f000 f8a6 	bl	800e000 <word>
 800deb4:	4603      	mov	r3, r0
 800deb6:	f003 030f 	and.w	r3, r3, #15
 800deba:	b29b      	uxth	r3, r3
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <validateRequest+0x15a>
 800dec0:	897b      	ldrh	r3, [r7, #10]
 800dec2:	3301      	adds	r3, #1
 800dec4:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 800dec6:	89ba      	ldrh	r2, [r7, #12]
 800dec8:	897b      	ldrh	r3, [r7, #10]
 800deca:	4413      	add	r3, r2
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 800ded2:	4293      	cmp	r3, r2
 800ded4:	dd01      	ble.n	800deda <validateRequest+0x16e>
 800ded6:	2302      	movs	r3, #2
 800ded8:	e08b      	b.n	800dff2 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	7dda      	ldrb	r2, [r3, #23]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	7e1b      	ldrb	r3, [r3, #24]
 800dee2:	4619      	mov	r1, r3
 800dee4:	4610      	mov	r0, r2
 800dee6:	f000 f88b 	bl	800e000 <word>
 800deea:	4603      	mov	r3, r0
 800deec:	08db      	lsrs	r3, r3, #3
 800deee:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	7dda      	ldrb	r2, [r3, #23]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	7e1b      	ldrb	r3, [r3, #24]
 800def8:	4619      	mov	r1, r3
 800defa:	4610      	mov	r0, r2
 800defc:	f000 f880 	bl	800e000 <word>
 800df00:	4603      	mov	r3, r0
 800df02:	f003 0307 	and.w	r3, r3, #7
 800df06:	b29b      	uxth	r3, r3
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d002      	beq.n	800df12 <validateRequest+0x1a6>
 800df0c:	897b      	ldrh	r3, [r7, #10]
 800df0e:	3301      	adds	r3, #1
 800df10:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800df12:	897b      	ldrh	r3, [r7, #10]
 800df14:	3305      	adds	r3, #5
 800df16:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800df18:	897b      	ldrh	r3, [r7, #10]
 800df1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df1e:	d960      	bls.n	800dfe2 <validateRequest+0x276>
 800df20:	2303      	movs	r3, #3
 800df22:	e066      	b.n	800dff2 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	7d5a      	ldrb	r2, [r3, #21]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	7d9b      	ldrb	r3, [r3, #22]
 800df2c:	4619      	mov	r1, r3
 800df2e:	4610      	mov	r0, r2
 800df30:	f000 f866 	bl	800e000 <word>
 800df34:	4603      	mov	r3, r0
 800df36:	091b      	lsrs	r3, r3, #4
 800df38:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	7d5a      	ldrb	r2, [r3, #21]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	7d9b      	ldrb	r3, [r3, #22]
 800df42:	4619      	mov	r1, r3
 800df44:	4610      	mov	r0, r2
 800df46:	f000 f85b 	bl	800e000 <word>
 800df4a:	4603      	mov	r3, r0
 800df4c:	f003 030f 	and.w	r3, r3, #15
 800df50:	b29b      	uxth	r3, r3
 800df52:	2b00      	cmp	r3, #0
 800df54:	d002      	beq.n	800df5c <validateRequest+0x1f0>
 800df56:	89bb      	ldrh	r3, [r7, #12]
 800df58:	3301      	adds	r3, #1
 800df5a:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800df62:	89ba      	ldrh	r2, [r7, #12]
 800df64:	429a      	cmp	r2, r3
 800df66:	d93e      	bls.n	800dfe6 <validateRequest+0x27a>
 800df68:	2302      	movs	r3, #2
 800df6a:	e042      	b.n	800dff2 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	7d5a      	ldrb	r2, [r3, #21]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	7d9b      	ldrb	r3, [r3, #22]
 800df74:	4619      	mov	r1, r3
 800df76:	4610      	mov	r0, r2
 800df78:	f000 f842 	bl	800e000 <word>
 800df7c:	4603      	mov	r3, r0
 800df7e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800df86:	89ba      	ldrh	r2, [r7, #12]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d92e      	bls.n	800dfea <validateRequest+0x27e>
 800df8c:	2302      	movs	r3, #2
 800df8e:	e030      	b.n	800dff2 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7d5a      	ldrb	r2, [r3, #21]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	7d9b      	ldrb	r3, [r3, #22]
 800df98:	4619      	mov	r1, r3
 800df9a:	4610      	mov	r0, r2
 800df9c:	f000 f830 	bl	800e000 <word>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	7dda      	ldrb	r2, [r3, #23]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	7e1b      	ldrb	r3, [r3, #24]
 800dfac:	4619      	mov	r1, r3
 800dfae:	4610      	mov	r0, r2
 800dfb0:	f000 f826 	bl	800e000 <word>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 800dfb8:	89ba      	ldrh	r2, [r7, #12]
 800dfba:	897b      	ldrh	r3, [r7, #10]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	dd01      	ble.n	800dfcc <validateRequest+0x260>
 800dfc8:	2302      	movs	r3, #2
 800dfca:	e012      	b.n	800dff2 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800dfcc:	897b      	ldrh	r3, [r7, #10]
 800dfce:	005b      	lsls	r3, r3, #1
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	3305      	adds	r3, #5
 800dfd4:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800dfd6:	897b      	ldrh	r3, [r7, #10]
 800dfd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfdc:	d907      	bls.n	800dfee <validateRequest+0x282>
 800dfde:	2303      	movs	r3, #3
 800dfe0:	e007      	b.n	800dff2 <validateRequest+0x286>
	        break;
 800dfe2:	bf00      	nop
 800dfe4:	e004      	b.n	800dff0 <validateRequest+0x284>
	        break;
 800dfe6:	bf00      	nop
 800dfe8:	e002      	b.n	800dff0 <validateRequest+0x284>
	        break;
 800dfea:	bf00      	nop
 800dfec:	e000      	b.n	800dff0 <validateRequest+0x284>
	        break;
 800dfee:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800dff0:	2300      	movs	r3, #0

}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	0800ed7c 	.word	0x0800ed7c

0800e000 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800e000:	b480      	push	{r7}
 800e002:	b085      	sub	sp, #20
 800e004:	af00      	add	r7, sp, #0
 800e006:	4603      	mov	r3, r0
 800e008:	460a      	mov	r2, r1
 800e00a:	71fb      	strb	r3, [r7, #7]
 800e00c:	4613      	mov	r3, r2
 800e00e:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800e010:	79bb      	ldrb	r3, [r7, #6]
 800e012:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800e014:	79fb      	ldrb	r3, [r7, #7]
 800e016:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800e018:	89bb      	ldrh	r3, [r7, #12]
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3714      	adds	r7, #20
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr

0800e026 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 800e026:	b480      	push	{r7}
 800e028:	b087      	sub	sp, #28
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	460b      	mov	r3, r1
 800e030:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800e032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e036:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800e038:	2300      	movs	r3, #0
 800e03a:	74fb      	strb	r3, [r7, #19]
 800e03c:	e023      	b.n	800e086 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800e03e:	7cfb      	ldrb	r3, [r7, #19]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	4413      	add	r3, r2
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	461a      	mov	r2, r3
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	4053      	eors	r3, r2
 800e04c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e04e:	2301      	movs	r3, #1
 800e050:	74bb      	strb	r3, [r7, #18]
 800e052:	e012      	b.n	800e07a <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	f003 0301 	and.w	r3, r3, #1
 800e05a:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	085b      	lsrs	r3, r3, #1
 800e060:	617b      	str	r3, [r7, #20]
            if (flag)
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d005      	beq.n	800e074 <calcCRC+0x4e>
                temp ^= 0xA001;
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800e06e:	f083 0301 	eor.w	r3, r3, #1
 800e072:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e074:	7cbb      	ldrb	r3, [r7, #18]
 800e076:	3301      	adds	r3, #1
 800e078:	74bb      	strb	r3, [r7, #18]
 800e07a:	7cbb      	ldrb	r3, [r7, #18]
 800e07c:	2b08      	cmp	r3, #8
 800e07e:	d9e9      	bls.n	800e054 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800e080:	7cfb      	ldrb	r3, [r7, #19]
 800e082:	3301      	adds	r3, #1
 800e084:	74fb      	strb	r3, [r7, #19]
 800e086:	7cfa      	ldrb	r2, [r7, #19]
 800e088:	78fb      	ldrb	r3, [r7, #3]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d3d7      	bcc.n	800e03e <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	0a1b      	lsrs	r3, r3, #8
 800e092:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	021b      	lsls	r3, r3, #8
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	4313      	orrs	r3, r2
 800e09c:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	b29b      	uxth	r3, r3

}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	371c      	adds	r7, #28
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	6039      	str	r1, [r7, #0]
 800e0be:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	7d1b      	ldrb	r3, [r3, #20]
 800e0c4:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	7a1a      	ldrb	r2, [r3, #8]
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800e0ce:	7bfb      	ldrb	r3, [r7, #15]
 800e0d0:	3b80      	subs	r3, #128	; 0x80
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	79fa      	ldrb	r2, [r7, #7]
 800e0dc:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	2203      	movs	r2, #3
 800e0e2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800e0e6:	bf00      	nop
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr

0800e0f2 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 800e0f2:	b590      	push	{r4, r7, lr}
 800e0f4:	b087      	sub	sp, #28
 800e0f6:	af02      	add	r7, sp, #8
 800e0f8:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f103 0213 	add.w	r2, r3, #19
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e106:	4619      	mov	r1, r3
 800e108:	4610      	mov	r0, r2
 800e10a:	f7ff ff8c 	bl	800e026 <calcCRC>
 800e10e:	4603      	mov	r3, r0
 800e110:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800e112:	89fb      	ldrh	r3, [r7, #14]
 800e114:	0a1b      	lsrs	r3, r3, #8
 800e116:	b29a      	uxth	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e11e:	4619      	mov	r1, r3
 800e120:	b2d2      	uxtb	r2, r2
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	440b      	add	r3, r1
 800e126:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e12e:	3301      	adds	r3, #1
 800e130:	b2da      	uxtb	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e13e:	4619      	mov	r1, r3
 800e140:	89fb      	ldrh	r3, [r7, #14]
 800e142:	b2da      	uxtb	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	440b      	add	r3, r1
 800e148:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e150:	3301      	adds	r3, #1
 800e152:	b2da      	uxtb	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00c      	beq.n	800e17c <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	4618      	mov	r0, r3
 800e168:	f7f8 fe76 	bl	8006e58 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	68d8      	ldr	r0, [r3, #12]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	8a1b      	ldrh	r3, [r3, #16]
 800e174:	2201      	movs	r2, #1
 800e176:	4619      	mov	r1, r3
 800e178:	f7f5 fe62 	bl	8003e40 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e182:	2b01      	cmp	r3, #1
 800e184:	d10c      	bne.n	800e1a0 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6858      	ldr	r0, [r3, #4]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f103 0113 	add.w	r1, r3, #19
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e196:	b29b      	uxth	r3, r3
 800e198:	461a      	mov	r2, r3
 800e19a:	f7f8 f857 	bl	800624c <HAL_UART_Transmit_IT>
 800e19e:	e00b      	b.n	800e1b8 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6858      	ldr	r0, [r3, #4]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f103 0113 	add.w	r1, r3, #19
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	f7f8 f92a 	bl	800640c <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800e1b8:	21fa      	movs	r1, #250	; 0xfa
 800e1ba:	2001      	movs	r0, #1
 800e1bc:	f7fd fce4 	bl	800bb88 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800e1c0:	bf00      	nop
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	69db      	ldr	r3, [r3, #28]
 800e1ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d0f7      	beq.n	800e1c2 <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00c      	beq.n	800e1f4 <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	68d8      	ldr	r0, [r3, #12]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	8a1b      	ldrh	r3, [r3, #16]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	f7f5 fe2b 	bl	8003e40 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7f8 fe86 	bl	8006f00 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	2b04      	cmp	r3, #4
 800e1fa:	d10c      	bne.n	800e216 <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 800e202:	f7fc ff39 	bl	800b078 <xTaskGetTickCount>
 800e206:	4602      	mov	r2, r0
 800e208:	2300      	movs	r3, #0
 800e20a:	9300      	str	r3, [sp, #0]
 800e20c:	2300      	movs	r3, #0
 800e20e:	2102      	movs	r1, #2
 800e210:	4620      	mov	r0, r4
 800e212:	f7fd ff8d 	bl	800c130 <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800e224:	3301      	adds	r3, #1
 800e226:	b29a      	uxth	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 800e22e:	bf00      	nop
 800e230:	3714      	adds	r7, #20
 800e232:	46bd      	mov	sp, r7
 800e234:	bd90      	pop	{r4, r7, pc}

0800e236 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 800e236:	b580      	push	{r7, lr}
 800e238:	b086      	sub	sp, #24
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	7d5a      	ldrb	r2, [r3, #21]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	7d9b      	ldrb	r3, [r3, #22]
 800e246:	4619      	mov	r1, r3
 800e248:	4610      	mov	r0, r2
 800e24a:	f7ff fed9 	bl	800e000 <word>
 800e24e:	4603      	mov	r3, r0
 800e250:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	7dda      	ldrb	r2, [r3, #23]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	7e1b      	ldrb	r3, [r3, #24]
 800e25a:	4619      	mov	r1, r3
 800e25c:	4610      	mov	r0, r2
 800e25e:	f7ff fecf 	bl	800e000 <word>
 800e262:	4603      	mov	r3, r0
 800e264:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800e266:	8a3b      	ldrh	r3, [r7, #16]
 800e268:	08db      	lsrs	r3, r3, #3
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800e26e:	8a3b      	ldrh	r3, [r7, #16]
 800e270:	f003 0307 	and.w	r3, r3, #7
 800e274:	b29b      	uxth	r3, r3
 800e276:	2b00      	cmp	r3, #0
 800e278:	d002      	beq.n	800e280 <process_FC1+0x4a>
 800e27a:	7dfb      	ldrb	r3, [r7, #23]
 800e27c:	3301      	adds	r3, #1
 800e27e:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	7dfa      	ldrb	r2, [r7, #23]
 800e284:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2203      	movs	r2, #3
 800e28a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e294:	461a      	mov	r2, r3
 800e296:	7dfb      	ldrb	r3, [r7, #23]
 800e298:	4413      	add	r3, r2
 800e29a:	3b01      	subs	r3, #1
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	4413      	add	r3, r2
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	82bb      	strh	r3, [r7, #20]
 800e2ac:	e058      	b.n	800e360 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800e2ae:	8a7a      	ldrh	r2, [r7, #18]
 800e2b0:	8abb      	ldrh	r3, [r7, #20]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 800e2b6:	89bb      	ldrh	r3, [r7, #12]
 800e2b8:	091b      	lsrs	r3, r3, #4
 800e2ba:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e2bc:	89bb      	ldrh	r3, [r7, #12]
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	f003 030f 	and.w	r3, r3, #15
 800e2c4:	727b      	strb	r3, [r7, #9]

        bitWrite(
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e2cc:	897b      	ldrh	r3, [r7, #10]
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	4413      	add	r3, r2
 800e2d2:	881b      	ldrh	r3, [r3, #0]
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	7a7b      	ldrb	r3, [r7, #9]
 800e2d8:	fa42 f303 	asr.w	r3, r2, r3
 800e2dc:	f003 0301 	and.w	r3, r3, #1
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d014      	beq.n	800e30e <process_FC1+0xd8>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	7cda      	ldrb	r2, [r3, #19]
 800e2f2:	7dbb      	ldrb	r3, [r7, #22]
 800e2f4:	2101      	movs	r1, #1
 800e2f6:	fa01 f303 	lsl.w	r3, r1, r3
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	6879      	ldr	r1, [r7, #4]
 800e2fe:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e302:	4313      	orrs	r3, r2
 800e304:	b2da      	uxtb	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	440b      	add	r3, r1
 800e30a:	74da      	strb	r2, [r3, #19]
 800e30c:	e015      	b.n	800e33a <process_FC1+0x104>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e314:	461a      	mov	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4413      	add	r3, r2
 800e31a:	7cda      	ldrb	r2, [r3, #19]
 800e31c:	7dbb      	ldrb	r3, [r7, #22]
 800e31e:	2101      	movs	r1, #1
 800e320:	fa01 f303 	lsl.w	r3, r1, r3
 800e324:	b2db      	uxtb	r3, r3
 800e326:	43db      	mvns	r3, r3
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	6879      	ldr	r1, [r7, #4]
 800e32c:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e330:	4013      	ands	r3, r2
 800e332:	b2da      	uxtb	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	440b      	add	r3, r1
 800e338:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800e33a:	7dbb      	ldrb	r3, [r7, #22]
 800e33c:	3301      	adds	r3, #1
 800e33e:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800e340:	7dbb      	ldrb	r3, [r7, #22]
 800e342:	2b07      	cmp	r3, #7
 800e344:	d909      	bls.n	800e35a <process_FC1+0x124>
        {
            u8bitsno = 0;
 800e346:	2300      	movs	r3, #0
 800e348:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e350:	3301      	adds	r3, #1
 800e352:	b2da      	uxtb	r2, r3
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e35a:	8abb      	ldrh	r3, [r7, #20]
 800e35c:	3301      	adds	r3, #1
 800e35e:	82bb      	strh	r3, [r7, #20]
 800e360:	8aba      	ldrh	r2, [r7, #20]
 800e362:	8a3b      	ldrh	r3, [r7, #16]
 800e364:	429a      	cmp	r2, r3
 800e366:	d3a2      	bcc.n	800e2ae <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800e368:	8a3b      	ldrh	r3, [r7, #16]
 800e36a:	f003 0307 	and.w	r3, r3, #7
 800e36e:	b29b      	uxth	r3, r3
 800e370:	2b00      	cmp	r3, #0
 800e372:	d007      	beq.n	800e384 <process_FC1+0x14e>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e37a:	3301      	adds	r3, #1
 800e37c:	b2da      	uxtb	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e38a:	3302      	adds	r3, #2
 800e38c:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f7ff feaf 	bl	800e0f2 <sendTxBuffer>
    return u8CopyBufferSize;
 800e394:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	7d5a      	ldrb	r2, [r3, #21]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	7d9b      	ldrb	r3, [r3, #22]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	f7ff fe24 	bl	800e000 <word>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	7dda      	ldrb	r2, [r3, #23]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	7e1b      	ldrb	r3, [r3, #24]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	f7ff fe1a 	bl	800e000 <word>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800e3d0:	7afb      	ldrb	r3, [r7, #11]
 800e3d2:	005b      	lsls	r3, r3, #1
 800e3d4:	b2da      	uxtb	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2203      	movs	r2, #3
 800e3de:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e3e2:	89bb      	ldrh	r3, [r7, #12]
 800e3e4:	81fb      	strh	r3, [r7, #14]
 800e3e6:	e032      	b.n	800e44e <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e3ee:	89fb      	ldrh	r3, [r7, #14]
 800e3f0:	005b      	lsls	r3, r3, #1
 800e3f2:	4413      	add	r3, r2
 800e3f4:	881b      	ldrh	r3, [r3, #0]
 800e3f6:	0a1b      	lsrs	r3, r3, #8
 800e3f8:	b29a      	uxth	r2, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e400:	4619      	mov	r1, r3
 800e402:	b2d2      	uxtb	r2, r2
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	440b      	add	r3, r1
 800e408:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e410:	3301      	adds	r3, #1
 800e412:	b2da      	uxtb	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e420:	89fb      	ldrh	r3, [r7, #14]
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	4413      	add	r3, r2
 800e426:	881a      	ldrh	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e42e:	4619      	mov	r1, r3
 800e430:	b2d2      	uxtb	r2, r2
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	440b      	add	r3, r1
 800e436:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e43e:	3301      	adds	r3, #1
 800e440:	b2da      	uxtb	r2, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e448:	89fb      	ldrh	r3, [r7, #14]
 800e44a:	3301      	adds	r3, #1
 800e44c:	81fb      	strh	r3, [r7, #14]
 800e44e:	89fa      	ldrh	r2, [r7, #14]
 800e450:	89b9      	ldrh	r1, [r7, #12]
 800e452:	7afb      	ldrb	r3, [r7, #11]
 800e454:	440b      	add	r3, r1
 800e456:	429a      	cmp	r2, r3
 800e458:	dbc6      	blt.n	800e3e8 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e460:	3302      	adds	r3, #2
 800e462:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7ff fe44 	bl	800e0f2 <sendTxBuffer>

    return u8CopyBufferSize;
 800e46a:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3710      	adds	r7, #16
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800e476:	b580      	push	{r7, lr}
 800e478:	b084      	sub	sp, #16
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	7d5a      	ldrb	r2, [r3, #21]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	7d9b      	ldrb	r3, [r3, #22]
 800e486:	4619      	mov	r1, r3
 800e488:	4610      	mov	r0, r2
 800e48a:	f7ff fdb9 	bl	800e000 <word>
 800e48e:	4603      	mov	r3, r0
 800e490:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800e492:	89fb      	ldrh	r3, [r7, #14]
 800e494:	091b      	lsrs	r3, r3, #4
 800e496:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800e498:	89fb      	ldrh	r3, [r7, #14]
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	f003 030f 	and.w	r3, r3, #15
 800e4a0:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	7ddb      	ldrb	r3, [r3, #23]
 800e4a6:	2bff      	cmp	r3, #255	; 0xff
 800e4a8:	d115      	bne.n	800e4d6 <process_FC5+0x60>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e4b0:	89bb      	ldrh	r3, [r7, #12]
 800e4b2:	005b      	lsls	r3, r3, #1
 800e4b4:	4413      	add	r3, r2
 800e4b6:	8819      	ldrh	r1, [r3, #0]
 800e4b8:	7afb      	ldrb	r3, [r7, #11]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e4c0:	b29a      	uxth	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e4c8:	89bb      	ldrh	r3, [r7, #12]
 800e4ca:	005b      	lsls	r3, r3, #1
 800e4cc:	4403      	add	r3, r0
 800e4ce:	430a      	orrs	r2, r1
 800e4d0:	b292      	uxth	r2, r2
 800e4d2:	801a      	strh	r2, [r3, #0]
 800e4d4:	e016      	b.n	800e504 <process_FC5+0x8e>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e4dc:	89bb      	ldrh	r3, [r7, #12]
 800e4de:	005b      	lsls	r3, r3, #1
 800e4e0:	4413      	add	r3, r2
 800e4e2:	8819      	ldrh	r1, [r3, #0]
 800e4e4:	7afb      	ldrb	r3, [r7, #11]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	43db      	mvns	r3, r3
 800e4f0:	b29a      	uxth	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e4f8:	89bb      	ldrh	r3, [r7, #12]
 800e4fa:	005b      	lsls	r3, r3, #1
 800e4fc:	4403      	add	r3, r0
 800e4fe:	400a      	ands	r2, r1
 800e500:	b292      	uxth	r2, r2
 800e502:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2206      	movs	r2, #6
 800e508:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e512:	3302      	adds	r3, #2
 800e514:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7ff fdeb 	bl	800e0f2 <sendTxBuffer>

    return u8CopyBufferSize;
 800e51c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3710      	adds	r7, #16
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	7d5a      	ldrb	r2, [r3, #21]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	7d9b      	ldrb	r3, [r3, #22]
 800e538:	4619      	mov	r1, r3
 800e53a:	4610      	mov	r0, r2
 800e53c:	f7ff fd60 	bl	800e000 <word>
 800e540:	4603      	mov	r3, r0
 800e542:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	7dda      	ldrb	r2, [r3, #23]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	7e1b      	ldrb	r3, [r3, #24]
 800e54c:	4619      	mov	r1, r3
 800e54e:	4610      	mov	r0, r2
 800e550:	f7ff fd56 	bl	800e000 <word>
 800e554:	4603      	mov	r3, r0
 800e556:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e55e:	89fb      	ldrh	r3, [r7, #14]
 800e560:	005b      	lsls	r3, r3, #1
 800e562:	4413      	add	r3, r2
 800e564:	89ba      	ldrh	r2, [r7, #12]
 800e566:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2206      	movs	r2, #6
 800e56c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e576:	3302      	adds	r3, #2
 800e578:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f7ff fdb9 	bl	800e0f2 <sendTxBuffer>

    return u8CopyBufferSize;
 800e580:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b086      	sub	sp, #24
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	7d5a      	ldrb	r2, [r3, #21]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	7d9b      	ldrb	r3, [r3, #22]
 800e59c:	4619      	mov	r1, r3
 800e59e:	4610      	mov	r0, r2
 800e5a0:	f7ff fd2e 	bl	800e000 <word>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	7dda      	ldrb	r2, [r3, #23]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	7e1b      	ldrb	r3, [r3, #24]
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	4610      	mov	r0, r2
 800e5b4:	f7ff fd24 	bl	800e000 <word>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800e5c0:	2307      	movs	r3, #7
 800e5c2:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	82bb      	strh	r3, [r7, #20]
 800e5c8:	e058      	b.n	800e67c <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800e5ca:	8a7a      	ldrh	r2, [r7, #18]
 800e5cc:	8abb      	ldrh	r3, [r7, #20]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800e5d2:	89bb      	ldrh	r3, [r7, #12]
 800e5d4:	091b      	lsrs	r3, r3, #4
 800e5d6:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e5d8:	89bb      	ldrh	r3, [r7, #12]
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	f003 030f 	and.w	r3, r3, #15
 800e5e0:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800e5e2:	7dfb      	ldrb	r3, [r7, #23]
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	7cdb      	ldrb	r3, [r3, #19]
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	7dbb      	ldrb	r3, [r7, #22]
 800e5ee:	fa42 f303 	asr.w	r3, r2, r3
 800e5f2:	f003 0301 	and.w	r3, r3, #1
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	bf14      	ite	ne
 800e5fa:	2301      	movne	r3, #1
 800e5fc:	2300      	moveq	r3, #0
 800e5fe:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800e600:	7a3b      	ldrb	r3, [r7, #8]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d015      	beq.n	800e632 <process_FC15+0xa6>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e60c:	897b      	ldrh	r3, [r7, #10]
 800e60e:	005b      	lsls	r3, r3, #1
 800e610:	4413      	add	r3, r2
 800e612:	8819      	ldrh	r1, [r3, #0]
 800e614:	7a7b      	ldrb	r3, [r7, #9]
 800e616:	2201      	movs	r2, #1
 800e618:	fa02 f303 	lsl.w	r3, r2, r3
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e624:	897b      	ldrh	r3, [r7, #10]
 800e626:	005b      	lsls	r3, r3, #1
 800e628:	4403      	add	r3, r0
 800e62a:	430a      	orrs	r2, r1
 800e62c:	b292      	uxth	r2, r2
 800e62e:	801a      	strh	r2, [r3, #0]
 800e630:	e016      	b.n	800e660 <process_FC15+0xd4>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e638:	897b      	ldrh	r3, [r7, #10]
 800e63a:	005b      	lsls	r3, r3, #1
 800e63c:	4413      	add	r3, r2
 800e63e:	8819      	ldrh	r1, [r3, #0]
 800e640:	7a7b      	ldrb	r3, [r7, #9]
 800e642:	2201      	movs	r2, #1
 800e644:	fa02 f303 	lsl.w	r3, r2, r3
 800e648:	b29b      	uxth	r3, r3
 800e64a:	43db      	mvns	r3, r3
 800e64c:	b29a      	uxth	r2, r3
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e654:	897b      	ldrh	r3, [r7, #10]
 800e656:	005b      	lsls	r3, r3, #1
 800e658:	4403      	add	r3, r0
 800e65a:	400a      	ands	r2, r1
 800e65c:	b292      	uxth	r2, r2
 800e65e:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800e660:	7dbb      	ldrb	r3, [r7, #22]
 800e662:	3301      	adds	r3, #1
 800e664:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800e666:	7dbb      	ldrb	r3, [r7, #22]
 800e668:	2b07      	cmp	r3, #7
 800e66a:	d904      	bls.n	800e676 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800e670:	7dfb      	ldrb	r3, [r7, #23]
 800e672:	3301      	adds	r3, #1
 800e674:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e676:	8abb      	ldrh	r3, [r7, #20]
 800e678:	3301      	adds	r3, #1
 800e67a:	82bb      	strh	r3, [r7, #20]
 800e67c:	8aba      	ldrh	r2, [r7, #20]
 800e67e:	8a3b      	ldrh	r3, [r7, #16]
 800e680:	429a      	cmp	r2, r3
 800e682:	d3a2      	bcc.n	800e5ca <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2206      	movs	r2, #6
 800e688:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e692:	3302      	adds	r3, #2
 800e694:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7ff fd2b 	bl	800e0f2 <sendTxBuffer>
    return u8CopyBufferSize;
 800e69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3718      	adds	r7, #24
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	7d5b      	ldrb	r3, [r3, #21]
 800e6b4:	021b      	lsls	r3, r3, #8
 800e6b6:	b21a      	sxth	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	7d9b      	ldrb	r3, [r3, #22]
 800e6bc:	b21b      	sxth	r3, r3
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	b21b      	sxth	r3, r3
 800e6c2:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	7ddb      	ldrb	r3, [r3, #23]
 800e6c8:	021b      	lsls	r3, r3, #8
 800e6ca:	b21a      	sxth	r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	7e1b      	ldrb	r3, [r3, #24]
 800e6d0:	b21b      	sxth	r3, r3
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	b21b      	sxth	r3, r3
 800e6d6:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800e6de:	8a7b      	ldrh	r3, [r7, #18]
 800e6e0:	b2da      	uxtb	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2206      	movs	r2, #6
 800e6ea:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	82fb      	strh	r3, [r7, #22]
 800e6f2:	e01d      	b.n	800e730 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800e6f4:	8afb      	ldrh	r3, [r7, #22]
 800e6f6:	005b      	lsls	r3, r3, #1
 800e6f8:	3307      	adds	r3, #7
        temp = word(
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800e700:	8afb      	ldrh	r3, [r7, #22]
 800e702:	3304      	adds	r3, #4
 800e704:	005b      	lsls	r3, r3, #1
        temp = word(
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	4413      	add	r3, r2
 800e70a:	7cdb      	ldrb	r3, [r3, #19]
 800e70c:	4619      	mov	r1, r3
 800e70e:	f7ff fc77 	bl	800e000 <word>
 800e712:	4603      	mov	r3, r0
 800e714:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e71c:	8ab9      	ldrh	r1, [r7, #20]
 800e71e:	8afb      	ldrh	r3, [r7, #22]
 800e720:	440b      	add	r3, r1
 800e722:	005b      	lsls	r3, r3, #1
 800e724:	4413      	add	r3, r2
 800e726:	89fa      	ldrh	r2, [r7, #14]
 800e728:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800e72a:	8afb      	ldrh	r3, [r7, #22]
 800e72c:	3301      	adds	r3, #1
 800e72e:	82fb      	strh	r3, [r7, #22]
 800e730:	8afa      	ldrh	r2, [r7, #22]
 800e732:	8a7b      	ldrh	r3, [r7, #18]
 800e734:	429a      	cmp	r2, r3
 800e736:	d3dd      	bcc.n	800e6f4 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e73e:	3302      	adds	r3, #2
 800e740:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7ff fcd5 	bl	800e0f2 <sendTxBuffer>

    return u8CopyBufferSize;
 800e748:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af02      	add	r7, sp, #8
 800e75a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e75c:	2300      	movs	r3, #0
 800e75e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800e760:	2300      	movs	r3, #0
 800e762:	60fb      	str	r3, [r7, #12]
 800e764:	e019      	b.n	800e79a <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800e766:	4a17      	ldr	r2, [pc, #92]	; (800e7c4 <HAL_UART_TxCpltCallback+0x70>)
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	429a      	cmp	r2, r3
 800e774:	d10e      	bne.n	800e794 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800e776:	4a13      	ldr	r2, [pc, #76]	; (800e7c4 <HAL_UART_TxCpltCallback+0x70>)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e77e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800e782:	f107 0308 	add.w	r3, r7, #8
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	2300      	movs	r3, #0
 800e78a:	2200      	movs	r2, #0
 800e78c:	2100      	movs	r1, #0
 800e78e:	f7fd fafb 	bl	800bd88 <xTaskGenericNotifyFromISR>
	   		break;
 800e792:	e008      	b.n	800e7a6 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	3301      	adds	r3, #1
 800e798:	60fb      	str	r3, [r7, #12]
 800e79a:	4b0b      	ldr	r3, [pc, #44]	; (800e7c8 <HAL_UART_TxCpltCallback+0x74>)
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	dbdf      	blt.n	800e766 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d007      	beq.n	800e7bc <HAL_UART_TxCpltCallback+0x68>
 800e7ac:	4b07      	ldr	r3, [pc, #28]	; (800e7cc <HAL_UART_TxCpltCallback+0x78>)
 800e7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7b2:	601a      	str	r2, [r3, #0]
 800e7b4:	f3bf 8f4f 	dsb	sy
 800e7b8:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800e7bc:	bf00      	nop
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	200020b0 	.word	0x200020b0
 800e7c8:	200020b8 	.word	0x200020b8
 800e7cc:	e000ed04 	.word	0xe000ed04

0800e7d0 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800e7d0:	b590      	push	{r4, r7, lr}
 800e7d2:	b087      	sub	sp, #28
 800e7d4:	af02      	add	r7, sp, #8
 800e7d6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800e7dc:	2300      	movs	r3, #0
 800e7de:	60fb      	str	r3, [r7, #12]
 800e7e0:	e042      	b.n	800e868 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800e7e2:	4a2d      	ldr	r2, [pc, #180]	; (800e898 <HAL_UART_RxCpltCallback+0xc8>)
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d137      	bne.n	800e862 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800e7f2:	4a29      	ldr	r2, [pc, #164]	; (800e898 <HAL_UART_RxCpltCallback+0xc8>)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7fa:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d139      	bne.n	800e876 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800e802:	4a25      	ldr	r2, [pc, #148]	; (800e898 <HAL_UART_RxCpltCallback+0xc8>)
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e80a:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800e80e:	4922      	ldr	r1, [pc, #136]	; (800e898 <HAL_UART_RxCpltCallback+0xc8>)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e816:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800e81a:	4619      	mov	r1, r3
 800e81c:	4610      	mov	r0, r2
 800e81e:	f7fe fbe5 	bl	800cfec <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800e822:	4a1d      	ldr	r2, [pc, #116]	; (800e898 <HAL_UART_RxCpltCallback+0xc8>)
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e82a:	6858      	ldr	r0, [r3, #4]
 800e82c:	4a1a      	ldr	r2, [pc, #104]	; (800e898 <HAL_UART_RxCpltCallback+0xc8>)
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e834:	33a6      	adds	r3, #166	; 0xa6
 800e836:	2201      	movs	r2, #1
 800e838:	4619      	mov	r1, r3
 800e83a:	f7f7 fd9b 	bl	8006374 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800e83e:	4a16      	ldr	r2, [pc, #88]	; (800e898 <HAL_UART_RxCpltCallback+0xc8>)
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e846:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800e84a:	f7fc fc25 	bl	800b098 <xTaskGetTickCountFromISR>
 800e84e:	4602      	mov	r2, r0
 800e850:	f107 0308 	add.w	r3, r7, #8
 800e854:	2100      	movs	r1, #0
 800e856:	9100      	str	r1, [sp, #0]
 800e858:	2107      	movs	r1, #7
 800e85a:	4620      	mov	r0, r4
 800e85c:	f7fd fc68 	bl	800c130 <xTimerGenericCommand>
    		}
    		break;
 800e860:	e009      	b.n	800e876 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	3301      	adds	r3, #1
 800e866:	60fb      	str	r3, [r7, #12]
 800e868:	4b0c      	ldr	r3, [pc, #48]	; (800e89c <HAL_UART_RxCpltCallback+0xcc>)
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	461a      	mov	r2, r3
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	4293      	cmp	r3, r2
 800e872:	dbb6      	blt.n	800e7e2 <HAL_UART_RxCpltCallback+0x12>
 800e874:	e000      	b.n	800e878 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800e876:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d007      	beq.n	800e88e <HAL_UART_RxCpltCallback+0xbe>
 800e87e:	4b08      	ldr	r3, [pc, #32]	; (800e8a0 <HAL_UART_RxCpltCallback+0xd0>)
 800e880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e884:	601a      	str	r2, [r3, #0]
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800e88e:	bf00      	nop
 800e890:	3714      	adds	r7, #20
 800e892:	46bd      	mov	sp, r7
 800e894:	bd90      	pop	{r4, r7, pc}
 800e896:	bf00      	nop
 800e898:	200020b0 	.word	0x200020b0
 800e89c:	200020b8 	.word	0x200020b8
 800e8a0:	e000ed04 	.word	0xe000ed04

0800e8a4 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	60fb      	str	r3, [r7, #12]
 800e8b0:	e041      	b.n	800e936 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800e8b2:	4a27      	ldr	r2, [pc, #156]	; (800e950 <HAL_UART_ErrorCallback+0xac>)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d136      	bne.n	800e930 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800e8c2:	4a23      	ldr	r2, [pc, #140]	; (800e950 <HAL_UART_ErrorCallback+0xac>)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ca:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e8ce:	2b04      	cmp	r3, #4
 800e8d0:	d138      	bne.n	800e944 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e8d2:	e007      	b.n	800e8e4 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800e8d4:	4a1e      	ldr	r2, [pc, #120]	; (800e950 <HAL_UART_ErrorCallback+0xac>)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7f7 fe14 	bl	800650c <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e8e4:	4a1a      	ldr	r2, [pc, #104]	; (800e950 <HAL_UART_ErrorCallback+0xac>)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ec:	6858      	ldr	r0, [r3, #4]
 800e8ee:	4a18      	ldr	r2, [pc, #96]	; (800e950 <HAL_UART_ErrorCallback+0xac>)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8f6:	33bc      	adds	r3, #188	; 0xbc
 800e8f8:	2280      	movs	r2, #128	; 0x80
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	f7fa fafd 	bl	8008efa <HAL_UARTEx_ReceiveToIdle_DMA>
 800e900:	4603      	mov	r3, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1e6      	bne.n	800e8d4 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800e906:	4a12      	ldr	r2, [pc, #72]	; (800e950 <HAL_UART_ErrorCallback+0xac>)
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	490d      	ldr	r1, [pc, #52]	; (800e950 <HAL_UART_ErrorCallback+0xac>)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f022 0204 	bic.w	r2, r2, #4
 800e92c:	601a      	str	r2, [r3, #0]

    		}

    		break;
 800e92e:	e009      	b.n	800e944 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	3301      	adds	r3, #1
 800e934:	60fb      	str	r3, [r7, #12]
 800e936:	4b07      	ldr	r3, [pc, #28]	; (800e954 <HAL_UART_ErrorCallback+0xb0>)
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	461a      	mov	r2, r3
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	4293      	cmp	r3, r2
 800e940:	dbb7      	blt.n	800e8b2 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800e942:	e000      	b.n	800e946 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800e944:	bf00      	nop
}
 800e946:	bf00      	nop
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	200020b0 	.word	0x200020b0
 800e954:	200020b8 	.word	0x200020b8

0800e958 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b086      	sub	sp, #24
 800e95c:	af02      	add	r7, sp, #8
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	460b      	mov	r3, r1
 800e962:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e964:	2300      	movs	r3, #0
 800e966:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800e968:	2300      	movs	r3, #0
 800e96a:	60fb      	str	r3, [r7, #12]
 800e96c:	e061      	b.n	800ea32 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800e96e:	4a3c      	ldr	r2, [pc, #240]	; (800ea60 <HAL_UARTEx_RxEventCallback+0x108>)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d156      	bne.n	800ea2c <HAL_UARTEx_RxEventCallback+0xd4>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800e97e:	4a38      	ldr	r2, [pc, #224]	; (800ea60 <HAL_UARTEx_RxEventCallback+0x108>)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e986:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e98a:	2b04      	cmp	r3, #4
 800e98c:	d158      	bne.n	800ea40 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800e98e:	887b      	ldrh	r3, [r7, #2]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d055      	beq.n	800ea40 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800e994:	4a32      	ldr	r2, [pc, #200]	; (800ea60 <HAL_UARTEx_RxEventCallback+0x108>)
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e99c:	887a      	ldrh	r2, [r7, #2]
 800e99e:	b2d2      	uxtb	r2, r2
 800e9a0:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 800e9a4:	4a2e      	ldr	r2, [pc, #184]	; (800ea60 <HAL_UARTEx_RxEventCallback+0x108>)
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e9b2:	e007      	b.n	800e9c4 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800e9b4:	4a2a      	ldr	r2, [pc, #168]	; (800ea60 <HAL_UARTEx_RxEventCallback+0x108>)
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7f7 fda4 	bl	800650c <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e9c4:	4a26      	ldr	r2, [pc, #152]	; (800ea60 <HAL_UARTEx_RxEventCallback+0x108>)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9cc:	6858      	ldr	r0, [r3, #4]
 800e9ce:	4a24      	ldr	r2, [pc, #144]	; (800ea60 <HAL_UARTEx_RxEventCallback+0x108>)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9d6:	33bc      	adds	r3, #188	; 0xbc
 800e9d8:	2280      	movs	r2, #128	; 0x80
 800e9da:	4619      	mov	r1, r3
 800e9dc:	f7fa fa8d 	bl	8008efa <HAL_UARTEx_ReceiveToIdle_DMA>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d1e6      	bne.n	800e9b4 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800e9e6:	4a1e      	ldr	r2, [pc, #120]	; (800ea60 <HAL_UARTEx_RxEventCallback+0x108>)
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	4919      	ldr	r1, [pc, #100]	; (800ea60 <HAL_UARTEx_RxEventCallback+0x108>)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f022 0204 	bic.w	r2, r2, #4
 800ea0c:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800ea0e:	4a14      	ldr	r2, [pc, #80]	; (800ea60 <HAL_UARTEx_RxEventCallback+0x108>)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea16:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800ea1a:	f107 0308 	add.w	r3, r7, #8
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	2300      	movs	r3, #0
 800ea22:	2203      	movs	r2, #3
 800ea24:	2100      	movs	r1, #0
 800ea26:	f7fd f9af 	bl	800bd88 <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 800ea2a:	e009      	b.n	800ea40 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	60fb      	str	r3, [r7, #12]
 800ea32:	4b0c      	ldr	r3, [pc, #48]	; (800ea64 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	461a      	mov	r2, r3
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	db97      	blt.n	800e96e <HAL_UARTEx_RxEventCallback+0x16>
 800ea3e:	e000      	b.n	800ea42 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800ea40:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d007      	beq.n	800ea58 <HAL_UARTEx_RxEventCallback+0x100>
 800ea48:	4b07      	ldr	r3, [pc, #28]	; (800ea68 <HAL_UARTEx_RxEventCallback+0x110>)
 800ea4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea4e:	601a      	str	r2, [r3, #0]
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	f3bf 8f6f 	isb	sy
}
 800ea58:	bf00      	nop
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	200020b0 	.word	0x200020b0
 800ea64:	200020b8 	.word	0x200020b8
 800ea68:	e000ed04 	.word	0xe000ed04

0800ea6c <memset>:
 800ea6c:	4402      	add	r2, r0
 800ea6e:	4603      	mov	r3, r0
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d100      	bne.n	800ea76 <memset+0xa>
 800ea74:	4770      	bx	lr
 800ea76:	f803 1b01 	strb.w	r1, [r3], #1
 800ea7a:	e7f9      	b.n	800ea70 <memset+0x4>

0800ea7c <__libc_init_array>:
 800ea7c:	b570      	push	{r4, r5, r6, lr}
 800ea7e:	4d0d      	ldr	r5, [pc, #52]	; (800eab4 <__libc_init_array+0x38>)
 800ea80:	4c0d      	ldr	r4, [pc, #52]	; (800eab8 <__libc_init_array+0x3c>)
 800ea82:	1b64      	subs	r4, r4, r5
 800ea84:	10a4      	asrs	r4, r4, #2
 800ea86:	2600      	movs	r6, #0
 800ea88:	42a6      	cmp	r6, r4
 800ea8a:	d109      	bne.n	800eaa0 <__libc_init_array+0x24>
 800ea8c:	4d0b      	ldr	r5, [pc, #44]	; (800eabc <__libc_init_array+0x40>)
 800ea8e:	4c0c      	ldr	r4, [pc, #48]	; (800eac0 <__libc_init_array+0x44>)
 800ea90:	f000 f826 	bl	800eae0 <_init>
 800ea94:	1b64      	subs	r4, r4, r5
 800ea96:	10a4      	asrs	r4, r4, #2
 800ea98:	2600      	movs	r6, #0
 800ea9a:	42a6      	cmp	r6, r4
 800ea9c:	d105      	bne.n	800eaaa <__libc_init_array+0x2e>
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}
 800eaa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaa4:	4798      	blx	r3
 800eaa6:	3601      	adds	r6, #1
 800eaa8:	e7ee      	b.n	800ea88 <__libc_init_array+0xc>
 800eaaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaae:	4798      	blx	r3
 800eab0:	3601      	adds	r6, #1
 800eab2:	e7f2      	b.n	800ea9a <__libc_init_array+0x1e>
 800eab4:	0800ed8c 	.word	0x0800ed8c
 800eab8:	0800ed8c 	.word	0x0800ed8c
 800eabc:	0800ed8c 	.word	0x0800ed8c
 800eac0:	0800ed90 	.word	0x0800ed90

0800eac4 <memcpy>:
 800eac4:	440a      	add	r2, r1
 800eac6:	4291      	cmp	r1, r2
 800eac8:	f100 33ff 	add.w	r3, r0, #4294967295
 800eacc:	d100      	bne.n	800ead0 <memcpy+0xc>
 800eace:	4770      	bx	lr
 800ead0:	b510      	push	{r4, lr}
 800ead2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ead6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eada:	4291      	cmp	r1, r2
 800eadc:	d1f9      	bne.n	800ead2 <memcpy+0xe>
 800eade:	bd10      	pop	{r4, pc}

0800eae0 <_init>:
 800eae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eae2:	bf00      	nop
 800eae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eae6:	bc08      	pop	{r3}
 800eae8:	469e      	mov	lr, r3
 800eaea:	4770      	bx	lr

0800eaec <_fini>:
 800eaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaee:	bf00      	nop
 800eaf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaf2:	bc08      	pop	{r3}
 800eaf4:	469e      	mov	lr, r3
 800eaf6:	4770      	bx	lr
