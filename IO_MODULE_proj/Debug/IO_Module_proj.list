
IO_Module_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed98  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800eed8  0800eed8  0001eed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f18c  0800f18c  0001f18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f194  0800f194  0001f194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f198  0800f198  0001f198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000048  20000008  0800f19c  00020008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002104  20000050  0800f1e4  00020050  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20002154  0800f1e4  00022154  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002f7e5  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005ce0  00000000  00000000  0004f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b20  00000000  00000000  00055588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000215d  00000000  00000000  000580a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002877a  00000000  00000000  0005a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002e12b  00000000  00000000  0008297f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010158b  00000000  00000000  000b0aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bb58  00000000  00000000  001b2038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  001bdb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000050 	.word	0x20000050
 800015c:	00000000 	.word	0x00000000
 8000160:	0800eec0 	.word	0x0800eec0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000054 	.word	0x20000054
 800017c:	0800eec0 	.word	0x0800eec0

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b970 	b.w	8000e04 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	460d      	mov	r5, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	460f      	mov	r7, r1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d14a      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4694      	mov	ip, r2
 8000b50:	d965      	bls.n	8000c1e <__udivmoddi4+0xe2>
 8000b52:	fab2 f382 	clz	r3, r2
 8000b56:	b143      	cbz	r3, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b5c:	f1c3 0220 	rsb	r2, r3, #32
 8000b60:	409f      	lsls	r7, r3
 8000b62:	fa20 f202 	lsr.w	r2, r0, r2
 8000b66:	4317      	orrs	r7, r2
 8000b68:	409c      	lsls	r4, r3
 8000b6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b6e:	fa1f f58c 	uxth.w	r5, ip
 8000b72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b76:	0c22      	lsrs	r2, r4, #16
 8000b78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b80:	fb01 f005 	mul.w	r0, r1, r5
 8000b84:	4290      	cmp	r0, r2
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x62>
 8000b88:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b90:	f080 811c 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000b94:	4290      	cmp	r0, r2
 8000b96:	f240 8119 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000b9a:	3902      	subs	r1, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a12      	subs	r2, r2, r0
 8000ba0:	b2a4      	uxth	r4, r4
 8000ba2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ba6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000baa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bae:	fb00 f505 	mul.w	r5, r0, r5
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	d90a      	bls.n	8000bcc <__udivmoddi4+0x90>
 8000bb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x294>
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x294>
 8000bc8:	4464      	add	r4, ip
 8000bca:	3802      	subs	r0, #2
 8000bcc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bd0:	1b64      	subs	r4, r4, r5
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	b11e      	cbz	r6, 8000bde <__udivmoddi4+0xa2>
 8000bd6:	40dc      	lsrs	r4, r3
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e9c6 4300 	strd	r4, r3, [r6]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0xbc>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80ed 	beq.w	8000dc6 <__udivmoddi4+0x28a>
 8000bec:	2100      	movs	r1, #0
 8000bee:	e9c6 0500 	strd	r0, r5, [r6]
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	fab3 f183 	clz	r1, r3
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d149      	bne.n	8000c94 <__udivmoddi4+0x158>
 8000c00:	42ab      	cmp	r3, r5
 8000c02:	d302      	bcc.n	8000c0a <__udivmoddi4+0xce>
 8000c04:	4282      	cmp	r2, r0
 8000c06:	f200 80f8 	bhi.w	8000dfa <__udivmoddi4+0x2be>
 8000c0a:	1a84      	subs	r4, r0, r2
 8000c0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c10:	2001      	movs	r0, #1
 8000c12:	4617      	mov	r7, r2
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d0e2      	beq.n	8000bde <__udivmoddi4+0xa2>
 8000c18:	e9c6 4700 	strd	r4, r7, [r6]
 8000c1c:	e7df      	b.n	8000bde <__udivmoddi4+0xa2>
 8000c1e:	b902      	cbnz	r2, 8000c22 <__udivmoddi4+0xe6>
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 8090 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2c:	1a8a      	subs	r2, r1, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2101      	movs	r1, #1
 8000c38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c40:	0c22      	lsrs	r2, r4, #16
 8000c42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c46:	fb0e f005 	mul.w	r0, lr, r5
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2b8>
 8000c5e:	4645      	mov	r5, r8
 8000c60:	1a12      	subs	r2, r2, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c68:	fb07 2210 	mls	r2, r7, r0, r2
 8000c6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x14e>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x14c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2c2>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c92:	e79f      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000c94:	f1c1 0720 	rsb	r7, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca6:	fa20 f307 	lsr.w	r3, r0, r7
 8000caa:	40fd      	lsrs	r5, r7
 8000cac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb0:	4323      	orrs	r3, r4
 8000cb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	fb09 5518 	mls	r5, r9, r8, r5
 8000cbe:	0c1c      	lsrs	r4, r3, #16
 8000cc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc8:	42a5      	cmp	r5, r4
 8000cca:	fa02 f201 	lsl.w	r2, r2, r1
 8000cce:	fa00 f001 	lsl.w	r0, r0, r1
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4464      	add	r4, ip
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	b29d      	uxth	r5, r3
 8000cf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2ac>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2ac>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	4464      	add	r4, ip
 8000d16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	42ac      	cmp	r4, r5
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46ae      	mov	lr, r5
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x29c>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x298>
 8000d2c:	b156      	cbz	r6, 8000d44 <__udivmoddi4+0x208>
 8000d2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d32:	eb64 040e 	sbc.w	r4, r4, lr
 8000d36:	fa04 f707 	lsl.w	r7, r4, r7
 8000d3a:	40ca      	lsrs	r2, r1
 8000d3c:	40cc      	lsrs	r4, r1
 8000d3e:	4317      	orrs	r7, r2
 8000d40:	e9c6 7400 	strd	r7, r4, [r6]
 8000d44:	4618      	mov	r0, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	f1c3 0120 	rsb	r1, r3, #32
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	fa20 f201 	lsr.w	r2, r0, r1
 8000d58:	fa25 f101 	lsr.w	r1, r5, r1
 8000d5c:	409d      	lsls	r5, r3
 8000d5e:	432a      	orrs	r2, r5
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d70:	0c11      	lsrs	r1, r2, #16
 8000d72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d76:	fb00 f50e 	mul.w	r5, r0, lr
 8000d7a:	428d      	cmp	r5, r1
 8000d7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x258>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000d8c:	428d      	cmp	r5, r1
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1b49      	subs	r1, r1, r5
 8000d96:	b292      	uxth	r2, r2
 8000d98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000da0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da4:	fb05 f10e 	mul.w	r1, r5, lr
 8000da8:	4291      	cmp	r1, r2
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x282>
 8000dac:	eb1c 0202 	adds.w	r2, ip, r2
 8000db0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000db6:	4291      	cmp	r1, r2
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000dba:	3d02      	subs	r5, #2
 8000dbc:	4462      	add	r2, ip
 8000dbe:	1a52      	subs	r2, r2, r1
 8000dc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0xfc>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e708      	b.n	8000bde <__udivmoddi4+0xa2>
 8000dcc:	4639      	mov	r1, r7
 8000dce:	e6e6      	b.n	8000b9e <__udivmoddi4+0x62>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x90>
 8000dd4:	4548      	cmp	r0, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000de0:	3b01      	subs	r3, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de4:	4645      	mov	r5, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x282>
 8000de8:	462b      	mov	r3, r5
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x258>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df4:	3d02      	subs	r5, #2
 8000df6:	4462      	add	r2, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x124>
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e70a      	b.n	8000c14 <__udivmoddi4+0xd8>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x14e>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <PID0_step>:
float rtb_Sum = 0;
float temp_err = 0;

/* Model step function */
void PID0_step(double Temp)
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	ed87 0b00 	vstr	d0, [r7]
  real_T Input = 298.15 - (Temp + 273.15);
 8000e12:	a381      	add	r3, pc, #516	; (adr r3, 8001018 <PID0_step+0x210>)
 8000e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e1c:	f7ff f9b6 	bl	800018c <__adddf3>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	a17e      	add	r1, pc, #504	; (adr r1, 8001020 <PID0_step+0x218>)
 8000e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e2a:	f7ff f9ad 	bl	8000188 <__aeabi_dsub>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	e9c7 2304 	strd	r2, r3, [r7, #16]
  real_T rtb_FilterCoefficient;
  PID0_U.u = Input;
 8000e36:	496e      	ldr	r1, [pc, #440]	; (8000ff0 <PID0_step+0x1e8>)
 8000e38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e3c:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S27>/Derivative Gain'
   *  Inport: '<Root>/u'
   *  Sum: '<S28>/SumD'
   */
  // Derivative gain 0.0
  rtb_FilterCoefficient = (kD * PID0_U.u - PID0_DW.Filter_DSTATE) * 100.0;
 8000e40:	4b6b      	ldr	r3, [pc, #428]	; (8000ff0 <PID0_step+0x1e8>)
 8000e42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e46:	4b6b      	ldr	r3, [pc, #428]	; (8000ff4 <PID0_step+0x1ec>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fb54 	bl	80004f8 <__aeabi_dmul>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4610      	mov	r0, r2
 8000e56:	4619      	mov	r1, r3
 8000e58:	4b67      	ldr	r3, [pc, #412]	; (8000ff8 <PID0_step+0x1f0>)
 8000e5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e5e:	f7ff f993 	bl	8000188 <__aeabi_dsub>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4610      	mov	r0, r2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	4b63      	ldr	r3, [pc, #396]	; (8000ffc <PID0_step+0x1f4>)
 8000e70:	f7ff fb42 	bl	80004f8 <__aeabi_dmul>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	e9c7 2302 	strd	r2, r3, [r7, #8]
   *  DiscreteIntegrator: '<S33>/Integrator's
   *  Gain: '<S38>/Proportional Gain'
   *  Inport: '<Root>/u'
   */
  // Proportional gain 0.001
  rtb_Sum = (kP * PID0_U.u + PID0_DW.Integrator_DSTATE) +
 8000e7c:	4b5c      	ldr	r3, [pc, #368]	; (8000ff0 <PID0_step+0x1e8>)
 8000e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e82:	4b5f      	ldr	r3, [pc, #380]	; (8001000 <PID0_step+0x1f8>)
 8000e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e88:	f7ff fb36 	bl	80004f8 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	4b58      	ldr	r3, [pc, #352]	; (8000ff8 <PID0_step+0x1f0>)
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	f7ff f977 	bl	800018c <__adddf3>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000eaa:	f7ff f96f 	bl	800018c <__adddf3>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fdd9 	bl	8000a6c <__aeabi_d2f>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a51      	ldr	r2, [pc, #324]	; (8001004 <PID0_step+0x1fc>)
 8000ebe:	6013      	str	r3, [r2, #0]
    rtb_FilterCoefficient;


  /* Saturate: '<S40>/Saturation' */
  if (rtb_Sum > 0.9) {
 8000ec0:	4b50      	ldr	r3, [pc, #320]	; (8001004 <PID0_step+0x1fc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fabf 	bl	8000448 <__aeabi_f2d>
 8000eca:	a347      	add	r3, pc, #284	; (adr r3, 8000fe8 <PID0_step+0x1e0>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fda2 	bl	8000a18 <__aeabi_dcmpgt>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d006      	beq.n	8000ee8 <PID0_step+0xe0>
    /* Saturate: '<S40>/Saturation' */
    PID0_Y.y = 0.9;
 8000eda:	494b      	ldr	r1, [pc, #300]	; (8001008 <PID0_step+0x200>)
 8000edc:	a342      	add	r3, pc, #264	; (adr r3, 8000fe8 <PID0_step+0x1e0>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	e9c1 2300 	strd	r2, r3, [r1]
 8000ee6:	e019      	b.n	8000f1c <PID0_step+0x114>
  } else if (rtb_Sum < 0.0) {
 8000ee8:	4b46      	ldr	r3, [pc, #280]	; (8001004 <PID0_step+0x1fc>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef6:	d507      	bpl.n	8000f08 <PID0_step+0x100>
    /* Saturate: '<S40>/Saturation' */
    PID0_Y.y = 0.0;
 8000ef8:	4943      	ldr	r1, [pc, #268]	; (8001008 <PID0_step+0x200>)
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	e9c1 2300 	strd	r2, r3, [r1]
 8000f06:	e009      	b.n	8000f1c <PID0_step+0x114>

  } else {
    /* Saturate: '<S40>/Saturation' */
    PID0_Y.y = rtb_Sum;
 8000f08:	4b3e      	ldr	r3, [pc, #248]	; (8001004 <PID0_step+0x1fc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fa9b 	bl	8000448 <__aeabi_f2d>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	493c      	ldr	r1, [pc, #240]	; (8001008 <PID0_step+0x200>)
 8000f18:	e9c1 2300 	strd	r2, r3, [r1]
   *  Inport: '<Root>/u'
   *  Sum: '<S26>/SumI2'
   *  Sum: '<S26>/SumI4'
   */
  // Integral gain 0.001
  PID0_DW.Integrator_DSTATE += ((Input + temp_err) * kI);
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <PID0_step+0x1f0>)
 8000f1e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <PID0_step+0x204>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fa8e 	bl	8000448 <__aeabi_f2d>
 8000f2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f30:	f7ff f92c 	bl	800018c <__adddf3>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <PID0_step+0x208>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	f7ff fad9 	bl	80004f8 <__aeabi_dmul>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	4629      	mov	r1, r5
 8000f4e:	f7ff f91d 	bl	800018c <__adddf3>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4928      	ldr	r1, [pc, #160]	; (8000ff8 <PID0_step+0x1f0>)
 8000f58:	e9c1 2300 	strd	r2, r3, [r1]

  if(PID0_DW.Integrator_DSTATE >= 0.9)
 8000f5c:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <PID0_step+0x1f0>)
 8000f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f62:	a321      	add	r3, pc, #132	; (adr r3, 8000fe8 <PID0_step+0x1e0>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff fd4c 	bl	8000a04 <__aeabi_dcmpge>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d005      	beq.n	8000f7e <PID0_step+0x176>
	  PID0_DW.Integrator_DSTATE = 0.9;
 8000f72:	4921      	ldr	r1, [pc, #132]	; (8000ff8 <PID0_step+0x1f0>)
 8000f74:	a31c      	add	r3, pc, #112	; (adr r3, 8000fe8 <PID0_step+0x1e0>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	e9c1 2300 	strd	r2, r3, [r1]

  if(PID0_DW.Integrator_DSTATE < 0)
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <PID0_step+0x1f0>)
 8000f80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	f7ff fd26 	bl	80009dc <__aeabi_dcmplt>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <PID0_step+0x19c>
	  PID0_DW.Integrator_DSTATE = 0;
 8000f96:	4918      	ldr	r1, [pc, #96]	; (8000ff8 <PID0_step+0x1f0>)
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	e9c1 2300 	strd	r2, r3, [r1]

  /* Update for DiscreteIntegrator: '<S28>/Filter' */
  PID0_DW.Filter_DSTATE += 50.0 * rtb_FilterCoefficient;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <PID0_step+0x1f0>)
 8000fa6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <PID0_step+0x20c>)
 8000fb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fb4:	f7ff faa0 	bl	80004f8 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	f7ff f8e4 	bl	800018c <__adddf3>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	490b      	ldr	r1, [pc, #44]	; (8000ff8 <PID0_step+0x1f0>)
 8000fca:	e9c1 2302 	strd	r2, r3, [r1, #8]

  temp_err = Input;
 8000fce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fd2:	f7ff fd4b 	bl	8000a6c <__aeabi_d2f>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <PID0_step+0x204>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	cccccccd 	.word	0xcccccccd
 8000fec:	3feccccc 	.word	0x3feccccc
 8000ff0:	20000080 	.word	0x20000080
 8000ff4:	20000090 	.word	0x20000090
 8000ff8:	20000070 	.word	0x20000070
 8000ffc:	40590000 	.word	0x40590000
 8001000:	20000008 	.word	0x20000008
 8001004:	20000098 	.word	0x20000098
 8001008:	20000088 	.word	0x20000088
 800100c:	2000009c 	.word	0x2000009c
 8001010:	20000010 	.word	0x20000010
 8001014:	40490000 	.word	0x40490000
 8001018:	66666666 	.word	0x66666666
 800101c:	40711266 	.word	0x40711266
 8001020:	66666666 	.word	0x66666666
 8001024:	4072a266 	.word	0x4072a266

08001028 <IO_Module_Init>:



//IO Module Configuration function
void IO_Module_Init(io_module_t * IO)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	bitWrite(IO,TWA1_STATUS,TWA_1);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f9ad 	bl	8001394 <bitWrite>
	bitWrite(IO,TWA2_STATUS,TWA_2);
 800103a:	2201      	movs	r2, #1
 800103c:	2102      	movs	r1, #2
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f9a8 	bl	8001394 <bitWrite>
	bitWrite(IO,TWA3_STATUS,TWA_3);
 8001044:	2200      	movs	r2, #0
 8001046:	2104      	movs	r1, #4
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f9a3 	bl	8001394 <bitWrite>
	bitWrite(IO,TWA4_STATUS,TWA_4);
 800104e:	2200      	movs	r2, #0
 8001050:	2106      	movs	r1, #6
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f99e 	bl	8001394 <bitWrite>

	bitWrite(IO,TEMP1_STATUS,PT1k_1);
 8001058:	2200      	movs	r2, #0
 800105a:	2110      	movs	r1, #16
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f999 	bl	8001394 <bitWrite>
	bitWrite(IO,TEMP2_STATUS,PT1k_2);
 8001062:	2200      	movs	r2, #0
 8001064:	2111      	movs	r1, #17
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f994 	bl	8001394 <bitWrite>
	bitWrite(IO,TEMP3_STATUS,PT1k_3);
 800106c:	2200      	movs	r2, #0
 800106e:	2112      	movs	r1, #18
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f98f 	bl	8001394 <bitWrite>
	bitWrite(IO,TEMP4_STATUS,PT1k_4);
 8001076:	2200      	movs	r2, #0
 8001078:	2113      	movs	r1, #19
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f98a 	bl	8001394 <bitWrite>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <ADC_Init>:


void ADC_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800108e:	463b      	mov	r3, r7
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]

  /** Common config
   * Default ADC if only 1 channel configured
  */
  hadc1.Instance = ADC1;
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <ADC_Init+0xbc>)
 80010a0:	4a29      	ldr	r2, [pc, #164]	; (8001148 <ADC_Init+0xc0>)
 80010a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <ADC_Init+0xbc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <ADC_Init+0xbc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <ADC_Init+0xbc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b6:	4b23      	ldr	r3, [pc, #140]	; (8001144 <ADC_Init+0xbc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <ADC_Init+0xbc>)
 80010be:	2204      	movs	r2, #4
 80010c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <ADC_Init+0xbc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <ADC_Init+0xbc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <ADC_Init+0xbc>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <ADC_Init+0xbc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <ADC_Init+0xbc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <ADC_Init+0xbc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <ADC_Init+0xbc>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <ADC_Init+0xbc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <ADC_Init+0xbc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if(N_ROOMS > 1){
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
	  hadc1.Init.NbrOfConversion = N_ROOMS;
  }

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <ADC_Init+0xbc>)
 8001100:	f001 fa04 	bl	800250c <HAL_ADC_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <ADC_Init+0x86>
  {
    Error_Handler();
 800110a:	f000 fc8f 	bl	8001a2c <Error_Handler>
  }

  /** Configure initial ADC channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <ADC_Init+0xc4>)
 8001110:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001112:	2306      	movs	r3, #6
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001116:	2302      	movs	r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800111a:	237f      	movs	r3, #127	; 0x7f
 800111c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111e:	2304      	movs	r3, #4
 8001120:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <ADC_Init+0xbc>)
 800112c:	f001 fc34 	bl	8002998 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <ADC_Init+0xb2>
  {
    Error_Handler();
 8001136:	f000 fc79 	bl	8001a2c <Error_Handler>
	  {
		Error_Handler();
	  }
  }

}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000d8 	.word	0x200000d8
 8001148:	50040000 	.word	0x50040000
 800114c:	25b00200 	.word	0x25b00200

08001150 <ADC_Temp_Thread_Start>:

// Initializes the thread and event flags in charge of calculating the temperature values form PT1000
void ADC_Temp_Thread_Start(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	TempCalcHandle = osThreadNew(CalculateTemp_Thread, NULL, &TempCalc_attributes);
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <ADC_Temp_Thread_Start+0x18>)
 8001156:	2100      	movs	r1, #0
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <ADC_Temp_Thread_Start+0x1c>)
 800115a:	f008 fb3f 	bl	80097dc <osThreadNew>
 800115e:	4603      	mov	r3, r0
 8001160:	4a03      	ldr	r2, [pc, #12]	; (8001170 <ADC_Temp_Thread_Start+0x20>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	0800efc0 	.word	0x0800efc0
 800116c:	080012a9 	.word	0x080012a9
 8001170:	200000a0 	.word	0x200000a0

08001174 <Control_Thread_Init>:


// Initializes required components for Control algorithm thread
void Control_Thread_Init(io_module_t *IO)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	ControlHandle = osThreadNew(ControlTask, IO, &Control_attributes);
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <Control_Thread_Init+0x44>)
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <Control_Thread_Init+0x48>)
 8001182:	f008 fb2b 	bl	80097dc <osThreadNew>
 8001186:	4603      	mov	r3, r0
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <Control_Thread_Init+0x4c>)
 800118a:	6013      	str	r3, [r2, #0]
	controlTimerHandle = osTimerNew(ControlExecTim, osTimerPeriodic, NULL, &controlTimer_attributes);
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <Control_Thread_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	2101      	movs	r1, #1
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <Control_Thread_Init+0x54>)
 8001194:	f008 fcb4 	bl	8009b00 <osTimerNew>
 8001198:	4603      	mov	r3, r0
 800119a:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <Control_Thread_Init+0x58>)
 800119c:	6013      	str	r3, [r2, #0]
	TwaTimerHandle = osTimerNew(TwaControlTim, osTimerOnce, IO, &TwaTimer_attributes);
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <Control_Thread_Init+0x5c>)
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	2100      	movs	r1, #0
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <Control_Thread_Init+0x60>)
 80011a6:	f008 fcab 	bl	8009b00 <osTimerNew>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <Control_Thread_Init+0x64>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	0800efe4 	.word	0x0800efe4
 80011bc:	080011e1 	.word	0x080011e1
 80011c0:	200000a4 	.word	0x200000a4
 80011c4:	0800f008 	.word	0x0800f008
 80011c8:	08001401 	.word	0x08001401
 80011cc:	200000a8 	.word	0x200000a8
 80011d0:	0800f018 	.word	0x0800f018
 80011d4:	08001421 	.word	0x08001421
 80011d8:	200000ac 	.word	0x200000ac
 80011dc:	00000000 	.word	0x00000000

080011e0 <ControlTask>:


#if MODE == 0
void ControlTask(void *argument){
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	osTimerStart(controlTimerHandle, CONTROLFREQ);
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <ControlTask+0xb0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f247 5130 	movw	r1, #30000	; 0x7530
 80011f0:	4618      	mov	r0, r3
 80011f2:	f008 fd01 	bl	8009bf8 <osTimerStart>
	io_module_t *IO = (io_module_t *)argument;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

		// Request room temperature ¿Function?, run control algorithm and get an output
		// Check output and change state of the TWA based on it.
		// Run this loop CONTROLFREQ

		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 80011fa:	f04f 32ff 	mov.w	r2, #4294967295
 80011fe:	2100      	movs	r1, #0
 8001200:	2001      	movs	r0, #1
 8001202:	f008 fbcb 	bl	800999c <osThreadFlagsWait>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001206:	2101      	movs	r1, #1
 8001208:	4822      	ldr	r0, [pc, #136]	; (8001294 <ControlTask+0xb4>)
 800120a:	f002 ffe9 	bl	80041e0 <HAL_GPIO_TogglePin>
		PID0_step(Temperature[0]);
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <ControlTask+0xb8>)
 8001210:	ed93 7b00 	vldr	d7, [r3]
 8001214:	eeb0 0a47 	vmov.f32	s0, s14
 8001218:	eef0 0a67 	vmov.f32	s1, s15
 800121c:	f7ff fdf4 	bl	8000e08 <PID0_step>

		// Timer based on PID output
		if(PID0_Y.y != 0)
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <ControlTask+0xbc>)
 8001222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	f7ff fbcb 	bl	80009c8 <__aeabi_dcmpeq>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d124      	bne.n	8001282 <ControlTask+0xa2>
		{
			HAL_GPIO_WritePin(TWA2_GPIO_Port, TWA2_Pin, 1);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123e:	4815      	ldr	r0, [pc, #84]	; (8001294 <ControlTask+0xb4>)
 8001240:	f002 ffb6 	bl	80041b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001244:	2201      	movs	r2, #1
 8001246:	2102      	movs	r1, #2
 8001248:	4812      	ldr	r0, [pc, #72]	; (8001294 <ControlTask+0xb4>)
 800124a:	f002 ffb1 	bl	80041b0 <HAL_GPIO_WritePin>
			bitWrite(IO, TWA2_EN, 1);
 800124e:	2201      	movs	r2, #1
 8001250:	2103      	movs	r1, #3
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 f89e 	bl	8001394 <bitWrite>
			osTimerStart(TwaTimerHandle, PID0_Y.y*CONTROLFREQ);
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <ControlTask+0xc0>)
 800125a:	681c      	ldr	r4, [r3, #0]
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <ControlTask+0xbc>)
 800125e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001262:	a309      	add	r3, pc, #36	; (adr r3, 8001288 <ControlTask+0xa8>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f946 	bl	80004f8 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fbda 	bl	8000a2c <__aeabi_d2uiz>
 8001278:	4603      	mov	r3, r0
 800127a:	4619      	mov	r1, r3
 800127c:	4620      	mov	r0, r4
 800127e:	f008 fcbb 	bl	8009bf8 <osTimerStart>
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8001282:	e7ba      	b.n	80011fa <ControlTask+0x1a>
 8001284:	f3af 8000 	nop.w
 8001288:	00000000 	.word	0x00000000
 800128c:	40dd4c00 	.word	0x40dd4c00
 8001290:	200000a8 	.word	0x200000a8
 8001294:	48000400 	.word	0x48000400
 8001298:	200000c0 	.word	0x200000c0
 800129c:	20000088 	.word	0x20000088
 80012a0:	200000ac 	.word	0x200000ac
 80012a4:	00000000 	.word	0x00000000

080012a8 <CalculateTemp_Thread>:
#if MODE == 2


#endif

void CalculateTemp_Thread(void *argument){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80012b0:	217f      	movs	r1, #127	; 0x7f
 80012b2:	4833      	ldr	r0, [pc, #204]	; (8001380 <CalculateTemp_Thread+0xd8>)
 80012b4:	f002 f98c 	bl	80035d0 <HAL_ADCEx_Calibration_Start>

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,N_ROOMS);  // Also use N_PT1000
 80012b8:	2201      	movs	r2, #1
 80012ba:	4932      	ldr	r1, [pc, #200]	; (8001384 <CalculateTemp_Thread+0xdc>)
 80012bc:	4830      	ldr	r0, [pc, #192]	; (8001380 <CalculateTemp_Thread+0xd8>)
 80012be:	f001 fa71 	bl	80027a4 <HAL_ADC_Start_DMA>
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 80012c2:	f04f 32ff 	mov.w	r2, #4294967295
 80012c6:	2100      	movs	r1, #0
 80012c8:	2001      	movs	r0, #1
 80012ca:	f008 fb67 	bl	800999c <osThreadFlagsWait>

		for(int i = 0; i < N_ROOMS; i++)  // Use N_PT1000 to dinamycally read multiple adc values
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	e03c      	b.n	800134e <CalculateTemp_Thread+0xa6>
		{
			ADCvoltage[i] = ADCrawReading[i] * 0.00073242;
 80012d4:	4a2b      	ldr	r2, [pc, #172]	; (8001384 <CalculateTemp_Thread+0xdc>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f8a0 	bl	8000424 <__aeabi_i2d>
 80012e4:	a320      	add	r3, pc, #128	; (adr r3, 8001368 <CalculateTemp_Thread+0xc0>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f905 	bl	80004f8 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4825      	ldr	r0, [pc, #148]	; (8001388 <CalculateTemp_Thread+0xe0>)
 80012f4:	68f9      	ldr	r1, [r7, #12]
 80012f6:	00c9      	lsls	r1, r1, #3
 80012f8:	4401      	add	r1, r0
 80012fa:	e9c1 2300 	strd	r2, r3, [r1]
			Temperature[i] = ((ADCvoltage[i] - 0.408)*100) / 2.04;
 80012fe:	4a22      	ldr	r2, [pc, #136]	; (8001388 <CalculateTemp_Thread+0xe0>)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4413      	add	r3, r2
 8001306:	e9d3 0100 	ldrd	r0, r1, [r3]
 800130a:	a319      	add	r3, pc, #100	; (adr r3, 8001370 <CalculateTemp_Thread+0xc8>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7fe ff3a 	bl	8000188 <__aeabi_dsub>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <CalculateTemp_Thread+0xe4>)
 8001322:	f7ff f8e9 	bl	80004f8 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	a312      	add	r3, pc, #72	; (adr r3, 8001378 <CalculateTemp_Thread+0xd0>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff fa0a 	bl	800074c <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4814      	ldr	r0, [pc, #80]	; (8001390 <CalculateTemp_Thread+0xe8>)
 800133e:	68f9      	ldr	r1, [r7, #12]
 8001340:	00c9      	lsls	r1, r1, #3
 8001342:	4401      	add	r1, r0
 8001344:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0; i < N_ROOMS; i++)  // Use N_PT1000 to dinamycally read multiple adc values
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	ddbf      	ble.n	80012d4 <CalculateTemp_Thread+0x2c>
		}

		HAL_ADC_Stop_DMA(&hadc1);
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <CalculateTemp_Thread+0xd8>)
 8001356:	f001 faa9 	bl	80028ac <HAL_ADC_Stop_DMA>
		osDelay(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f008 fb9f 	bl	8009a9e <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,N_ROOMS);  // Also use N_PT1000
 8001360:	e7aa      	b.n	80012b8 <CalculateTemp_Thread+0x10>
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	f9353597 	.word	0xf9353597
 800136c:	3f47fffb 	.word	0x3f47fffb
 8001370:	083126e9 	.word	0x083126e9
 8001374:	3fda1cac 	.word	0x3fda1cac
 8001378:	851eb852 	.word	0x851eb852
 800137c:	400051eb 	.word	0x400051eb
 8001380:	200000d8 	.word	0x200000d8
 8001384:	200000b0 	.word	0x200000b0
 8001388:	200000b8 	.word	0x200000b8
 800138c:	40590000 	.word	0x40590000
 8001390:	200000c0 	.word	0x200000c0

08001394 <bitWrite>:
}


void bitWrite(io_module_t * IO, uint8_t pos, uint8_t val)
// Temperature = (((ADCrawReading * 0.00073242) - 0.408)*100) / 2.04;
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
 80013a0:	4613      	mov	r3, r2
 80013a2:	70bb      	strb	r3, [r7, #2]
	uint16_t *temp;
	temp = &IO->u16regsCoilsRO[pos/16];
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

	if (val == 1) {
 80013b4:	78bb      	ldrb	r3, [r7, #2]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d10d      	bne.n	80013d6 <bitWrite+0x42>
		*temp |= (1UL << (pos%16));
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	881a      	ldrh	r2, [r3, #0]
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	801a      	strh	r2, [r3, #0]
	}
	else {
		*temp &= ~(1UL << (pos%16));
	}
}
 80013d4:	e00e      	b.n	80013f4 <bitWrite+0x60>
		*temp &= ~(1UL << (pos%16));
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	881a      	ldrh	r2, [r3, #0]
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	801a      	strh	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <ControlExecTim>:
}


/* ControlExecTim function */
void ControlExecTim(void *argument)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlExecTim */
	osThreadFlagsSet(ControlHandle, 0x01);
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <ControlExecTim+0x1c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	4618      	mov	r0, r3
 8001410:	f008 fa76 	bl	8009900 <osThreadFlagsSet>
  /* USER CODE END ControlExecTim */
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200000a4 	.word	0x200000a4

08001420 <TwaControlTim>:


// TWA control callback
void TwaControlTim(void *argument)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	io_module_t *IO = (io_module_t *)argument;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(TWA2_GPIO_Port, TWA2_Pin, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <TwaControlTim+0x34>)
 8001434:	f002 febc 	bl	80041b0 <HAL_GPIO_WritePin>
	bitWrite(IO, TWA2_EN, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2103      	movs	r1, #3
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff ffa9 	bl	8001394 <bitWrite>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2102      	movs	r1, #2
 8001446:	4803      	ldr	r0, [pc, #12]	; (8001454 <TwaControlTim+0x34>)
 8001448:	f002 feb2 	bl	80041b0 <HAL_GPIO_WritePin>
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	48000400 	.word	0x48000400

08001458 <HAL_ADC_ConvCpltCallback>:


// ADC complete conversion callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(TempCalcHandle, 0x01);
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f008 fa4a 	bl	8009900 <osThreadFlagsSet>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200000a0 	.word	0x200000a0

08001478 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001488:	f023 0218 	bic.w	r2, r3, #24
 800148c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4313      	orrs	r3, r2
 8001494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c8:	68fb      	ldr	r3, [r7, #12]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150c:	f000 fd9c 	bl	8002048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001510:	f000 f884 	bl	800161c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001514:	f000 f8f8 	bl	8001708 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001518:	f000 f9fe 	bl	8001918 <MX_GPIO_Init>
  MX_DMA_Init();
 800151c:	f000 f9da 	bl	80018d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001520:	f000 f964 	bl	80017ec <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001524:	f000 f9ae 	bl	8001884 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8001528:	f000 f920 	bl	800176c <MX_I2C1_Init>
  ADC_Init();
 800152c:	f7ff fdac 	bl	8001088 <ADC_Init>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  IOmodule.u16regsHR = Holding_Registers_Database;
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <main+0xe8>)
 8001532:	4a30      	ldr	r2, [pc, #192]	; (80015f4 <main+0xec>)
 8001534:	601a      	str	r2, [r3, #0]
  IOmodule.u16regsRO = Input_Register_Database;
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <main+0xe8>)
 8001538:	4a2f      	ldr	r2, [pc, #188]	; (80015f8 <main+0xf0>)
 800153a:	605a      	str	r2, [r3, #4]
  IOmodule.u16regsCoils = Holding_Coils_Database;
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <main+0xe8>)
 800153e:	4a2f      	ldr	r2, [pc, #188]	; (80015fc <main+0xf4>)
 8001540:	609a      	str	r2, [r3, #8]
  IOmodule.u16regsCoilsRO = Input_Coils_Database;
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <main+0xe8>)
 8001544:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <main+0xf8>)
 8001546:	60da      	str	r2, [r3, #12]

  ModbusH.uModbusType = MB_SLAVE;
 8001548:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <main+0xfc>)
 800154a:	2203      	movs	r2, #3
 800154c:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 800154e:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <main+0xfc>)
 8001550:	4a2d      	ldr	r2, [pc, #180]	; (8001608 <main+0x100>)
 8001552:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <main+0xfc>)
 8001556:	2201      	movs	r2, #1
 8001558:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <main+0xfc>)
 800155c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001560:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <main+0xfc>)
 8001566:	4a29      	ldr	r2, [pc, #164]	; (800160c <main+0x104>)
 8001568:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <main+0xfc>)
 800156c:	2208      	movs	r2, #8
 800156e:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regsHR = Holding_Registers_Database;
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <main+0xfc>)
 8001572:	4a20      	ldr	r2, [pc, #128]	; (80015f4 <main+0xec>)
 8001574:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsRO = Input_Register_Database;
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <main+0xfc>)
 800157a:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <main+0xf0>)
 800157c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  ModbusH.u16regsCoils = Holding_Coils_Database;
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <main+0xfc>)
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <main+0xf4>)
 8001584:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  ModbusH.u16regsCoilsRO = Input_Coils_Database;
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <main+0xfc>)
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <main+0xf8>)
 800158c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  ModbusH.u16regHR_size = sizeof(Holding_Registers_Database)/sizeof(Holding_Registers_Database[0]);
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <main+0xfc>)
 8001592:	220a      	movs	r2, #10
 8001594:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  ModbusH.u16regRO_size = sizeof(Input_Register_Database)/sizeof(Input_Register_Database[0]);
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <main+0xfc>)
 800159a:	220a      	movs	r2, #10
 800159c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  ModbusH.u16regCoils_size = sizeof(Holding_Coils_Database)/sizeof(Holding_Coils_Database[0]);
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <main+0xfc>)
 80015a2:	2203      	movs	r2, #3
 80015a4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  ModbusH.u16regCoilsRO_size = sizeof(Input_Coils_Database)/sizeof(Input_Coils_Database[0]);
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <main+0xfc>)
 80015aa:	2203      	movs	r2, #3
 80015ac:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  ModbusH.xTypeHW = USART_HW_DMA;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <main+0xfc>)
 80015b2:	2204      	movs	r2, #4
 80015b4:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

  IO_Module_Init(&IOmodule);
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <main+0xe8>)
 80015ba:	f7ff fd35 	bl	8001028 <IO_Module_Init>
  Control_Thread_Init(&IOmodule);
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <main+0xe8>)
 80015c0:	f7ff fdd8 	bl	8001174 <Control_Thread_Init>

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 80015c4:	480f      	ldr	r0, [pc, #60]	; (8001604 <main+0xfc>)
 80015c6:	f00b ff79 	bl	800d4bc <ModbusInit>

  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <main+0xfc>)
 80015cc:	f00c f818 	bl	800d600 <ModbusStart>
  //ssd1306_Init();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015d0:	f008 f8ba 	bl	8009748 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <main+0x108>)
 80015d6:	2100      	movs	r1, #0
 80015d8:	480e      	ldr	r0, [pc, #56]	; (8001614 <main+0x10c>)
 80015da:	f008 f8ff 	bl	80097dc <osThreadNew>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <main+0x110>)
 80015e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Temp_Thread_Start();
 80015e4:	f7ff fdb4 	bl	8001150 <ADC_Temp_Thread_Start>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015e8:	f008 f8d2 	bl	8009790 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <main+0xe4>
 80015ee:	bf00      	nop
 80015f0:	20000794 	.word	0x20000794
 80015f4:	20000018 	.word	0x20000018
 80015f8:	2000002c 	.word	0x2000002c
 80015fc:	200000c8 	.word	0x200000c8
 8001600:	200000d0 	.word	0x200000d0
 8001604:	2000063c 	.word	0x2000063c
 8001608:	200001f0 	.word	0x200001f0
 800160c:	48000800 	.word	0x48000800
 8001610:	0800f028 	.word	0x0800f028
 8001614:	080019f9 	.word	0x080019f9
 8001618:	20000638 	.word	0x20000638

0800161c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b09a      	sub	sp, #104	; 0x68
 8001620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001622:	f107 0320 	add.w	r3, r7, #32
 8001626:	2248      	movs	r2, #72	; 0x48
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f00d fc0e 	bl	800ee4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800164c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001650:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f023 0303 	bic.w	r3, r3, #3
 800165c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001666:	f003 f80b 	bl	8004680 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff ff04 	bl	8001478 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <SystemClock_Config+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001678:	4a22      	ldr	r2, [pc, #136]	; (8001704 <SystemClock_Config+0xe8>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <SystemClock_Config+0xe8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800168c:	2327      	movs	r3, #39	; 0x27
 800168e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001696:	2301      	movs	r3, #1
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016ac:	2360      	movs	r3, #96	; 0x60
 80016ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 fb81 	bl	8004dc0 <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80016c4:	f000 f9b2 	bl	8001a2c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80016c8:	236f      	movs	r3, #111	; 0x6f
 80016ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80016cc:	2302      	movs	r3, #2
 80016ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2101      	movs	r1, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 fedd 	bl	80054a8 <HAL_RCC_ClockConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80016f4:	f000 f99a 	bl	8001a2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016f8:	f004 fcca 	bl	8006090 <HAL_RCCEx_EnableMSIPLLMode>
}
 80016fc:	bf00      	nop
 80016fe:	3768      	adds	r7, #104	; 0x68
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	58000400 	.word	0x58000400

08001708 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	; 0x50
 800170c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170e:	463b      	mov	r3, r7
 8001710:	2250      	movs	r2, #80	; 0x50
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f00d fb99 	bl	800ee4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 800171a:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 800171e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001720:	2318      	movs	r3, #24
 8001722:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800172a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800172e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001730:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001734:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001736:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800173a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800173c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001742:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001748:	2300      	movs	r3, #0
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800174c:	2300      	movs	r3, #0
 800174e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	4618      	mov	r0, r3
 8001754:	f004 fb26 	bl	8005da4 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800175e:	f000 f965 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001762:	bf00      	nop
 8001764:	3750      	adds	r7, #80	; 0x50
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001772:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <MX_I2C1_Init+0x78>)
 8001774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <MX_I2C1_Init+0x7c>)
 800177a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_I2C1_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001784:	2201      	movs	r2, #1
 8001786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_I2C1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_I2C1_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_I2C1_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a6:	480e      	ldr	r0, [pc, #56]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017a8:	f002 fd34 	bl	8004214 <HAL_I2C_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017b2:	f000 f93b 	bl	8001a2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b6:	2100      	movs	r1, #0
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017ba:	f002 fdc6 	bl	800434a <HAL_I2CEx_ConfigAnalogFilter>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017c4:	f000 f932 	bl	8001a2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017c8:	2100      	movs	r1, #0
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_I2C1_Init+0x74>)
 80017cc:	f002 fe08 	bl	80043e0 <HAL_I2CEx_ConfigDigitalFilter>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017d6:	f000 f929 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000019c 	.word	0x2000019c
 80017e4:	40005400 	.word	0x40005400
 80017e8:	00300f38 	.word	0x00300f38

080017ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <MX_USART1_UART_Init+0x90>)
 80017f2:	4a23      	ldr	r2, [pc, #140]	; (8001880 <MX_USART1_UART_Init+0x94>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <MX_USART1_UART_Init+0x90>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_USART1_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <MX_USART1_UART_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_USART1_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_USART1_UART_Init+0x90>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_USART1_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_USART1_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_USART1_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_USART1_UART_Init+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_USART1_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001834:	4811      	ldr	r0, [pc, #68]	; (800187c <MX_USART1_UART_Init+0x90>)
 8001836:	f004 ffbd 	bl	80067b4 <HAL_UART_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001840:	f000 f8f4 	bl	8001a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001844:	2100      	movs	r1, #0
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_USART1_UART_Init+0x90>)
 8001848:	f007 fddf 	bl	800940a <HAL_UARTEx_SetTxFifoThreshold>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001852:	f000 f8eb 	bl	8001a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001856:	2100      	movs	r1, #0
 8001858:	4808      	ldr	r0, [pc, #32]	; (800187c <MX_USART1_UART_Init+0x90>)
 800185a:	f007 fe14 	bl	8009486 <HAL_UARTEx_SetRxFifoThreshold>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001864:	f000 f8e2 	bl	8001a2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_USART1_UART_Init+0x90>)
 800186a:	f007 fd95 	bl	8009398 <HAL_UARTEx_DisableFifoMode>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001874:	f000 f8da 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200001f0 	.word	0x200001f0
 8001880:	40013800 	.word	0x40013800

08001884 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_USB_PCD_Init+0x48>)
 800188a:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <MX_USB_PCD_Init+0x4c>)
 800188c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_USB_PCD_Init+0x48>)
 8001890:	2208      	movs	r2, #8
 8001892:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <MX_USB_PCD_Init+0x48>)
 8001896:	2202      	movs	r2, #2
 8001898:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_USB_PCD_Init+0x48>)
 800189c:	2202      	movs	r2, #2
 800189e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <MX_USB_PCD_Init+0x48>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USB_PCD_Init+0x48>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <MX_USB_PCD_Init+0x48>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USB_PCD_Init+0x48>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_USB_PCD_Init+0x48>)
 80018ba:	f002 fddd 	bl	8004478 <HAL_PCD_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80018c4:	f000 f8b2 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000344 	.word	0x20000344
 80018d0:	40006800 	.word	0x40006800

080018d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018d8:	2004      	movs	r0, #4
 80018da:	f7ff fde3 	bl	80014a4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff fde0 	bl	80014a4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2105      	movs	r1, #5
 80018e8:	200b      	movs	r0, #11
 80018ea:	f001 ff8b 	bl	8003804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018ee:	200b      	movs	r0, #11
 80018f0:	f001 ffa2 	bl	8003838 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2105      	movs	r1, #5
 80018f8:	200c      	movs	r0, #12
 80018fa:	f001 ff83 	bl	8003804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018fe:	200c      	movs	r0, #12
 8001900:	f001 ff9a 	bl	8003838 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2105      	movs	r1, #5
 8001908:	200d      	movs	r0, #13
 800190a:	f001 ff7b 	bl	8003804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800190e:	200d      	movs	r0, #13
 8001910:	f001 ff92 	bl	8003838 <HAL_NVIC_EnableIRQ>

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192c:	2004      	movs	r0, #4
 800192e:	f7ff fdd2 	bl	80014d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2002      	movs	r0, #2
 8001934:	f7ff fdcf 	bl	80014d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	2001      	movs	r0, #1
 800193a:	f7ff fdcc 	bl	80014d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193e:	2008      	movs	r0, #8
 8001940:	f7ff fdc9 	bl	80014d6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2108      	movs	r1, #8
 8001948:	4828      	ldr	r0, [pc, #160]	; (80019ec <MX_GPIO_Init+0xd4>)
 800194a:	f002 fc31 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2102      	movs	r1, #2
 8001952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001956:	f002 fc2b 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TWA4_Pin|TWA1_Pin
 800195a:	2200      	movs	r2, #0
 800195c:	f24f 0103 	movw	r1, #61443	; 0xf003
 8001960:	4823      	ldr	r0, [pc, #140]	; (80019f0 <MX_GPIO_Init+0xd8>)
 8001962:	f002 fc25 	bl	80041b0 <HAL_GPIO_WritePin>
                          |TWA2_Pin|TWA3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 8001966:	2308      	movs	r3, #8
 8001968:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	4619      	mov	r1, r3
 800197a:	481c      	ldr	r0, [pc, #112]	; (80019ec <MX_GPIO_Init+0xd4>)
 800197c:	f002 faa8 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001980:	2302      	movs	r3, #2
 8001982:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001998:	f002 fa9a 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800199c:	2310      	movs	r3, #16
 800199e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	4619      	mov	r1, r3
 80019ac:	480f      	ldr	r0, [pc, #60]	; (80019ec <MX_GPIO_Init+0xd4>)
 80019ae:	f002 fa8f 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TWA4_Pin TWA1_Pin
                           TWA2_Pin TWA3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TWA4_Pin|TWA1_Pin
 80019b2:	f24f 0303 	movw	r3, #61443	; 0xf003
 80019b6:	607b      	str	r3, [r7, #4]
                          |TWA2_Pin|TWA3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4809      	ldr	r0, [pc, #36]	; (80019f0 <MX_GPIO_Init+0xd8>)
 80019ca:	f002 fa81 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80019ce:	2303      	movs	r3, #3
 80019d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_GPIO_Init+0xdc>)
 80019e0:	f002 fa76 	bl	8003ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019e4:	bf00      	nop
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	48000800 	.word	0x48000800
 80019f0:	48000400 	.word	0x48000400
 80019f4:	48000c00 	.word	0x48000c00

080019f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


for(;;)
  {
    osDelay(1);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f008 f84c 	bl	8009a9e <osDelay>
 8001a06:	e7fb      	b.n	8001a00 <StartDefaultTask+0x8>

08001a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a1a:	f000 fb35 	bl	8002088 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40014400 	.word	0x40014400

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x8>

08001a36 <LL_AHB2_GRP1_EnableClock>:
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4013      	ands	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4013      	ands	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f06f 0001 	mvn.w	r0, #1
 8001ad8:	f001 fe94 	bl	8003804 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_ADC_MspInit+0xa8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d13e      	bne.n	8001b80 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b02:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b06:	f7ff ff96 	bl	8001a36 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f7ff ff93 	bl	8001a36 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b10:	2310      	movs	r3, #16
 8001b12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b14:	2303      	movs	r3, #3
 8001b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4619      	mov	r1, r3
 8001b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b26:	f002 f9d3 	bl	8003ed0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b2c:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <HAL_ADC_MspInit+0xb0>)
 8001b2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b32:	2205      	movs	r2, #5
 8001b34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b64:	4809      	ldr	r0, [pc, #36]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b66:	f001 fe75 	bl	8003854 <HAL_DMA_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001b70:	f7ff ff5c 	bl	8001a2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b78:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_ADC_MspInit+0xac>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	50040000 	.word	0x50040000
 8001b8c:	2000013c 	.word	0x2000013c
 8001b90:	40020030 	.word	0x40020030

08001b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b09c      	sub	sp, #112	; 0x70
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2250      	movs	r2, #80	; 0x50
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00d f949 	bl	800ee4c <memset>
  if(hi2c->Instance==I2C1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d126      	bne.n	8001c12 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bc8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 f8e6 	bl	8005da4 <HAL_RCCEx_PeriphCLKConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001bde:	f7ff ff25 	bl	8001a2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2002      	movs	r0, #2
 8001be4:	f7ff ff27 	bl	8001a36 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001be8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bee:	2312      	movs	r3, #18
 8001bf0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c02:	4619      	mov	r1, r3
 8001c04:	4806      	ldr	r0, [pc, #24]	; (8001c20 <HAL_I2C_MspInit+0x8c>)
 8001c06:	f002 f963 	bl	8003ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001c0e:	f7ff ff2b 	bl	8001a68 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3770      	adds	r7, #112	; 0x70
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	48000400 	.word	0x48000400

08001c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b09c      	sub	sp, #112	; 0x70
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2250      	movs	r2, #80	; 0x50
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f00d f901 	bl	800ee4c <memset>
  if(huart->Instance==USART1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a43      	ldr	r2, [pc, #268]	; (8001d5c <HAL_UART_MspInit+0x138>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d17f      	bne.n	8001d54 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 f89f 	bl	8005da4 <HAL_RCCEx_PeriphCLKConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c6c:	f7ff fede 	bl	8001a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c74:	f7ff ff11 	bl	8001a9a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f7ff fedc 	bl	8001a36 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c7e:	23c0      	movs	r3, #192	; 0xc0
 8001c80:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c8e:	2307      	movs	r3, #7
 8001c90:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c96:	4619      	mov	r1, r3
 8001c98:	4831      	ldr	r0, [pc, #196]	; (8001d60 <HAL_UART_MspInit+0x13c>)
 8001c9a:	f002 f919 	bl	8003ed0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001ca0:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <HAL_UART_MspInit+0x144>)
 8001ca2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001ca6:	220e      	movs	r2, #14
 8001ca8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc2:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001cc8:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cce:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001cd4:	4823      	ldr	r0, [pc, #140]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001cd6:	f001 fdbd 	bl	8003854 <HAL_DMA_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001ce0:	f7ff fea4 	bl	8001a2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001cec:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <HAL_UART_MspInit+0x140>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001cf4:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_UART_MspInit+0x14c>)
 8001cf6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001d00:	2210      	movs	r2, #16
 8001d02:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001d28:	4810      	ldr	r0, [pc, #64]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001d2a:	f001 fd93 	bl	8003854 <HAL_DMA_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001d34:	f7ff fe7a 	bl	8001a2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001d3c:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <HAL_UART_MspInit+0x148>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2105      	movs	r1, #5
 8001d48:	2024      	movs	r0, #36	; 0x24
 8001d4a:	f001 fd5b 	bl	8003804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d4e:	2024      	movs	r0, #36	; 0x24
 8001d50:	f001 fd72 	bl	8003838 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3770      	adds	r7, #112	; 0x70
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	48000400 	.word	0x48000400
 8001d64:	20000284 	.word	0x20000284
 8001d68:	40020008 	.word	0x40020008
 8001d6c:	200002e4 	.word	0x200002e4
 8001d70:	4002001c 	.word	0x4002001c

08001d74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <HAL_PCD_MspInit+0x5c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d118      	bne.n	8001dc8 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2001      	movs	r0, #1
 8001d98:	f7ff fe4d 	bl	8001a36 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001da0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001dae:	230a      	movs	r3, #10
 8001db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 030c 	add.w	r3, r7, #12
 8001db6:	4619      	mov	r1, r3
 8001db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbc:	f002 f888 	bl	8003ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001dc0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001dc4:	f7ff fe50 	bl	8001a68 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40006800 	.word	0x40006800

08001dd4 <LL_APB2_GRP1_EnableClock>:
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4013      	ands	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001df8:	68fb      	ldr	r3, [r7, #12]
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	2019      	movs	r0, #25
 8001e1e:	f001 fcf1 	bl	8003804 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e22:	2019      	movs	r0, #25
 8001e24:	f001 fd08 	bl	8003838 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001e28:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001e2c:	f7ff ffd2 	bl	8001dd4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e30:	f107 0208 	add.w	r2, r7, #8
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 fd20 	bl	8005880 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e40:	f003 fd08 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 8001e44:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <HAL_InitTick+0x8c>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	0c9b      	lsrs	r3, r3, #18
 8001e50:	3b01      	subs	r3, #1
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_InitTick+0x90>)
 8001e56:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_InitTick+0x94>)
 8001e58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_InitTick+0x90>)
 8001e5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e60:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001e62:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <HAL_InitTick+0x90>)
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_InitTick+0x90>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_InitTick+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8001e74:	4808      	ldr	r0, [pc, #32]	; (8001e98 <HAL_InitTick+0x90>)
 8001e76:	f004 fa22 	bl	80062be <HAL_TIM_Base_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d104      	bne.n	8001e8a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <HAL_InitTick+0x90>)
 8001e82:	f004 fa7d 	bl	8006380 <HAL_TIM_Base_Start_IT>
 8001e86:	4603      	mov	r3, r0
 8001e88:	e000      	b.n	8001e8c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3730      	adds	r7, #48	; 0x30
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	431bde83 	.word	0x431bde83
 8001e98:	200007a8 	.word	0x200007a8
 8001e9c:	40014400 	.word	0x40014400

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <NMI_Handler+0x4>

08001ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <HardFault_Handler+0x4>

08001eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <MemManage_Handler+0x4>

08001eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <BusFault_Handler+0x4>

08001eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <UsageFault_Handler+0x4>

08001ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <DMA1_Channel1_IRQHandler+0x10>)
 8001ed2:	f001 fea0 	bl	8003c16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000284 	.word	0x20000284

08001ee0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <DMA1_Channel2_IRQHandler+0x10>)
 8001ee6:	f001 fe96 	bl	8003c16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200002e4 	.word	0x200002e4

08001ef4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <DMA1_Channel3_IRQHandler+0x10>)
 8001efa:	f001 fe8c 	bl	8003c16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000013c 	.word	0x2000013c

08001f08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001f0e:	f004 fa85 	bl	800641c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200007a8 	.word	0x200007a8

08001f1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <USART1_IRQHandler+0x10>)
 8001f22:	f004 ff5b 	bl	8006ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200001f0 	.word	0x200001f0

08001f30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <SystemInit+0x98>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <SystemInit+0x98>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f58:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001f5c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <SystemInit+0x9c>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f7a:	f023 0305 	bic.w	r3, r3, #5
 8001f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <SystemInit+0xa0>)
 8001f9c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <SystemInit+0xa0>)
 8001fa4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00
 8001fcc:	faf6fefb 	.word	0xfaf6fefb
 8001fd0:	22041000 	.word	0x22041000

08001fd4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001fd4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd8:	3304      	adds	r3, #4

08001fda <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fda:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fdc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001fde:	d3f9      	bcc.n	8001fd4 <CopyDataInit>
  bx lr
 8001fe0:	4770      	bx	lr

08001fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001fe2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001fe4:	3004      	adds	r0, #4

08001fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001fe6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001fe8:	d3fb      	bcc.n	8001fe2 <FillZerobss>
  bx lr
 8001fea:	4770      	bx	lr

08001fec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fec:	480c      	ldr	r0, [pc, #48]	; (8002020 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ff0:	f7ff ff9e 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001ff4:	480b      	ldr	r0, [pc, #44]	; (8002024 <LoopForever+0x6>)
 8001ff6:	490c      	ldr	r1, [pc, #48]	; (8002028 <LoopForever+0xa>)
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	; (800202c <LoopForever+0xe>)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f7ff ffed 	bl	8001fda <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002000:	480b      	ldr	r0, [pc, #44]	; (8002030 <LoopForever+0x12>)
 8002002:	490c      	ldr	r1, [pc, #48]	; (8002034 <LoopForever+0x16>)
 8002004:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <LoopForever+0x1a>)
 8002006:	2300      	movs	r3, #0
 8002008:	f7ff ffe7 	bl	8001fda <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800200c:	480b      	ldr	r0, [pc, #44]	; (800203c <LoopForever+0x1e>)
 800200e:	490c      	ldr	r1, [pc, #48]	; (8002040 <LoopForever+0x22>)
 8002010:	2300      	movs	r3, #0
 8002012:	f7ff ffe8 	bl	8001fe6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002016:	f00c ff21 	bl	800ee5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800201a:	f7ff fa75 	bl	8001508 <main>

0800201e <LoopForever>:

LoopForever:
  b LoopForever
 800201e:	e7fe      	b.n	800201e <LoopForever>
  ldr   r0, =_estack
 8002020:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002024:	20000008 	.word	0x20000008
 8002028:	20000050 	.word	0x20000050
 800202c:	0800f19c 	.word	0x0800f19c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002030:	20030000 	.word	0x20030000
 8002034:	20030000 	.word	0x20030000
 8002038:	0800f1e4 	.word	0x0800f1e4
  INIT_BSS _sbss, _ebss
 800203c:	20000050 	.word	0x20000050
 8002040:	20002154 	.word	0x20002154

08002044 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC1_IRQHandler>
	...

08002048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_Init+0x3c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <HAL_Init+0x3c>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205e:	2003      	movs	r0, #3
 8002060:	f001 fbc5 	bl	80037ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002064:	200f      	movs	r0, #15
 8002066:	f7ff fecf 	bl	8001e08 <HAL_InitTick>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	e001      	b.n	800207a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002076:	f7ff fd29 	bl	8001acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800207a:	79fb      	ldrb	r3, [r7, #7]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	58004000 	.word	0x58004000

08002088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000048 	.word	0x20000048
 80020ac:	200007f4 	.word	0x200007f4

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	200007f4 	.word	0x200007f4

080020c8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetTickPrio+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000044 	.word	0x20000044

080020e0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	609a      	str	r2, [r3, #8]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3360      	adds	r3, #96	; 0x60
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <LL_ADC_SetOffset+0x44>)
 800216a:	4013      	ands	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	4313      	orrs	r3, r2
 8002178:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002180:	bf00      	nop
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	03fff000 	.word	0x03fff000

08002190 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3360      	adds	r3, #96	; 0x60
 800219e:	461a      	mov	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3360      	adds	r3, #96	; 0x60
 80021cc:	461a      	mov	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800220a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3330      	adds	r3, #48	; 0x30
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	211f      	movs	r1, #31
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	401a      	ands	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	f003 011f 	and.w	r1, r3, #31
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	431a      	orrs	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3314      	adds	r3, #20
 8002280:	461a      	mov	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0e5b      	lsrs	r3, r3, #25
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0d1b      	lsrs	r3, r3, #20
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2107      	movs	r1, #7
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	401a      	ands	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	0d1b      	lsrs	r3, r3, #20
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	431a      	orrs	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80022ba:	bf00      	nop
 80022bc:	371c      	adds	r7, #28
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	43db      	mvns	r3, r3
 80022e2:	401a      	ands	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0318 	and.w	r3, r3, #24
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <LL_ADC_SetChannelSingleDiff+0x44>)
 80022ec:	40d9      	lsrs	r1, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	400b      	ands	r3, r1
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	0007ffff 	.word	0x0007ffff

08002310 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6093      	str	r3, [r2, #8]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002348:	d101      	bne.n	800234e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800236c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002370:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002398:	d101      	bne.n	800239e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023e8:	f043 0202 	orr.w	r2, r3, #2
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <LL_ADC_IsEnabled+0x18>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <LL_ADC_IsEnabled+0x1a>
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b02      	cmp	r3, #2
 8002434:	d101      	bne.n	800243a <LL_ADC_IsDisableOngoing+0x18>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_ADC_IsDisableOngoing+0x1a>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800245c:	f043 0204 	orr.w	r2, r3, #4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002484:	f043 0210 	orr.w	r2, r3, #16
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d101      	bne.n	80024b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024d2:	f043 0220 	orr.w	r2, r3, #32
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d101      	bne.n	80024fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e12e      	b.n	8002788 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	2b00      	cmp	r3, #0
 8002536:	d109      	bne.n	800254c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff fad1 	bl	8001ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff feef 	bl	8002334 <LL_ADC_IsDeepPowerDownEnabled>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d004      	beq.n	8002566 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fed5 	bl	8002310 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff0a 	bl	8002384 <LL_ADC_IsInternalRegulatorEnabled>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d115      	bne.n	80025a2 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff feee 	bl	800235c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002580:	4b83      	ldr	r3, [pc, #524]	; (8002790 <HAL_ADC_Init+0x284>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	4a83      	ldr	r2, [pc, #524]	; (8002794 <HAL_ADC_Init+0x288>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	3301      	adds	r3, #1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002594:	e002      	b.n	800259c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3b01      	subs	r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f9      	bne.n	8002596 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff feec 	bl	8002384 <LL_ADC_IsInternalRegulatorEnabled>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	f043 0210 	orr.w	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff60 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 80025d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 80c7 	bne.w	8002776 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f040 80c3 	bne.w	8002776 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025f8:	f043 0202 	orr.w	r2, r3, #2
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fef9 	bl	80023fc <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10b      	bne.n	8002628 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002610:	4861      	ldr	r0, [pc, #388]	; (8002798 <HAL_ADC_Init+0x28c>)
 8002612:	f7ff fef3 	bl	80023fc <LL_ADC_IsEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4619      	mov	r1, r3
 8002622:	485e      	ldr	r0, [pc, #376]	; (800279c <HAL_ADC_Init+0x290>)
 8002624:	f7ff fd5c 	bl	80020e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7e5b      	ldrb	r3, [r3, #25]
 800262c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002632:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002638:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800263e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002646:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002648:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d106      	bne.n	8002668 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	3b01      	subs	r3, #1
 8002660:	045b      	lsls	r3, r3, #17
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <HAL_ADC_Init+0x294>)
 800268c:	4013      	ands	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	430b      	orrs	r3, r1
 8002696:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fefb 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 80026a2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff1c 	bl	80024e6 <LL_ADC_INJ_IsConversionOngoing>
 80026ae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d13d      	bne.n	8002732 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d13a      	bne.n	8002732 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026c0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d8:	f023 0302 	bic.w	r3, r3, #2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	69b9      	ldr	r1, [r7, #24]
 80026e2:	430b      	orrs	r3, r1
 80026e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d118      	bne.n	8002722 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026fa:	f023 0304 	bic.w	r3, r3, #4
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002706:	4311      	orrs	r1, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800270c:	4311      	orrs	r1, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002712:	430a      	orrs	r2, r1
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	611a      	str	r2, [r3, #16]
 8002720:	e007      	b.n	8002732 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d10c      	bne.n	8002754 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	f023 010f 	bic.w	r1, r3, #15
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	1e5a      	subs	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
 8002752:	e007      	b.n	8002764 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 020f 	bic.w	r2, r2, #15
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	f023 0303 	bic.w	r3, r3, #3
 800276c:	f043 0201 	orr.w	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
 8002774:	e007      	b.n	8002786 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277a:	f043 0210 	orr.w	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002786:	7ffb      	ldrb	r3, [r7, #31]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000040 	.word	0x20000040
 8002794:	053e2d63 	.word	0x053e2d63
 8002798:	50040000 	.word	0x50040000
 800279c:	50040300 	.word	0x50040300
 80027a0:	fff0c007 	.word	0xfff0c007

080027a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fe6f 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d167      	bne.n	8002890 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_Start_DMA+0x2a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e063      	b.n	8002896 <HAL_ADC_Start_DMA+0xf2>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fd60 	bl	800329c <ADC_Enable>
 80027dc:	4603      	mov	r3, r0
 80027de:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d14f      	bne.n	8002886 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	f023 0206 	bic.w	r2, r3, #6
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	659a      	str	r2, [r3, #88]	; 0x58
 8002812:	e002      	b.n	800281a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	4a20      	ldr	r2, [pc, #128]	; (80028a0 <HAL_ADC_Start_DMA+0xfc>)
 8002820:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_ADC_Start_DMA+0x100>)
 8002828:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <HAL_ADC_Start_DMA+0x104>)
 8002830:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	221c      	movs	r2, #28
 8002838:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0210 	orr.w	r2, r2, #16
 8002850:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3340      	adds	r3, #64	; 0x40
 800286c:	4619      	mov	r1, r3
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f001 f897 	bl	80039a4 <HAL_DMA_Start_IT>
 8002876:	4603      	mov	r3, r0
 8002878:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fde2 	bl	8002448 <LL_ADC_REG_StartConversion>
 8002884:	e006      	b.n	8002894 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800288e:	e001      	b.n	8002894 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002890:	2302      	movs	r3, #2
 8002892:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002894:	7dfb      	ldrb	r3, [r7, #23]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	0800344f 	.word	0x0800344f
 80028a4:	08003527 	.word	0x08003527
 80028a8:	08003543 	.word	0x08003543

080028ac <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_Stop_DMA+0x16>
 80028be:	2302      	movs	r3, #2
 80028c0:	e051      	b.n	8002966 <HAL_ADC_Stop_DMA+0xba>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028ca:	2103      	movs	r1, #3
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fc29 	bl	8003124 <ADC_ConversionStop>
 80028d2:	4603      	mov	r3, r0
 80028d4:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d13f      	bne.n	800295c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d10f      	bne.n	800291a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 f8cb 	bl	8003a9a <HAL_DMA_Abort>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0210 	bic.w	r2, r2, #16
 8002928:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fd2d 	bl	8003390 <ADC_Disable>
 8002936:	4603      	mov	r3, r0
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e002      	b.n	8002942 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fd27 	bl	8003390 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b0b6      	sub	sp, #216	; 0xd8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x22>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e39f      	b.n	80030fa <HAL_ADC_ConfigChannel+0x762>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fd66 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 8384 	bne.w	80030dc <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	f7ff fc19 	bl	8002218 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fd54 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 80029f0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fd74 	bl	80024e6 <LL_ADC_INJ_IsConversionOngoing>
 80029fe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f040 81a6 	bne.w	8002d58 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 81a1 	bne.w	8002d58 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f7ff fc24 	bl	8002270 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	08db      	lsrs	r3, r3, #3
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d00a      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6919      	ldr	r1, [r3, #16]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a5a:	f7ff fb75 	bl	8002148 <LL_ADC_SetOffset>
 8002a5e:	e17b      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fb92 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0xf4>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fb87 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	f003 021f 	and.w	r2, r3, #31
 8002a8a:	e01e      	b.n	8002aca <HAL_ADC_ConfigChannel+0x132>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2100      	movs	r1, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fb7c 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002aae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ab2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002aba:	2320      	movs	r3, #32
 8002abc:	e004      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x14a>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	0e9b      	lsrs	r3, r3, #26
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	e018      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x17c>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e004      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d106      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fb4b 	bl	80021bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fb2f 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x1ba>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2101      	movs	r1, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fb24 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	0e9b      	lsrs	r3, r3, #26
 8002b4c:	f003 021f 	and.w	r2, r3, #31
 8002b50:	e01e      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x1f8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2101      	movs	r1, #1
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fb19 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002b80:	2320      	movs	r3, #32
 8002b82:	e004      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x210>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	e018      	b.n	8002bda <HAL_ADC_ConfigChannel+0x242>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002bcc:	2320      	movs	r3, #32
 8002bce:	e004      	b.n	8002bda <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d106      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	2101      	movs	r1, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fae8 	bl	80021bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff facc 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10a      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x280>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2102      	movs	r1, #2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fac1 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	f003 021f 	and.w	r2, r3, #31
 8002c16:	e01e      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x2be>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fab6 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002c46:	2320      	movs	r3, #32
 8002c48:	e004      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x2d6>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0e9b      	lsrs	r3, r3, #26
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	e016      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x304>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002c8e:	2320      	movs	r3, #32
 8002c90:	e004      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d106      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fa87 	bl	80021bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fa6b 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x342>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2103      	movs	r1, #3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fa60 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	0e9b      	lsrs	r3, r3, #26
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	e017      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x372>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2103      	movs	r1, #3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fa55 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cf4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e003      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x38a>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	e011      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x3ae>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e003      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d106      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2103      	movs	r1, #3
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fa32 	bl	80021bc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fb4d 	bl	80023fc <LL_ADC_IsEnabled>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 81c2 	bne.w	80030ee <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6819      	ldr	r1, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f7ff faa6 	bl	80022c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a8e      	ldr	r2, [pc, #568]	; (8002fbc <HAL_ADC_ConfigChannel+0x624>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	f040 8130 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x418>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2b09      	cmp	r3, #9
 8002da6:	bf94      	ite	ls
 8002da8:	2301      	movls	r3, #1
 8002daa:	2300      	movhi	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e019      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x44c>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e003      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2b09      	cmp	r3, #9
 8002ddc:	bf94      	ite	ls
 8002dde:	2301      	movls	r3, #1
 8002de0:	2300      	movhi	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d079      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x46c>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	069b      	lsls	r3, r3, #26
 8002dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e02:	e015      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x498>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e14:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e003      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	069b      	lsls	r3, r3, #26
 8002e2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x4b8>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	3301      	adds	r3, #1
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	e017      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x4e8>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002e68:	2320      	movs	r3, #32
 8002e6a:	e003      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	ea42 0103 	orr.w	r1, r2, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x50e>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	3301      	adds	r3, #1
 8002e98:	f003 021f 	and.w	r2, r3, #31
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	051b      	lsls	r3, r3, #20
 8002ea4:	e018      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x540>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	e003      	b.n	8002eca <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	e080      	b.n	8002fde <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x560>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0e9b      	lsrs	r3, r3, #26
 8002eee:	3301      	adds	r3, #1
 8002ef0:	069b      	lsls	r3, r3, #26
 8002ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef6:	e015      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x58c>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002f10:	2320      	movs	r3, #32
 8002f12:	e003      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	069b      	lsls	r3, r3, #26
 8002f20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x5ac>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0e9b      	lsrs	r3, r3, #26
 8002f36:	3301      	adds	r3, #1
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	e017      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x5dc>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	61fb      	str	r3, [r7, #28]
  return result;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	e003      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f303 	lsl.w	r3, r1, r3
 8002f74:	ea42 0103 	orr.w	r1, r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10d      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x608>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	3b1e      	subs	r3, #30
 8002f98:	051b      	lsls	r3, r3, #20
 8002f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	e01d      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x644>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	613b      	str	r3, [r7, #16]
  return result;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e005      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x630>
 8002fbc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 021f 	and.w	r2, r3, #31
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3b1e      	subs	r3, #30
 8002fd6:	051b      	lsls	r3, r3, #20
 8002fd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fdc:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7ff f944 	bl	8002270 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b45      	ldr	r3, [pc, #276]	; (8003104 <HAL_ADC_ConfigChannel+0x76c>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d07c      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ff4:	4844      	ldr	r0, [pc, #272]	; (8003108 <HAL_ADC_ConfigChannel+0x770>)
 8002ff6:	f7ff f899 	bl	800212c <LL_ADC_GetCommonPathInternalCh>
 8002ffa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ffe:	4843      	ldr	r0, [pc, #268]	; (800310c <HAL_ADC_ConfigChannel+0x774>)
 8003000:	f7ff f9fc 	bl	80023fc <LL_ADC_IsEnabled>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d15e      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a40      	ldr	r2, [pc, #256]	; (8003110 <HAL_ADC_ConfigChannel+0x778>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d127      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x6cc>
 8003014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d121      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a39      	ldr	r2, [pc, #228]	; (800310c <HAL_ADC_ConfigChannel+0x774>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d161      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800302a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800302e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003032:	4619      	mov	r1, r3
 8003034:	4834      	ldr	r0, [pc, #208]	; (8003108 <HAL_ADC_ConfigChannel+0x770>)
 8003036:	f7ff f866 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <HAL_ADC_ConfigChannel+0x77c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	099b      	lsrs	r3, r3, #6
 8003040:	4a35      	ldr	r2, [pc, #212]	; (8003118 <HAL_ADC_ConfigChannel+0x780>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003054:	e002      	b.n	800305c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3b01      	subs	r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f9      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003062:	e044      	b.n	80030ee <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2c      	ldr	r2, [pc, #176]	; (800311c <HAL_ADC_ConfigChannel+0x784>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d113      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x6fe>
 800306e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10d      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a23      	ldr	r2, [pc, #140]	; (800310c <HAL_ADC_ConfigChannel+0x774>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d134      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003084:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003088:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308c:	4619      	mov	r1, r3
 800308e:	481e      	ldr	r0, [pc, #120]	; (8003108 <HAL_ADC_ConfigChannel+0x770>)
 8003090:	f7ff f839 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003094:	e02b      	b.n	80030ee <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a21      	ldr	r2, [pc, #132]	; (8003120 <HAL_ADC_ConfigChannel+0x788>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d126      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x756>
 80030a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d120      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_ADC_ConfigChannel+0x774>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d11b      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030be:	4619      	mov	r1, r3
 80030c0:	4811      	ldr	r0, [pc, #68]	; (8003108 <HAL_ADC_ConfigChannel+0x770>)
 80030c2:	f7ff f820 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
 80030c6:	e012      	b.n	80030ee <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80030da:	e008      	b.n	80030ee <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80030f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	37d8      	adds	r7, #216	; 0xd8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	80080000 	.word	0x80080000
 8003108:	50040300 	.word	0x50040300
 800310c:	50040000 	.word	0x50040000
 8003110:	c7520000 	.word	0xc7520000
 8003114:	20000040 	.word	0x20000040
 8003118:	053e2d63 	.word	0x053e2d63
 800311c:	cb840000 	.word	0xcb840000
 8003120:	80000001 	.word	0x80000001

08003124 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f9ac 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 8003140:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f9cd 	bl	80024e6 <LL_ADC_INJ_IsConversionOngoing>
 800314c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d103      	bne.n	800315c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8098 	beq.w	800328c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d02a      	beq.n	80031c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7e5b      	ldrb	r3, [r3, #25]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d126      	bne.n	80031c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7e1b      	ldrb	r3, [r3, #24]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d122      	bne.n	80031c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800317a:	2301      	movs	r3, #1
 800317c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800317e:	e014      	b.n	80031aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4a45      	ldr	r2, [pc, #276]	; (8003298 <ADC_ConversionStop+0x174>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d90d      	bls.n	80031a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	f043 0210 	orr.w	r2, r3, #16
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e074      	b.n	800328e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	3301      	adds	r3, #1
 80031a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d1e3      	bne.n	8003180 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2240      	movs	r2, #64	; 0x40
 80031be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d014      	beq.n	80031f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff f964 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00c      	beq.n	80031f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff f921 	bl	8002422 <LL_ADC_IsDisableOngoing>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d104      	bne.n	80031f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff f940 	bl	8002470 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d014      	beq.n	8003220 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff f973 	bl	80024e6 <LL_ADC_INJ_IsConversionOngoing>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff f909 	bl	8002422 <LL_ADC_IsDisableOngoing>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff f94f 	bl	80024be <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d005      	beq.n	8003232 <ADC_ConversionStop+0x10e>
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d105      	bne.n	8003238 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800322c:	230c      	movs	r3, #12
 800322e:	617b      	str	r3, [r7, #20]
        break;
 8003230:	e005      	b.n	800323e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003232:	2308      	movs	r3, #8
 8003234:	617b      	str	r3, [r7, #20]
        break;
 8003236:	e002      	b.n	800323e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003238:	2304      	movs	r3, #4
 800323a:	617b      	str	r3, [r7, #20]
        break;
 800323c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800323e:	f7fe ff37 	bl	80020b0 <HAL_GetTick>
 8003242:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003244:	e01b      	b.n	800327e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003246:	f7fe ff33 	bl	80020b0 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b05      	cmp	r3, #5
 8003252:	d914      	bls.n	800327e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	f043 0210 	orr.w	r2, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	f043 0201 	orr.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e007      	b.n	800328e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1dc      	bne.n	8003246 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	a33fffff 	.word	0xa33fffff

0800329c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff f8a5 	bl	80023fc <LL_ADC_IsEnabled>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d15e      	bne.n	8003376 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	4b30      	ldr	r3, [pc, #192]	; (8003380 <ADC_Enable+0xe4>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ca:	f043 0210 	orr.w	r2, r3, #16
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	f043 0201 	orr.w	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e04a      	b.n	8003378 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff f860 	bl	80023ac <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032ec:	4825      	ldr	r0, [pc, #148]	; (8003384 <ADC_Enable+0xe8>)
 80032ee:	f7fe ff1d 	bl	800212c <LL_ADC_GetCommonPathInternalCh>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00f      	beq.n	800331c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032fc:	4b22      	ldr	r3, [pc, #136]	; (8003388 <ADC_Enable+0xec>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	099b      	lsrs	r3, r3, #6
 8003302:	4a22      	ldr	r2, [pc, #136]	; (800338c <ADC_Enable+0xf0>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	3301      	adds	r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800330e:	e002      	b.n	8003316 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	3b01      	subs	r3, #1
 8003314:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f9      	bne.n	8003310 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800331c:	f7fe fec8 	bl	80020b0 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003322:	e021      	b.n	8003368 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f867 	bl	80023fc <LL_ADC_IsEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff f837 	bl	80023ac <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800333e:	f7fe feb7 	bl	80020b0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d90d      	bls.n	8003368 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	f043 0210 	orr.w	r2, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e007      	b.n	8003378 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	d1d6      	bne.n	8003324 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	8000003f 	.word	0x8000003f
 8003384:	50040300 	.word	0x50040300
 8003388:	20000040 	.word	0x20000040
 800338c:	053e2d63 	.word	0x053e2d63

08003390 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff f840 	bl	8002422 <LL_ADC_IsDisableOngoing>
 80033a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff f827 	bl	80023fc <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d047      	beq.n	8003444 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d144      	bne.n	8003444 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030d 	and.w	r3, r3, #13
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d10c      	bne.n	80033e2 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff f801 	bl	80023d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2203      	movs	r2, #3
 80033d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033da:	f7fe fe69 	bl	80020b0 <HAL_GetTick>
 80033de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033e0:	e029      	b.n	8003436 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f043 0210 	orr.w	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	f043 0201 	orr.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e023      	b.n	8003446 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033fe:	f7fe fe57 	bl	80020b0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d914      	bls.n	8003436 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	f043 0210 	orr.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e007      	b.n	8003446 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1dc      	bne.n	80033fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003464:	2b00      	cmp	r3, #0
 8003466:	d14b      	bne.n	8003500 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d021      	beq.n	80034c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe feb3 	bl	80021f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d032      	beq.n	80034f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d12b      	bne.n	80034f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11f      	bne.n	80034f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
 80034c4:	e018      	b.n	80034f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d111      	bne.n	80034f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7fd ffad 	bl	8001458 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034fe:	e00e      	b.n	800351e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7ff fa38 	bl	8002982 <HAL_ADC_ErrorCallback>
}
 8003512:	e004      	b.n	800351e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f7ff fa1a 	bl	800296e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	f043 0204 	orr.w	r2, r3, #4
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff fa0a 	bl	8002982 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <LL_ADC_StartCalibration>:
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003592:	4313      	orrs	r3, r2
 8003594:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035bc:	d101      	bne.n	80035c2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_ADCEx_Calibration_Start+0x1c>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e04d      	b.n	8003688 <HAL_ADCEx_Calibration_Start+0xb8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff fecb 	bl	8003390 <ADC_Disable>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d136      	bne.n	8003672 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800360c:	f023 0302 	bic.w	r3, r3, #2
 8003610:	f043 0202 	orr.w	r2, r3, #2
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6839      	ldr	r1, [r7, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff ffa9 	bl	8003576 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003624:	e014      	b.n	8003650 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3301      	adds	r3, #1
 800362a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4a18      	ldr	r2, [pc, #96]	; (8003690 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d90d      	bls.n	8003650 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f023 0312 	bic.w	r3, r3, #18
 800363c:	f043 0210 	orr.w	r2, r3, #16
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e01b      	b.n	8003688 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ffa7 	bl	80035a8 <LL_ADC_IsCalibrationOnGoing>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e2      	bne.n	8003626 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	f023 0303 	bic.w	r3, r3, #3
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
 8003670:	e005      	b.n	800367e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	f043 0210 	orr.w	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	00026aaa 	.word	0x00026aaa

08003694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036b0:	4013      	ands	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036c6:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	60d3      	str	r3, [r2, #12]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <__NVIC_GetPriorityGrouping+0x18>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	f003 0307 	and.w	r3, r3, #7
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	2b00      	cmp	r3, #0
 8003708:	db0b      	blt.n	8003722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	4907      	ldr	r1, [pc, #28]	; (8003730 <__NVIC_EnableIRQ+0x38>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2001      	movs	r0, #1
 800371a:	fa00 f202 	lsl.w	r2, r0, r2
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000e100 	.word	0xe000e100

08003734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003744:	2b00      	cmp	r3, #0
 8003746:	db0a      	blt.n	800375e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	490c      	ldr	r1, [pc, #48]	; (8003780 <__NVIC_SetPriority+0x4c>)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	0112      	lsls	r2, r2, #4
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	440b      	add	r3, r1
 8003758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800375c:	e00a      	b.n	8003774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	4908      	ldr	r1, [pc, #32]	; (8003784 <__NVIC_SetPriority+0x50>)
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	3b04      	subs	r3, #4
 800376c:	0112      	lsls	r2, r2, #4
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	440b      	add	r3, r1
 8003772:	761a      	strb	r2, [r3, #24]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000e100 	.word	0xe000e100
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003788:	b480      	push	{r7}
 800378a:	b089      	sub	sp, #36	; 0x24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f1c3 0307 	rsb	r3, r3, #7
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	bf28      	it	cs
 80037a6:	2304      	movcs	r3, #4
 80037a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d902      	bls.n	80037b8 <NVIC_EncodePriority+0x30>
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3b03      	subs	r3, #3
 80037b6:	e000      	b.n	80037ba <NVIC_EncodePriority+0x32>
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	401a      	ands	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d0:	f04f 31ff 	mov.w	r1, #4294967295
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	43d9      	mvns	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	4313      	orrs	r3, r2
         );
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3724      	adds	r7, #36	; 0x24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ff4c 	bl	8003694 <__NVIC_SetPriorityGrouping>
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003812:	f7ff ff63 	bl	80036dc <__NVIC_GetPriorityGrouping>
 8003816:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	6978      	ldr	r0, [r7, #20]
 800381e:	f7ff ffb3 	bl	8003788 <NVIC_EncodePriority>
 8003822:	4602      	mov	r2, r0
 8003824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff ff82 	bl	8003734 <__NVIC_SetPriority>
}
 8003830:	bf00      	nop
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff ff56 	bl	80036f8 <__NVIC_EnableIRQ>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e08e      	b.n	8003984 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_DMA_Init+0x138>)
 800386e:	429a      	cmp	r2, r3
 8003870:	d80f      	bhi.n	8003892 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	4b45      	ldr	r3, [pc, #276]	; (8003990 <HAL_DMA_Init+0x13c>)
 800387a:	4413      	add	r3, r2
 800387c:	4a45      	ldr	r2, [pc, #276]	; (8003994 <HAL_DMA_Init+0x140>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	009a      	lsls	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a42      	ldr	r2, [pc, #264]	; (8003998 <HAL_DMA_Init+0x144>)
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
 8003890:	e00e      	b.n	80038b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	4b40      	ldr	r3, [pc, #256]	; (800399c <HAL_DMA_Init+0x148>)
 800389a:	4413      	add	r3, r2
 800389c:	4a3d      	ldr	r2, [pc, #244]	; (8003994 <HAL_DMA_Init+0x140>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	009a      	lsls	r2, r3, #2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a3c      	ldr	r2, [pc, #240]	; (80039a0 <HAL_DMA_Init+0x14c>)
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fa80 	bl	8003e08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003910:	d102      	bne.n	8003918 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003920:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003924:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800392e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d010      	beq.n	800395a <HAL_DMA_Init+0x106>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b04      	cmp	r3, #4
 800393e:	d80c      	bhi.n	800395a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fa9f 	bl	8003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	e008      	b.n	800396c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40020407 	.word	0x40020407
 8003990:	bffdfff8 	.word	0xbffdfff8
 8003994:	cccccccd 	.word	0xcccccccd
 8003998:	40020000 	.word	0x40020000
 800399c:	bffdfbf8 	.word	0xbffdfbf8
 80039a0:	40020400 	.word	0x40020400

080039a4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_DMA_Start_IT+0x20>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e066      	b.n	8003a92 <HAL_DMA_Start_IT+0xee>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d155      	bne.n	8003a84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f9c5 	bl	8003d8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 020e 	orr.w	r2, r2, #14
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e00f      	b.n	8003a3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0204 	bic.w	r2, r2, #4
 8003a2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 020a 	orr.w	r2, r2, #10
 8003a3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e005      	b.n	8003a90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e04f      	b.n	8003b4c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d008      	beq.n	8003aca <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2204      	movs	r2, #4
 8003abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e040      	b.n	8003b4c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 020e 	bic.w	r2, r2, #14
 8003ad8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f003 021c 	and.w	r2, r3, #28
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2101      	movs	r1, #1
 8003b08:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b16:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b38:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d005      	beq.n	8003b7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2204      	movs	r2, #4
 8003b74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	e047      	b.n	8003c0c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 020e 	bic.w	r2, r2, #14
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	f003 021c 	and.w	r2, r3, #28
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bc8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00c      	beq.n	8003bec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
    }
  }
  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f003 031c 	and.w	r3, r3, #28
 8003c36:	2204      	movs	r2, #4
 8003c38:	409a      	lsls	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d026      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x7a>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d021      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d107      	bne.n	8003c6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0204 	bic.w	r2, r2, #4
 8003c68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f003 021c 	and.w	r2, r3, #28
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	2104      	movs	r1, #4
 8003c78:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d071      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c8e:	e06c      	b.n	8003d6a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	f003 031c 	and.w	r3, r3, #28
 8003c98:	2202      	movs	r2, #2
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02e      	beq.n	8003d02 <HAL_DMA_IRQHandler+0xec>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d029      	beq.n	8003d02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 020a 	bic.w	r2, r2, #10
 8003cca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	f003 021c 	and.w	r2, r3, #28
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d038      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d00:	e033      	b.n	8003d6a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	f003 031c 	and.w	r3, r3, #28
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d02a      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x156>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d025      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 020e 	bic.w	r2, r2, #14
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	f003 021c 	and.w	r2, r3, #28
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d6a:	bf00      	nop
 8003d6c:	bf00      	nop
}
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003da2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003db4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f003 021c 	and.w	r2, r3, #28
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b10      	cmp	r3, #16
 8003dd8:	d108      	bne.n	8003dec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003dea:	e007      	b.n	8003dfc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d80a      	bhi.n	8003e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e28:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6493      	str	r3, [r2, #72]	; 0x48
 8003e30:	e007      	b.n	8003e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	009a      	lsls	r2, r3, #2
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e3c:	4413      	add	r3, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	3b08      	subs	r3, #8
 8003e4a:	4a0c      	ldr	r2, [pc, #48]	; (8003e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e58:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	2201      	movs	r2, #1
 8003e62:	409a      	lsls	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40020407 	.word	0x40020407
 8003e78:	4002081c 	.word	0x4002081c
 8003e7c:	cccccccd 	.word	0xcccccccd
 8003e80:	40020880 	.word	0x40020880

08003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e94:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003ea8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	1000823f 	.word	0x1000823f
 8003ecc:	40020940 	.word	0x40020940

08003ed0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ede:	e14c      	b.n	800417a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	4013      	ands	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 813e 	beq.w	8004174 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d005      	beq.n	8003f10 <HAL_GPIO_Init+0x40>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d130      	bne.n	8003f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f46:	2201      	movs	r2, #1
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4013      	ands	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 0201 	and.w	r2, r3, #1
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d017      	beq.n	8003fae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	2203      	movs	r2, #3
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d123      	bne.n	8004002 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	08da      	lsrs	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3208      	adds	r2, #8
 8003fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	220f      	movs	r2, #15
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	08da      	lsrs	r2, r3, #3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3208      	adds	r2, #8
 8003ffc:	6939      	ldr	r1, [r7, #16]
 8003ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	2203      	movs	r2, #3
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 0203 	and.w	r2, r3, #3
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8098 	beq.w	8004174 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004044:	4a54      	ldr	r2, [pc, #336]	; (8004198 <HAL_GPIO_Init+0x2c8>)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	089b      	lsrs	r3, r3, #2
 800404a:	3302      	adds	r3, #2
 800404c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004050:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	220f      	movs	r2, #15
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800406e:	d019      	beq.n	80040a4 <HAL_GPIO_Init+0x1d4>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a4a      	ldr	r2, [pc, #296]	; (800419c <HAL_GPIO_Init+0x2cc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d013      	beq.n	80040a0 <HAL_GPIO_Init+0x1d0>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a49      	ldr	r2, [pc, #292]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00d      	beq.n	800409c <HAL_GPIO_Init+0x1cc>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a48      	ldr	r2, [pc, #288]	; (80041a4 <HAL_GPIO_Init+0x2d4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <HAL_GPIO_Init+0x1c8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a47      	ldr	r2, [pc, #284]	; (80041a8 <HAL_GPIO_Init+0x2d8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <HAL_GPIO_Init+0x1c4>
 8004090:	2304      	movs	r3, #4
 8004092:	e008      	b.n	80040a6 <HAL_GPIO_Init+0x1d6>
 8004094:	2307      	movs	r3, #7
 8004096:	e006      	b.n	80040a6 <HAL_GPIO_Init+0x1d6>
 8004098:	2303      	movs	r3, #3
 800409a:	e004      	b.n	80040a6 <HAL_GPIO_Init+0x1d6>
 800409c:	2302      	movs	r3, #2
 800409e:	e002      	b.n	80040a6 <HAL_GPIO_Init+0x1d6>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <HAL_GPIO_Init+0x1d6>
 80040a4:	2300      	movs	r3, #0
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	f002 0203 	and.w	r2, r2, #3
 80040ac:	0092      	lsls	r2, r2, #2
 80040ae:	4093      	lsls	r3, r2
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040b6:	4938      	ldr	r1, [pc, #224]	; (8004198 <HAL_GPIO_Init+0x2c8>)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	3302      	adds	r3, #2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040c4:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_GPIO_Init+0x2dc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4013      	ands	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040e8:	4a30      	ldr	r2, [pc, #192]	; (80041ac <HAL_GPIO_Init+0x2dc>)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040ee:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <HAL_GPIO_Init+0x2dc>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4013      	ands	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004112:	4a26      	ldr	r2, [pc, #152]	; (80041ac <HAL_GPIO_Init+0x2dc>)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004118:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_GPIO_Init+0x2dc>)
 800411a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800411e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800413e:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <HAL_GPIO_Init+0x2dc>)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004146:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_GPIO_Init+0x2dc>)
 8004148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43db      	mvns	r3, r3
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800416c:	4a0f      	ldr	r2, [pc, #60]	; (80041ac <HAL_GPIO_Init+0x2dc>)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	3301      	adds	r3, #1
 8004178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	f47f aeab 	bne.w	8003ee0 <HAL_GPIO_Init+0x10>
  }
}
 800418a:	bf00      	nop
 800418c:	bf00      	nop
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40010000 	.word	0x40010000
 800419c:	48000400 	.word	0x48000400
 80041a0:	48000800 	.word	0x48000800
 80041a4:	48000c00 	.word	0x48000c00
 80041a8:	48001000 	.word	0x48001000
 80041ac:	58000800 	.word	0x58000800

080041b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	807b      	strh	r3, [r7, #2]
 80041bc:	4613      	mov	r3, r2
 80041be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041c0:	787b      	ldrb	r3, [r7, #1]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041c6:	887a      	ldrh	r2, [r7, #2]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041cc:	e002      	b.n	80041d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041ce:	887a      	ldrh	r2, [r7, #2]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4013      	ands	r3, r2
 80041f8:	041a      	lsls	r2, r3, #16
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	43d9      	mvns	r1, r3
 80041fe:	887b      	ldrh	r3, [r7, #2]
 8004200:	400b      	ands	r3, r1
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e08d      	b.n	8004342 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fd fcaa 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	; 0x24
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004264:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004274:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d107      	bne.n	800428e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	e006      	b.n	800429c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800429a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d108      	bne.n	80042b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	e007      	b.n	80042c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69d9      	ldr	r1, [r3, #28]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1a      	ldr	r2, [r3, #32]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b20      	cmp	r3, #32
 800435e:	d138      	bne.n	80043d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800436a:	2302      	movs	r3, #2
 800436c:	e032      	b.n	80043d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2224      	movs	r2, #36	; 0x24
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800439c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d139      	bne.n	800446a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004400:	2302      	movs	r3, #2
 8004402:	e033      	b.n	800446c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	; 0x24
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004432:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0201 	orr.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e000      	b.n	800446c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800446a:	2302      	movs	r3, #2
  }
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447a:	b08b      	sub	sp, #44	; 0x2c
 800447c:	af06      	add	r7, sp, #24
 800447e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e0cb      	b.n	8004622 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd fc68 	bl	8001d74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2203      	movs	r2, #3
 80044a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f005 f8c9 	bl	8009648 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
 80044ba:	e040      	b.n	800453e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	440b      	add	r3, r1
 80044cc:	3301      	adds	r3, #1
 80044ce:	2201      	movs	r2, #1
 80044d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	440b      	add	r3, r1
 80044e2:	7bfa      	ldrb	r2, [r7, #15]
 80044e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	440b      	add	r3, r1
 80044f6:	3303      	adds	r3, #3
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044fc:	7bfa      	ldrb	r2, [r7, #15]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	440b      	add	r3, r1
 800450a:	3338      	adds	r3, #56	; 0x38
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004510:	7bfa      	ldrb	r2, [r7, #15]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	440b      	add	r3, r1
 800451e:	333c      	adds	r3, #60	; 0x3c
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004524:	7bfa      	ldrb	r2, [r7, #15]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	440b      	add	r3, r1
 8004532:	3340      	adds	r3, #64	; 0x40
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	3301      	adds	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
 800453e:	7bfa      	ldrb	r2, [r7, #15]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d3b9      	bcc.n	80044bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004548:	2300      	movs	r3, #0
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	e044      	b.n	80045d8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800454e:	7bfa      	ldrb	r2, [r7, #15]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	440b      	add	r3, r1
 800455c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004564:	7bfa      	ldrb	r2, [r7, #15]
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	440b      	add	r3, r1
 8004572:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004576:	7bfa      	ldrb	r2, [r7, #15]
 8004578:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800457a:	7bfa      	ldrb	r2, [r7, #15]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	440b      	add	r3, r1
 8004588:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800458c:	2200      	movs	r2, #0
 800458e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004590:	7bfa      	ldrb	r2, [r7, #15]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	440b      	add	r3, r1
 800459e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045a6:	7bfa      	ldrb	r2, [r7, #15]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	440b      	add	r3, r1
 80045b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045bc:	7bfa      	ldrb	r2, [r7, #15]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	440b      	add	r3, r1
 80045ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	3301      	adds	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	7bfa      	ldrb	r2, [r7, #15]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d3b5      	bcc.n	800454e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	687e      	ldr	r6, [r7, #4]
 80045ea:	466d      	mov	r5, sp
 80045ec:	f106 0410 	add.w	r4, r6, #16
 80045f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	1d33      	adds	r3, r6, #4
 80045fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045fc:	6838      	ldr	r0, [r7, #0]
 80045fe:	f005 f83e 	bl	800967e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d102      	bne.n	8004620 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f805 	bl	800462a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800462a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800464e:	b29b      	uxth	r3, r3
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004662:	b29b      	uxth	r3, r3
 8004664:	f043 0302 	orr.w	r3, r3, #2
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a04      	ldr	r2, [pc, #16]	; (800469c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800468a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468e:	6013      	str	r3, [r2, #0]
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	58000400 	.word	0x58000400

080046a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	58000400 	.word	0x58000400

080046bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80046c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ce:	d101      	bne.n	80046d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <LL_RCC_HSE_Enable>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <LL_RCC_HSE_Disable>:
{
 80046fe:	b480      	push	{r7}
 8004700:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800470c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004710:	6013      	str	r3, [r2, #0]
}
 8004712:	bf00      	nop
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <LL_RCC_HSE_IsReady>:
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800472e:	d101      	bne.n	8004734 <LL_RCC_HSE_IsReady+0x18>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <LL_RCC_HSE_IsReady+0x1a>
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <LL_RCC_HSI_Enable>:
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6013      	str	r3, [r2, #0]
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <LL_RCC_HSI_Disable>:
{
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800476c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004770:	6013      	str	r3, [r2, #0]
}
 8004772:	bf00      	nop
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <LL_RCC_HSI_IsReady>:
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d101      	bne.n	8004794 <LL_RCC_HSI_IsReady+0x18>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <LL_RCC_HSI_IsReady+0x1a>
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80047a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	061b      	lsls	r3, r3, #24
 80047b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <LL_RCC_HSI48_Enable>:
{
 80047ca:	b480      	push	{r7}
 80047cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80047ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80047e2:	bf00      	nop
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <LL_RCC_HSI48_Disable>:
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80047f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <LL_RCC_HSI48_IsReady>:
{
 800480e:	b480      	push	{r7}
 8004810:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	d101      	bne.n	8004826 <LL_RCC_HSI48_IsReady+0x18>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <LL_RCC_HSI48_IsReady+0x1a>
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <LL_RCC_LSE_Enable>:
{
 8004832:	b480      	push	{r7}
 8004834:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800484a:	bf00      	nop
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_RCC_LSE_Disable>:
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <LL_RCC_LSE_EnableBypass>:
{
 8004876:	b480      	push	{r7}
 8004878:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800487a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004886:	f043 0304 	orr.w	r3, r3, #4
 800488a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800488e:	bf00      	nop
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <LL_RCC_LSE_DisableBypass>:
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800489c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048a8:	f023 0304 	bic.w	r3, r3, #4
 80048ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80048b0:	bf00      	nop
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80048ba:	b480      	push	{r7}
 80048bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80048be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d101      	bne.n	80048d2 <LL_RCC_LSE_IsReady+0x18>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <LL_RCC_LSE_IsReady+0x1a>
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80048de:	b480      	push	{r7}
 80048e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80048e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80048f6:	bf00      	nop
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800490c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004918:	bf00      	nop
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004922:	b480      	push	{r7}
 8004924:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b02      	cmp	r3, #2
 8004934:	d101      	bne.n	800493a <LL_RCC_LSI1_IsReady+0x18>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <LL_RCC_LSI1_IsReady+0x1a>
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004946:	b480      	push	{r7}
 8004948:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800494a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004956:	f043 0304 	orr.w	r3, r3, #4
 800495a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800495e:	bf00      	nop
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800496c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004978:	f023 0304 	bic.w	r3, r3, #4
 800497c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800498a:	b480      	push	{r7}
 800498c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800498e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b08      	cmp	r3, #8
 800499c:	d101      	bne.n	80049a2 <LL_RCC_LSI2_IsReady+0x18>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <LL_RCC_LSI2_IsReady+0x1a>
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80049b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80049e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	6013      	str	r3, [r2, #0]
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80049fa:	b480      	push	{r7}
 80049fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80049fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	6013      	str	r3, [r2, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d101      	bne.n	8004a2e <LL_RCC_MSI_IsReady+0x16>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <LL_RCC_MSI_IsReady+0x18>
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a72:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2bb0      	cmp	r3, #176	; 0xb0
 8004a78:	d901      	bls.n	8004a7e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004a7a:	23b0      	movs	r3, #176	; 0xb0
 8004a7c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004a7e:	687b      	ldr	r3, [r7, #4]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f023 0203 	bic.w	r2, r3, #3
 8004ac8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 030c 	and.w	r3, r3, #12
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b5a:	f023 020f 	bic.w	r2, r3, #15
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	608b      	str	r3, [r1, #8]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	608b      	str	r3, [r1, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004c16:	b480      	push	{r7}
 8004c18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c58:	6013      	str	r3, [r2, #0]
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c76:	6013      	str	r3, [r2, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004c82:	b480      	push	{r7}
 8004c84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c94:	d101      	bne.n	8004c9a <LL_RCC_PLL_IsReady+0x18>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <LL_RCC_PLL_IsReady+0x1a>
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	0a1b      	lsrs	r3, r3, #8
 8004cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1a:	d101      	bne.n	8004d20 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d40:	d101      	bne.n	8004d46 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004d52:	b480      	push	{r7}
 8004d54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d66:	d101      	bne.n	8004d6c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d8a:	d101      	bne.n	8004d90 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004daa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dae:	d101      	bne.n	8004db4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b08d      	sub	sp, #52	; 0x34
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e363      	b.n	800549a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 808d 	beq.w	8004efa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004de0:	f7ff fe7d 	bl	8004ade <LL_RCC_GetSysClkSource>
 8004de4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004de6:	f7ff ff83 	bl	8004cf0 <LL_RCC_PLL_GetMainSource>
 8004dea:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_RCC_OscConfig+0x3e>
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	d147      	bne.n	8004e88 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d144      	bne.n	8004e88 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e347      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004e0e:	f7ff fe28 	bl	8004a62 <LL_RCC_MSI_GetRange>
 8004e12:	4603      	mov	r3, r0
 8004e14:	429c      	cmp	r4, r3
 8004e16:	d914      	bls.n	8004e42 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fd61 	bl	80058e4 <RCC_SetFlashLatencyFromMSIRange>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e336      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fe02 	bl	8004a3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff fe26 	bl	8004a8c <LL_RCC_MSI_SetCalibTrimming>
 8004e40:	e013      	b.n	8004e6a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fdf7 	bl	8004a3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fe1b 	bl	8004a8c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fd42 	bl	80058e4 <RCC_SetFlashLatencyFromMSIRange>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e317      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e6a:	f000 fcc9 	bl	8005800 <HAL_RCC_GetHCLKFreq>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	4aa4      	ldr	r2, [pc, #656]	; (8005104 <HAL_RCC_OscConfig+0x344>)
 8004e72:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e74:	4ba4      	ldr	r3, [pc, #656]	; (8005108 <HAL_RCC_OscConfig+0x348>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fc ffc5 	bl	8001e08 <HAL_InitTick>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d039      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e308      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01e      	beq.n	8004ece <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e90:	f7ff fda4 	bl	80049dc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e94:	f7fd f90c 	bl	80020b0 <HAL_GetTick>
 8004e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e9c:	f7fd f908 	bl	80020b0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e2f5      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004eae:	f7ff fdb3 	bl	8004a18 <LL_RCC_MSI_IsReady>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f1      	beq.n	8004e9c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff fdbc 	bl	8004a3a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fde0 	bl	8004a8c <LL_RCC_MSI_SetCalibTrimming>
 8004ecc:	e015      	b.n	8004efa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ece:	f7ff fd94 	bl	80049fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ed2:	f7fd f8ed 	bl	80020b0 <HAL_GetTick>
 8004ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004eda:	f7fd f8e9 	bl	80020b0 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e2d6      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004eec:	f7ff fd94 	bl	8004a18 <LL_RCC_MSI_IsReady>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f1      	bne.n	8004eda <HAL_RCC_OscConfig+0x11a>
 8004ef6:	e000      	b.n	8004efa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004ef8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d047      	beq.n	8004f96 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f06:	f7ff fdea 	bl	8004ade <LL_RCC_GetSysClkSource>
 8004f0a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f0c:	f7ff fef0 	bl	8004cf0 <LL_RCC_PLL_GetMainSource>
 8004f10:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_OscConfig+0x164>
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d108      	bne.n	8004f30 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d105      	bne.n	8004f30 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d134      	bne.n	8004f96 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e2b4      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f38:	d102      	bne.n	8004f40 <HAL_RCC_OscConfig+0x180>
 8004f3a:	f7ff fbd1 	bl	80046e0 <LL_RCC_HSE_Enable>
 8004f3e:	e001      	b.n	8004f44 <HAL_RCC_OscConfig+0x184>
 8004f40:	f7ff fbdd 	bl	80046fe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d012      	beq.n	8004f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fd f8b0 	bl	80020b0 <HAL_GetTick>
 8004f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f54:	f7fd f8ac 	bl	80020b0 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b64      	cmp	r3, #100	; 0x64
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e299      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004f66:	f7ff fbd9 	bl	800471c <LL_RCC_HSE_IsReady>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f1      	beq.n	8004f54 <HAL_RCC_OscConfig+0x194>
 8004f70:	e011      	b.n	8004f96 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f72:	f7fd f89d 	bl	80020b0 <HAL_GetTick>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f7a:	f7fd f899 	bl	80020b0 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b64      	cmp	r3, #100	; 0x64
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e286      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004f8c:	f7ff fbc6 	bl	800471c <LL_RCC_HSE_IsReady>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f1      	bne.n	8004f7a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d04c      	beq.n	800503c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fa2:	f7ff fd9c 	bl	8004ade <LL_RCC_GetSysClkSource>
 8004fa6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa8:	f7ff fea2 	bl	8004cf0 <LL_RCC_PLL_GetMainSource>
 8004fac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x200>
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d10e      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e266      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fbe5 	bl	80047a0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004fd6:	e031      	b.n	800503c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d019      	beq.n	8005014 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe0:	f7ff fbae 	bl	8004740 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fd f864 	bl	80020b0 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fec:	f7fd f860 	bl	80020b0 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e24d      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004ffe:	f7ff fbbd 	bl	800477c <LL_RCC_HSI_IsReady>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f1      	beq.n	8004fec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fbc7 	bl	80047a0 <LL_RCC_HSI_SetCalibTrimming>
 8005012:	e013      	b.n	800503c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005014:	f7ff fba3 	bl	800475e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7fd f84a 	bl	80020b0 <HAL_GetTick>
 800501c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005020:	f7fd f846 	bl	80020b0 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e233      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005032:	f7ff fba3 	bl	800477c <LL_RCC_HSI_IsReady>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f1      	bne.n	8005020 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80a3 	beq.w	800519c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d076      	beq.n	800514c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b00      	cmp	r3, #0
 8005068:	d046      	beq.n	80050f8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800506a:	f7ff fc5a 	bl	8004922 <LL_RCC_LSI1_IsReady>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d113      	bne.n	800509c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005074:	f7ff fc33 	bl	80048de <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005078:	f7fd f81a 	bl	80020b0 <HAL_GetTick>
 800507c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005080:	f7fd f816 	bl	80020b0 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e203      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005092:	f7ff fc46 	bl	8004922 <LL_RCC_LSI1_IsReady>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f1      	beq.n	8005080 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800509c:	f7ff fc53 	bl	8004946 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fd f806 	bl	80020b0 <HAL_GetTick>
 80050a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80050a8:	f7fd f802 	bl	80020b0 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e1ef      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80050ba:	f7ff fc66 	bl	800498a <LL_RCC_LSI2_IsReady>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f1      	beq.n	80050a8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fc70 	bl	80049ae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80050ce:	f7ff fc17 	bl	8004900 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d2:	f7fc ffed 	bl	80020b0 <HAL_GetTick>
 80050d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80050da:	f7fc ffe9 	bl	80020b0 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e1d6      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80050ec:	f7ff fc19 	bl	8004922 <LL_RCC_LSI1_IsReady>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f1      	bne.n	80050da <HAL_RCC_OscConfig+0x31a>
 80050f6:	e051      	b.n	800519c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80050f8:	f7ff fbf1 	bl	80048de <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fc ffd8 	bl	80020b0 <HAL_GetTick>
 8005100:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005102:	e00c      	b.n	800511e <HAL_RCC_OscConfig+0x35e>
 8005104:	20000040 	.word	0x20000040
 8005108:	20000044 	.word	0x20000044
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800510c:	f7fc ffd0 	bl	80020b0 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e1bd      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800511e:	f7ff fc00 	bl	8004922 <LL_RCC_LSI1_IsReady>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f1      	beq.n	800510c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005128:	f7ff fc1e 	bl	8004968 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800512e:	f7fc ffbf 	bl	80020b0 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b03      	cmp	r3, #3
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e1ac      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005140:	f7ff fc23 	bl	800498a <LL_RCC_LSI2_IsReady>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f1      	bne.n	800512e <HAL_RCC_OscConfig+0x36e>
 800514a:	e027      	b.n	800519c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800514c:	f7ff fc0c 	bl	8004968 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005150:	f7fc ffae 	bl	80020b0 <HAL_GetTick>
 8005154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005158:	f7fc ffaa 	bl	80020b0 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b03      	cmp	r3, #3
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e197      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800516a:	f7ff fc0e 	bl	800498a <LL_RCC_LSI2_IsReady>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f1      	bne.n	8005158 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005174:	f7ff fbc4 	bl	8004900 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005178:	f7fc ff9a 	bl	80020b0 <HAL_GetTick>
 800517c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005180:	f7fc ff96 	bl	80020b0 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e183      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005192:	f7ff fbc6 	bl	8004922 <LL_RCC_LSI1_IsReady>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f1      	bne.n	8005180 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d05b      	beq.n	8005260 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a8:	4ba7      	ldr	r3, [pc, #668]	; (8005448 <HAL_RCC_OscConfig+0x688>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d114      	bne.n	80051de <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80051b4:	f7ff fa64 	bl	8004680 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051b8:	f7fc ff7a 	bl	80020b0 <HAL_GetTick>
 80051bc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c0:	f7fc ff76 	bl	80020b0 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e163      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d2:	4b9d      	ldr	r3, [pc, #628]	; (8005448 <HAL_RCC_OscConfig+0x688>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d102      	bne.n	80051ec <HAL_RCC_OscConfig+0x42c>
 80051e6:	f7ff fb24 	bl	8004832 <LL_RCC_LSE_Enable>
 80051ea:	e00c      	b.n	8005206 <HAL_RCC_OscConfig+0x446>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b05      	cmp	r3, #5
 80051f2:	d104      	bne.n	80051fe <HAL_RCC_OscConfig+0x43e>
 80051f4:	f7ff fb3f 	bl	8004876 <LL_RCC_LSE_EnableBypass>
 80051f8:	f7ff fb1b 	bl	8004832 <LL_RCC_LSE_Enable>
 80051fc:	e003      	b.n	8005206 <HAL_RCC_OscConfig+0x446>
 80051fe:	f7ff fb29 	bl	8004854 <LL_RCC_LSE_Disable>
 8005202:	f7ff fb49 	bl	8004898 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d014      	beq.n	8005238 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520e:	f7fc ff4f 	bl	80020b0 <HAL_GetTick>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005214:	e00a      	b.n	800522c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005216:	f7fc ff4b 	bl	80020b0 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	f241 3288 	movw	r2, #5000	; 0x1388
 8005224:	4293      	cmp	r3, r2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e136      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800522c:	f7ff fb45 	bl	80048ba <LL_RCC_LSE_IsReady>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0ef      	beq.n	8005216 <HAL_RCC_OscConfig+0x456>
 8005236:	e013      	b.n	8005260 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005238:	f7fc ff3a 	bl	80020b0 <HAL_GetTick>
 800523c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800523e:	e00a      	b.n	8005256 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005240:	f7fc ff36 	bl	80020b0 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	f241 3288 	movw	r2, #5000	; 0x1388
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e121      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005256:	f7ff fb30 	bl	80048ba <LL_RCC_LSE_IsReady>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1ef      	bne.n	8005240 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d02c      	beq.n	80052c6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	2b00      	cmp	r3, #0
 8005272:	d014      	beq.n	800529e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005274:	f7ff faa9 	bl	80047ca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005278:	f7fc ff1a 	bl	80020b0 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005280:	f7fc ff16 	bl	80020b0 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e103      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005292:	f7ff fabc 	bl	800480e <LL_RCC_HSI48_IsReady>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0f1      	beq.n	8005280 <HAL_RCC_OscConfig+0x4c0>
 800529c:	e013      	b.n	80052c6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800529e:	f7ff faa5 	bl	80047ec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a2:	f7fc ff05 	bl	80020b0 <HAL_GetTick>
 80052a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052aa:	f7fc ff01 	bl	80020b0 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e0ee      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80052bc:	f7ff faa7 	bl	800480e <LL_RCC_HSI48_IsReady>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f1      	bne.n	80052aa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80e4 	beq.w	8005498 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d0:	f7ff fc05 	bl	8004ade <LL_RCC_GetSysClkSource>
 80052d4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	f040 80b4 	bne.w	8005450 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 0203 	and.w	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d123      	bne.n	800533e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005300:	429a      	cmp	r2, r3
 8005302:	d11c      	bne.n	800533e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d114      	bne.n	800533e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d10d      	bne.n	800533e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800532c:	429a      	cmp	r2, r3
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800533a:	429a      	cmp	r2, r3
 800533c:	d05d      	beq.n	80053fa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b0c      	cmp	r3, #12
 8005342:	d058      	beq.n	80053f6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e0a1      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005356:	f7ff fc85 	bl	8004c64 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800535a:	f7fc fea9 	bl	80020b0 <HAL_GetTick>
 800535e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005362:	f7fc fea5 	bl	80020b0 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e092      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1ef      	bne.n	8005362 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	4b30      	ldr	r3, [pc, #192]	; (800544c <HAL_RCC_OscConfig+0x68c>)
 800538a:	4013      	ands	r3, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005394:	4311      	orrs	r1, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800539a:	0212      	lsls	r2, r2, #8
 800539c:	4311      	orrs	r1, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053a2:	4311      	orrs	r1, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053a8:	4311      	orrs	r1, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80053ae:	430a      	orrs	r2, r1
 80053b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80053b8:	f7ff fc45 	bl	8004c46 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053cc:	f7fc fe70 	bl	80020b0 <HAL_GetTick>
 80053d0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d4:	f7fc fe6c 	bl	80020b0 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e059      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ef      	beq.n	80053d4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053f4:	e050      	b.n	8005498 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e04f      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d147      	bne.n	8005498 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005408:	f7ff fc1d 	bl	8004c46 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800540c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800541c:	f7fc fe48 	bl	80020b0 <HAL_GetTick>
 8005420:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005424:	f7fc fe44 	bl	80020b0 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e031      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0ef      	beq.n	8005424 <HAL_RCC_OscConfig+0x664>
 8005444:	e028      	b.n	8005498 <HAL_RCC_OscConfig+0x6d8>
 8005446:	bf00      	nop
 8005448:	58000400 	.word	0x58000400
 800544c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b0c      	cmp	r3, #12
 8005454:	d01e      	beq.n	8005494 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005456:	f7ff fc05 	bl	8004c64 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545a:	f7fc fe29 	bl	80020b0 <HAL_GetTick>
 800545e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005462:	f7fc fe25 	bl	80020b0 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e012      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1ef      	bne.n	8005462 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800548c:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCC_OscConfig+0x6e4>)
 800548e:	4013      	ands	r3, r2
 8005490:	60cb      	str	r3, [r1, #12]
 8005492:	e001      	b.n	8005498 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3734      	adds	r7, #52	; 0x34
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd90      	pop	{r4, r7, pc}
 80054a2:	bf00      	nop
 80054a4:	eefefffc 	.word	0xeefefffc

080054a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e12d      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054bc:	4b98      	ldr	r3, [pc, #608]	; (8005720 <HAL_RCC_ClockConfig+0x278>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d91b      	bls.n	8005502 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ca:	4b95      	ldr	r3, [pc, #596]	; (8005720 <HAL_RCC_ClockConfig+0x278>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 0207 	bic.w	r2, r3, #7
 80054d2:	4993      	ldr	r1, [pc, #588]	; (8005720 <HAL_RCC_ClockConfig+0x278>)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054da:	f7fc fde9 	bl	80020b0 <HAL_GetTick>
 80054de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80054e2:	f7fc fde5 	bl	80020b0 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e111      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f4:	4b8a      	ldr	r3, [pc, #552]	; (8005720 <HAL_RCC_ClockConfig+0x278>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d1ef      	bne.n	80054e2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d016      	beq.n	800553c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff faef 	bl	8004af6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005518:	f7fc fdca 	bl	80020b0 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005520:	f7fc fdc6 	bl	80020b0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e0f2      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005532:	f7ff fbe9 	bl	8004d08 <LL_RCC_IsActiveFlag_HPRE>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f1      	beq.n	8005520 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d016      	beq.n	8005576 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fae6 	bl	8004b1e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005552:	f7fc fdad 	bl	80020b0 <HAL_GetTick>
 8005556:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800555a:	f7fc fda9 	bl	80020b0 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e0d5      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800556c:	f7ff fbde 	bl	8004d2c <LL_RCC_IsActiveFlag_C2HPRE>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f1      	beq.n	800555a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d016      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fadf 	bl	8004b4a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800558c:	f7fc fd90 	bl	80020b0 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005594:	f7fc fd8c 	bl	80020b0 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e0b8      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80055a6:	f7ff fbd4 	bl	8004d52 <LL_RCC_IsActiveFlag_SHDHPRE>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0f1      	beq.n	8005594 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d016      	beq.n	80055ea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fad9 	bl	8004b78 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055c6:	f7fc fd73 	bl	80020b0 <HAL_GetTick>
 80055ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80055ce:	f7fc fd6f 	bl	80020b0 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e09b      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80055e0:	f7ff fbca 	bl	8004d78 <LL_RCC_IsActiveFlag_PPRE1>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f1      	beq.n	80055ce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d017      	beq.n	8005626 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff facf 	bl	8004ba0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005602:	f7fc fd55 	bl	80020b0 <HAL_GetTick>
 8005606:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005608:	e008      	b.n	800561c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800560a:	f7fc fd51 	bl	80020b0 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e07d      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800561c:	f7ff fbbe 	bl	8004d9c <LL_RCC_IsActiveFlag_PPRE2>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f1      	beq.n	800560a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d043      	beq.n	80056ba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d106      	bne.n	8005648 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800563a:	f7ff f86f 	bl	800471c <LL_RCC_HSE_IsReady>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d11e      	bne.n	8005682 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e067      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b03      	cmp	r3, #3
 800564e:	d106      	bne.n	800565e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005650:	f7ff fb17 	bl	8004c82 <LL_RCC_PLL_IsReady>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d113      	bne.n	8005682 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e05c      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005666:	f7ff f9d7 	bl	8004a18 <LL_RCC_MSI_IsReady>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d108      	bne.n	8005682 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e051      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005674:	f7ff f882 	bl	800477c <LL_RCC_HSI_IsReady>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e04a      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff fa15 	bl	8004ab6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568c:	f7fc fd10 	bl	80020b0 <HAL_GetTick>
 8005690:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005692:	e00a      	b.n	80056aa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005694:	f7fc fd0c 	bl	80020b0 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e036      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056aa:	f7ff fa18 	bl	8004ade <LL_RCC_GetSysClkSource>
 80056ae:	4602      	mov	r2, r0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d1ec      	bne.n	8005694 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056ba:	4b19      	ldr	r3, [pc, #100]	; (8005720 <HAL_RCC_ClockConfig+0x278>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d21b      	bcs.n	8005700 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c8:	4b15      	ldr	r3, [pc, #84]	; (8005720 <HAL_RCC_ClockConfig+0x278>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f023 0207 	bic.w	r2, r3, #7
 80056d0:	4913      	ldr	r1, [pc, #76]	; (8005720 <HAL_RCC_ClockConfig+0x278>)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d8:	f7fc fcea 	bl	80020b0 <HAL_GetTick>
 80056dc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80056e0:	f7fc fce6 	bl	80020b0 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e012      	b.n	8005718 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <HAL_RCC_ClockConfig+0x278>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1ef      	bne.n	80056e0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005700:	f000 f87e 	bl	8005800 <HAL_RCC_GetHCLKFreq>
 8005704:	4603      	mov	r3, r0
 8005706:	4a07      	ldr	r2, [pc, #28]	; (8005724 <HAL_RCC_ClockConfig+0x27c>)
 8005708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800570a:	f7fc fcdd 	bl	80020c8 <HAL_GetTickPrio>
 800570e:	4603      	mov	r3, r0
 8005710:	4618      	mov	r0, r3
 8005712:	f7fc fb79 	bl	8001e08 <HAL_InitTick>
 8005716:	4603      	mov	r3, r0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	58004000 	.word	0x58004000
 8005724:	20000040 	.word	0x20000040

08005728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005728:	b590      	push	{r4, r7, lr}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800572e:	f7ff f9d6 	bl	8004ade <LL_RCC_GetSysClkSource>
 8005732:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800573a:	f7ff f992 	bl	8004a62 <LL_RCC_MSI_GetRange>
 800573e:	4603      	mov	r3, r0
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	4a2b      	ldr	r2, [pc, #172]	; (80057f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e04b      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b04      	cmp	r3, #4
 8005754:	d102      	bne.n	800575c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005756:	4b28      	ldr	r3, [pc, #160]	; (80057f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e045      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b08      	cmp	r3, #8
 8005760:	d10a      	bne.n	8005778 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005762:	f7fe ffab 	bl	80046bc <LL_RCC_HSE_IsEnabledDiv2>
 8005766:	4603      	mov	r3, r0
 8005768:	2b01      	cmp	r3, #1
 800576a:	d102      	bne.n	8005772 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800576c:	4b22      	ldr	r3, [pc, #136]	; (80057f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e03a      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005772:	4b22      	ldr	r3, [pc, #136]	; (80057fc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e037      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005778:	f7ff faba 	bl	8004cf0 <LL_RCC_PLL_GetMainSource>
 800577c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d003      	beq.n	800578c <HAL_RCC_GetSysClockFreq+0x64>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b03      	cmp	r3, #3
 8005788:	d003      	beq.n	8005792 <HAL_RCC_GetSysClockFreq+0x6a>
 800578a:	e00d      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800578c:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800578e:	60bb      	str	r3, [r7, #8]
        break;
 8005790:	e015      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005792:	f7fe ff93 	bl	80046bc <LL_RCC_HSE_IsEnabledDiv2>
 8005796:	4603      	mov	r3, r0
 8005798:	2b01      	cmp	r3, #1
 800579a:	d102      	bne.n	80057a2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800579c:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800579e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80057a0:	e00d      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80057a2:	4b16      	ldr	r3, [pc, #88]	; (80057fc <HAL_RCC_GetSysClockFreq+0xd4>)
 80057a4:	60bb      	str	r3, [r7, #8]
        break;
 80057a6:	e00a      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80057a8:	f7ff f95b 	bl	8004a62 <LL_RCC_MSI_GetRange>
 80057ac:	4603      	mov	r3, r0
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	4a0f      	ldr	r2, [pc, #60]	; (80057f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80057b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ba:	60bb      	str	r3, [r7, #8]
        break;
 80057bc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80057be:	f7ff fa72 	bl	8004ca6 <LL_RCC_PLL_GetN>
 80057c2:	4602      	mov	r2, r0
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	fb03 f402 	mul.w	r4, r3, r2
 80057ca:	f7ff fa85 	bl	8004cd8 <LL_RCC_PLL_GetDivider>
 80057ce:	4603      	mov	r3, r0
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	3301      	adds	r3, #1
 80057d4:	fbb4 f4f3 	udiv	r4, r4, r3
 80057d8:	f7ff fa72 	bl	8004cc0 <LL_RCC_PLL_GetR>
 80057dc:	4603      	mov	r3, r0
 80057de:	0f5b      	lsrs	r3, r3, #29
 80057e0:	3301      	adds	r3, #1
 80057e2:	fbb4 f3f3 	udiv	r3, r4, r3
 80057e6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80057e8:	68fb      	ldr	r3, [r7, #12]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}
 80057f2:	bf00      	nop
 80057f4:	0800f0ac 	.word	0x0800f0ac
 80057f8:	00f42400 	.word	0x00f42400
 80057fc:	01e84800 	.word	0x01e84800

08005800 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005800:	b598      	push	{r3, r4, r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005804:	f7ff ff90 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8005808:	4604      	mov	r4, r0
 800580a:	f7ff f9dd 	bl	8004bc8 <LL_RCC_GetAHBPrescaler>
 800580e:	4603      	mov	r3, r0
 8005810:	091b      	lsrs	r3, r3, #4
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	4a03      	ldr	r2, [pc, #12]	; (8005824 <HAL_RCC_GetHCLKFreq+0x24>)
 8005818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005820:	4618      	mov	r0, r3
 8005822:	bd98      	pop	{r3, r4, r7, pc}
 8005824:	0800f04c 	.word	0x0800f04c

08005828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005828:	b598      	push	{r3, r4, r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800582c:	f7ff ffe8 	bl	8005800 <HAL_RCC_GetHCLKFreq>
 8005830:	4604      	mov	r4, r0
 8005832:	f7ff f9f0 	bl	8004c16 <LL_RCC_GetAPB1Prescaler>
 8005836:	4603      	mov	r3, r0
 8005838:	0a1b      	lsrs	r3, r3, #8
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	4a04      	ldr	r2, [pc, #16]	; (8005850 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	fa24 f303 	lsr.w	r3, r4, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	bd98      	pop	{r3, r4, r7, pc}
 8005850:	0800f08c 	.word	0x0800f08c

08005854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005854:	b598      	push	{r3, r4, r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005858:	f7ff ffd2 	bl	8005800 <HAL_RCC_GetHCLKFreq>
 800585c:	4604      	mov	r4, r0
 800585e:	f7ff f9e6 	bl	8004c2e <LL_RCC_GetAPB2Prescaler>
 8005862:	4603      	mov	r3, r0
 8005864:	0adb      	lsrs	r3, r3, #11
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	4a04      	ldr	r2, [pc, #16]	; (800587c <HAL_RCC_GetPCLK2Freq+0x28>)
 800586c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005870:	f003 031f 	and.w	r3, r3, #31
 8005874:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005878:	4618      	mov	r0, r3
 800587a:	bd98      	pop	{r3, r4, r7, pc}
 800587c:	0800f08c 	.word	0x0800f08c

08005880 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	226f      	movs	r2, #111	; 0x6f
 800588e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005890:	f7ff f925 	bl	8004ade <LL_RCC_GetSysClkSource>
 8005894:	4602      	mov	r2, r0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800589a:	f7ff f995 	bl	8004bc8 <LL_RCC_GetAHBPrescaler>
 800589e:	4602      	mov	r2, r0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80058a4:	f7ff f9b7 	bl	8004c16 <LL_RCC_GetAPB1Prescaler>
 80058a8:	4602      	mov	r2, r0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80058ae:	f7ff f9be 	bl	8004c2e <LL_RCC_GetAPB2Prescaler>
 80058b2:	4602      	mov	r2, r0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80058b8:	f7ff f992 	bl	8004be0 <LL_C2_RCC_GetAHBPrescaler>
 80058bc:	4602      	mov	r2, r0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80058c2:	f7ff f99a 	bl	8004bfa <LL_RCC_GetAHB4Prescaler>
 80058c6:	4602      	mov	r2, r0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <HAL_RCC_GetClockConfig+0x60>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0207 	and.w	r2, r3, #7
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	601a      	str	r2, [r3, #0]
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	58004000 	.word	0x58004000

080058e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2bb0      	cmp	r3, #176	; 0xb0
 80058f0:	d903      	bls.n	80058fa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80058f2:	4b15      	ldr	r3, [pc, #84]	; (8005948 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e007      	b.n	800590a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	4a11      	ldr	r2, [pc, #68]	; (8005948 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005908:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800590a:	f7ff f976 	bl	8004bfa <LL_RCC_GetAHB4Prescaler>
 800590e:	4603      	mov	r3, r0
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	4a0d      	ldr	r2, [pc, #52]	; (800594c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005922:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4a0a      	ldr	r2, [pc, #40]	; (8005950 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	0c9c      	lsrs	r4, r3, #18
 800592e:	f7fe feb7 	bl	80046a0 <HAL_PWREx_GetVoltageRange>
 8005932:	4603      	mov	r3, r0
 8005934:	4619      	mov	r1, r3
 8005936:	4620      	mov	r0, r4
 8005938:	f000 f80c 	bl	8005954 <RCC_SetFlashLatency>
 800593c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	bd90      	pop	{r4, r7, pc}
 8005946:	bf00      	nop
 8005948:	0800f0ac 	.word	0x0800f0ac
 800594c:	0800f04c 	.word	0x0800f04c
 8005950:	431bde83 	.word	0x431bde83

08005954 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005954:	b590      	push	{r4, r7, lr}
 8005956:	b093      	sub	sp, #76	; 0x4c
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800595e:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <RCC_SetFlashLatency+0xe8>)
 8005960:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005964:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005966:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800596a:	4a35      	ldr	r2, [pc, #212]	; (8005a40 <RCC_SetFlashLatency+0xec>)
 800596c:	f107 031c 	add.w	r3, r7, #28
 8005970:	ca07      	ldmia	r2, {r0, r1, r2}
 8005972:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005976:	4b33      	ldr	r3, [pc, #204]	; (8005a44 <RCC_SetFlashLatency+0xf0>)
 8005978:	f107 040c 	add.w	r4, r7, #12
 800597c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800597e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005982:	2300      	movs	r3, #0
 8005984:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800598c:	d11a      	bne.n	80059c4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800598e:	2300      	movs	r3, #0
 8005990:	643b      	str	r3, [r7, #64]	; 0x40
 8005992:	e013      	b.n	80059bc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	3348      	adds	r3, #72	; 0x48
 800599a:	443b      	add	r3, r7
 800599c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d807      	bhi.n	80059b6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80059a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	3348      	adds	r3, #72	; 0x48
 80059ac:	443b      	add	r3, r7
 80059ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80059b2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80059b4:	e020      	b.n	80059f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80059b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b8:	3301      	adds	r3, #1
 80059ba:	643b      	str	r3, [r7, #64]	; 0x40
 80059bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d9e8      	bls.n	8005994 <RCC_SetFlashLatency+0x40>
 80059c2:	e019      	b.n	80059f8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80059c4:	2300      	movs	r3, #0
 80059c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c8:	e013      	b.n	80059f2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	3348      	adds	r3, #72	; 0x48
 80059d0:	443b      	add	r3, r7
 80059d2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d807      	bhi.n	80059ec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80059dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	3348      	adds	r3, #72	; 0x48
 80059e2:	443b      	add	r3, r7
 80059e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80059e8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80059ea:	e005      	b.n	80059f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80059ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ee:	3301      	adds	r3, #1
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d9e8      	bls.n	80059ca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80059f8:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <RCC_SetFlashLatency+0xf4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f023 0207 	bic.w	r2, r3, #7
 8005a00:	4911      	ldr	r1, [pc, #68]	; (8005a48 <RCC_SetFlashLatency+0xf4>)
 8005a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a04:	4313      	orrs	r3, r2
 8005a06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a08:	f7fc fb52 	bl	80020b0 <HAL_GetTick>
 8005a0c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005a0e:	e008      	b.n	8005a22 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005a10:	f7fc fb4e 	bl	80020b0 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e007      	b.n	8005a32 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005a22:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <RCC_SetFlashLatency+0xf4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d1ef      	bne.n	8005a10 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	374c      	adds	r7, #76	; 0x4c
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd90      	pop	{r4, r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	0800ef1c 	.word	0x0800ef1c
 8005a40:	0800ef2c 	.word	0x0800ef2c
 8005a44:	0800ef38 	.word	0x0800ef38
 8005a48:	58004000 	.word	0x58004000

08005a4c <LL_RCC_LSE_IsEnabled>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <LL_RCC_LSE_IsEnabled+0x18>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <LL_RCC_LSE_IsEnabled+0x1a>
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <LL_RCC_LSE_IsReady>:
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d101      	bne.n	8005a88 <LL_RCC_LSE_IsReady+0x18>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <LL_RCC_LSE_IsReady+0x1a>
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <LL_RCC_MSI_EnablePLLMode>:
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aa2:	f043 0304 	orr.w	r3, r3, #4
 8005aa6:	6013      	str	r3, [r2, #0]
}
 8005aa8:	bf00      	nop
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <LL_RCC_SetRFWKPClockSource>:
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <LL_RCC_SetSMPSClockSource>:
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	f023 0203 	bic.w	r2, r3, #3
 8005af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <LL_RCC_SetSMPSPrescaler>:
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <LL_RCC_SetUSARTClockSource>:
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	f023 0203 	bic.w	r2, r3, #3
 8005b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <LL_RCC_SetLPUARTClockSource>:
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <LL_RCC_SetI2CClockSource>:
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	091b      	lsrs	r3, r3, #4
 8005b9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	401a      	ands	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <LL_RCC_SetLPTIMClockSource>:
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	0c1b      	lsrs	r3, r3, #16
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	401a      	ands	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <LL_RCC_SetSAIClockSource>:
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <LL_RCC_SetRNGClockSource>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c30:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <LL_RCC_SetCLK48ClockSource>:
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <LL_RCC_SetUSBClockSource>:
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ffe3 	bl	8005c4c <LL_RCC_SetCLK48ClockSource>
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <LL_RCC_SetADCClockSource>:
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <LL_RCC_SetRTCClockSource>:
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <LL_RCC_GetRTCClockSource>:
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <LL_RCC_ForceBackupDomainReset>:
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d18:	bf00      	nop
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005d22:	b480      	push	{r7}
 8005d24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d3a:	bf00      	nop
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <LL_RCC_PLLSAI1_Enable>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d56:	6013      	str	r3, [r2, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <LL_RCC_PLLSAI1_Disable>:
{
 8005d62:	b480      	push	{r7}
 8005d64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d74:	6013      	str	r3, [r2, #0]
}
 8005d76:	bf00      	nop
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <LL_RCC_PLLSAI1_IsReady>:
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d92:	d101      	bne.n	8005d98 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005dac:	2300      	movs	r3, #0
 8005dae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005db0:	2300      	movs	r3, #0
 8005db2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d034      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005dc8:	d021      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005dca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005dce:	d81b      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005dd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dd4:	d01d      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005dd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dda:	d815      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00b      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005de4:	d110      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005df6:	e00d      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 f94d 	bl	800609c <RCCEx_PLLSAI1_ConfigNP>
 8005e02:	4603      	mov	r3, r0
 8005e04:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e06:	e005      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	77fb      	strb	r3, [r7, #31]
        break;
 8005e0c:	e002      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e14:	7ffb      	ldrb	r3, [r7, #31]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d105      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff fee8 	bl	8005bf4 <LL_RCC_SetSAIClockSource>
 8005e24:	e001      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e26:	7ffb      	ldrb	r3, [r7, #31]
 8005e28:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d046      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005e36:	f7ff ff56 	bl	8005ce6 <LL_RCC_GetRTCClockSource>
 8005e3a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d03c      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005e46:	f7fe fc1b 	bl	8004680 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d105      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff ff30 	bl	8005cba <LL_RCC_SetRTCClockSource>
 8005e5a:	e02e      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e64:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005e66:	f7ff ff4b 	bl	8005d00 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005e6a:	f7ff ff5a 	bl	8005d22 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005e86:	f7ff fde1 	bl	8005a4c <LL_RCC_LSE_IsEnabled>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d114      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e90:	f7fc f90e 	bl	80020b0 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005e96:	e00b      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e98:	f7fc f90a 	bl	80020b0 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d902      	bls.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	77fb      	strb	r3, [r7, #31]
              break;
 8005eae:	e004      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005eb0:	f7ff fdde 	bl	8005a70 <LL_RCC_LSE_IsReady>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d1ee      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005eba:	7ffb      	ldrb	r3, [r7, #31]
 8005ebc:	77bb      	strb	r3, [r7, #30]
 8005ebe:	e001      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec0:	7ffb      	ldrb	r3, [r7, #31]
 8005ec2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fe2a 	bl	8005b2e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fe35 	bl	8005b5a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fe5d 	bl	8005bc0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fe52 	bl	8005bc0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff fe2a 	bl	8005b86 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d004      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fe1f 	bl	8005b86 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d022      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fe8d 	bl	8005c78 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f66:	d107      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f76:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f80:	d10b      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 f8e3 	bl	8006152 <RCCEx_PLLSAI1_ConfigNQ>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005f90:	7ffb      	ldrb	r3, [r7, #31]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005f96:	7ffb      	ldrb	r3, [r7, #31]
 8005f98:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d02b      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fae:	d008      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb8:	d003      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d105      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fe2a 	bl	8005c20 <LL_RCC_SetRNGClockSource>
 8005fcc:	e00a      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f7ff fe21 	bl	8005c20 <LL_RCC_SetRNGClockSource>
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7ff fe34 	bl	8005c4c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005fec:	d107      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ffc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006006:	2b00      	cmp	r3, #0
 8006008:	d022      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fe3d 	bl	8005c8e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800601c:	d107      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800601e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006036:	d10b      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3304      	adds	r3, #4
 800603c:	4618      	mov	r0, r3
 800603e:	f000 f8e3 	bl	8006208 <RCCEx_PLLSAI1_ConfigNR>
 8006042:	4603      	mov	r3, r0
 8006044:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006046:	7ffb      	ldrb	r3, [r7, #31]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800604c:	7ffb      	ldrb	r3, [r7, #31]
 800604e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff fd26 	bl	8005ab2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff fd45 	bl	8005b06 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff fd2c 	bl	8005ade <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006086:	7fbb      	ldrb	r3, [r7, #30]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006094:	f7ff fcfe 	bl	8005a94 <LL_RCC_MSI_EnablePLLMode>
}
 8006098:	bf00      	nop
 800609a:	bd80      	pop	{r7, pc}

0800609c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80060a8:	f7ff fe5b 	bl	8005d62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060ac:	f7fc f800 	bl	80020b0 <HAL_GetTick>
 80060b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060b2:	e009      	b.n	80060c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060b4:	f7fb fffc 	bl	80020b0 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d902      	bls.n	80060c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	73fb      	strb	r3, [r7, #15]
      break;
 80060c6:	e004      	b.n	80060d2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060c8:	f7ff fe5a 	bl	8005d80 <LL_RCC_PLLSAI1_IsReady>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f0      	bne.n	80060b4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d137      	bne.n	8006148 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80060d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ec:	4313      	orrs	r3, r2
 80060ee:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80060f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006102:	4313      	orrs	r3, r2
 8006104:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006106:	f7ff fe1d 	bl	8005d44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800610a:	f7fb ffd1 	bl	80020b0 <HAL_GetTick>
 800610e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006110:	e009      	b.n	8006126 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006112:	f7fb ffcd 	bl	80020b0 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d902      	bls.n	8006126 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	73fb      	strb	r3, [r7, #15]
        break;
 8006124:	e004      	b.n	8006130 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006126:	f7ff fe2b 	bl	8005d80 <LL_RCC_PLLSAI1_IsReady>
 800612a:	4603      	mov	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d1f0      	bne.n	8006112 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d108      	bne.n	8006148 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006144:	4313      	orrs	r3, r2
 8006146:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800615e:	f7ff fe00 	bl	8005d62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006162:	f7fb ffa5 	bl	80020b0 <HAL_GetTick>
 8006166:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006168:	e009      	b.n	800617e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800616a:	f7fb ffa1 	bl	80020b0 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d902      	bls.n	800617e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	73fb      	strb	r3, [r7, #15]
      break;
 800617c:	e004      	b.n	8006188 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800617e:	f7ff fdff 	bl	8005d80 <LL_RCC_PLLSAI1_IsReady>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1f0      	bne.n	800616a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d137      	bne.n	80061fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800618e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061a2:	4313      	orrs	r3, r2
 80061a4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80061a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061b8:	4313      	orrs	r3, r2
 80061ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80061bc:	f7ff fdc2 	bl	8005d44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c0:	f7fb ff76 	bl	80020b0 <HAL_GetTick>
 80061c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80061c6:	e009      	b.n	80061dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061c8:	f7fb ff72 	bl	80020b0 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d902      	bls.n	80061dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	73fb      	strb	r3, [r7, #15]
        break;
 80061da:	e004      	b.n	80061e6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80061dc:	f7ff fdd0 	bl	8005d80 <LL_RCC_PLLSAI1_IsReady>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d1f0      	bne.n	80061c8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d108      	bne.n	80061fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80061ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061fa:	4313      	orrs	r3, r2
 80061fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006214:	f7ff fda5 	bl	8005d62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006218:	f7fb ff4a 	bl	80020b0 <HAL_GetTick>
 800621c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800621e:	e009      	b.n	8006234 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006220:	f7fb ff46 	bl	80020b0 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d902      	bls.n	8006234 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	73fb      	strb	r3, [r7, #15]
      break;
 8006232:	e004      	b.n	800623e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006234:	f7ff fda4 	bl	8005d80 <LL_RCC_PLLSAI1_IsReady>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f0      	bne.n	8006220 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d137      	bne.n	80062b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006258:	4313      	orrs	r3, r2
 800625a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800625c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800626e:	4313      	orrs	r3, r2
 8006270:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006272:	f7ff fd67 	bl	8005d44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006276:	f7fb ff1b 	bl	80020b0 <HAL_GetTick>
 800627a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800627c:	e009      	b.n	8006292 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800627e:	f7fb ff17 	bl	80020b0 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d902      	bls.n	8006292 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	73fb      	strb	r3, [r7, #15]
        break;
 8006290:	e004      	b.n	800629c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006292:	f7ff fd75 	bl	8005d80 <LL_RCC_PLLSAI1_IsReady>
 8006296:	4603      	mov	r3, r0
 8006298:	2b01      	cmp	r3, #1
 800629a:	d1f0      	bne.n	800627e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d108      	bne.n	80062b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80062a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062b0:	4313      	orrs	r3, r2
 80062b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e049      	b.n	8006364 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f841 	bl	800636c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3304      	adds	r3, #4
 80062fa:	4619      	mov	r1, r3
 80062fc:	4610      	mov	r0, r2
 80062fe:	f000 f9b7 	bl	8006670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b01      	cmp	r3, #1
 8006392:	d001      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e036      	b.n	8006406 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a17      	ldr	r2, [pc, #92]	; (8006414 <HAL_TIM_Base_Start_IT+0x94>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d004      	beq.n	80063c4 <HAL_TIM_Base_Start_IT+0x44>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c2:	d115      	bne.n	80063f0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <HAL_TIM_Base_Start_IT+0x98>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b06      	cmp	r3, #6
 80063d4:	d015      	beq.n	8006402 <HAL_TIM_Base_Start_IT+0x82>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063dc:	d011      	beq.n	8006402 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f042 0201 	orr.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ee:	e008      	b.n	8006402 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e000      	b.n	8006404 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006402:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40012c00 	.word	0x40012c00
 8006418:	00010007 	.word	0x00010007

0800641c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d020      	beq.n	8006480 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01b      	beq.n	8006480 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0202 	mvn.w	r2, #2
 8006450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f8e4 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 800646c:	e005      	b.n	800647a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f8d6 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8e7 	bl	8006648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d020      	beq.n	80064cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01b      	beq.n	80064cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0204 	mvn.w	r2, #4
 800649c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2202      	movs	r2, #2
 80064a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f8be 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 80064b8:	e005      	b.n	80064c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f8b0 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f8c1 	bl	8006648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d020      	beq.n	8006518 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01b      	beq.n	8006518 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0208 	mvn.w	r2, #8
 80064e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2204      	movs	r2, #4
 80064ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f898 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f88a 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f89b 	bl	8006648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b00      	cmp	r3, #0
 8006520:	d020      	beq.n	8006564 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01b      	beq.n	8006564 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0210 	mvn.w	r2, #16
 8006534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2208      	movs	r2, #8
 800653a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f872 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 8006550:	e005      	b.n	800655e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f864 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f875 	bl	8006648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00c      	beq.n	8006588 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0201 	mvn.w	r2, #1
 8006580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fb fa40 	bl	8001a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00c      	beq.n	80065ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006598:	2b00      	cmp	r3, #0
 800659a:	d007      	beq.n	80065ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f8d0 	bl	800674c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00c      	beq.n	80065d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d007      	beq.n	80065d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f8c8 	bl	8006760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00c      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f834 	bl	800665c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00c      	beq.n	8006618 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d007      	beq.n	8006618 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0220 	mvn.w	r2, #32
 8006610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f890 	bl	8006738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a2a      	ldr	r2, [pc, #168]	; (800672c <TIM_Base_SetConfig+0xbc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_Base_SetConfig+0x20>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668e:	d108      	bne.n	80066a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a21      	ldr	r2, [pc, #132]	; (800672c <TIM_Base_SetConfig+0xbc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00b      	beq.n	80066c2 <TIM_Base_SetConfig+0x52>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b0:	d007      	beq.n	80066c2 <TIM_Base_SetConfig+0x52>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a1e      	ldr	r2, [pc, #120]	; (8006730 <TIM_Base_SetConfig+0xc0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_Base_SetConfig+0x52>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a1d      	ldr	r2, [pc, #116]	; (8006734 <TIM_Base_SetConfig+0xc4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d108      	bne.n	80066d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a0c      	ldr	r2, [pc, #48]	; (800672c <TIM_Base_SetConfig+0xbc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_Base_SetConfig+0xa0>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a0b      	ldr	r2, [pc, #44]	; (8006730 <TIM_Base_SetConfig+0xc0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_Base_SetConfig+0xa0>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a0a      	ldr	r2, [pc, #40]	; (8006734 <TIM_Base_SetConfig+0xc4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d103      	bne.n	8006718 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	615a      	str	r2, [r3, #20]
}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40012c00 	.word	0x40012c00
 8006730:	40014400 	.word	0x40014400
 8006734:	40014800 	.word	0x40014800

08006738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <LL_RCC_GetUSARTClockSource>:
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800677c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006780:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4013      	ands	r3, r2
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <LL_RCC_GetLPUARTClockSource>:
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800679c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4013      	ands	r3, r2
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e042      	b.n	800684c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d106      	bne.n	80067de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7fb fa23 	bl	8001c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2224      	movs	r2, #36	; 0x24
 80067e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0201 	bic.w	r2, r2, #1
 80067f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 f914 	bl	8007a2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fee9 	bl	80075dc <UART_SetConfig>
 800680a:	4603      	mov	r3, r0
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e01b      	b.n	800684c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 f993 	bl	8007b70 <UART_CheckIdleState>
 800684a:	4603      	mov	r3, r0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006854:	b480      	push	{r7}
 8006856:	b091      	sub	sp, #68	; 0x44
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	4613      	mov	r3, r2
 8006860:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006868:	2b20      	cmp	r3, #32
 800686a:	d178      	bne.n	800695e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_UART_Transmit_IT+0x24>
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e071      	b.n	8006960 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	88fa      	ldrh	r2, [r7, #6]
 8006886:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	88fa      	ldrh	r2, [r7, #6]
 800688e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2221      	movs	r2, #33	; 0x21
 80068a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b0:	d12a      	bne.n	8006908 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ba:	d107      	bne.n	80068cc <HAL_UART_Transmit_IT+0x78>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d103      	bne.n	80068cc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4a29      	ldr	r2, [pc, #164]	; (800696c <HAL_UART_Transmit_IT+0x118>)
 80068c8:	679a      	str	r2, [r3, #120]	; 0x78
 80068ca:	e002      	b.n	80068d2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4a28      	ldr	r2, [pc, #160]	; (8006970 <HAL_UART_Transmit_IT+0x11c>)
 80068d0:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068f2:	637a      	str	r2, [r7, #52]	; 0x34
 80068f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e5      	bne.n	80068d2 <HAL_UART_Transmit_IT+0x7e>
 8006906:	e028      	b.n	800695a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006910:	d107      	bne.n	8006922 <HAL_UART_Transmit_IT+0xce>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a15      	ldr	r2, [pc, #84]	; (8006974 <HAL_UART_Transmit_IT+0x120>)
 800691e:	679a      	str	r2, [r3, #120]	; 0x78
 8006920:	e002      	b.n	8006928 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a14      	ldr	r2, [pc, #80]	; (8006978 <HAL_UART_Transmit_IT+0x124>)
 8006926:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	613b      	str	r3, [r7, #16]
   return(result);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006946:	623b      	str	r3, [r7, #32]
 8006948:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	69f9      	ldr	r1, [r7, #28]
 800694c:	6a3a      	ldr	r2, [r7, #32]
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	61bb      	str	r3, [r7, #24]
   return(result);
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	e000      	b.n	8006960 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800695e:	2302      	movs	r3, #2
  }
}
 8006960:	4618      	mov	r0, r3
 8006962:	3744      	adds	r7, #68	; 0x44
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	080087e3 	.word	0x080087e3
 8006970:	08008703 	.word	0x08008703
 8006974:	08008641 	.word	0x08008641
 8006978:	08008589 	.word	0x08008589

0800697c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08a      	sub	sp, #40	; 0x28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	4613      	mov	r3, r2
 8006988:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006990:	2b20      	cmp	r3, #32
 8006992:	d137      	bne.n	8006a04 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <HAL_UART_Receive_IT+0x24>
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e030      	b.n	8006a06 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a18      	ldr	r2, [pc, #96]	; (8006a10 <HAL_UART_Receive_IT+0x94>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d01f      	beq.n	80069f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d018      	beq.n	80069f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	613b      	str	r3, [r7, #16]
   return(result);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	623b      	str	r3, [r7, #32]
 80069e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	69f9      	ldr	r1, [r7, #28]
 80069e6:	6a3a      	ldr	r2, [r7, #32]
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e6      	bne.n	80069c2 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069f4:	88fb      	ldrh	r3, [r7, #6]
 80069f6:	461a      	mov	r2, r3
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f001 f9ca 	bl	8007d94 <UART_Start_Receive_IT>
 8006a00:	4603      	mov	r3, r0
 8006a02:	e000      	b.n	8006a06 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a04:	2302      	movs	r3, #2
  }
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3728      	adds	r7, #40	; 0x28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	40008000 	.word	0x40008000

08006a14 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d167      	bne.n	8006afc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <HAL_UART_Transmit_DMA+0x24>
 8006a32:	88fb      	ldrh	r3, [r7, #6]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e060      	b.n	8006afe <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	88fa      	ldrh	r2, [r7, #6]
 8006a46:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	88fa      	ldrh	r2, [r7, #6]
 8006a4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2221      	movs	r2, #33	; 0x21
 8006a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d028      	beq.n	8006abc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a6e:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <HAL_UART_Transmit_DMA+0xf4>)
 8006a70:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a76:	4a25      	ldr	r2, [pc, #148]	; (8006b0c <HAL_UART_Transmit_DMA+0xf8>)
 8006a78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a7e:	4a24      	ldr	r2, [pc, #144]	; (8006b10 <HAL_UART_Transmit_DMA+0xfc>)
 8006a80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a86:	2200      	movs	r2, #0
 8006a88:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a92:	4619      	mov	r1, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3328      	adds	r3, #40	; 0x28
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	88fb      	ldrh	r3, [r7, #6]
 8006a9e:	f7fc ff81 	bl	80039a4 <HAL_DMA_Start_IT>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2210      	movs	r2, #16
 8006aac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e020      	b.n	8006afe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2240      	movs	r2, #64	; 0x40
 8006ac2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3308      	adds	r3, #8
 8006aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae4:	623a      	str	r2, [r7, #32]
 8006ae6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	69f9      	ldr	r1, [r7, #28]
 8006aea:	6a3a      	ldr	r2, [r7, #32]
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e5      	bne.n	8006ac4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e000      	b.n	8006afe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3728      	adds	r7, #40	; 0x28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	08008273 	.word	0x08008273
 8006b0c:	0800830d 	.word	0x0800830d
 8006b10:	08008493 	.word	0x08008493

08006b14 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b090      	sub	sp, #64	; 0x40
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b36:	2b80      	cmp	r3, #128	; 0x80
 8006b38:	d139      	bne.n	8006bae <HAL_UART_DMAStop+0x9a>
 8006b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b3c:	2b21      	cmp	r3, #33	; 0x21
 8006b3e:	d136      	bne.n	8006bae <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3308      	adds	r3, #8
 8006b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e5      	bne.n	8006b40 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d015      	beq.n	8006ba8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fc ff8a 	bl	8003a9a <HAL_DMA_Abort>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00d      	beq.n	8006ba8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fd f8ef 	bl	8003d74 <HAL_DMA_GetError>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d105      	bne.n	8006ba8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e047      	b.n	8006c38 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 fabb 	bl	8008124 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb8:	2b40      	cmp	r3, #64	; 0x40
 8006bba:	d13c      	bne.n	8006c36 <HAL_UART_DMAStop+0x122>
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	2b22      	cmp	r3, #34	; 0x22
 8006bc0:	d139      	bne.n	8006c36 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3308      	adds	r3, #8
 8006be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be2:	61ba      	str	r2, [r7, #24]
 8006be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6979      	ldr	r1, [r7, #20]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e5      	bne.n	8006bc2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d017      	beq.n	8006c30 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fc ff47 	bl	8003a9a <HAL_DMA_Abort>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00e      	beq.n	8006c30 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fd f8ab 	bl	8003d74 <HAL_DMA_GetError>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d105      	bne.n	8006c30 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2210      	movs	r2, #16
 8006c28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e003      	b.n	8006c38 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fab8 	bl	80081a6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3740      	adds	r7, #64	; 0x40
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b09a      	sub	sp, #104	; 0x68
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c5c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c66:	657b      	str	r3, [r7, #84]	; 0x54
 8006c68:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e6      	bne.n	8006c48 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	663b      	str	r3, [r7, #96]	; 0x60
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c9e:	643a      	str	r2, [r7, #64]	; 0x40
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e3      	bne.n	8006c7a <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d118      	bne.n	8006cec <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f023 0310 	bic.w	r3, r3, #16
 8006cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cda:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e6      	bne.n	8006cba <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf6:	2b40      	cmp	r3, #64	; 0x40
 8006cf8:	d154      	bne.n	8006da4 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3308      	adds	r3, #8
 8006d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d10:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d1a:	61ba      	str	r2, [r7, #24]
 8006d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6979      	ldr	r1, [r7, #20]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	613b      	str	r3, [r7, #16]
   return(result);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e5      	bne.n	8006cfa <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d017      	beq.n	8006d68 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d3e:	4a26      	ldr	r2, [pc, #152]	; (8006dd8 <HAL_UART_AbortReceive_IT+0x198>)
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fc ff05 	bl	8003b58 <HAL_DMA_Abort_IT>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d03c      	beq.n	8006dce <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006d62:	4610      	mov	r0, r2
 8006d64:	4798      	blx	r3
 8006d66:	e032      	b.n	8006dce <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	220f      	movs	r2, #15
 8006d7c:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	699a      	ldr	r2, [r3, #24]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0208 	orr.w	r2, r2, #8
 8006d8c:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fb55 	bl	800744c <HAL_UART_AbortReceiveCpltCallback>
 8006da2:	e014      	b.n	8006dce <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	220f      	movs	r2, #15
 8006db8:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fb3f 	bl	800744c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3768      	adds	r7, #104	; 0x68
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	0800853f 	.word	0x0800853f

08006ddc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b0ba      	sub	sp, #232	; 0xe8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e06:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11b      	bne.n	8006e50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d015      	beq.n	8006e50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d105      	bne.n	8006e3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d009      	beq.n	8006e50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 82e3 	beq.w	800740c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
      }
      return;
 8006e4e:	e2dd      	b.n	800740c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 8123 	beq.w	80070a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006e5e:	4b8d      	ldr	r3, [pc, #564]	; (8007094 <HAL_UART_IRQHandler+0x2b8>)
 8006e60:	4013      	ands	r3, r2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e6a:	4b8b      	ldr	r3, [pc, #556]	; (8007098 <HAL_UART_IRQHandler+0x2bc>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 8116 	beq.w	80070a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d011      	beq.n	8006ea4 <HAL_UART_IRQHandler+0xc8>
 8006e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2201      	movs	r2, #1
 8006e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9a:	f043 0201 	orr.w	r2, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d011      	beq.n	8006ed4 <HAL_UART_IRQHandler+0xf8>
 8006eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eca:	f043 0204 	orr.w	r2, r3, #4
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d011      	beq.n	8006f04 <HAL_UART_IRQHandler+0x128>
 8006ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efa:	f043 0202 	orr.w	r2, r3, #2
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d017      	beq.n	8006f40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d105      	bne.n	8006f28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f20:	4b5c      	ldr	r3, [pc, #368]	; (8007094 <HAL_UART_IRQHandler+0x2b8>)
 8006f22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f36:	f043 0208 	orr.w	r2, r3, #8
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d012      	beq.n	8006f72 <HAL_UART_IRQHandler+0x196>
 8006f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00c      	beq.n	8006f72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f68:	f043 0220 	orr.w	r2, r3, #32
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 8249 	beq.w	8007410 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d013      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d105      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d007      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc6:	2b40      	cmp	r3, #64	; 0x40
 8006fc8:	d005      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d054      	beq.n	8007080 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 f8e5 	bl	80081a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe6:	2b40      	cmp	r3, #64	; 0x40
 8006fe8:	d146      	bne.n	8007078 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3308      	adds	r3, #8
 8006ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007008:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3308      	adds	r3, #8
 8007012:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007016:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800701a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007022:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800702e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1d9      	bne.n	8006fea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800703c:	2b00      	cmp	r3, #0
 800703e:	d017      	beq.n	8007070 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007046:	4a15      	ldr	r2, [pc, #84]	; (800709c <HAL_UART_IRQHandler+0x2c0>)
 8007048:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007050:	4618      	mov	r0, r3
 8007052:	f7fc fd81 	bl	8003b58 <HAL_DMA_Abort_IT>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d019      	beq.n	8007090 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800706a:	4610      	mov	r0, r2
 800706c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706e:	e00f      	b.n	8007090 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f007 fe07 	bl	800ec84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007076:	e00b      	b.n	8007090 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f007 fe03 	bl	800ec84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707e:	e007      	b.n	8007090 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f007 fdff 	bl	800ec84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800708e:	e1bf      	b.n	8007410 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007090:	bf00      	nop
    return;
 8007092:	e1bd      	b.n	8007410 <HAL_UART_IRQHandler+0x634>
 8007094:	10000001 	.word	0x10000001
 8007098:	04000120 	.word	0x04000120
 800709c:	08008513 	.word	0x08008513

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	f040 8153 	bne.w	8007350 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 814c 	beq.w	8007350 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8145 	beq.w	8007350 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2210      	movs	r2, #16
 80070cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	f040 80bb 	bne.w	8007254 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 818f 	beq.w	8007414 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007100:	429a      	cmp	r2, r3
 8007102:	f080 8187 	bcs.w	8007414 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800710c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	f040 8087 	bne.w	8007232 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800713c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007140:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800714e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007152:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800715a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1da      	bne.n	8007124 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3308      	adds	r3, #8
 8007174:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800717e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3308      	adds	r3, #8
 800718e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007192:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007196:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800719a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e1      	bne.n	800716e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3308      	adds	r3, #8
 80071b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3308      	adds	r3, #8
 80071ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e3      	bne.n	80071aa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007200:	f023 0310 	bic.w	r3, r3, #16
 8007204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007212:	65bb      	str	r3, [r7, #88]	; 0x58
 8007214:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e4      	bne.n	80071f0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800722c:	4618      	mov	r0, r3
 800722e:	f7fc fc34 	bl	8003a9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007244:	b29b      	uxth	r3, r3
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	b29b      	uxth	r3, r3
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f007 fd73 	bl	800ed38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007252:	e0df      	b.n	8007414 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007260:	b29b      	uxth	r3, r3
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800726e:	b29b      	uxth	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 80d1 	beq.w	8007418 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80cc 	beq.w	8007418 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800728e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007294:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072a2:	647b      	str	r3, [r7, #68]	; 0x44
 80072a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e4      	bne.n	8007280 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3308      	adds	r3, #8
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	623b      	str	r3, [r7, #32]
   return(result);
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3308      	adds	r3, #8
 80072da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072de:	633a      	str	r2, [r7, #48]	; 0x30
 80072e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e1      	bne.n	80072b6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	60fb      	str	r3, [r7, #12]
   return(result);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 0310 	bic.w	r3, r3, #16
 800731a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	69b9      	ldr	r1, [r7, #24]
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	617b      	str	r3, [r7, #20]
   return(result);
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e4      	bne.n	8007306 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007342:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f007 fcf5 	bl	800ed38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800734e:	e063      	b.n	8007418 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00e      	beq.n	800737a <HAL_UART_IRQHandler+0x59e>
 800735c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 fff2 	bl	800935c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007378:	e051      	b.n	800741e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800737a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007382:	2b00      	cmp	r3, #0
 8007384:	d014      	beq.n	80073b0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800738a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738e:	2b00      	cmp	r3, #0
 8007390:	d105      	bne.n	800739e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d008      	beq.n	80073b0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d03a      	beq.n	800741c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	4798      	blx	r3
    }
    return;
 80073ae:	e035      	b.n	800741c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d009      	beq.n	80073d0 <HAL_UART_IRQHandler+0x5f4>
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 fa7f 	bl	80088cc <UART_EndTransmit_IT>
    return;
 80073ce:	e026      	b.n	800741e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <HAL_UART_IRQHandler+0x614>
 80073dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 ffcb 	bl	8009384 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073ee:	e016      	b.n	800741e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d010      	beq.n	800741e <HAL_UART_IRQHandler+0x642>
 80073fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007400:	2b00      	cmp	r3, #0
 8007402:	da0c      	bge.n	800741e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 ffb3 	bl	8009370 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800740a:	e008      	b.n	800741e <HAL_UART_IRQHandler+0x642>
      return;
 800740c:	bf00      	nop
 800740e:	e006      	b.n	800741e <HAL_UART_IRQHandler+0x642>
    return;
 8007410:	bf00      	nop
 8007412:	e004      	b.n	800741e <HAL_UART_IRQHandler+0x642>
      return;
 8007414:	bf00      	nop
 8007416:	e002      	b.n	800741e <HAL_UART_IRQHandler+0x642>
      return;
 8007418:	bf00      	nop
 800741a:	e000      	b.n	800741e <HAL_UART_IRQHandler+0x642>
    return;
 800741c:	bf00      	nop
  }
}
 800741e:	37e8      	adds	r7, #232	; 0xe8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8007460:	b480      	push	{r7}
 8007462:	b08f      	sub	sp, #60	; 0x3c
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8007472:	2302      	movs	r3, #2
 8007474:	e042      	b.n	80074fc <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2224      	movs	r2, #36	; 0x24
 8007482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	61fb      	str	r3, [r7, #28]
   return(result);
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f023 030c 	bic.w	r3, r3, #12
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e6      	bne.n	8007486 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f043 0308 	orr.w	r3, r3, #8
 80074cc:	633b      	str	r3, [r7, #48]	; 0x30
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	61bb      	str	r3, [r7, #24]
 80074d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6979      	ldr	r1, [r7, #20]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	613b      	str	r3, [r7, #16]
   return(result);
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e6      	bne.n	80074b8 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	373c      	adds	r7, #60	; 0x3c
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b08f      	sub	sp, #60	; 0x3c
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007516:	2b01      	cmp	r3, #1
 8007518:	d101      	bne.n	800751e <HAL_HalfDuplex_EnableReceiver+0x16>
 800751a:	2302      	movs	r3, #2
 800751c:	e042      	b.n	80075a4 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2224      	movs	r2, #36	; 0x24
 800752a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	61fb      	str	r3, [r7, #28]
   return(result);
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f023 030c 	bic.w	r3, r3, #12
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800754e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e6      	bne.n	800752e <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	60bb      	str	r3, [r7, #8]
   return(result);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f043 0304 	orr.w	r3, r3, #4
 8007574:	633b      	str	r3, [r7, #48]	; 0x30
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6979      	ldr	r1, [r7, #20]
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	613b      	str	r3, [r7, #16]
   return(result);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e6      	bne.n	8007560 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2220      	movs	r2, #32
 8007596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	373c      	adds	r7, #60	; 0x3c
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075be:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075c6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	4313      	orrs	r3, r2
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
	...

080075dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075e0:	b08c      	sub	sp, #48	; 0x30
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	431a      	orrs	r2, r3
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	431a      	orrs	r2, r3
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	4313      	orrs	r3, r2
 8007602:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4baf      	ldr	r3, [pc, #700]	; (80078c8 <UART_SetConfig+0x2ec>)
 800760c:	4013      	ands	r3, r2
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007614:	430b      	orrs	r3, r1
 8007616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4aa4      	ldr	r2, [pc, #656]	; (80078cc <UART_SetConfig+0x2f0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007644:	4313      	orrs	r3, r2
 8007646:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007652:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800765c:	430b      	orrs	r3, r1
 800765e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	f023 010f 	bic.w	r1, r3, #15
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a95      	ldr	r2, [pc, #596]	; (80078d0 <UART_SetConfig+0x2f4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d125      	bne.n	80076cc <UART_SetConfig+0xf0>
 8007680:	2003      	movs	r0, #3
 8007682:	f7ff f877 	bl	8006774 <LL_RCC_GetUSARTClockSource>
 8007686:	4603      	mov	r3, r0
 8007688:	2b03      	cmp	r3, #3
 800768a:	d81b      	bhi.n	80076c4 <UART_SetConfig+0xe8>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <UART_SetConfig+0xb8>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076a5 	.word	0x080076a5
 8007698:	080076b5 	.word	0x080076b5
 800769c:	080076ad 	.word	0x080076ad
 80076a0:	080076bd 	.word	0x080076bd
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076aa:	e042      	b.n	8007732 <UART_SetConfig+0x156>
 80076ac:	2302      	movs	r3, #2
 80076ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076b2:	e03e      	b.n	8007732 <UART_SetConfig+0x156>
 80076b4:	2304      	movs	r3, #4
 80076b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ba:	e03a      	b.n	8007732 <UART_SetConfig+0x156>
 80076bc:	2308      	movs	r3, #8
 80076be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076c2:	e036      	b.n	8007732 <UART_SetConfig+0x156>
 80076c4:	2310      	movs	r3, #16
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ca:	e032      	b.n	8007732 <UART_SetConfig+0x156>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a7e      	ldr	r2, [pc, #504]	; (80078cc <UART_SetConfig+0x2f0>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d12a      	bne.n	800772c <UART_SetConfig+0x150>
 80076d6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80076da:	f7ff f85b 	bl	8006794 <LL_RCC_GetLPUARTClockSource>
 80076de:	4603      	mov	r3, r0
 80076e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076e4:	d01a      	beq.n	800771c <UART_SetConfig+0x140>
 80076e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076ea:	d81b      	bhi.n	8007724 <UART_SetConfig+0x148>
 80076ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076f0:	d00c      	beq.n	800770c <UART_SetConfig+0x130>
 80076f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076f6:	d815      	bhi.n	8007724 <UART_SetConfig+0x148>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <UART_SetConfig+0x128>
 80076fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007700:	d008      	beq.n	8007714 <UART_SetConfig+0x138>
 8007702:	e00f      	b.n	8007724 <UART_SetConfig+0x148>
 8007704:	2300      	movs	r3, #0
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800770a:	e012      	b.n	8007732 <UART_SetConfig+0x156>
 800770c:	2302      	movs	r3, #2
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007712:	e00e      	b.n	8007732 <UART_SetConfig+0x156>
 8007714:	2304      	movs	r3, #4
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800771a:	e00a      	b.n	8007732 <UART_SetConfig+0x156>
 800771c:	2308      	movs	r3, #8
 800771e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007722:	e006      	b.n	8007732 <UART_SetConfig+0x156>
 8007724:	2310      	movs	r3, #16
 8007726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800772a:	e002      	b.n	8007732 <UART_SetConfig+0x156>
 800772c:	2310      	movs	r3, #16
 800772e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a65      	ldr	r2, [pc, #404]	; (80078cc <UART_SetConfig+0x2f0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	f040 8097 	bne.w	800786c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800773e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007742:	2b08      	cmp	r3, #8
 8007744:	d823      	bhi.n	800778e <UART_SetConfig+0x1b2>
 8007746:	a201      	add	r2, pc, #4	; (adr r2, 800774c <UART_SetConfig+0x170>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	08007771 	.word	0x08007771
 8007750:	0800778f 	.word	0x0800778f
 8007754:	08007779 	.word	0x08007779
 8007758:	0800778f 	.word	0x0800778f
 800775c:	0800777f 	.word	0x0800777f
 8007760:	0800778f 	.word	0x0800778f
 8007764:	0800778f 	.word	0x0800778f
 8007768:	0800778f 	.word	0x0800778f
 800776c:	08007787 	.word	0x08007787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007770:	f7fe f85a 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 8007774:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007776:	e010      	b.n	800779a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007778:	4b56      	ldr	r3, [pc, #344]	; (80078d4 <UART_SetConfig+0x2f8>)
 800777a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800777c:	e00d      	b.n	800779a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777e:	f7fd ffd3 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8007782:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007784:	e009      	b.n	800779a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800778c:	e005      	b.n	800779a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007798:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 812b 	beq.w	80079f8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	4a4c      	ldr	r2, [pc, #304]	; (80078d8 <UART_SetConfig+0x2fc>)
 80077a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ac:	461a      	mov	r2, r3
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	4613      	mov	r3, r2
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	4413      	add	r3, r2
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d305      	bcc.n	80077d2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d903      	bls.n	80077da <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077d8:	e10e      	b.n	80079f8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	2200      	movs	r2, #0
 80077de:	60bb      	str	r3, [r7, #8]
 80077e0:	60fa      	str	r2, [r7, #12]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	4a3c      	ldr	r2, [pc, #240]	; (80078d8 <UART_SetConfig+0x2fc>)
 80077e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2200      	movs	r2, #0
 80077f0:	603b      	str	r3, [r7, #0]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077fc:	f7f9 f986 	bl	8000b0c <__aeabi_uldivmod>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4610      	mov	r0, r2
 8007806:	4619      	mov	r1, r3
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	f04f 0300 	mov.w	r3, #0
 8007810:	020b      	lsls	r3, r1, #8
 8007812:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007816:	0202      	lsls	r2, r0, #8
 8007818:	6979      	ldr	r1, [r7, #20]
 800781a:	6849      	ldr	r1, [r1, #4]
 800781c:	0849      	lsrs	r1, r1, #1
 800781e:	2000      	movs	r0, #0
 8007820:	460c      	mov	r4, r1
 8007822:	4605      	mov	r5, r0
 8007824:	eb12 0804 	adds.w	r8, r2, r4
 8007828:	eb43 0905 	adc.w	r9, r3, r5
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	469a      	mov	sl, r3
 8007834:	4693      	mov	fp, r2
 8007836:	4652      	mov	r2, sl
 8007838:	465b      	mov	r3, fp
 800783a:	4640      	mov	r0, r8
 800783c:	4649      	mov	r1, r9
 800783e:	f7f9 f965 	bl	8000b0c <__aeabi_uldivmod>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4613      	mov	r3, r2
 8007848:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007850:	d308      	bcc.n	8007864 <UART_SetConfig+0x288>
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007858:	d204      	bcs.n	8007864 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6a3a      	ldr	r2, [r7, #32]
 8007860:	60da      	str	r2, [r3, #12]
 8007862:	e0c9      	b.n	80079f8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800786a:	e0c5      	b.n	80079f8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007874:	d16d      	bne.n	8007952 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007876:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800787a:	3b01      	subs	r3, #1
 800787c:	2b07      	cmp	r3, #7
 800787e:	d82d      	bhi.n	80078dc <UART_SetConfig+0x300>
 8007880:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <UART_SetConfig+0x2ac>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	080078a9 	.word	0x080078a9
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078dd 	.word	0x080078dd
 8007894:	080078b7 	.word	0x080078b7
 8007898:	080078dd 	.word	0x080078dd
 800789c:	080078dd 	.word	0x080078dd
 80078a0:	080078dd 	.word	0x080078dd
 80078a4:	080078bf 	.word	0x080078bf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078a8:	f7fd ffd4 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 80078ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078ae:	e01b      	b.n	80078e8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078b0:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <UART_SetConfig+0x2f8>)
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078b4:	e018      	b.n	80078e8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078b6:	f7fd ff37 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 80078ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078bc:	e014      	b.n	80078e8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078c4:	e010      	b.n	80078e8 <UART_SetConfig+0x30c>
 80078c6:	bf00      	nop
 80078c8:	cfff69f3 	.word	0xcfff69f3
 80078cc:	40008000 	.word	0x40008000
 80078d0:	40013800 	.word	0x40013800
 80078d4:	00f42400 	.word	0x00f42400
 80078d8:	0800f0ec 	.word	0x0800f0ec
      default:
        pclk = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80078e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 8084 	beq.w	80079f8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	4a4b      	ldr	r2, [pc, #300]	; (8007a24 <UART_SetConfig+0x448>)
 80078f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078fa:	461a      	mov	r2, r3
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007902:	005a      	lsls	r2, r3, #1
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	085b      	lsrs	r3, r3, #1
 800790a:	441a      	add	r2, r3
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	fbb2 f3f3 	udiv	r3, r2, r3
 8007914:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	2b0f      	cmp	r3, #15
 800791a:	d916      	bls.n	800794a <UART_SetConfig+0x36e>
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007922:	d212      	bcs.n	800794a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	b29b      	uxth	r3, r3
 8007928:	f023 030f 	bic.w	r3, r3, #15
 800792c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	085b      	lsrs	r3, r3, #1
 8007932:	b29b      	uxth	r3, r3
 8007934:	f003 0307 	and.w	r3, r3, #7
 8007938:	b29a      	uxth	r2, r3
 800793a:	8bfb      	ldrh	r3, [r7, #30]
 800793c:	4313      	orrs	r3, r2
 800793e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	8bfa      	ldrh	r2, [r7, #30]
 8007946:	60da      	str	r2, [r3, #12]
 8007948:	e056      	b.n	80079f8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007950:	e052      	b.n	80079f8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007952:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007956:	3b01      	subs	r3, #1
 8007958:	2b07      	cmp	r3, #7
 800795a:	d822      	bhi.n	80079a2 <UART_SetConfig+0x3c6>
 800795c:	a201      	add	r2, pc, #4	; (adr r2, 8007964 <UART_SetConfig+0x388>)
 800795e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007962:	bf00      	nop
 8007964:	08007985 	.word	0x08007985
 8007968:	0800798d 	.word	0x0800798d
 800796c:	080079a3 	.word	0x080079a3
 8007970:	08007993 	.word	0x08007993
 8007974:	080079a3 	.word	0x080079a3
 8007978:	080079a3 	.word	0x080079a3
 800797c:	080079a3 	.word	0x080079a3
 8007980:	0800799b 	.word	0x0800799b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007984:	f7fd ff66 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 8007988:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800798a:	e010      	b.n	80079ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800798c:	4b26      	ldr	r3, [pc, #152]	; (8007a28 <UART_SetConfig+0x44c>)
 800798e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007990:	e00d      	b.n	80079ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007992:	f7fd fec9 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8007996:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007998:	e009      	b.n	80079ae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800799a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079a0:	e005      	b.n	80079ae <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80079ac:	bf00      	nop
    }

    if (pclk != 0U)
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d021      	beq.n	80079f8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <UART_SetConfig+0x448>)
 80079ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079be:	461a      	mov	r2, r3
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	085b      	lsrs	r3, r3, #1
 80079cc:	441a      	add	r2, r3
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	2b0f      	cmp	r3, #15
 80079dc:	d909      	bls.n	80079f2 <UART_SetConfig+0x416>
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e4:	d205      	bcs.n	80079f2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60da      	str	r2, [r3, #12]
 80079f0:	e002      	b.n	80079f8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2200      	movs	r2, #0
 8007a12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007a14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3730      	adds	r7, #48	; 0x30
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a22:	bf00      	nop
 8007a24:	0800f0ec 	.word	0x0800f0ec
 8007a28:	00f42400 	.word	0x00f42400

08007a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	f003 0308 	and.w	r3, r3, #8
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00a      	beq.n	8007a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00a      	beq.n	8007a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	f003 0304 	and.w	r3, r3, #4
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00a      	beq.n	8007abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac0:	f003 0310 	and.w	r3, r3, #16
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00a      	beq.n	8007ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	f003 0320 	and.w	r3, r3, #32
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01a      	beq.n	8007b42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b2a:	d10a      	bne.n	8007b42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]
  }
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b098      	sub	sp, #96	; 0x60
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b80:	f7fa fa96 	bl	80020b0 <HAL_GetTick>
 8007b84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0308 	and.w	r3, r3, #8
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d12f      	bne.n	8007bf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f88e 	bl	8007cc4 <UART_WaitOnFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d022      	beq.n	8007bf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8007bce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e6      	bne.n	8007bae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e063      	b.n	8007cbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d149      	bne.n	8007c96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f857 	bl	8007cc4 <UART_WaitOnFlagUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d03c      	beq.n	8007c96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	623b      	str	r3, [r7, #32]
   return(result);
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007c3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e6      	bne.n	8007c1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3308      	adds	r3, #8
 8007c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c6e:	61fa      	str	r2, [r7, #28]
 8007c70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	69b9      	ldr	r1, [r7, #24]
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e5      	bne.n	8007c4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e012      	b.n	8007cbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3758      	adds	r7, #88	; 0x58
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cd4:	e049      	b.n	8007d6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cdc:	d045      	beq.n	8007d6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cde:	f7fa f9e7 	bl	80020b0 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d302      	bcc.n	8007cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e048      	b.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0304 	and.w	r3, r3, #4
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d031      	beq.n	8007d6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f003 0308 	and.w	r3, r3, #8
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d110      	bne.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2208      	movs	r2, #8
 8007d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fa42 	bl	80081a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2208      	movs	r2, #8
 8007d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e029      	b.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d44:	d111      	bne.n	8007d6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 fa28 	bl	80081a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e00f      	b.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	69da      	ldr	r2, [r3, #28]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4013      	ands	r3, r2
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	bf0c      	ite	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	2300      	movne	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d0a6      	beq.n	8007cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b0a3      	sub	sp, #140	; 0x8c
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	88fa      	ldrh	r2, [r7, #6]
 8007dac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	88fa      	ldrh	r2, [r7, #6]
 8007db4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc6:	d10e      	bne.n	8007de6 <UART_Start_Receive_IT+0x52>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d105      	bne.n	8007ddc <UART_Start_Receive_IT+0x48>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007dd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dda:	e02d      	b.n	8007e38 <UART_Start_Receive_IT+0xa4>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	22ff      	movs	r2, #255	; 0xff
 8007de0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007de4:	e028      	b.n	8007e38 <UART_Start_Receive_IT+0xa4>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10d      	bne.n	8007e0a <UART_Start_Receive_IT+0x76>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d104      	bne.n	8007e00 <UART_Start_Receive_IT+0x6c>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	22ff      	movs	r2, #255	; 0xff
 8007dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dfe:	e01b      	b.n	8007e38 <UART_Start_Receive_IT+0xa4>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	227f      	movs	r2, #127	; 0x7f
 8007e04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e08:	e016      	b.n	8007e38 <UART_Start_Receive_IT+0xa4>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e12:	d10d      	bne.n	8007e30 <UART_Start_Receive_IT+0x9c>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <UART_Start_Receive_IT+0x92>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	227f      	movs	r2, #127	; 0x7f
 8007e20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e24:	e008      	b.n	8007e38 <UART_Start_Receive_IT+0xa4>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	223f      	movs	r2, #63	; 0x3f
 8007e2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e2e:	e003      	b.n	8007e38 <UART_Start_Receive_IT+0xa4>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2222      	movs	r2, #34	; 0x22
 8007e44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007e58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3308      	adds	r3, #8
 8007e68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007e6c:	673a      	str	r2, [r7, #112]	; 0x70
 8007e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007e72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e3      	bne.n	8007e48 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e88:	d14f      	bne.n	8007f2a <UART_Start_Receive_IT+0x196>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e90:	88fa      	ldrh	r2, [r7, #6]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d349      	bcc.n	8007f2a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9e:	d107      	bne.n	8007eb0 <UART_Start_Receive_IT+0x11c>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d103      	bne.n	8007eb0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4a47      	ldr	r2, [pc, #284]	; (8007fc8 <UART_Start_Receive_IT+0x234>)
 8007eac:	675a      	str	r2, [r3, #116]	; 0x74
 8007eae:	e002      	b.n	8007eb6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4a46      	ldr	r2, [pc, #280]	; (8007fcc <UART_Start_Receive_IT+0x238>)
 8007eb4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01a      	beq.n	8007ef4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ed2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ee2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ee6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e4      	bne.n	8007ebe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3308      	adds	r3, #8
 8007efa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3308      	adds	r3, #8
 8007f12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007f14:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f16:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e5      	bne.n	8007ef4 <UART_Start_Receive_IT+0x160>
 8007f28:	e046      	b.n	8007fb8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f32:	d107      	bne.n	8007f44 <UART_Start_Receive_IT+0x1b0>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d103      	bne.n	8007f44 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4a24      	ldr	r2, [pc, #144]	; (8007fd0 <UART_Start_Receive_IT+0x23c>)
 8007f40:	675a      	str	r2, [r3, #116]	; 0x74
 8007f42:	e002      	b.n	8007f4a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4a23      	ldr	r2, [pc, #140]	; (8007fd4 <UART_Start_Receive_IT+0x240>)
 8007f48:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d019      	beq.n	8007f86 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	e853 3f00 	ldrex	r3, [r3]
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007f66:	677b      	str	r3, [r7, #116]	; 0x74
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f70:	637b      	str	r3, [r7, #52]	; 0x34
 8007f72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f78:	e841 2300 	strex	r3, r2, [r1]
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1e6      	bne.n	8007f52 <UART_Start_Receive_IT+0x1be>
 8007f84:	e018      	b.n	8007fb8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	613b      	str	r3, [r7, #16]
   return(result);
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f043 0320 	orr.w	r3, r3, #32
 8007f9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fa4:	623b      	str	r3, [r7, #32]
 8007fa6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	69f9      	ldr	r1, [r7, #28]
 8007faa:	6a3a      	ldr	r2, [r7, #32]
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e6      	bne.n	8007f86 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	378c      	adds	r7, #140	; 0x8c
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	08008ff5 	.word	0x08008ff5
 8007fcc:	08008c95 	.word	0x08008c95
 8007fd0:	08008add 	.word	0x08008add
 8007fd4:	08008925 	.word	0x08008925

08007fd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b096      	sub	sp, #88	; 0x58
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	88fa      	ldrh	r2, [r7, #6]
 8007ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2222      	movs	r2, #34	; 0x22
 8008000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800800a:	2b00      	cmp	r3, #0
 800800c:	d02d      	beq.n	800806a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008014:	4a40      	ldr	r2, [pc, #256]	; (8008118 <UART_Start_Receive_DMA+0x140>)
 8008016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800801e:	4a3f      	ldr	r2, [pc, #252]	; (800811c <UART_Start_Receive_DMA+0x144>)
 8008020:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008028:	4a3d      	ldr	r2, [pc, #244]	; (8008120 <UART_Start_Receive_DMA+0x148>)
 800802a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008032:	2200      	movs	r2, #0
 8008034:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3324      	adds	r3, #36	; 0x24
 8008042:	4619      	mov	r1, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008048:	461a      	mov	r2, r3
 800804a:	88fb      	ldrh	r3, [r7, #6]
 800804c:	f7fb fcaa 	bl	80039a4 <HAL_DMA_Start_IT>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d009      	beq.n	800806a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2210      	movs	r2, #16
 800805a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2220      	movs	r2, #32
 8008062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e051      	b.n	800810e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d018      	beq.n	80080a4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807a:	e853 3f00 	ldrex	r3, [r3]
 800807e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008086:	657b      	str	r3, [r7, #84]	; 0x54
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008090:	64bb      	str	r3, [r7, #72]	; 0x48
 8008092:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800809e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e6      	bne.n	8008072 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3308      	adds	r3, #8
 80080aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	f043 0301 	orr.w	r3, r3, #1
 80080ba:	653b      	str	r3, [r7, #80]	; 0x50
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3308      	adds	r3, #8
 80080c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080c4:	637a      	str	r2, [r7, #52]	; 0x34
 80080c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e5      	bne.n	80080a4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3308      	adds	r3, #8
 80080de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	613b      	str	r3, [r7, #16]
   return(result);
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3308      	adds	r3, #8
 80080f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080f8:	623a      	str	r2, [r7, #32]
 80080fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	69f9      	ldr	r1, [r7, #28]
 80080fe:	6a3a      	ldr	r2, [r7, #32]
 8008100:	e841 2300 	strex	r3, r2, [r1]
 8008104:	61bb      	str	r3, [r7, #24]
   return(result);
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e5      	bne.n	80080d8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3758      	adds	r7, #88	; 0x58
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	08008329 	.word	0x08008329
 800811c:	08008455 	.word	0x08008455
 8008120:	08008493 	.word	0x08008493

08008124 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008124:	b480      	push	{r7}
 8008126:	b08f      	sub	sp, #60	; 0x3c
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	61fb      	str	r3, [r7, #28]
   return(result);
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008140:	637b      	str	r3, [r7, #52]	; 0x34
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800814c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e6      	bne.n	800812c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3308      	adds	r3, #8
 8008164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	60bb      	str	r3, [r7, #8]
   return(result);
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008174:	633b      	str	r3, [r7, #48]	; 0x30
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3308      	adds	r3, #8
 800817c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800817e:	61ba      	str	r2, [r7, #24]
 8008180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	6979      	ldr	r1, [r7, #20]
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	e841 2300 	strex	r3, r2, [r1]
 800818a:	613b      	str	r3, [r7, #16]
   return(result);
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e5      	bne.n	800815e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2220      	movs	r2, #32
 8008196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800819a:	bf00      	nop
 800819c:	373c      	adds	r7, #60	; 0x3c
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b095      	sub	sp, #84	; 0x54
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b6:	e853 3f00 	ldrex	r3, [r3]
 80081ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081cc:	643b      	str	r3, [r7, #64]	; 0x40
 80081ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081d4:	e841 2300 	strex	r3, r2, [r1]
 80081d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e6      	bne.n	80081ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3308      	adds	r3, #8
 80081e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	e853 3f00 	ldrex	r3, [r3]
 80081ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081f6:	f023 0301 	bic.w	r3, r3, #1
 80081fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3308      	adds	r3, #8
 8008202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008204:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800820a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e3      	bne.n	80081e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800821c:	2b01      	cmp	r3, #1
 800821e:	d118      	bne.n	8008252 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	60bb      	str	r3, [r7, #8]
   return(result);
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f023 0310 	bic.w	r3, r3, #16
 8008234:	647b      	str	r3, [r7, #68]	; 0x44
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800823e:	61bb      	str	r3, [r7, #24]
 8008240:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6979      	ldr	r1, [r7, #20]
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	613b      	str	r3, [r7, #16]
   return(result);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e6      	bne.n	8008220 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008266:	bf00      	nop
 8008268:	3754      	adds	r7, #84	; 0x54
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b090      	sub	sp, #64	; 0x40
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b00      	cmp	r3, #0
 800828c:	d137      	bne.n	80082fe <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800828e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008290:	2200      	movs	r2, #0
 8008292:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3308      	adds	r3, #8
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	623b      	str	r3, [r7, #32]
   return(result);
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80082ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3308      	adds	r3, #8
 80082b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082b6:	633a      	str	r2, [r7, #48]	; 0x30
 80082b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e5      	bne.n	8008296 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
 80082e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e8:	61fb      	str	r3, [r7, #28]
 80082ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	69b9      	ldr	r1, [r7, #24]
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	617b      	str	r3, [r7, #20]
   return(result);
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e6      	bne.n	80082ca <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082fc:	e002      	b.n	8008304 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80082fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008300:	f006 fc18 	bl	800eb34 <HAL_UART_TxCpltCallback>
}
 8008304:	bf00      	nop
 8008306:	3740      	adds	r7, #64	; 0x40
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008318:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f7ff f882 	bl	8007424 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008320:	bf00      	nop
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b09c      	sub	sp, #112	; 0x70
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0320 	and.w	r3, r3, #32
 8008340:	2b00      	cmp	r3, #0
 8008342:	d171      	bne.n	8008428 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008346:	2200      	movs	r2, #0
 8008348:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800834c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800835a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800835c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008360:	66bb      	str	r3, [r7, #104]	; 0x68
 8008362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800836a:	65bb      	str	r3, [r7, #88]	; 0x58
 800836c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e6      	bne.n	800834c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	667b      	str	r3, [r7, #100]	; 0x64
 8008396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800839e:	647a      	str	r2, [r7, #68]	; 0x44
 80083a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e5      	bne.n	800837e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3308      	adds	r3, #8
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	e853 3f00 	ldrex	r3, [r3]
 80083c0:	623b      	str	r3, [r7, #32]
   return(result);
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c8:	663b      	str	r3, [r7, #96]	; 0x60
 80083ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3308      	adds	r3, #8
 80083d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083d2:	633a      	str	r2, [r7, #48]	; 0x30
 80083d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083da:	e841 2300 	strex	r3, r2, [r1]
 80083de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1e5      	bne.n	80083b2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e8:	2220      	movs	r2, #32
 80083ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d118      	bne.n	8008428 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	60fb      	str	r3, [r7, #12]
   return(result);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f023 0310 	bic.w	r3, r3, #16
 800840a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800840c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008414:	61fb      	str	r3, [r7, #28]
 8008416:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008418:	69b9      	ldr	r1, [r7, #24]
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	e841 2300 	strex	r3, r2, [r1]
 8008420:	617b      	str	r3, [r7, #20]
   return(result);
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e6      	bne.n	80083f6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800842a:	2200      	movs	r2, #0
 800842c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800842e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008432:	2b01      	cmp	r3, #1
 8008434:	d107      	bne.n	8008446 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800843c:	4619      	mov	r1, r3
 800843e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008440:	f006 fc7a 	bl	800ed38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008444:	e002      	b.n	800844c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008446:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008448:	f006 fbb2 	bl	800ebb0 <HAL_UART_RxCpltCallback>
}
 800844c:	bf00      	nop
 800844e:	3770      	adds	r7, #112	; 0x70
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008460:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800846c:	2b01      	cmp	r3, #1
 800846e:	d109      	bne.n	8008484 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008476:	085b      	lsrs	r3, r3, #1
 8008478:	b29b      	uxth	r3, r3
 800847a:	4619      	mov	r1, r3
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f006 fc5b 	bl	800ed38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008482:	e002      	b.n	800848a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f7fe ffd7 	bl	8007438 <HAL_UART_RxHalfCpltCallback>
}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b086      	sub	sp, #24
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ba:	2b80      	cmp	r3, #128	; 0x80
 80084bc:	d109      	bne.n	80084d2 <UART_DMAError+0x40>
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	2b21      	cmp	r3, #33	; 0x21
 80084c2:	d106      	bne.n	80084d2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80084cc:	6978      	ldr	r0, [r7, #20]
 80084ce:	f7ff fe29 	bl	8008124 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	d109      	bne.n	80084f4 <UART_DMAError+0x62>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b22      	cmp	r3, #34	; 0x22
 80084e4:	d106      	bne.n	80084f4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80084ee:	6978      	ldr	r0, [r7, #20]
 80084f0:	f7ff fe59 	bl	80081a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084fa:	f043 0210 	orr.w	r2, r3, #16
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008504:	6978      	ldr	r0, [r7, #20]
 8008506:	f006 fbbd 	bl	800ec84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800850a:	bf00      	nop
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f006 fba7 	bl	800ec84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	220f      	movs	r2, #15
 800855a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699a      	ldr	r2, [r3, #24]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0208 	orr.w	r2, r2, #8
 800856a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2220      	movs	r2, #32
 8008570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f7fe ff66 	bl	800744c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008580:	bf00      	nop
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008588:	b480      	push	{r7}
 800858a:	b08f      	sub	sp, #60	; 0x3c
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008596:	2b21      	cmp	r3, #33	; 0x21
 8008598:	d14c      	bne.n	8008634 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d132      	bne.n	800860c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ba:	637b      	str	r3, [r7, #52]	; 0x34
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	461a      	mov	r2, r3
 80085c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e6      	bne.n	80085a6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ec:	633b      	str	r3, [r7, #48]	; 0x30
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	61bb      	str	r3, [r7, #24]
 80085f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6979      	ldr	r1, [r7, #20]
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	613b      	str	r3, [r7, #16]
   return(result);
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e6      	bne.n	80085d8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800860a:	e013      	b.n	8008634 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008610:	781a      	ldrb	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008628:	b29b      	uxth	r3, r3
 800862a:	3b01      	subs	r3, #1
 800862c:	b29a      	uxth	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008634:	bf00      	nop
 8008636:	373c      	adds	r7, #60	; 0x3c
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008640:	b480      	push	{r7}
 8008642:	b091      	sub	sp, #68	; 0x44
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800864e:	2b21      	cmp	r3, #33	; 0x21
 8008650:	d151      	bne.n	80086f6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d132      	bne.n	80086c4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	623b      	str	r3, [r7, #32]
   return(result);
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008672:	63bb      	str	r3, [r7, #56]	; 0x38
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	633b      	str	r3, [r7, #48]	; 0x30
 800867e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e6      	bne.n	800865e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	e853 3f00 	ldrex	r3, [r3]
 800869c:	60fb      	str	r3, [r7, #12]
   return(result);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ae:	61fb      	str	r3, [r7, #28]
 80086b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	69b9      	ldr	r1, [r7, #24]
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	617b      	str	r3, [r7, #20]
   return(result);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e6      	bne.n	8008690 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80086c2:	e018      	b.n	80086f6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80086ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086d8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086de:	1c9a      	adds	r2, r3, #2
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	3b01      	subs	r3, #1
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80086f6:	bf00      	nop
 80086f8:	3744      	adds	r7, #68	; 0x44
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008702:	b480      	push	{r7}
 8008704:	b091      	sub	sp, #68	; 0x44
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008710:	2b21      	cmp	r3, #33	; 0x21
 8008712:	d160      	bne.n	80087d6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800871a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800871c:	e057      	b.n	80087ce <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d133      	bne.n	8008792 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3308      	adds	r3, #8
 8008730:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	623b      	str	r3, [r7, #32]
   return(result);
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008740:	63bb      	str	r3, [r7, #56]	; 0x38
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800874a:	633a      	str	r2, [r7, #48]	; 0x30
 800874c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1e5      	bne.n	800872a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	60fb      	str	r3, [r7, #12]
   return(result);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008772:	637b      	str	r3, [r7, #52]	; 0x34
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	461a      	mov	r2, r3
 800877a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877c:	61fb      	str	r3, [r7, #28]
 800877e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008780:	69b9      	ldr	r1, [r7, #24]
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	e841 2300 	strex	r3, r2, [r1]
 8008788:	617b      	str	r3, [r7, #20]
   return(result);
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e6      	bne.n	800875e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008790:	e021      	b.n	80087d6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879c:	2b00      	cmp	r3, #0
 800879e:	d013      	beq.n	80087c8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a4:	781a      	ldrb	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b0:	1c5a      	adds	r2, r3, #1
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087bc:	b29b      	uxth	r3, r3
 80087be:	3b01      	subs	r3, #1
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80087c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087ca:	3b01      	subs	r3, #1
 80087cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80087ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1a4      	bne.n	800871e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80087d4:	e7ff      	b.n	80087d6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80087d6:	bf00      	nop
 80087d8:	3744      	adds	r7, #68	; 0x44
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b091      	sub	sp, #68	; 0x44
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f0:	2b21      	cmp	r3, #33	; 0x21
 80087f2:	d165      	bne.n	80088c0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80087fc:	e05c      	b.n	80088b8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d133      	bne.n	8008872 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	61fb      	str	r3, [r7, #28]
   return(result);
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008820:	637b      	str	r3, [r7, #52]	; 0x34
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3308      	adds	r3, #8
 8008828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800882a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800882c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e5      	bne.n	800880a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	e853 3f00 	ldrex	r3, [r3]
 800884a:	60bb      	str	r3, [r7, #8]
   return(result);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008852:	633b      	str	r3, [r7, #48]	; 0x30
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	61bb      	str	r3, [r7, #24]
 800885e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008860:	6979      	ldr	r1, [r7, #20]
 8008862:	69ba      	ldr	r2, [r7, #24]
 8008864:	e841 2300 	strex	r3, r2, [r1]
 8008868:	613b      	str	r3, [r7, #16]
   return(result);
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1e6      	bne.n	800883e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008870:	e026      	b.n	80088c0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887c:	2b00      	cmp	r3, #0
 800887e:	d018      	beq.n	80088b2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008884:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008894:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889a:	1c9a      	adds	r2, r3, #2
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80088b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80088b4:	3b01      	subs	r3, #1
 80088b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80088b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d19f      	bne.n	80087fe <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80088be:	e7ff      	b.n	80088c0 <UART_TxISR_16BIT_FIFOEN+0xde>
 80088c0:	bf00      	nop
 80088c2:	3744      	adds	r7, #68	; 0x44
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088e8:	61fb      	str	r3, [r7, #28]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	61bb      	str	r3, [r7, #24]
 80088f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6979      	ldr	r1, [r7, #20]
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e6      	bne.n	80088d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f006 f90d 	bl	800eb34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800891a:	bf00      	nop
 800891c:	3720      	adds	r7, #32
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b09c      	sub	sp, #112	; 0x70
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008932:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800893c:	2b22      	cmp	r3, #34	; 0x22
 800893e:	f040 80be 	bne.w	8008abe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800894c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008950:	b2d9      	uxtb	r1, r3
 8008952:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008956:	b2da      	uxtb	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895c:	400a      	ands	r2, r1
 800895e:	b2d2      	uxtb	r2, r2
 8008960:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008984:	b29b      	uxth	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	f040 80a1 	bne.w	8008ace <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800899a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800899c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80089ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089b2:	e841 2300 	strex	r3, r2, [r1]
 80089b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e6      	bne.n	800898c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3308      	adds	r3, #8
 80089c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d0:	f023 0301 	bic.w	r3, r3, #1
 80089d4:	667b      	str	r3, [r7, #100]	; 0x64
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3308      	adds	r3, #8
 80089dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80089de:	647a      	str	r2, [r7, #68]	; 0x44
 80089e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e5      	bne.n	80089be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a33      	ldr	r2, [pc, #204]	; (8008ad8 <UART_RxISR_8BIT+0x1b4>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d01f      	beq.n	8008a50 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d018      	beq.n	8008a50 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a32:	663b      	str	r3, [r7, #96]	; 0x60
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8008a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e6      	bne.n	8008a1e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d12e      	bne.n	8008ab6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f023 0310 	bic.w	r3, r3, #16
 8008a72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a7c:	61fb      	str	r3, [r7, #28]
 8008a7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	69b9      	ldr	r1, [r7, #24]
 8008a82:	69fa      	ldr	r2, [r7, #28]
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	617b      	str	r3, [r7, #20]
   return(result);
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e6      	bne.n	8008a5e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	f003 0310 	and.w	r3, r3, #16
 8008a9a:	2b10      	cmp	r3, #16
 8008a9c:	d103      	bne.n	8008aa6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2210      	movs	r2, #16
 8008aa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f006 f942 	bl	800ed38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ab4:	e00b      	b.n	8008ace <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f006 f87a 	bl	800ebb0 <HAL_UART_RxCpltCallback>
}
 8008abc:	e007      	b.n	8008ace <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	699a      	ldr	r2, [r3, #24]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f042 0208 	orr.w	r2, r2, #8
 8008acc:	619a      	str	r2, [r3, #24]
}
 8008ace:	bf00      	nop
 8008ad0:	3770      	adds	r7, #112	; 0x70
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	40008000 	.word	0x40008000

08008adc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b09c      	sub	sp, #112	; 0x70
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008aea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008af4:	2b22      	cmp	r3, #34	; 0x22
 8008af6:	f040 80be 	bne.w	8008c76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b08:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008b0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008b12:	4013      	ands	r3, r2
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1e:	1c9a      	adds	r2, r3, #2
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f040 80a1 	bne.w	8008c86 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b58:	667b      	str	r3, [r7, #100]	; 0x64
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b62:	657b      	str	r3, [r7, #84]	; 0x54
 8008b64:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e6      	bne.n	8008b44 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	f023 0301 	bic.w	r3, r3, #1
 8008b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3308      	adds	r3, #8
 8008b94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b96:	643a      	str	r2, [r7, #64]	; 0x40
 8008b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b9e:	e841 2300 	strex	r3, r2, [r1]
 8008ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1e5      	bne.n	8008b76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2220      	movs	r2, #32
 8008bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a33      	ldr	r2, [pc, #204]	; (8008c90 <UART_RxISR_16BIT+0x1b4>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d01f      	beq.n	8008c08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d018      	beq.n	8008c08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bf6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfc:	e841 2300 	strex	r3, r2, [r1]
 8008c00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e6      	bne.n	8008bd6 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d12e      	bne.n	8008c6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	f023 0310 	bic.w	r3, r3, #16
 8008c2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c34:	61bb      	str	r3, [r7, #24]
 8008c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6979      	ldr	r1, [r7, #20]
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	613b      	str	r3, [r7, #16]
   return(result);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e6      	bne.n	8008c16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	f003 0310 	and.w	r3, r3, #16
 8008c52:	2b10      	cmp	r3, #16
 8008c54:	d103      	bne.n	8008c5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2210      	movs	r2, #16
 8008c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f006 f866 	bl	800ed38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c6c:	e00b      	b.n	8008c86 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f005 ff9e 	bl	800ebb0 <HAL_UART_RxCpltCallback>
}
 8008c74:	e007      	b.n	8008c86 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	699a      	ldr	r2, [r3, #24]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0208 	orr.w	r2, r2, #8
 8008c84:	619a      	str	r2, [r3, #24]
}
 8008c86:	bf00      	nop
 8008c88:	3770      	adds	r7, #112	; 0x70
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	40008000 	.word	0x40008000

08008c94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b0ac      	sub	sp, #176	; 0xb0
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ca2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cca:	2b22      	cmp	r3, #34	; 0x22
 8008ccc:	f040 8182 	bne.w	8008fd4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cd6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cda:	e125      	b.n	8008f28 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ce6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008cea:	b2d9      	uxtb	r1, r3
 8008cec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf6:	400a      	ands	r2, r1
 8008cf8:	b2d2      	uxtb	r2, r2
 8008cfa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d053      	beq.n	8008dd6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d011      	beq.n	8008d5e <UART_RxISR_8BIT_FIFOEN+0xca>
 8008d3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00b      	beq.n	8008d5e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d54:	f043 0201 	orr.w	r2, r3, #1
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d011      	beq.n	8008d8e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00b      	beq.n	8008d8e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d84:	f043 0204 	orr.w	r2, r3, #4
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d011      	beq.n	8008dbe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00b      	beq.n	8008dbe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2204      	movs	r2, #4
 8008dac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db4:	f043 0202 	orr.w	r2, r3, #2
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d006      	beq.n	8008dd6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f005 ff5b 	bl	800ec84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f040 80a2 	bne.w	8008f28 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e08:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008e0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e4      	bne.n	8008de4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e30:	f023 0301 	bic.w	r3, r3, #1
 8008e34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3308      	adds	r3, #8
 8008e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e42:	66ba      	str	r2, [r7, #104]	; 0x68
 8008e44:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008e48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e1      	bne.n	8008e1a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a5f      	ldr	r2, [pc, #380]	; (8008fec <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d021      	beq.n	8008eb8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d01a      	beq.n	8008eb8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e8a:	e853 3f00 	ldrex	r3, [r3]
 8008e8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ea4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ea6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008eaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008eac:	e841 2300 	strex	r3, r2, [r1]
 8008eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e4      	bne.n	8008e82 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d130      	bne.n	8008f22 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	f023 0310 	bic.w	r3, r3, #16
 8008eda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8008eea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008eee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e4      	bne.n	8008ec6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f003 0310 	and.w	r3, r3, #16
 8008f06:	2b10      	cmp	r3, #16
 8008f08:	d103      	bne.n	8008f12 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2210      	movs	r2, #16
 8008f10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f005 ff0c 	bl	800ed38 <HAL_UARTEx_RxEventCallback>
 8008f20:	e002      	b.n	8008f28 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f005 fe44 	bl	800ebb0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f28:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d006      	beq.n	8008f3e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f34:	f003 0320 	and.w	r3, r3, #32
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f47f aecf 	bne.w	8008cdc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d049      	beq.n	8008fe4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f56:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d242      	bcs.n	8008fe4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3308      	adds	r3, #8
 8008f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	e853 3f00 	ldrex	r3, [r3]
 8008f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e3      	bne.n	8008f5e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a15      	ldr	r2, [pc, #84]	; (8008ff0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008f9a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f043 0320 	orr.w	r3, r3, #32
 8008fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008fbe:	61bb      	str	r3, [r7, #24]
 8008fc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc2:	6979      	ldr	r1, [r7, #20]
 8008fc4:	69ba      	ldr	r2, [r7, #24]
 8008fc6:	e841 2300 	strex	r3, r2, [r1]
 8008fca:	613b      	str	r3, [r7, #16]
   return(result);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1e4      	bne.n	8008f9c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fd2:	e007      	b.n	8008fe4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 0208 	orr.w	r2, r2, #8
 8008fe2:	619a      	str	r2, [r3, #24]
}
 8008fe4:	bf00      	nop
 8008fe6:	37b0      	adds	r7, #176	; 0xb0
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	40008000 	.word	0x40008000
 8008ff0:	08008925 	.word	0x08008925

08008ff4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b0ae      	sub	sp, #184	; 0xb8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009002:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800902a:	2b22      	cmp	r3, #34	; 0x22
 800902c:	f040 8186 	bne.w	800933c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009036:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800903a:	e129      	b.n	8009290 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800904a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800904e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009052:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009056:	4013      	ands	r3, r2
 8009058:	b29a      	uxth	r2, r3
 800905a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800905e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009064:	1c9a      	adds	r2, r3, #2
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009070:	b29b      	uxth	r3, r3
 8009072:	3b01      	subs	r3, #1
 8009074:	b29a      	uxth	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009086:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800908a:	f003 0307 	and.w	r3, r3, #7
 800908e:	2b00      	cmp	r3, #0
 8009090:	d053      	beq.n	800913a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009092:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b00      	cmp	r3, #0
 800909c:	d011      	beq.n	80090c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800909e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00b      	beq.n	80090c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2201      	movs	r2, #1
 80090b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b8:	f043 0201 	orr.w	r2, r3, #1
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d011      	beq.n	80090f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80090ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00b      	beq.n	80090f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2202      	movs	r2, #2
 80090e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e8:	f043 0204 	orr.w	r2, r3, #4
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090f6:	f003 0304 	and.w	r3, r3, #4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d011      	beq.n	8009122 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80090fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00b      	beq.n	8009122 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2204      	movs	r2, #4
 8009110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009118:	f043 0202 	orr.w	r2, r3, #2
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009128:	2b00      	cmp	r3, #0
 800912a:	d006      	beq.n	800913a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f005 fda9 	bl	800ec84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009140:	b29b      	uxth	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	f040 80a4 	bne.w	8009290 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800915c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	461a      	mov	r2, r3
 8009166:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800916a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800916e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009172:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800917c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e2      	bne.n	8009148 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3308      	adds	r3, #8
 8009188:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009198:	f023 0301 	bic.w	r3, r3, #1
 800919c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3308      	adds	r3, #8
 80091a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80091aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80091ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80091b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091b2:	e841 2300 	strex	r3, r2, [r1]
 80091b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80091b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e1      	bne.n	8009182 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a5f      	ldr	r2, [pc, #380]	; (8009354 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d021      	beq.n	8009220 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d01a      	beq.n	8009220 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091f2:	e853 3f00 	ldrex	r3, [r3]
 80091f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80091f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800920c:	65bb      	str	r3, [r7, #88]	; 0x58
 800920e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800921a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e4      	bne.n	80091ea <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009224:	2b01      	cmp	r3, #1
 8009226:	d130      	bne.n	800928a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	e853 3f00 	ldrex	r3, [r3]
 800923a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923e:	f023 0310 	bic.w	r3, r3, #16
 8009242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009250:	647b      	str	r3, [r7, #68]	; 0x44
 8009252:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800925e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e4      	bne.n	800922e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	f003 0310 	and.w	r3, r3, #16
 800926e:	2b10      	cmp	r3, #16
 8009270:	d103      	bne.n	800927a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2210      	movs	r2, #16
 8009278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f005 fd58 	bl	800ed38 <HAL_UARTEx_RxEventCallback>
 8009288:	e002      	b.n	8009290 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f005 fc90 	bl	800ebb0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009290:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009294:	2b00      	cmp	r3, #0
 8009296:	d006      	beq.n	80092a6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009298:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f47f aecb 	bne.w	800903c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092ac:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80092b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d049      	beq.n	800934c <UART_RxISR_16BIT_FIFOEN+0x358>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092be:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d242      	bcs.n	800934c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3308      	adds	r3, #8
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	623b      	str	r3, [r7, #32]
   return(result);
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3308      	adds	r3, #8
 80092e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80092ea:	633a      	str	r2, [r7, #48]	; 0x30
 80092ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e3      	bne.n	80092c6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a15      	ldr	r2, [pc, #84]	; (8009358 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009302:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	60fb      	str	r3, [r7, #12]
   return(result);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f043 0320 	orr.w	r3, r3, #32
 8009318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	461a      	mov	r2, r3
 8009322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	69b9      	ldr	r1, [r7, #24]
 800932c:	69fa      	ldr	r2, [r7, #28]
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	617b      	str	r3, [r7, #20]
   return(result);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e4      	bne.n	8009304 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800933a:	e007      	b.n	800934c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	699a      	ldr	r2, [r3, #24]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f042 0208 	orr.w	r2, r2, #8
 800934a:	619a      	str	r2, [r3, #24]
}
 800934c:	bf00      	nop
 800934e:	37b8      	adds	r7, #184	; 0xb8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	40008000 	.word	0x40008000
 8009358:	08008add 	.word	0x08008add

0800935c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d101      	bne.n	80093ae <HAL_UARTEx_DisableFifoMode+0x16>
 80093aa:	2302      	movs	r3, #2
 80093ac:	e027      	b.n	80093fe <HAL_UARTEx_DisableFifoMode+0x66>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2224      	movs	r2, #36	; 0x24
 80093ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 0201 	bic.w	r2, r2, #1
 80093d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800941a:	2b01      	cmp	r3, #1
 800941c:	d101      	bne.n	8009422 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800941e:	2302      	movs	r3, #2
 8009420:	e02d      	b.n	800947e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2224      	movs	r2, #36	; 0x24
 800942e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f022 0201 	bic.w	r2, r2, #1
 8009448:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f8a4 	bl	80095ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2220      	movs	r2, #32
 8009470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009496:	2b01      	cmp	r3, #1
 8009498:	d101      	bne.n	800949e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800949a:	2302      	movs	r3, #2
 800949c:	e02d      	b.n	80094fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2224      	movs	r2, #36	; 0x24
 80094aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f022 0201 	bic.w	r2, r2, #1
 80094c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f866 	bl	80095ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b08c      	sub	sp, #48	; 0x30
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	4613      	mov	r3, r2
 800950e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009516:	2b20      	cmp	r3, #32
 8009518:	d142      	bne.n	80095a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009520:	88fb      	ldrh	r3, [r7, #6]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e03b      	b.n	80095a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2201      	movs	r2, #1
 800952e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009536:	88fb      	ldrh	r3, [r7, #6]
 8009538:	461a      	mov	r2, r3
 800953a:	68b9      	ldr	r1, [r7, #8]
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7fe fd4b 	bl	8007fd8 <UART_Start_Receive_DMA>
 8009542:	4603      	mov	r3, r0
 8009544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009548:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800954c:	2b00      	cmp	r3, #0
 800954e:	d124      	bne.n	800959a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009554:	2b01      	cmp	r3, #1
 8009556:	d11d      	bne.n	8009594 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2210      	movs	r2, #16
 800955e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	617b      	str	r3, [r7, #20]
   return(result);
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f043 0310 	orr.w	r3, r3, #16
 8009574:	62bb      	str	r3, [r7, #40]	; 0x28
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
 8009580:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	6a39      	ldr	r1, [r7, #32]
 8009584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	61fb      	str	r3, [r7, #28]
   return(result);
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e6      	bne.n	8009560 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009592:	e002      	b.n	800959a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800959a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800959e:	e000      	b.n	80095a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80095a0:	2302      	movs	r3, #2
  }
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3730      	adds	r7, #48	; 0x30
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d108      	bne.n	80095ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095cc:	e031      	b.n	8009632 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095ce:	2308      	movs	r3, #8
 80095d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095d2:	2308      	movs	r3, #8
 80095d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	0e5b      	lsrs	r3, r3, #25
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	f003 0307 	and.w	r3, r3, #7
 80095e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	0f5b      	lsrs	r3, r3, #29
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095f6:	7bbb      	ldrb	r3, [r7, #14]
 80095f8:	7b3a      	ldrb	r2, [r7, #12]
 80095fa:	4911      	ldr	r1, [pc, #68]	; (8009640 <UARTEx_SetNbDataToProcess+0x94>)
 80095fc:	5c8a      	ldrb	r2, [r1, r2]
 80095fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009602:	7b3a      	ldrb	r2, [r7, #12]
 8009604:	490f      	ldr	r1, [pc, #60]	; (8009644 <UARTEx_SetNbDataToProcess+0x98>)
 8009606:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009608:	fb93 f3f2 	sdiv	r3, r3, r2
 800960c:	b29a      	uxth	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	7b7a      	ldrb	r2, [r7, #13]
 8009618:	4909      	ldr	r1, [pc, #36]	; (8009640 <UARTEx_SetNbDataToProcess+0x94>)
 800961a:	5c8a      	ldrb	r2, [r1, r2]
 800961c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009620:	7b7a      	ldrb	r2, [r7, #13]
 8009622:	4908      	ldr	r1, [pc, #32]	; (8009644 <UARTEx_SetNbDataToProcess+0x98>)
 8009624:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009626:	fb93 f3f2 	sdiv	r3, r3, r2
 800962a:	b29a      	uxth	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009632:	bf00      	nop
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	0800f104 	.word	0x0800f104
 8009644:	0800f10c 	.word	0x0800f10c

08009648 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009650:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009654:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800965c:	b29a      	uxth	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	b29b      	uxth	r3, r3
 8009662:	43db      	mvns	r3, r3
 8009664:	b29b      	uxth	r3, r3
 8009666:	4013      	ands	r3, r2
 8009668:	b29a      	uxth	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800967e:	b084      	sub	sp, #16
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	f107 0014 	add.w	r0, r7, #20
 800968c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	b004      	add	sp, #16
 80096be:	4770      	bx	lr

080096c0 <__NVIC_SetPriority>:
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	6039      	str	r1, [r7, #0]
 80096ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	db0a      	blt.n	80096ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	490c      	ldr	r1, [pc, #48]	; (800970c <__NVIC_SetPriority+0x4c>)
 80096da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096de:	0112      	lsls	r2, r2, #4
 80096e0:	b2d2      	uxtb	r2, r2
 80096e2:	440b      	add	r3, r1
 80096e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80096e8:	e00a      	b.n	8009700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	4908      	ldr	r1, [pc, #32]	; (8009710 <__NVIC_SetPriority+0x50>)
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	f003 030f 	and.w	r3, r3, #15
 80096f6:	3b04      	subs	r3, #4
 80096f8:	0112      	lsls	r2, r2, #4
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	440b      	add	r3, r1
 80096fe:	761a      	strb	r2, [r3, #24]
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	e000e100 	.word	0xe000e100
 8009710:	e000ed00 	.word	0xe000ed00

08009714 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <SysTick_Handler+0x1c>)
 800971a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800971c:	f002 f9b0 	bl	800ba80 <xTaskGetSchedulerState>
 8009720:	4603      	mov	r3, r0
 8009722:	2b01      	cmp	r3, #1
 8009724:	d001      	beq.n	800972a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009726:	f003 fb87 	bl	800ce38 <xPortSysTickHandler>
  }
}
 800972a:	bf00      	nop
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	e000e010 	.word	0xe000e010

08009734 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009738:	2100      	movs	r1, #0
 800973a:	f06f 0004 	mvn.w	r0, #4
 800973e:	f7ff ffbf 	bl	80096c0 <__NVIC_SetPriority>
#endif
}
 8009742:	bf00      	nop
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800974e:	f3ef 8305 	mrs	r3, IPSR
 8009752:	603b      	str	r3, [r7, #0]
  return(result);
 8009754:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800975a:	f06f 0305 	mvn.w	r3, #5
 800975e:	607b      	str	r3, [r7, #4]
 8009760:	e00c      	b.n	800977c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009762:	4b0a      	ldr	r3, [pc, #40]	; (800978c <osKernelInitialize+0x44>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d105      	bne.n	8009776 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800976a:	4b08      	ldr	r3, [pc, #32]	; (800978c <osKernelInitialize+0x44>)
 800976c:	2201      	movs	r2, #1
 800976e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009770:	2300      	movs	r3, #0
 8009772:	607b      	str	r3, [r7, #4]
 8009774:	e002      	b.n	800977c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009776:	f04f 33ff 	mov.w	r3, #4294967295
 800977a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800977c:	687b      	ldr	r3, [r7, #4]
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	200007f8 	.word	0x200007f8

08009790 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009796:	f3ef 8305 	mrs	r3, IPSR
 800979a:	603b      	str	r3, [r7, #0]
  return(result);
 800979c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80097a2:	f06f 0305 	mvn.w	r3, #5
 80097a6:	607b      	str	r3, [r7, #4]
 80097a8:	e010      	b.n	80097cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80097aa:	4b0b      	ldr	r3, [pc, #44]	; (80097d8 <osKernelStart+0x48>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d109      	bne.n	80097c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80097b2:	f7ff ffbf 	bl	8009734 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80097b6:	4b08      	ldr	r3, [pc, #32]	; (80097d8 <osKernelStart+0x48>)
 80097b8:	2202      	movs	r2, #2
 80097ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80097bc:	f001 fd06 	bl	800b1cc <vTaskStartScheduler>
      stat = osOK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	607b      	str	r3, [r7, #4]
 80097c4:	e002      	b.n	80097cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80097c6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097cc:	687b      	ldr	r3, [r7, #4]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	200007f8 	.word	0x200007f8

080097dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08e      	sub	sp, #56	; 0x38
 80097e0:	af04      	add	r7, sp, #16
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ec:	f3ef 8305 	mrs	r3, IPSR
 80097f0:	617b      	str	r3, [r7, #20]
  return(result);
 80097f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d17e      	bne.n	80098f6 <osThreadNew+0x11a>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d07b      	beq.n	80098f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80097fe:	2380      	movs	r3, #128	; 0x80
 8009800:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009802:	2318      	movs	r3, #24
 8009804:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009806:	2300      	movs	r3, #0
 8009808:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800980a:	f04f 33ff 	mov.w	r3, #4294967295
 800980e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d045      	beq.n	80098a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d002      	beq.n	8009824 <osThreadNew+0x48>
        name = attr->name;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d008      	beq.n	800984a <osThreadNew+0x6e>
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	2b38      	cmp	r3, #56	; 0x38
 800983c:	d805      	bhi.n	800984a <osThreadNew+0x6e>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <osThreadNew+0x72>
        return (NULL);
 800984a:	2300      	movs	r3, #0
 800984c:	e054      	b.n	80098f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d003      	beq.n	800985e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	089b      	lsrs	r3, r3, #2
 800985c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00e      	beq.n	8009884 <osThreadNew+0xa8>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	2b5b      	cmp	r3, #91	; 0x5b
 800986c:	d90a      	bls.n	8009884 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009872:	2b00      	cmp	r3, #0
 8009874:	d006      	beq.n	8009884 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d002      	beq.n	8009884 <osThreadNew+0xa8>
        mem = 1;
 800987e:	2301      	movs	r3, #1
 8009880:	61bb      	str	r3, [r7, #24]
 8009882:	e010      	b.n	80098a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10c      	bne.n	80098a6 <osThreadNew+0xca>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d108      	bne.n	80098a6 <osThreadNew+0xca>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d104      	bne.n	80098a6 <osThreadNew+0xca>
          mem = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	61bb      	str	r3, [r7, #24]
 80098a0:	e001      	b.n	80098a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d110      	bne.n	80098ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098b4:	9202      	str	r2, [sp, #8]
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	6a3a      	ldr	r2, [r7, #32]
 80098c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f001 faac 	bl	800ae20 <xTaskCreateStatic>
 80098c8:	4603      	mov	r3, r0
 80098ca:	613b      	str	r3, [r7, #16]
 80098cc:	e013      	b.n	80098f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d110      	bne.n	80098f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	f107 0310 	add.w	r3, r7, #16
 80098dc:	9301      	str	r3, [sp, #4]
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f001 faf7 	bl	800aeda <xTaskCreate>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d001      	beq.n	80098f6 <osThreadNew+0x11a>
            hTask = NULL;
 80098f2:	2300      	movs	r3, #0
 80098f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80098f6:	693b      	ldr	r3, [r7, #16]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3728      	adds	r7, #40	; 0x28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af02      	add	r7, sp, #8
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <osThreadFlagsSet+0x1a>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	da03      	bge.n	8009922 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800991a:	f06f 0303 	mvn.w	r3, #3
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	e035      	b.n	800998e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8009922:	f04f 33ff 	mov.w	r3, #4294967295
 8009926:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009928:	f3ef 8305 	mrs	r3, IPSR
 800992c:	613b      	str	r3, [r7, #16]
  return(result);
 800992e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009930:	2b00      	cmp	r3, #0
 8009932:	d01f      	beq.n	8009974 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009934:	2300      	movs	r3, #0
 8009936:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009938:	f107 0308 	add.w	r3, r7, #8
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	2300      	movs	r3, #0
 8009940:	2201      	movs	r2, #1
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6978      	ldr	r0, [r7, #20]
 8009946:	f002 fb7f 	bl	800c048 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800994a:	f107 030c 	add.w	r3, r7, #12
 800994e:	2200      	movs	r2, #0
 8009950:	9200      	str	r2, [sp, #0]
 8009952:	2200      	movs	r2, #0
 8009954:	2100      	movs	r1, #0
 8009956:	6978      	ldr	r0, [r7, #20]
 8009958:	f002 fb76 	bl	800c048 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d015      	beq.n	800998e <osThreadFlagsSet+0x8e>
 8009962:	4b0d      	ldr	r3, [pc, #52]	; (8009998 <osThreadFlagsSet+0x98>)
 8009964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	e00c      	b.n	800998e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009974:	2300      	movs	r3, #0
 8009976:	2201      	movs	r2, #1
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6978      	ldr	r0, [r7, #20]
 800997c:	f002 faac 	bl	800bed8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009980:	f107 030c 	add.w	r3, r7, #12
 8009984:	2200      	movs	r2, #0
 8009986:	2100      	movs	r1, #0
 8009988:	6978      	ldr	r0, [r7, #20]
 800998a:	f002 faa5 	bl	800bed8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800998e:	68fb      	ldr	r3, [r7, #12]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3718      	adds	r7, #24
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	e000ed04 	.word	0xe000ed04

0800999c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800999c:	b580      	push	{r7, lr}
 800999e:	b08c      	sub	sp, #48	; 0x30
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099a8:	f3ef 8305 	mrs	r3, IPSR
 80099ac:	617b      	str	r3, [r7, #20]
  return(result);
 80099ae:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80099b4:	f06f 0305 	mvn.w	r3, #5
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099ba:	e06b      	b.n	8009a94 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	da03      	bge.n	80099ca <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80099c2:	f06f 0303 	mvn.w	r3, #3
 80099c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099c8:	e064      	b.n	8009a94 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <osThreadFlagsWait+0x3e>
      clear = 0U;
 80099d4:	2300      	movs	r3, #0
 80099d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80099d8:	e001      	b.n	80099de <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80099de:	2300      	movs	r3, #0
 80099e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80099e6:	f001 fd03 	bl	800b3f0 <xTaskGetTickCount>
 80099ea:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80099ec:	f107 0210 	add.w	r2, r7, #16
 80099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099f4:	2000      	movs	r0, #0
 80099f6:	f002 fa15 	bl	800be24 <xTaskNotifyWait>
 80099fa:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d137      	bne.n	8009a72 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8009a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4013      	ands	r3, r2
 8009a08:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00c      	beq.n	8009a36 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a20:	4013      	ands	r3, r2
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d032      	beq.n	8009a8e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10f      	bne.n	8009a4e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009a2e:	f06f 0302 	mvn.w	r3, #2
 8009a32:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009a34:	e02e      	b.n	8009a94 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d128      	bne.n	8009a92 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d103      	bne.n	8009a4e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009a46:	f06f 0302 	mvn.w	r3, #2
 8009a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009a4c:	e022      	b.n	8009a94 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009a4e:	f001 fccf 	bl	800b3f0 <xTaskGetTickCount>
 8009a52:	4602      	mov	r2, r0
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d902      	bls.n	8009a68 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	627b      	str	r3, [r7, #36]	; 0x24
 8009a66:	e00e      	b.n	8009a86 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8009a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a70:	e009      	b.n	8009a86 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d103      	bne.n	8009a80 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8009a78:	f06f 0302 	mvn.w	r3, #2
 8009a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a7e:	e002      	b.n	8009a86 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009a80:	f06f 0301 	mvn.w	r3, #1
 8009a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1af      	bne.n	80099ec <osThreadFlagsWait+0x50>
 8009a8c:	e002      	b.n	8009a94 <osThreadFlagsWait+0xf8>
            break;
 8009a8e:	bf00      	nop
 8009a90:	e000      	b.n	8009a94 <osThreadFlagsWait+0xf8>
            break;
 8009a92:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3730      	adds	r7, #48	; 0x30
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aa6:	f3ef 8305 	mrs	r3, IPSR
 8009aaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8009aac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <osDelay+0x1c>
    stat = osErrorISR;
 8009ab2:	f06f 0305 	mvn.w	r3, #5
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	e007      	b.n	8009aca <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <osDelay+0x2c>
      vTaskDelay(ticks);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f001 fb4d 	bl	800b164 <vTaskDelay>
    }
  }

  return (stat);
 8009aca:	68fb      	ldr	r3, [r7, #12]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f002 ffcb 	bl	800ca78 <pvTimerGetTimerID>
 8009ae2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d005      	beq.n	8009af6 <TimerCallback+0x22>
    callb->func (callb->arg);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	6852      	ldr	r2, [r2, #4]
 8009af2:	4610      	mov	r0, r2
 8009af4:	4798      	blx	r3
  }
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b08c      	sub	sp, #48	; 0x30
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	607a      	str	r2, [r7, #4]
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b14:	f3ef 8305 	mrs	r3, IPSR
 8009b18:	613b      	str	r3, [r7, #16]
  return(result);
 8009b1a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d163      	bne.n	8009be8 <osTimerNew+0xe8>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d060      	beq.n	8009be8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009b26:	2008      	movs	r0, #8
 8009b28:	f003 fa16 	bl	800cf58 <pvPortMalloc>
 8009b2c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d059      	beq.n	8009be8 <osTimerNew+0xe8>
      callb->func = func;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009b40:	7afb      	ldrb	r3, [r7, #11]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d102      	bne.n	8009b4c <osTimerNew+0x4c>
        reload = pdFALSE;
 8009b46:	2300      	movs	r3, #0
 8009b48:	61fb      	str	r3, [r7, #28]
 8009b4a:	e001      	b.n	8009b50 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009b50:	f04f 33ff 	mov.w	r3, #4294967295
 8009b54:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d01c      	beq.n	8009b9a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <osTimerNew+0x6e>
          name = attr->name;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d006      	beq.n	8009b84 <osTimerNew+0x84>
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	2b2b      	cmp	r3, #43	; 0x2b
 8009b7c:	d902      	bls.n	8009b84 <osTimerNew+0x84>
          mem = 1;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	61bb      	str	r3, [r7, #24]
 8009b82:	e00c      	b.n	8009b9e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d108      	bne.n	8009b9e <osTimerNew+0x9e>
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d104      	bne.n	8009b9e <osTimerNew+0x9e>
            mem = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	61bb      	str	r3, [r7, #24]
 8009b98:	e001      	b.n	8009b9e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d10c      	bne.n	8009bbe <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	4b12      	ldr	r3, [pc, #72]	; (8009bf4 <osTimerNew+0xf4>)
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	69fa      	ldr	r2, [r7, #28]
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bb6:	f002 fbe0 	bl	800c37a <xTimerCreateStatic>
 8009bba:	6238      	str	r0, [r7, #32]
 8009bbc:	e00b      	b.n	8009bd6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d108      	bne.n	8009bd6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009bc4:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <osTimerNew+0xf4>)
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	69fa      	ldr	r2, [r7, #28]
 8009bcc:	2101      	movs	r1, #1
 8009bce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bd0:	f002 fbb2 	bl	800c338 <xTimerCreate>
 8009bd4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d105      	bne.n	8009be8 <osTimerNew+0xe8>
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <osTimerNew+0xe8>
        vPortFree (callb);
 8009be2:	6978      	ldr	r0, [r7, #20]
 8009be4:	f003 fa84 	bl	800d0f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009be8:	6a3b      	ldr	r3, [r7, #32]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3728      	adds	r7, #40	; 0x28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	08009ad5 	.word	0x08009ad5

08009bf8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af02      	add	r7, sp, #8
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c06:	f3ef 8305 	mrs	r3, IPSR
 8009c0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <osTimerStart+0x22>
    stat = osErrorISR;
 8009c12:	f06f 0305 	mvn.w	r3, #5
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	e017      	b.n	8009c4a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d103      	bne.n	8009c28 <osTimerStart+0x30>
    stat = osErrorParameter;
 8009c20:	f06f 0303 	mvn.w	r3, #3
 8009c24:	617b      	str	r3, [r7, #20]
 8009c26:	e010      	b.n	8009c4a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009c28:	2300      	movs	r3, #0
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	2104      	movs	r1, #4
 8009c32:	6938      	ldr	r0, [r7, #16]
 8009c34:	f002 fc1a 	bl	800c46c <xTimerGenericCommand>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d102      	bne.n	8009c44 <osTimerStart+0x4c>
      stat = osOK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	617b      	str	r3, [r7, #20]
 8009c42:	e002      	b.n	8009c4a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009c44:	f06f 0302 	mvn.w	r3, #2
 8009c48:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009c4a:	697b      	ldr	r3, [r7, #20]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08a      	sub	sp, #40	; 0x28
 8009c58:	af02      	add	r7, sp, #8
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c64:	f3ef 8305 	mrs	r3, IPSR
 8009c68:	613b      	str	r3, [r7, #16]
  return(result);
 8009c6a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d175      	bne.n	8009d5c <osSemaphoreNew+0x108>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d072      	beq.n	8009d5c <osSemaphoreNew+0x108>
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d86e      	bhi.n	8009d5c <osSemaphoreNew+0x108>
    mem = -1;
 8009c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d015      	beq.n	8009cb6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d006      	beq.n	8009ca0 <osSemaphoreNew+0x4c>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	2b4f      	cmp	r3, #79	; 0x4f
 8009c98:	d902      	bls.n	8009ca0 <osSemaphoreNew+0x4c>
        mem = 1;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	61bb      	str	r3, [r7, #24]
 8009c9e:	e00c      	b.n	8009cba <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d108      	bne.n	8009cba <osSemaphoreNew+0x66>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d104      	bne.n	8009cba <osSemaphoreNew+0x66>
          mem = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61bb      	str	r3, [r7, #24]
 8009cb4:	e001      	b.n	8009cba <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc0:	d04c      	beq.n	8009d5c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d128      	bne.n	8009d1a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d10a      	bne.n	8009ce4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	2203      	movs	r2, #3
 8009cd4:	9200      	str	r2, [sp, #0]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2100      	movs	r1, #0
 8009cda:	2001      	movs	r0, #1
 8009cdc:	f000 fa06 	bl	800a0ec <xQueueGenericCreateStatic>
 8009ce0:	61f8      	str	r0, [r7, #28]
 8009ce2:	e005      	b.n	8009cf0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009ce4:	2203      	movs	r2, #3
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	2001      	movs	r0, #1
 8009cea:	f000 fa77 	bl	800a1dc <xQueueGenericCreate>
 8009cee:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d022      	beq.n	8009d3c <osSemaphoreNew+0xe8>
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01f      	beq.n	8009d3c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2100      	movs	r1, #0
 8009d02:	69f8      	ldr	r0, [r7, #28]
 8009d04:	f000 fb32 	bl	800a36c <xQueueGenericSend>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d016      	beq.n	8009d3c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009d0e:	69f8      	ldr	r0, [r7, #28]
 8009d10:	f000 feb2 	bl	800aa78 <vQueueDelete>
            hSemaphore = NULL;
 8009d14:	2300      	movs	r3, #0
 8009d16:	61fb      	str	r3, [r7, #28]
 8009d18:	e010      	b.n	8009d3c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d108      	bne.n	8009d32 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	461a      	mov	r2, r3
 8009d26:	68b9      	ldr	r1, [r7, #8]
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 fab4 	bl	800a296 <xQueueCreateCountingSemaphoreStatic>
 8009d2e:	61f8      	str	r0, [r7, #28]
 8009d30:	e004      	b.n	8009d3c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 fae5 	bl	800a304 <xQueueCreateCountingSemaphore>
 8009d3a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00c      	beq.n	8009d5c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	617b      	str	r3, [r7, #20]
 8009d4e:	e001      	b.n	8009d54 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009d54:	6979      	ldr	r1, [r7, #20]
 8009d56:	69f8      	ldr	r0, [r7, #28]
 8009d58:	f000 ffda 	bl	800ad10 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009d5c:	69fb      	ldr	r3, [r7, #28]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3720      	adds	r7, #32
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b08a      	sub	sp, #40	; 0x28
 8009d6a:	af02      	add	r7, sp, #8
 8009d6c:	60f8      	str	r0, [r7, #12]
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d76:	f3ef 8305 	mrs	r3, IPSR
 8009d7a:	613b      	str	r3, [r7, #16]
  return(result);
 8009d7c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d15f      	bne.n	8009e42 <osMessageQueueNew+0xdc>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d05c      	beq.n	8009e42 <osMessageQueueNew+0xdc>
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d059      	beq.n	8009e42 <osMessageQueueNew+0xdc>
    mem = -1;
 8009d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d029      	beq.n	8009dee <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d012      	beq.n	8009dc8 <osMessageQueueNew+0x62>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	2b4f      	cmp	r3, #79	; 0x4f
 8009da8:	d90e      	bls.n	8009dc8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00a      	beq.n	8009dc8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	695a      	ldr	r2, [r3, #20]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	68b9      	ldr	r1, [r7, #8]
 8009dba:	fb01 f303 	mul.w	r3, r1, r3
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d302      	bcc.n	8009dc8 <osMessageQueueNew+0x62>
        mem = 1;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	61bb      	str	r3, [r7, #24]
 8009dc6:	e014      	b.n	8009df2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d110      	bne.n	8009df2 <osMessageQueueNew+0x8c>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10c      	bne.n	8009df2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d108      	bne.n	8009df2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d104      	bne.n	8009df2 <osMessageQueueNew+0x8c>
          mem = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	61bb      	str	r3, [r7, #24]
 8009dec:	e001      	b.n	8009df2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d10b      	bne.n	8009e10 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	691a      	ldr	r2, [r3, #16]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	2100      	movs	r1, #0
 8009e02:	9100      	str	r1, [sp, #0]
 8009e04:	68b9      	ldr	r1, [r7, #8]
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f000 f970 	bl	800a0ec <xQueueGenericCreateStatic>
 8009e0c:	61f8      	str	r0, [r7, #28]
 8009e0e:	e008      	b.n	8009e22 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d105      	bne.n	8009e22 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009e16:	2200      	movs	r2, #0
 8009e18:	68b9      	ldr	r1, [r7, #8]
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f000 f9de 	bl	800a1dc <xQueueGenericCreate>
 8009e20:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00c      	beq.n	8009e42 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	e001      	b.n	8009e3a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009e3a:	6979      	ldr	r1, [r7, #20]
 8009e3c:	69f8      	ldr	r0, [r7, #28]
 8009e3e:	f000 ff67 	bl	800ad10 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009e42:	69fb      	ldr	r3, [r7, #28]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3720      	adds	r7, #32
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4a07      	ldr	r2, [pc, #28]	; (8009e78 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	4a06      	ldr	r2, [pc, #24]	; (8009e7c <vApplicationGetIdleTaskMemory+0x30>)
 8009e62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2280      	movs	r2, #128	; 0x80
 8009e68:	601a      	str	r2, [r3, #0]
}
 8009e6a:	bf00      	nop
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	200007fc 	.word	0x200007fc
 8009e7c:	20000858 	.word	0x20000858

08009e80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	4a07      	ldr	r2, [pc, #28]	; (8009eac <vApplicationGetTimerTaskMemory+0x2c>)
 8009e90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	4a06      	ldr	r2, [pc, #24]	; (8009eb0 <vApplicationGetTimerTaskMemory+0x30>)
 8009e96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e9e:	601a      	str	r2, [r3, #0]
}
 8009ea0:	bf00      	nop
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	20000a58 	.word	0x20000a58
 8009eb0:	20000ab4 	.word	0x20000ab4

08009eb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f103 0208 	add.w	r2, r3, #8
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ecc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f103 0208 	add.w	r2, r3, #8
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f103 0208 	add.w	r2, r3, #8
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f02:	bf00      	nop
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b085      	sub	sp, #20
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	689a      	ldr	r2, [r3, #8]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	1c5a      	adds	r2, r3, #1
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	601a      	str	r2, [r3, #0]
}
 8009f4a:	bf00      	nop
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f56:	b480      	push	{r7}
 8009f58:	b085      	sub	sp, #20
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6c:	d103      	bne.n	8009f76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	e00c      	b.n	8009f90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3308      	adds	r3, #8
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	e002      	b.n	8009f84 <vListInsert+0x2e>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d2f6      	bcs.n	8009f7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	601a      	str	r2, [r3, #0]
}
 8009fbc:	bf00      	nop
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	6892      	ldr	r2, [r2, #8]
 8009fde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	6852      	ldr	r2, [r2, #4]
 8009fe8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d103      	bne.n	8009ffc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689a      	ldr	r2, [r3, #8]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	1e5a      	subs	r2, r3, #1
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a046:	f002 fe65 	bl	800cd14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a052:	68f9      	ldr	r1, [r7, #12]
 800a054:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a056:	fb01 f303 	mul.w	r3, r1, r3
 800a05a:	441a      	add	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a076:	3b01      	subs	r3, #1
 800a078:	68f9      	ldr	r1, [r7, #12]
 800a07a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a07c:	fb01 f303 	mul.w	r3, r1, r3
 800a080:	441a      	add	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	22ff      	movs	r2, #255	; 0xff
 800a08a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	22ff      	movs	r2, #255	; 0xff
 800a092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d114      	bne.n	800a0c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01a      	beq.n	800a0da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3310      	adds	r3, #16
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f001 fb2b 	bl	800b704 <xTaskRemoveFromEventList>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d012      	beq.n	800a0da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0b4:	4b0c      	ldr	r3, [pc, #48]	; (800a0e8 <xQueueGenericReset+0xcc>)
 800a0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	e009      	b.n	800a0da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3310      	adds	r3, #16
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7ff fef2 	bl	8009eb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3324      	adds	r3, #36	; 0x24
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7ff feed 	bl	8009eb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0da:	f002 fe4b 	bl	800cd74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0de:	2301      	movs	r3, #1
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	e000ed04 	.word	0xe000ed04

0800a0ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b08e      	sub	sp, #56	; 0x38
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10a      	bne.n	800a116 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10a      	bne.n	800a132 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a12e:	bf00      	nop
 800a130:	e7fe      	b.n	800a130 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <xQueueGenericCreateStatic+0x52>
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <xQueueGenericCreateStatic+0x56>
 800a13e:	2301      	movs	r3, #1
 800a140:	e000      	b.n	800a144 <xQueueGenericCreateStatic+0x58>
 800a142:	2300      	movs	r3, #0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	623b      	str	r3, [r7, #32]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d102      	bne.n	800a16a <xQueueGenericCreateStatic+0x7e>
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <xQueueGenericCreateStatic+0x82>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e000      	b.n	800a170 <xQueueGenericCreateStatic+0x84>
 800a16e:	2300      	movs	r3, #0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10a      	bne.n	800a18a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	61fb      	str	r3, [r7, #28]
}
 800a186:	bf00      	nop
 800a188:	e7fe      	b.n	800a188 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a18a:	2350      	movs	r3, #80	; 0x50
 800a18c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	2b50      	cmp	r3, #80	; 0x50
 800a192:	d00a      	beq.n	800a1aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	61bb      	str	r3, [r7, #24]
}
 800a1a6:	bf00      	nop
 800a1a8:	e7fe      	b.n	800a1a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00d      	beq.n	800a1d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	68b9      	ldr	r1, [r7, #8]
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 f83f 	bl	800a250 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3730      	adds	r7, #48	; 0x30
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08a      	sub	sp, #40	; 0x28
 800a1e0:	af02      	add	r7, sp, #8
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	613b      	str	r3, [r7, #16]
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	fb02 f303 	mul.w	r3, r2, r3
 800a20e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	3350      	adds	r3, #80	; 0x50
 800a214:	4618      	mov	r0, r3
 800a216:	f002 fe9f 	bl	800cf58 <pvPortMalloc>
 800a21a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d011      	beq.n	800a246 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	3350      	adds	r3, #80	; 0x50
 800a22a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a234:	79fa      	ldrb	r2, [r7, #7]
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	4613      	mov	r3, r2
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	68b9      	ldr	r1, [r7, #8]
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 f805 	bl	800a250 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a246:	69bb      	ldr	r3, [r7, #24]
	}
 800a248:	4618      	mov	r0, r3
 800a24a:	3720      	adds	r7, #32
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d103      	bne.n	800a26c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	69ba      	ldr	r2, [r7, #24]
 800a268:	601a      	str	r2, [r3, #0]
 800a26a:	e002      	b.n	800a272 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a27e:	2101      	movs	r1, #1
 800a280:	69b8      	ldr	r0, [r7, #24]
 800a282:	f7ff fecb 	bl	800a01c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	78fa      	ldrb	r2, [r7, #3]
 800a28a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a28e:	bf00      	nop
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a296:	b580      	push	{r7, lr}
 800a298:	b08a      	sub	sp, #40	; 0x28
 800a29a:	af02      	add	r7, sp, #8
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10a      	bne.n	800a2be <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	61bb      	str	r3, [r7, #24]
}
 800a2ba:	bf00      	nop
 800a2bc:	e7fe      	b.n	800a2bc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d90a      	bls.n	800a2dc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	617b      	str	r3, [r7, #20]
}
 800a2d8:	bf00      	nop
 800a2da:	e7fe      	b.n	800a2da <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2dc:	2302      	movs	r3, #2
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f7ff ff00 	bl	800a0ec <xQueueGenericCreateStatic>
 800a2ec:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
	}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3720      	adds	r7, #32
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10a      	bne.n	800a32a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	613b      	str	r3, [r7, #16]
}
 800a326:	bf00      	nop
 800a328:	e7fe      	b.n	800a328 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d90a      	bls.n	800a348 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60fb      	str	r3, [r7, #12]
}
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a348:	2202      	movs	r2, #2
 800a34a:	2100      	movs	r1, #0
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f7ff ff45 	bl	800a1dc <xQueueGenericCreate>
 800a352:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a360:	697b      	ldr	r3, [r7, #20]
	}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
	...

0800a36c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b08e      	sub	sp, #56	; 0x38
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
 800a378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a37a:	2300      	movs	r3, #0
 800a37c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10a      	bne.n	800a39e <xQueueGenericSend+0x32>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a39a:	bf00      	nop
 800a39c:	e7fe      	b.n	800a39c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d103      	bne.n	800a3ac <xQueueGenericSend+0x40>
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <xQueueGenericSend+0x44>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e000      	b.n	800a3b2 <xQueueGenericSend+0x46>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10a      	bne.n	800a3cc <xQueueGenericSend+0x60>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3c8:	bf00      	nop
 800a3ca:	e7fe      	b.n	800a3ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d103      	bne.n	800a3da <xQueueGenericSend+0x6e>
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d101      	bne.n	800a3de <xQueueGenericSend+0x72>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e000      	b.n	800a3e0 <xQueueGenericSend+0x74>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10a      	bne.n	800a3fa <xQueueGenericSend+0x8e>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	623b      	str	r3, [r7, #32]
}
 800a3f6:	bf00      	nop
 800a3f8:	e7fe      	b.n	800a3f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3fa:	f001 fb41 	bl	800ba80 <xTaskGetSchedulerState>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <xQueueGenericSend+0x9e>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <xQueueGenericSend+0xa2>
 800a40a:	2301      	movs	r3, #1
 800a40c:	e000      	b.n	800a410 <xQueueGenericSend+0xa4>
 800a40e:	2300      	movs	r3, #0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10a      	bne.n	800a42a <xQueueGenericSend+0xbe>
	__asm volatile
 800a414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	61fb      	str	r3, [r7, #28]
}
 800a426:	bf00      	nop
 800a428:	e7fe      	b.n	800a428 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a42a:	f002 fc73 	bl	800cd14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a436:	429a      	cmp	r2, r3
 800a438:	d302      	bcc.n	800a440 <xQueueGenericSend+0xd4>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d129      	bne.n	800a494 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a446:	f000 fb52 	bl	800aaee <prvCopyDataToQueue>
 800a44a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a450:	2b00      	cmp	r3, #0
 800a452:	d010      	beq.n	800a476 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	3324      	adds	r3, #36	; 0x24
 800a458:	4618      	mov	r0, r3
 800a45a:	f001 f953 	bl	800b704 <xTaskRemoveFromEventList>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d013      	beq.n	800a48c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a464:	4b3f      	ldr	r3, [pc, #252]	; (800a564 <xQueueGenericSend+0x1f8>)
 800a466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	e00a      	b.n	800a48c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d007      	beq.n	800a48c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a47c:	4b39      	ldr	r3, [pc, #228]	; (800a564 <xQueueGenericSend+0x1f8>)
 800a47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a48c:	f002 fc72 	bl	800cd74 <vPortExitCritical>
				return pdPASS;
 800a490:	2301      	movs	r3, #1
 800a492:	e063      	b.n	800a55c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d103      	bne.n	800a4a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a49a:	f002 fc6b 	bl	800cd74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	e05c      	b.n	800a55c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d106      	bne.n	800a4b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4a8:	f107 0314 	add.w	r3, r7, #20
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f001 f98d 	bl	800b7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4b6:	f002 fc5d 	bl	800cd74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4ba:	f000 feed 	bl	800b298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4be:	f002 fc29 	bl	800cd14 <vPortEnterCritical>
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4c8:	b25b      	sxtb	r3, r3
 800a4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ce:	d103      	bne.n	800a4d8 <xQueueGenericSend+0x16c>
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4de:	b25b      	sxtb	r3, r3
 800a4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e4:	d103      	bne.n	800a4ee <xQueueGenericSend+0x182>
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4ee:	f002 fc41 	bl	800cd74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4f2:	1d3a      	adds	r2, r7, #4
 800a4f4:	f107 0314 	add.w	r3, r7, #20
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f001 f97c 	bl	800b7f8 <xTaskCheckForTimeOut>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d124      	bne.n	800a550 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a508:	f000 fbe9 	bl	800acde <prvIsQueueFull>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d018      	beq.n	800a544 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a514:	3310      	adds	r3, #16
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	4611      	mov	r1, r2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f001 f8a2 	bl	800b664 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a522:	f000 fb74 	bl	800ac0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a526:	f000 fec5 	bl	800b2b4 <xTaskResumeAll>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f47f af7c 	bne.w	800a42a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a532:	4b0c      	ldr	r3, [pc, #48]	; (800a564 <xQueueGenericSend+0x1f8>)
 800a534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	e772      	b.n	800a42a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a546:	f000 fb62 	bl	800ac0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a54a:	f000 feb3 	bl	800b2b4 <xTaskResumeAll>
 800a54e:	e76c      	b.n	800a42a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a552:	f000 fb5c 	bl	800ac0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a556:	f000 fead 	bl	800b2b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a55a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3738      	adds	r7, #56	; 0x38
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	e000ed04 	.word	0xe000ed04

0800a568 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b090      	sub	sp, #64	; 0x40
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10a      	bne.n	800a596 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a592:	bf00      	nop
 800a594:	e7fe      	b.n	800a594 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d103      	bne.n	800a5a4 <xQueueGenericSendFromISR+0x3c>
 800a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <xQueueGenericSendFromISR+0x40>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e000      	b.n	800a5aa <xQueueGenericSendFromISR+0x42>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10a      	bne.n	800a5c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5c0:	bf00      	nop
 800a5c2:	e7fe      	b.n	800a5c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d103      	bne.n	800a5d2 <xQueueGenericSendFromISR+0x6a>
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d101      	bne.n	800a5d6 <xQueueGenericSendFromISR+0x6e>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e000      	b.n	800a5d8 <xQueueGenericSendFromISR+0x70>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	623b      	str	r3, [r7, #32]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5f2:	f002 fc71 	bl	800ced8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5f6:	f3ef 8211 	mrs	r2, BASEPRI
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	61fa      	str	r2, [r7, #28]
 800a60c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a60e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a610:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d302      	bcc.n	800a624 <xQueueGenericSendFromISR+0xbc>
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b02      	cmp	r3, #2
 800a622:	d12f      	bne.n	800a684 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a62a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a632:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a63a:	f000 fa58 	bl	800aaee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a63e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a646:	d112      	bne.n	800a66e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d016      	beq.n	800a67e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a652:	3324      	adds	r3, #36	; 0x24
 800a654:	4618      	mov	r0, r3
 800a656:	f001 f855 	bl	800b704 <xTaskRemoveFromEventList>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00e      	beq.n	800a67e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00b      	beq.n	800a67e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	601a      	str	r2, [r3, #0]
 800a66c:	e007      	b.n	800a67e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a66e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a672:	3301      	adds	r3, #1
 800a674:	b2db      	uxtb	r3, r3
 800a676:	b25a      	sxtb	r2, r3
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a67e:	2301      	movs	r3, #1
 800a680:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a682:	e001      	b.n	800a688 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a684:	2300      	movs	r3, #0
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a692:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a696:	4618      	mov	r0, r3
 800a698:	3740      	adds	r7, #64	; 0x40
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
	...

0800a6a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08c      	sub	sp, #48	; 0x30
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10a      	bne.n	800a6d0 <xQueueReceive+0x30>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	623b      	str	r3, [r7, #32]
}
 800a6cc:	bf00      	nop
 800a6ce:	e7fe      	b.n	800a6ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d103      	bne.n	800a6de <xQueueReceive+0x3e>
 800a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <xQueueReceive+0x42>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e000      	b.n	800a6e4 <xQueueReceive+0x44>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <xQueueReceive+0x5e>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	61fb      	str	r3, [r7, #28]
}
 800a6fa:	bf00      	nop
 800a6fc:	e7fe      	b.n	800a6fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6fe:	f001 f9bf 	bl	800ba80 <xTaskGetSchedulerState>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d102      	bne.n	800a70e <xQueueReceive+0x6e>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <xQueueReceive+0x72>
 800a70e:	2301      	movs	r3, #1
 800a710:	e000      	b.n	800a714 <xQueueReceive+0x74>
 800a712:	2300      	movs	r3, #0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10a      	bne.n	800a72e <xQueueReceive+0x8e>
	__asm volatile
 800a718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71c:	f383 8811 	msr	BASEPRI, r3
 800a720:	f3bf 8f6f 	isb	sy
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	61bb      	str	r3, [r7, #24]
}
 800a72a:	bf00      	nop
 800a72c:	e7fe      	b.n	800a72c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a72e:	f002 faf1 	bl	800cd14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a736:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d01f      	beq.n	800a77e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a742:	f000 fa3e 	bl	800abc2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	1e5a      	subs	r2, r3, #1
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00f      	beq.n	800a776 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	3310      	adds	r3, #16
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 ffd2 	bl	800b704 <xTaskRemoveFromEventList>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d007      	beq.n	800a776 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a766:	4b3d      	ldr	r3, [pc, #244]	; (800a85c <xQueueReceive+0x1bc>)
 800a768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a776:	f002 fafd 	bl	800cd74 <vPortExitCritical>
				return pdPASS;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e069      	b.n	800a852 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d103      	bne.n	800a78c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a784:	f002 faf6 	bl	800cd74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a788:	2300      	movs	r3, #0
 800a78a:	e062      	b.n	800a852 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d106      	bne.n	800a7a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a792:	f107 0310 	add.w	r3, r7, #16
 800a796:	4618      	mov	r0, r3
 800a798:	f001 f818 	bl	800b7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a79c:	2301      	movs	r3, #1
 800a79e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7a0:	f002 fae8 	bl	800cd74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7a4:	f000 fd78 	bl	800b298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7a8:	f002 fab4 	bl	800cd14 <vPortEnterCritical>
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7b2:	b25b      	sxtb	r3, r3
 800a7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b8:	d103      	bne.n	800a7c2 <xQueueReceive+0x122>
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7c8:	b25b      	sxtb	r3, r3
 800a7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ce:	d103      	bne.n	800a7d8 <xQueueReceive+0x138>
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7d8:	f002 facc 	bl	800cd74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7dc:	1d3a      	adds	r2, r7, #4
 800a7de:	f107 0310 	add.w	r3, r7, #16
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 f807 	bl	800b7f8 <xTaskCheckForTimeOut>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d123      	bne.n	800a838 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7f2:	f000 fa5e 	bl	800acb2 <prvIsQueueEmpty>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d017      	beq.n	800a82c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	3324      	adds	r3, #36	; 0x24
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	4611      	mov	r1, r2
 800a804:	4618      	mov	r0, r3
 800a806:	f000 ff2d 	bl	800b664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a80a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a80c:	f000 f9ff 	bl	800ac0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a810:	f000 fd50 	bl	800b2b4 <xTaskResumeAll>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d189      	bne.n	800a72e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a81a:	4b10      	ldr	r3, [pc, #64]	; (800a85c <xQueueReceive+0x1bc>)
 800a81c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	e780      	b.n	800a72e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a82c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a82e:	f000 f9ee 	bl	800ac0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a832:	f000 fd3f 	bl	800b2b4 <xTaskResumeAll>
 800a836:	e77a      	b.n	800a72e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a83a:	f000 f9e8 	bl	800ac0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a83e:	f000 fd39 	bl	800b2b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a844:	f000 fa35 	bl	800acb2 <prvIsQueueEmpty>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f43f af6f 	beq.w	800a72e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a850:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a852:	4618      	mov	r0, r3
 800a854:	3730      	adds	r7, #48	; 0x30
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	e000ed04 	.word	0xe000ed04

0800a860 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08e      	sub	sp, #56	; 0x38
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a86a:	2300      	movs	r3, #0
 800a86c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a872:	2300      	movs	r3, #0
 800a874:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10a      	bne.n	800a892 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	623b      	str	r3, [r7, #32]
}
 800a88e:	bf00      	nop
 800a890:	e7fe      	b.n	800a890 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00a      	beq.n	800a8b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	61fb      	str	r3, [r7, #28]
}
 800a8ac:	bf00      	nop
 800a8ae:	e7fe      	b.n	800a8ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8b0:	f001 f8e6 	bl	800ba80 <xTaskGetSchedulerState>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d102      	bne.n	800a8c0 <xQueueSemaphoreTake+0x60>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <xQueueSemaphoreTake+0x64>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e000      	b.n	800a8c6 <xQueueSemaphoreTake+0x66>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10a      	bne.n	800a8e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	61bb      	str	r3, [r7, #24]
}
 800a8dc:	bf00      	nop
 800a8de:	e7fe      	b.n	800a8de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8e0:	f002 fa18 	bl	800cd14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d024      	beq.n	800a93a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f2:	1e5a      	subs	r2, r3, #1
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d104      	bne.n	800a90a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a900:	f001 fa34 	bl	800bd6c <pvTaskIncrementMutexHeldCount>
 800a904:	4602      	mov	r2, r0
 800a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a908:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00f      	beq.n	800a932 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	3310      	adds	r3, #16
 800a916:	4618      	mov	r0, r3
 800a918:	f000 fef4 	bl	800b704 <xTaskRemoveFromEventList>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d007      	beq.n	800a932 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a922:	4b54      	ldr	r3, [pc, #336]	; (800aa74 <xQueueSemaphoreTake+0x214>)
 800a924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a932:	f002 fa1f 	bl	800cd74 <vPortExitCritical>
				return pdPASS;
 800a936:	2301      	movs	r3, #1
 800a938:	e097      	b.n	800aa6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d111      	bne.n	800a964 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00a      	beq.n	800a95c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	617b      	str	r3, [r7, #20]
}
 800a958:	bf00      	nop
 800a95a:	e7fe      	b.n	800a95a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a95c:	f002 fa0a 	bl	800cd74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a960:	2300      	movs	r3, #0
 800a962:	e082      	b.n	800aa6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a966:	2b00      	cmp	r3, #0
 800a968:	d106      	bne.n	800a978 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a96a:	f107 030c 	add.w	r3, r7, #12
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 ff2c 	bl	800b7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a974:	2301      	movs	r3, #1
 800a976:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a978:	f002 f9fc 	bl	800cd74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a97c:	f000 fc8c 	bl	800b298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a980:	f002 f9c8 	bl	800cd14 <vPortEnterCritical>
 800a984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a98a:	b25b      	sxtb	r3, r3
 800a98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a990:	d103      	bne.n	800a99a <xQueueSemaphoreTake+0x13a>
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	2200      	movs	r2, #0
 800a996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9a0:	b25b      	sxtb	r3, r3
 800a9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a6:	d103      	bne.n	800a9b0 <xQueueSemaphoreTake+0x150>
 800a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9b0:	f002 f9e0 	bl	800cd74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9b4:	463a      	mov	r2, r7
 800a9b6:	f107 030c 	add.w	r3, r7, #12
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 ff1b 	bl	800b7f8 <xTaskCheckForTimeOut>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d132      	bne.n	800aa2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9ca:	f000 f972 	bl	800acb2 <prvIsQueueEmpty>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d026      	beq.n	800aa22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d109      	bne.n	800a9f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a9dc:	f002 f99a 	bl	800cd14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f001 f869 	bl	800babc <xTaskPriorityInherit>
 800a9ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a9ec:	f002 f9c2 	bl	800cd74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	3324      	adds	r3, #36	; 0x24
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 fe33 	bl	800b664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa00:	f000 f905 	bl	800ac0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa04:	f000 fc56 	bl	800b2b4 <xTaskResumeAll>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f47f af68 	bne.w	800a8e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aa10:	4b18      	ldr	r3, [pc, #96]	; (800aa74 <xQueueSemaphoreTake+0x214>)
 800aa12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa16:	601a      	str	r2, [r3, #0]
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	e75e      	b.n	800a8e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa24:	f000 f8f3 	bl	800ac0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa28:	f000 fc44 	bl	800b2b4 <xTaskResumeAll>
 800aa2c:	e758      	b.n	800a8e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa30:	f000 f8ed 	bl	800ac0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa34:	f000 fc3e 	bl	800b2b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa3a:	f000 f93a 	bl	800acb2 <prvIsQueueEmpty>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f43f af4d 	beq.w	800a8e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00d      	beq.n	800aa68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aa4c:	f002 f962 	bl	800cd14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aa50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa52:	f000 f834 	bl	800aabe <prvGetDisinheritPriorityAfterTimeout>
 800aa56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f001 f902 	bl	800bc68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aa64:	f002 f986 	bl	800cd74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3738      	adds	r7, #56	; 0x38
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	e000ed04 	.word	0xe000ed04

0800aa78 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10a      	bne.n	800aaa0 <vQueueDelete+0x28>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	60bb      	str	r3, [r7, #8]
}
 800aa9c:	bf00      	nop
 800aa9e:	e7fe      	b.n	800aa9e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f000 f95f 	bl	800ad64 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d102      	bne.n	800aab6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f002 fb1d 	bl	800d0f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aabe:	b480      	push	{r7}
 800aac0:	b085      	sub	sp, #20
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d006      	beq.n	800aadc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	e001      	b.n	800aae0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aadc:	2300      	movs	r3, #0
 800aade:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aae0:	68fb      	ldr	r3, [r7, #12]
	}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b086      	sub	sp, #24
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	60f8      	str	r0, [r7, #12]
 800aaf6:	60b9      	str	r1, [r7, #8]
 800aaf8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aafa:	2300      	movs	r3, #0
 800aafc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10d      	bne.n	800ab28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d14d      	bne.n	800abb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f001 f837 	bl	800bb8c <xTaskPriorityDisinherit>
 800ab1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	609a      	str	r2, [r3, #8]
 800ab26:	e043      	b.n	800abb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d119      	bne.n	800ab62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6858      	ldr	r0, [r3, #4]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab36:	461a      	mov	r2, r3
 800ab38:	68b9      	ldr	r1, [r7, #8]
 800ab3a:	f004 f9b3 	bl	800eea4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	685a      	ldr	r2, [r3, #4]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	441a      	add	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d32b      	bcc.n	800abb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	605a      	str	r2, [r3, #4]
 800ab60:	e026      	b.n	800abb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	68d8      	ldr	r0, [r3, #12]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	68b9      	ldr	r1, [r7, #8]
 800ab6e:	f004 f999 	bl	800eea4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	68da      	ldr	r2, [r3, #12]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7a:	425b      	negs	r3, r3
 800ab7c:	441a      	add	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	68da      	ldr	r2, [r3, #12]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d207      	bcs.n	800ab9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	689a      	ldr	r2, [r3, #8]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	425b      	negs	r3, r3
 800ab98:	441a      	add	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d105      	bne.n	800abb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d002      	beq.n	800abb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	3b01      	subs	r3, #1
 800abae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	1c5a      	adds	r2, r3, #1
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800abb8:	697b      	ldr	r3, [r7, #20]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d018      	beq.n	800ac06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abdc:	441a      	add	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68da      	ldr	r2, [r3, #12]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	429a      	cmp	r2, r3
 800abec:	d303      	bcc.n	800abf6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	68d9      	ldr	r1, [r3, #12]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfe:	461a      	mov	r2, r3
 800ac00:	6838      	ldr	r0, [r7, #0]
 800ac02:	f004 f94f 	bl	800eea4 <memcpy>
	}
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b084      	sub	sp, #16
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac16:	f002 f87d 	bl	800cd14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac22:	e011      	b.n	800ac48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d012      	beq.n	800ac52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3324      	adds	r3, #36	; 0x24
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 fd67 	bl	800b704 <xTaskRemoveFromEventList>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac3c:	f000 fe3e 	bl	800b8bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
 800ac42:	3b01      	subs	r3, #1
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	dce9      	bgt.n	800ac24 <prvUnlockQueue+0x16>
 800ac50:	e000      	b.n	800ac54 <prvUnlockQueue+0x46>
					break;
 800ac52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	22ff      	movs	r2, #255	; 0xff
 800ac58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ac5c:	f002 f88a 	bl	800cd74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac60:	f002 f858 	bl	800cd14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac6c:	e011      	b.n	800ac92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d012      	beq.n	800ac9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	3310      	adds	r3, #16
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 fd42 	bl	800b704 <xTaskRemoveFromEventList>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac86:	f000 fe19 	bl	800b8bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	dce9      	bgt.n	800ac6e <prvUnlockQueue+0x60>
 800ac9a:	e000      	b.n	800ac9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	22ff      	movs	r2, #255	; 0xff
 800aca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aca6:	f002 f865 	bl	800cd74 <vPortExitCritical>
}
 800acaa:	bf00      	nop
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acba:	f002 f82b 	bl	800cd14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d102      	bne.n	800accc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800acc6:	2301      	movs	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]
 800acca:	e001      	b.n	800acd0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800accc:	2300      	movs	r3, #0
 800acce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acd0:	f002 f850 	bl	800cd74 <vPortExitCritical>

	return xReturn;
 800acd4:	68fb      	ldr	r3, [r7, #12]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b084      	sub	sp, #16
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ace6:	f002 f815 	bl	800cd14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d102      	bne.n	800acfc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800acf6:	2301      	movs	r3, #1
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	e001      	b.n	800ad00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800acfc:	2300      	movs	r3, #0
 800acfe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad00:	f002 f838 	bl	800cd74 <vPortExitCritical>

	return xReturn;
 800ad04:	68fb      	ldr	r3, [r7, #12]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
	...

0800ad10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	e014      	b.n	800ad4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad20:	4a0f      	ldr	r2, [pc, #60]	; (800ad60 <vQueueAddToRegistry+0x50>)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10b      	bne.n	800ad44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad2c:	490c      	ldr	r1, [pc, #48]	; (800ad60 <vQueueAddToRegistry+0x50>)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	683a      	ldr	r2, [r7, #0]
 800ad32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad36:	4a0a      	ldr	r2, [pc, #40]	; (800ad60 <vQueueAddToRegistry+0x50>)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	4413      	add	r3, r2
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad42:	e006      	b.n	800ad52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	3301      	adds	r3, #1
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2b07      	cmp	r3, #7
 800ad4e:	d9e7      	bls.n	800ad20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad50:	bf00      	nop
 800ad52:	bf00      	nop
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	20000eb4 	.word	0x20000eb4

0800ad64 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	e016      	b.n	800ada0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ad72:	4a10      	ldr	r2, [pc, #64]	; (800adb4 <vQueueUnregisterQueue+0x50>)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	00db      	lsls	r3, r3, #3
 800ad78:	4413      	add	r3, r2
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d10b      	bne.n	800ad9a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ad82:	4a0c      	ldr	r2, [pc, #48]	; (800adb4 <vQueueUnregisterQueue+0x50>)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2100      	movs	r1, #0
 800ad88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad8c:	4a09      	ldr	r2, [pc, #36]	; (800adb4 <vQueueUnregisterQueue+0x50>)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	4413      	add	r3, r2
 800ad94:	2200      	movs	r2, #0
 800ad96:	605a      	str	r2, [r3, #4]
				break;
 800ad98:	e006      	b.n	800ada8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b07      	cmp	r3, #7
 800ada4:	d9e5      	bls.n	800ad72 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ada6:	bf00      	nop
 800ada8:	bf00      	nop
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	20000eb4 	.word	0x20000eb4

0800adb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800adc8:	f001 ffa4 	bl	800cd14 <vPortEnterCritical>
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800add2:	b25b      	sxtb	r3, r3
 800add4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add8:	d103      	bne.n	800ade2 <vQueueWaitForMessageRestricted+0x2a>
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ade8:	b25b      	sxtb	r3, r3
 800adea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adee:	d103      	bne.n	800adf8 <vQueueWaitForMessageRestricted+0x40>
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adf8:	f001 ffbc 	bl	800cd74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d106      	bne.n	800ae12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	3324      	adds	r3, #36	; 0x24
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	68b9      	ldr	r1, [r7, #8]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 fc4d 	bl	800b6ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae12:	6978      	ldr	r0, [r7, #20]
 800ae14:	f7ff fefb 	bl	800ac0e <prvUnlockQueue>
	}
 800ae18:	bf00      	nop
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08e      	sub	sp, #56	; 0x38
 800ae24:	af04      	add	r7, sp, #16
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
 800ae2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10a      	bne.n	800ae4a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	623b      	str	r3, [r7, #32]
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10a      	bne.n	800ae66 <xTaskCreateStatic+0x46>
	__asm volatile
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	61fb      	str	r3, [r7, #28]
}
 800ae62:	bf00      	nop
 800ae64:	e7fe      	b.n	800ae64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae66:	235c      	movs	r3, #92	; 0x5c
 800ae68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2b5c      	cmp	r3, #92	; 0x5c
 800ae6e:	d00a      	beq.n	800ae86 <xTaskCreateStatic+0x66>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	61bb      	str	r3, [r7, #24]
}
 800ae82:	bf00      	nop
 800ae84:	e7fe      	b.n	800ae84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d01e      	beq.n	800aecc <xTaskCreateStatic+0xac>
 800ae8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d01b      	beq.n	800aecc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea0:	2202      	movs	r2, #2
 800aea2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aea6:	2300      	movs	r3, #0
 800aea8:	9303      	str	r3, [sp, #12]
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	9302      	str	r3, [sp, #8]
 800aeae:	f107 0314 	add.w	r3, r7, #20
 800aeb2:	9301      	str	r3, [sp, #4]
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	68b9      	ldr	r1, [r7, #8]
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f000 f850 	bl	800af64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aec6:	f000 f8dd 	bl	800b084 <prvAddNewTaskToReadyList>
 800aeca:	e001      	b.n	800aed0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aecc:	2300      	movs	r3, #0
 800aece:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aed0:	697b      	ldr	r3, [r7, #20]
	}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3728      	adds	r7, #40	; 0x28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b08c      	sub	sp, #48	; 0x30
 800aede:	af04      	add	r7, sp, #16
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	603b      	str	r3, [r7, #0]
 800aee6:	4613      	mov	r3, r2
 800aee8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aeea:	88fb      	ldrh	r3, [r7, #6]
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	4618      	mov	r0, r3
 800aef0:	f002 f832 	bl	800cf58 <pvPortMalloc>
 800aef4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00e      	beq.n	800af1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aefc:	205c      	movs	r0, #92	; 0x5c
 800aefe:	f002 f82b 	bl	800cf58 <pvPortMalloc>
 800af02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d003      	beq.n	800af12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	697a      	ldr	r2, [r7, #20]
 800af0e:	631a      	str	r2, [r3, #48]	; 0x30
 800af10:	e005      	b.n	800af1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af12:	6978      	ldr	r0, [r7, #20]
 800af14:	f002 f8ec 	bl	800d0f0 <vPortFree>
 800af18:	e001      	b.n	800af1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af1a:	2300      	movs	r3, #0
 800af1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d017      	beq.n	800af54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af2c:	88fa      	ldrh	r2, [r7, #6]
 800af2e:	2300      	movs	r3, #0
 800af30:	9303      	str	r3, [sp, #12]
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	9302      	str	r3, [sp, #8]
 800af36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	68b9      	ldr	r1, [r7, #8]
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f000 f80e 	bl	800af64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af48:	69f8      	ldr	r0, [r7, #28]
 800af4a:	f000 f89b 	bl	800b084 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af4e:	2301      	movs	r3, #1
 800af50:	61bb      	str	r3, [r7, #24]
 800af52:	e002      	b.n	800af5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af54:	f04f 33ff 	mov.w	r3, #4294967295
 800af58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af5a:	69bb      	ldr	r3, [r7, #24]
	}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3720      	adds	r7, #32
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b088      	sub	sp, #32
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
 800af70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	461a      	mov	r2, r3
 800af7c:	21a5      	movs	r1, #165	; 0xa5
 800af7e:	f003 ff65 	bl	800ee4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af8c:	3b01      	subs	r3, #1
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	f023 0307 	bic.w	r3, r3, #7
 800af9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	f003 0307 	and.w	r3, r3, #7
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00a      	beq.n	800afbc <prvInitialiseNewTask+0x58>
	__asm volatile
 800afa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	617b      	str	r3, [r7, #20]
}
 800afb8:	bf00      	nop
 800afba:	e7fe      	b.n	800afba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d01f      	beq.n	800b002 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afc2:	2300      	movs	r3, #0
 800afc4:	61fb      	str	r3, [r7, #28]
 800afc6:	e012      	b.n	800afee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	4413      	add	r3, r2
 800afce:	7819      	ldrb	r1, [r3, #0]
 800afd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	4413      	add	r3, r2
 800afd6:	3334      	adds	r3, #52	; 0x34
 800afd8:	460a      	mov	r2, r1
 800afda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	4413      	add	r3, r2
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d006      	beq.n	800aff6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	3301      	adds	r3, #1
 800afec:	61fb      	str	r3, [r7, #28]
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	2b0f      	cmp	r3, #15
 800aff2:	d9e9      	bls.n	800afc8 <prvInitialiseNewTask+0x64>
 800aff4:	e000      	b.n	800aff8 <prvInitialiseNewTask+0x94>
			{
				break;
 800aff6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b000:	e003      	b.n	800b00a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	2200      	movs	r2, #0
 800b006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00c:	2b37      	cmp	r3, #55	; 0x37
 800b00e:	d901      	bls.n	800b014 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b010:	2337      	movs	r3, #55	; 0x37
 800b012:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b018:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b01e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	2200      	movs	r2, #0
 800b024:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	3304      	adds	r3, #4
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fe ff62 	bl	8009ef4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b032:	3318      	adds	r3, #24
 800b034:	4618      	mov	r0, r3
 800b036:	f7fe ff5d 	bl	8009ef4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b03e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b04e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b052:	2200      	movs	r2, #0
 800b054:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	68f9      	ldr	r1, [r7, #12]
 800b062:	69b8      	ldr	r0, [r7, #24]
 800b064:	f001 fd28 	bl	800cab8 <pxPortInitialiseStack>
 800b068:	4602      	mov	r2, r0
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b07a:	bf00      	nop
 800b07c:	3720      	adds	r7, #32
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
	...

0800b084 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b08c:	f001 fe42 	bl	800cd14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b090:	4b2d      	ldr	r3, [pc, #180]	; (800b148 <prvAddNewTaskToReadyList+0xc4>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3301      	adds	r3, #1
 800b096:	4a2c      	ldr	r2, [pc, #176]	; (800b148 <prvAddNewTaskToReadyList+0xc4>)
 800b098:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b09a:	4b2c      	ldr	r3, [pc, #176]	; (800b14c <prvAddNewTaskToReadyList+0xc8>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d109      	bne.n	800b0b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0a2:	4a2a      	ldr	r2, [pc, #168]	; (800b14c <prvAddNewTaskToReadyList+0xc8>)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0a8:	4b27      	ldr	r3, [pc, #156]	; (800b148 <prvAddNewTaskToReadyList+0xc4>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d110      	bne.n	800b0d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0b0:	f000 fc28 	bl	800b904 <prvInitialiseTaskLists>
 800b0b4:	e00d      	b.n	800b0d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0b6:	4b26      	ldr	r3, [pc, #152]	; (800b150 <prvAddNewTaskToReadyList+0xcc>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d109      	bne.n	800b0d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0be:	4b23      	ldr	r3, [pc, #140]	; (800b14c <prvAddNewTaskToReadyList+0xc8>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d802      	bhi.n	800b0d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0cc:	4a1f      	ldr	r2, [pc, #124]	; (800b14c <prvAddNewTaskToReadyList+0xc8>)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0d2:	4b20      	ldr	r3, [pc, #128]	; (800b154 <prvAddNewTaskToReadyList+0xd0>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	4a1e      	ldr	r2, [pc, #120]	; (800b154 <prvAddNewTaskToReadyList+0xd0>)
 800b0da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0dc:	4b1d      	ldr	r3, [pc, #116]	; (800b154 <prvAddNewTaskToReadyList+0xd0>)
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e8:	4b1b      	ldr	r3, [pc, #108]	; (800b158 <prvAddNewTaskToReadyList+0xd4>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d903      	bls.n	800b0f8 <prvAddNewTaskToReadyList+0x74>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f4:	4a18      	ldr	r2, [pc, #96]	; (800b158 <prvAddNewTaskToReadyList+0xd4>)
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4a15      	ldr	r2, [pc, #84]	; (800b15c <prvAddNewTaskToReadyList+0xd8>)
 800b106:	441a      	add	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3304      	adds	r3, #4
 800b10c:	4619      	mov	r1, r3
 800b10e:	4610      	mov	r0, r2
 800b110:	f7fe fefd 	bl	8009f0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b114:	f001 fe2e 	bl	800cd74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b118:	4b0d      	ldr	r3, [pc, #52]	; (800b150 <prvAddNewTaskToReadyList+0xcc>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00e      	beq.n	800b13e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b120:	4b0a      	ldr	r3, [pc, #40]	; (800b14c <prvAddNewTaskToReadyList+0xc8>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d207      	bcs.n	800b13e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b12e:	4b0c      	ldr	r3, [pc, #48]	; (800b160 <prvAddNewTaskToReadyList+0xdc>)
 800b130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b13e:	bf00      	nop
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	200013c8 	.word	0x200013c8
 800b14c:	20000ef4 	.word	0x20000ef4
 800b150:	200013d4 	.word	0x200013d4
 800b154:	200013e4 	.word	0x200013e4
 800b158:	200013d0 	.word	0x200013d0
 800b15c:	20000ef8 	.word	0x20000ef8
 800b160:	e000ed04 	.word	0xe000ed04

0800b164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b16c:	2300      	movs	r3, #0
 800b16e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d017      	beq.n	800b1a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b176:	4b13      	ldr	r3, [pc, #76]	; (800b1c4 <vTaskDelay+0x60>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <vTaskDelay+0x30>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	60bb      	str	r3, [r7, #8]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b194:	f000 f880 	bl	800b298 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b198:	2100      	movs	r1, #0
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f001 f830 	bl	800c200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1a0:	f000 f888 	bl	800b2b4 <xTaskResumeAll>
 800b1a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d107      	bne.n	800b1bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b1ac:	4b06      	ldr	r3, [pc, #24]	; (800b1c8 <vTaskDelay+0x64>)
 800b1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	f3bf 8f4f 	dsb	sy
 800b1b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1bc:	bf00      	nop
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	200013f0 	.word	0x200013f0
 800b1c8:	e000ed04 	.word	0xe000ed04

0800b1cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b08a      	sub	sp, #40	; 0x28
 800b1d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1da:	463a      	mov	r2, r7
 800b1dc:	1d39      	adds	r1, r7, #4
 800b1de:	f107 0308 	add.w	r3, r7, #8
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fe fe32 	bl	8009e4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	9202      	str	r2, [sp, #8]
 800b1f0:	9301      	str	r3, [sp, #4]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	460a      	mov	r2, r1
 800b1fa:	4921      	ldr	r1, [pc, #132]	; (800b280 <vTaskStartScheduler+0xb4>)
 800b1fc:	4821      	ldr	r0, [pc, #132]	; (800b284 <vTaskStartScheduler+0xb8>)
 800b1fe:	f7ff fe0f 	bl	800ae20 <xTaskCreateStatic>
 800b202:	4603      	mov	r3, r0
 800b204:	4a20      	ldr	r2, [pc, #128]	; (800b288 <vTaskStartScheduler+0xbc>)
 800b206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b208:	4b1f      	ldr	r3, [pc, #124]	; (800b288 <vTaskStartScheduler+0xbc>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b210:	2301      	movs	r3, #1
 800b212:	617b      	str	r3, [r7, #20]
 800b214:	e001      	b.n	800b21a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b216:	2300      	movs	r3, #0
 800b218:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d102      	bne.n	800b226 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b220:	f001 f842 	bl	800c2a8 <xTimerCreateTimerTask>
 800b224:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d116      	bne.n	800b25a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b230:	f383 8811 	msr	BASEPRI, r3
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	613b      	str	r3, [r7, #16]
}
 800b23e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b240:	4b12      	ldr	r3, [pc, #72]	; (800b28c <vTaskStartScheduler+0xc0>)
 800b242:	f04f 32ff 	mov.w	r2, #4294967295
 800b246:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b248:	4b11      	ldr	r3, [pc, #68]	; (800b290 <vTaskStartScheduler+0xc4>)
 800b24a:	2201      	movs	r2, #1
 800b24c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b24e:	4b11      	ldr	r3, [pc, #68]	; (800b294 <vTaskStartScheduler+0xc8>)
 800b250:	2200      	movs	r2, #0
 800b252:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b254:	f001 fcbc 	bl	800cbd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b258:	e00e      	b.n	800b278 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b260:	d10a      	bne.n	800b278 <vTaskStartScheduler+0xac>
	__asm volatile
 800b262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	60fb      	str	r3, [r7, #12]
}
 800b274:	bf00      	nop
 800b276:	e7fe      	b.n	800b276 <vTaskStartScheduler+0xaa>
}
 800b278:	bf00      	nop
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	0800ef48 	.word	0x0800ef48
 800b284:	0800b8d5 	.word	0x0800b8d5
 800b288:	200013ec 	.word	0x200013ec
 800b28c:	200013e8 	.word	0x200013e8
 800b290:	200013d4 	.word	0x200013d4
 800b294:	200013cc 	.word	0x200013cc

0800b298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b298:	b480      	push	{r7}
 800b29a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b29c:	4b04      	ldr	r3, [pc, #16]	; (800b2b0 <vTaskSuspendAll+0x18>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	4a03      	ldr	r2, [pc, #12]	; (800b2b0 <vTaskSuspendAll+0x18>)
 800b2a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2a6:	bf00      	nop
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	200013f0 	.word	0x200013f0

0800b2b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2c2:	4b42      	ldr	r3, [pc, #264]	; (800b3cc <xTaskResumeAll+0x118>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10a      	bne.n	800b2e0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	603b      	str	r3, [r7, #0]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2e0:	f001 fd18 	bl	800cd14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2e4:	4b39      	ldr	r3, [pc, #228]	; (800b3cc <xTaskResumeAll+0x118>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	4a38      	ldr	r2, [pc, #224]	; (800b3cc <xTaskResumeAll+0x118>)
 800b2ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ee:	4b37      	ldr	r3, [pc, #220]	; (800b3cc <xTaskResumeAll+0x118>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d162      	bne.n	800b3bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2f6:	4b36      	ldr	r3, [pc, #216]	; (800b3d0 <xTaskResumeAll+0x11c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d05e      	beq.n	800b3bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2fe:	e02f      	b.n	800b360 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b300:	4b34      	ldr	r3, [pc, #208]	; (800b3d4 <xTaskResumeAll+0x120>)
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3318      	adds	r3, #24
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fe fe5b 	bl	8009fc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3304      	adds	r3, #4
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe fe56 	bl	8009fc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b320:	4b2d      	ldr	r3, [pc, #180]	; (800b3d8 <xTaskResumeAll+0x124>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	d903      	bls.n	800b330 <xTaskResumeAll+0x7c>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32c:	4a2a      	ldr	r2, [pc, #168]	; (800b3d8 <xTaskResumeAll+0x124>)
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b334:	4613      	mov	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4413      	add	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4a27      	ldr	r2, [pc, #156]	; (800b3dc <xTaskResumeAll+0x128>)
 800b33e:	441a      	add	r2, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	3304      	adds	r3, #4
 800b344:	4619      	mov	r1, r3
 800b346:	4610      	mov	r0, r2
 800b348:	f7fe fde1 	bl	8009f0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b350:	4b23      	ldr	r3, [pc, #140]	; (800b3e0 <xTaskResumeAll+0x12c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b356:	429a      	cmp	r2, r3
 800b358:	d302      	bcc.n	800b360 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b35a:	4b22      	ldr	r3, [pc, #136]	; (800b3e4 <xTaskResumeAll+0x130>)
 800b35c:	2201      	movs	r2, #1
 800b35e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b360:	4b1c      	ldr	r3, [pc, #112]	; (800b3d4 <xTaskResumeAll+0x120>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1cb      	bne.n	800b300 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b36e:	f000 fb67 	bl	800ba40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b372:	4b1d      	ldr	r3, [pc, #116]	; (800b3e8 <xTaskResumeAll+0x134>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d010      	beq.n	800b3a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b37e:	f000 f859 	bl	800b434 <xTaskIncrementTick>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b388:	4b16      	ldr	r3, [pc, #88]	; (800b3e4 <xTaskResumeAll+0x130>)
 800b38a:	2201      	movs	r2, #1
 800b38c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	3b01      	subs	r3, #1
 800b392:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1f1      	bne.n	800b37e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b39a:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <xTaskResumeAll+0x134>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3a0:	4b10      	ldr	r3, [pc, #64]	; (800b3e4 <xTaskResumeAll+0x130>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d009      	beq.n	800b3bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3ac:	4b0f      	ldr	r3, [pc, #60]	; (800b3ec <xTaskResumeAll+0x138>)
 800b3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3bc:	f001 fcda 	bl	800cd74 <vPortExitCritical>

	return xAlreadyYielded;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	200013f0 	.word	0x200013f0
 800b3d0:	200013c8 	.word	0x200013c8
 800b3d4:	20001388 	.word	0x20001388
 800b3d8:	200013d0 	.word	0x200013d0
 800b3dc:	20000ef8 	.word	0x20000ef8
 800b3e0:	20000ef4 	.word	0x20000ef4
 800b3e4:	200013dc 	.word	0x200013dc
 800b3e8:	200013d8 	.word	0x200013d8
 800b3ec:	e000ed04 	.word	0xe000ed04

0800b3f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b3f6:	4b05      	ldr	r3, [pc, #20]	; (800b40c <xTaskGetTickCount+0x1c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b3fc:	687b      	ldr	r3, [r7, #4]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	200013cc 	.word	0x200013cc

0800b410 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b416:	f001 fd5f 	bl	800ced8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b41a:	2300      	movs	r3, #0
 800b41c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b41e:	4b04      	ldr	r3, [pc, #16]	; (800b430 <xTaskGetTickCountFromISR+0x20>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b424:	683b      	ldr	r3, [r7, #0]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	200013cc 	.word	0x200013cc

0800b434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b43a:	2300      	movs	r3, #0
 800b43c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b43e:	4b4f      	ldr	r3, [pc, #316]	; (800b57c <xTaskIncrementTick+0x148>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	f040 808f 	bne.w	800b566 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b448:	4b4d      	ldr	r3, [pc, #308]	; (800b580 <xTaskIncrementTick+0x14c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3301      	adds	r3, #1
 800b44e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b450:	4a4b      	ldr	r2, [pc, #300]	; (800b580 <xTaskIncrementTick+0x14c>)
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d120      	bne.n	800b49e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b45c:	4b49      	ldr	r3, [pc, #292]	; (800b584 <xTaskIncrementTick+0x150>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00a      	beq.n	800b47c <xTaskIncrementTick+0x48>
	__asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	603b      	str	r3, [r7, #0]
}
 800b478:	bf00      	nop
 800b47a:	e7fe      	b.n	800b47a <xTaskIncrementTick+0x46>
 800b47c:	4b41      	ldr	r3, [pc, #260]	; (800b584 <xTaskIncrementTick+0x150>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	4b41      	ldr	r3, [pc, #260]	; (800b588 <xTaskIncrementTick+0x154>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a3f      	ldr	r2, [pc, #252]	; (800b584 <xTaskIncrementTick+0x150>)
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	4a3f      	ldr	r2, [pc, #252]	; (800b588 <xTaskIncrementTick+0x154>)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6013      	str	r3, [r2, #0]
 800b490:	4b3e      	ldr	r3, [pc, #248]	; (800b58c <xTaskIncrementTick+0x158>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3301      	adds	r3, #1
 800b496:	4a3d      	ldr	r2, [pc, #244]	; (800b58c <xTaskIncrementTick+0x158>)
 800b498:	6013      	str	r3, [r2, #0]
 800b49a:	f000 fad1 	bl	800ba40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b49e:	4b3c      	ldr	r3, [pc, #240]	; (800b590 <xTaskIncrementTick+0x15c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	693a      	ldr	r2, [r7, #16]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d349      	bcc.n	800b53c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4a8:	4b36      	ldr	r3, [pc, #216]	; (800b584 <xTaskIncrementTick+0x150>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d104      	bne.n	800b4bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4b2:	4b37      	ldr	r3, [pc, #220]	; (800b590 <xTaskIncrementTick+0x15c>)
 800b4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b8:	601a      	str	r2, [r3, #0]
					break;
 800b4ba:	e03f      	b.n	800b53c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4bc:	4b31      	ldr	r3, [pc, #196]	; (800b584 <xTaskIncrementTick+0x150>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4cc:	693a      	ldr	r2, [r7, #16]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d203      	bcs.n	800b4dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4d4:	4a2e      	ldr	r2, [pc, #184]	; (800b590 <xTaskIncrementTick+0x15c>)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4da:	e02f      	b.n	800b53c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7fe fd71 	bl	8009fc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d004      	beq.n	800b4f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	3318      	adds	r3, #24
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fe fd68 	bl	8009fc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fc:	4b25      	ldr	r3, [pc, #148]	; (800b594 <xTaskIncrementTick+0x160>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	429a      	cmp	r2, r3
 800b502:	d903      	bls.n	800b50c <xTaskIncrementTick+0xd8>
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b508:	4a22      	ldr	r2, [pc, #136]	; (800b594 <xTaskIncrementTick+0x160>)
 800b50a:	6013      	str	r3, [r2, #0]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b510:	4613      	mov	r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4413      	add	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4a1f      	ldr	r2, [pc, #124]	; (800b598 <xTaskIncrementTick+0x164>)
 800b51a:	441a      	add	r2, r3
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	3304      	adds	r3, #4
 800b520:	4619      	mov	r1, r3
 800b522:	4610      	mov	r0, r2
 800b524:	f7fe fcf3 	bl	8009f0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52c:	4b1b      	ldr	r3, [pc, #108]	; (800b59c <xTaskIncrementTick+0x168>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b532:	429a      	cmp	r2, r3
 800b534:	d3b8      	bcc.n	800b4a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b536:	2301      	movs	r3, #1
 800b538:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b53a:	e7b5      	b.n	800b4a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b53c:	4b17      	ldr	r3, [pc, #92]	; (800b59c <xTaskIncrementTick+0x168>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b542:	4915      	ldr	r1, [pc, #84]	; (800b598 <xTaskIncrementTick+0x164>)
 800b544:	4613      	mov	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	440b      	add	r3, r1
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d901      	bls.n	800b558 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b554:	2301      	movs	r3, #1
 800b556:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b558:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <xTaskIncrementTick+0x16c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d007      	beq.n	800b570 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b560:	2301      	movs	r3, #1
 800b562:	617b      	str	r3, [r7, #20]
 800b564:	e004      	b.n	800b570 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b566:	4b0f      	ldr	r3, [pc, #60]	; (800b5a4 <xTaskIncrementTick+0x170>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3301      	adds	r3, #1
 800b56c:	4a0d      	ldr	r2, [pc, #52]	; (800b5a4 <xTaskIncrementTick+0x170>)
 800b56e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b570:	697b      	ldr	r3, [r7, #20]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3718      	adds	r7, #24
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	200013f0 	.word	0x200013f0
 800b580:	200013cc 	.word	0x200013cc
 800b584:	20001380 	.word	0x20001380
 800b588:	20001384 	.word	0x20001384
 800b58c:	200013e0 	.word	0x200013e0
 800b590:	200013e8 	.word	0x200013e8
 800b594:	200013d0 	.word	0x200013d0
 800b598:	20000ef8 	.word	0x20000ef8
 800b59c:	20000ef4 	.word	0x20000ef4
 800b5a0:	200013dc 	.word	0x200013dc
 800b5a4:	200013d8 	.word	0x200013d8

0800b5a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b5ae:	4b28      	ldr	r3, [pc, #160]	; (800b650 <vTaskSwitchContext+0xa8>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5b6:	4b27      	ldr	r3, [pc, #156]	; (800b654 <vTaskSwitchContext+0xac>)
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5bc:	e041      	b.n	800b642 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b5be:	4b25      	ldr	r3, [pc, #148]	; (800b654 <vTaskSwitchContext+0xac>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c4:	4b24      	ldr	r3, [pc, #144]	; (800b658 <vTaskSwitchContext+0xb0>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	60fb      	str	r3, [r7, #12]
 800b5ca:	e010      	b.n	800b5ee <vTaskSwitchContext+0x46>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10a      	bne.n	800b5e8 <vTaskSwitchContext+0x40>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	607b      	str	r3, [r7, #4]
}
 800b5e4:	bf00      	nop
 800b5e6:	e7fe      	b.n	800b5e6 <vTaskSwitchContext+0x3e>
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	60fb      	str	r3, [r7, #12]
 800b5ee:	491b      	ldr	r1, [pc, #108]	; (800b65c <vTaskSwitchContext+0xb4>)
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4413      	add	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	440b      	add	r3, r1
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0e4      	beq.n	800b5cc <vTaskSwitchContext+0x24>
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	4613      	mov	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	4413      	add	r3, r2
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4a13      	ldr	r2, [pc, #76]	; (800b65c <vTaskSwitchContext+0xb4>)
 800b60e:	4413      	add	r3, r2
 800b610:	60bb      	str	r3, [r7, #8]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	685a      	ldr	r2, [r3, #4]
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	605a      	str	r2, [r3, #4]
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	3308      	adds	r3, #8
 800b624:	429a      	cmp	r2, r3
 800b626:	d104      	bne.n	800b632 <vTaskSwitchContext+0x8a>
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	685a      	ldr	r2, [r3, #4]
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	605a      	str	r2, [r3, #4]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	4a09      	ldr	r2, [pc, #36]	; (800b660 <vTaskSwitchContext+0xb8>)
 800b63a:	6013      	str	r3, [r2, #0]
 800b63c:	4a06      	ldr	r2, [pc, #24]	; (800b658 <vTaskSwitchContext+0xb0>)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6013      	str	r3, [r2, #0]
}
 800b642:	bf00      	nop
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	200013f0 	.word	0x200013f0
 800b654:	200013dc 	.word	0x200013dc
 800b658:	200013d0 	.word	0x200013d0
 800b65c:	20000ef8 	.word	0x20000ef8
 800b660:	20000ef4 	.word	0x20000ef4

0800b664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10a      	bne.n	800b68a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b678:	f383 8811 	msr	BASEPRI, r3
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	60fb      	str	r3, [r7, #12]
}
 800b686:	bf00      	nop
 800b688:	e7fe      	b.n	800b688 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b68a:	4b07      	ldr	r3, [pc, #28]	; (800b6a8 <vTaskPlaceOnEventList+0x44>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3318      	adds	r3, #24
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7fe fc5f 	bl	8009f56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b698:	2101      	movs	r1, #1
 800b69a:	6838      	ldr	r0, [r7, #0]
 800b69c:	f000 fdb0 	bl	800c200 <prvAddCurrentTaskToDelayedList>
}
 800b6a0:	bf00      	nop
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	20000ef4 	.word	0x20000ef4

0800b6ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10a      	bne.n	800b6d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	617b      	str	r3, [r7, #20]
}
 800b6d0:	bf00      	nop
 800b6d2:	e7fe      	b.n	800b6d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6d4:	4b0a      	ldr	r3, [pc, #40]	; (800b700 <vTaskPlaceOnEventListRestricted+0x54>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	3318      	adds	r3, #24
 800b6da:	4619      	mov	r1, r3
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f7fe fc16 	bl	8009f0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6ee:	6879      	ldr	r1, [r7, #4]
 800b6f0:	68b8      	ldr	r0, [r7, #8]
 800b6f2:	f000 fd85 	bl	800c200 <prvAddCurrentTaskToDelayedList>
	}
 800b6f6:	bf00      	nop
 800b6f8:	3718      	adds	r7, #24
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	20000ef4 	.word	0x20000ef4

0800b704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10a      	bne.n	800b730 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	60fb      	str	r3, [r7, #12]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	3318      	adds	r3, #24
 800b734:	4618      	mov	r0, r3
 800b736:	f7fe fc47 	bl	8009fc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b73a:	4b1e      	ldr	r3, [pc, #120]	; (800b7b4 <xTaskRemoveFromEventList+0xb0>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d11d      	bne.n	800b77e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	3304      	adds	r3, #4
 800b746:	4618      	mov	r0, r3
 800b748:	f7fe fc3e 	bl	8009fc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b750:	4b19      	ldr	r3, [pc, #100]	; (800b7b8 <xTaskRemoveFromEventList+0xb4>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	429a      	cmp	r2, r3
 800b756:	d903      	bls.n	800b760 <xTaskRemoveFromEventList+0x5c>
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75c:	4a16      	ldr	r2, [pc, #88]	; (800b7b8 <xTaskRemoveFromEventList+0xb4>)
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b764:	4613      	mov	r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4a13      	ldr	r2, [pc, #76]	; (800b7bc <xTaskRemoveFromEventList+0xb8>)
 800b76e:	441a      	add	r2, r3
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	3304      	adds	r3, #4
 800b774:	4619      	mov	r1, r3
 800b776:	4610      	mov	r0, r2
 800b778:	f7fe fbc9 	bl	8009f0e <vListInsertEnd>
 800b77c:	e005      	b.n	800b78a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	3318      	adds	r3, #24
 800b782:	4619      	mov	r1, r3
 800b784:	480e      	ldr	r0, [pc, #56]	; (800b7c0 <xTaskRemoveFromEventList+0xbc>)
 800b786:	f7fe fbc2 	bl	8009f0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78e:	4b0d      	ldr	r3, [pc, #52]	; (800b7c4 <xTaskRemoveFromEventList+0xc0>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b794:	429a      	cmp	r2, r3
 800b796:	d905      	bls.n	800b7a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b798:	2301      	movs	r3, #1
 800b79a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b79c:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <xTaskRemoveFromEventList+0xc4>)
 800b79e:	2201      	movs	r2, #1
 800b7a0:	601a      	str	r2, [r3, #0]
 800b7a2:	e001      	b.n	800b7a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b7a8:	697b      	ldr	r3, [r7, #20]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3718      	adds	r7, #24
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	200013f0 	.word	0x200013f0
 800b7b8:	200013d0 	.word	0x200013d0
 800b7bc:	20000ef8 	.word	0x20000ef8
 800b7c0:	20001388 	.word	0x20001388
 800b7c4:	20000ef4 	.word	0x20000ef4
 800b7c8:	200013dc 	.word	0x200013dc

0800b7cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7d4:	4b06      	ldr	r3, [pc, #24]	; (800b7f0 <vTaskInternalSetTimeOutState+0x24>)
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7dc:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <vTaskInternalSetTimeOutState+0x28>)
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	605a      	str	r2, [r3, #4]
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	200013e0 	.word	0x200013e0
 800b7f4:	200013cc 	.word	0x200013cc

0800b7f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10a      	bne.n	800b81e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80c:	f383 8811 	msr	BASEPRI, r3
 800b810:	f3bf 8f6f 	isb	sy
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	613b      	str	r3, [r7, #16]
}
 800b81a:	bf00      	nop
 800b81c:	e7fe      	b.n	800b81c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10a      	bne.n	800b83a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b828:	f383 8811 	msr	BASEPRI, r3
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	60fb      	str	r3, [r7, #12]
}
 800b836:	bf00      	nop
 800b838:	e7fe      	b.n	800b838 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b83a:	f001 fa6b 	bl	800cd14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b83e:	4b1d      	ldr	r3, [pc, #116]	; (800b8b4 <xTaskCheckForTimeOut+0xbc>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	69ba      	ldr	r2, [r7, #24]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b856:	d102      	bne.n	800b85e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b858:	2300      	movs	r3, #0
 800b85a:	61fb      	str	r3, [r7, #28]
 800b85c:	e023      	b.n	800b8a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	4b15      	ldr	r3, [pc, #84]	; (800b8b8 <xTaskCheckForTimeOut+0xc0>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	429a      	cmp	r2, r3
 800b868:	d007      	beq.n	800b87a <xTaskCheckForTimeOut+0x82>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	69ba      	ldr	r2, [r7, #24]
 800b870:	429a      	cmp	r2, r3
 800b872:	d302      	bcc.n	800b87a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b874:	2301      	movs	r3, #1
 800b876:	61fb      	str	r3, [r7, #28]
 800b878:	e015      	b.n	800b8a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	429a      	cmp	r2, r3
 800b882:	d20b      	bcs.n	800b89c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	1ad2      	subs	r2, r2, r3
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7ff ff9b 	bl	800b7cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b896:	2300      	movs	r3, #0
 800b898:	61fb      	str	r3, [r7, #28]
 800b89a:	e004      	b.n	800b8a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b8a6:	f001 fa65 	bl	800cd74 <vPortExitCritical>

	return xReturn;
 800b8aa:	69fb      	ldr	r3, [r7, #28]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3720      	adds	r7, #32
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	200013cc 	.word	0x200013cc
 800b8b8:	200013e0 	.word	0x200013e0

0800b8bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b8bc:	b480      	push	{r7}
 800b8be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8c0:	4b03      	ldr	r3, [pc, #12]	; (800b8d0 <vTaskMissedYield+0x14>)
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	601a      	str	r2, [r3, #0]
}
 800b8c6:	bf00      	nop
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	200013dc 	.word	0x200013dc

0800b8d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8dc:	f000 f852 	bl	800b984 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8e0:	4b06      	ldr	r3, [pc, #24]	; (800b8fc <prvIdleTask+0x28>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d9f9      	bls.n	800b8dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8e8:	4b05      	ldr	r3, [pc, #20]	; (800b900 <prvIdleTask+0x2c>)
 800b8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8f8:	e7f0      	b.n	800b8dc <prvIdleTask+0x8>
 800b8fa:	bf00      	nop
 800b8fc:	20000ef8 	.word	0x20000ef8
 800b900:	e000ed04 	.word	0xe000ed04

0800b904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b90a:	2300      	movs	r3, #0
 800b90c:	607b      	str	r3, [r7, #4]
 800b90e:	e00c      	b.n	800b92a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	4613      	mov	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4413      	add	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4a12      	ldr	r2, [pc, #72]	; (800b964 <prvInitialiseTaskLists+0x60>)
 800b91c:	4413      	add	r3, r2
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fac8 	bl	8009eb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	3301      	adds	r3, #1
 800b928:	607b      	str	r3, [r7, #4]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b37      	cmp	r3, #55	; 0x37
 800b92e:	d9ef      	bls.n	800b910 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b930:	480d      	ldr	r0, [pc, #52]	; (800b968 <prvInitialiseTaskLists+0x64>)
 800b932:	f7fe fabf 	bl	8009eb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b936:	480d      	ldr	r0, [pc, #52]	; (800b96c <prvInitialiseTaskLists+0x68>)
 800b938:	f7fe fabc 	bl	8009eb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b93c:	480c      	ldr	r0, [pc, #48]	; (800b970 <prvInitialiseTaskLists+0x6c>)
 800b93e:	f7fe fab9 	bl	8009eb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b942:	480c      	ldr	r0, [pc, #48]	; (800b974 <prvInitialiseTaskLists+0x70>)
 800b944:	f7fe fab6 	bl	8009eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b948:	480b      	ldr	r0, [pc, #44]	; (800b978 <prvInitialiseTaskLists+0x74>)
 800b94a:	f7fe fab3 	bl	8009eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b94e:	4b0b      	ldr	r3, [pc, #44]	; (800b97c <prvInitialiseTaskLists+0x78>)
 800b950:	4a05      	ldr	r2, [pc, #20]	; (800b968 <prvInitialiseTaskLists+0x64>)
 800b952:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b954:	4b0a      	ldr	r3, [pc, #40]	; (800b980 <prvInitialiseTaskLists+0x7c>)
 800b956:	4a05      	ldr	r2, [pc, #20]	; (800b96c <prvInitialiseTaskLists+0x68>)
 800b958:	601a      	str	r2, [r3, #0]
}
 800b95a:	bf00      	nop
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	20000ef8 	.word	0x20000ef8
 800b968:	20001358 	.word	0x20001358
 800b96c:	2000136c 	.word	0x2000136c
 800b970:	20001388 	.word	0x20001388
 800b974:	2000139c 	.word	0x2000139c
 800b978:	200013b4 	.word	0x200013b4
 800b97c:	20001380 	.word	0x20001380
 800b980:	20001384 	.word	0x20001384

0800b984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b98a:	e019      	b.n	800b9c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b98c:	f001 f9c2 	bl	800cd14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b990:	4b10      	ldr	r3, [pc, #64]	; (800b9d4 <prvCheckTasksWaitingTermination+0x50>)
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	3304      	adds	r3, #4
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe fb13 	bl	8009fc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b9a2:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <prvCheckTasksWaitingTermination+0x54>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	4a0b      	ldr	r2, [pc, #44]	; (800b9d8 <prvCheckTasksWaitingTermination+0x54>)
 800b9aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b9ac:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <prvCheckTasksWaitingTermination+0x58>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	4a0a      	ldr	r2, [pc, #40]	; (800b9dc <prvCheckTasksWaitingTermination+0x58>)
 800b9b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b9b6:	f001 f9dd 	bl	800cd74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f810 	bl	800b9e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9c0:	4b06      	ldr	r3, [pc, #24]	; (800b9dc <prvCheckTasksWaitingTermination+0x58>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e1      	bne.n	800b98c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	2000139c 	.word	0x2000139c
 800b9d8:	200013c8 	.word	0x200013c8
 800b9dc:	200013b0 	.word	0x200013b0

0800b9e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d108      	bne.n	800ba04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f001 fb7a 	bl	800d0f0 <vPortFree>
				vPortFree( pxTCB );
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f001 fb77 	bl	800d0f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba02:	e018      	b.n	800ba36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d103      	bne.n	800ba16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f001 fb6e 	bl	800d0f0 <vPortFree>
	}
 800ba14:	e00f      	b.n	800ba36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d00a      	beq.n	800ba36 <prvDeleteTCB+0x56>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	60fb      	str	r3, [r7, #12]
}
 800ba32:	bf00      	nop
 800ba34:	e7fe      	b.n	800ba34 <prvDeleteTCB+0x54>
	}
 800ba36:	bf00      	nop
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
	...

0800ba40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba46:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <prvResetNextTaskUnblockTime+0x38>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d104      	bne.n	800ba5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba50:	4b0a      	ldr	r3, [pc, #40]	; (800ba7c <prvResetNextTaskUnblockTime+0x3c>)
 800ba52:	f04f 32ff 	mov.w	r2, #4294967295
 800ba56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba58:	e008      	b.n	800ba6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba5a:	4b07      	ldr	r3, [pc, #28]	; (800ba78 <prvResetNextTaskUnblockTime+0x38>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	4a04      	ldr	r2, [pc, #16]	; (800ba7c <prvResetNextTaskUnblockTime+0x3c>)
 800ba6a:	6013      	str	r3, [r2, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr
 800ba78:	20001380 	.word	0x20001380
 800ba7c:	200013e8 	.word	0x200013e8

0800ba80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba86:	4b0b      	ldr	r3, [pc, #44]	; (800bab4 <xTaskGetSchedulerState+0x34>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d102      	bne.n	800ba94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	607b      	str	r3, [r7, #4]
 800ba92:	e008      	b.n	800baa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba94:	4b08      	ldr	r3, [pc, #32]	; (800bab8 <xTaskGetSchedulerState+0x38>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d102      	bne.n	800baa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	607b      	str	r3, [r7, #4]
 800baa0:	e001      	b.n	800baa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800baa2:	2300      	movs	r3, #0
 800baa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800baa6:	687b      	ldr	r3, [r7, #4]
	}
 800baa8:	4618      	mov	r0, r3
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	200013d4 	.word	0x200013d4
 800bab8:	200013f0 	.word	0x200013f0

0800babc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bac8:	2300      	movs	r3, #0
 800baca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d051      	beq.n	800bb76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad6:	4b2a      	ldr	r3, [pc, #168]	; (800bb80 <xTaskPriorityInherit+0xc4>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	429a      	cmp	r2, r3
 800bade:	d241      	bcs.n	800bb64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	db06      	blt.n	800baf6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bae8:	4b25      	ldr	r3, [pc, #148]	; (800bb80 <xTaskPriorityInherit+0xc4>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	6959      	ldr	r1, [r3, #20]
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafe:	4613      	mov	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4a1f      	ldr	r2, [pc, #124]	; (800bb84 <xTaskPriorityInherit+0xc8>)
 800bb08:	4413      	add	r3, r2
 800bb0a:	4299      	cmp	r1, r3
 800bb0c:	d122      	bne.n	800bb54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	3304      	adds	r3, #4
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fe fa58 	bl	8009fc8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb18:	4b19      	ldr	r3, [pc, #100]	; (800bb80 <xTaskPriorityInherit+0xc4>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb26:	4b18      	ldr	r3, [pc, #96]	; (800bb88 <xTaskPriorityInherit+0xcc>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d903      	bls.n	800bb36 <xTaskPriorityInherit+0x7a>
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb32:	4a15      	ldr	r2, [pc, #84]	; (800bb88 <xTaskPriorityInherit+0xcc>)
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4a10      	ldr	r2, [pc, #64]	; (800bb84 <xTaskPriorityInherit+0xc8>)
 800bb44:	441a      	add	r2, r3
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	f7fe f9de 	bl	8009f0e <vListInsertEnd>
 800bb52:	e004      	b.n	800bb5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb54:	4b0a      	ldr	r3, [pc, #40]	; (800bb80 <xTaskPriorityInherit+0xc4>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	60fb      	str	r3, [r7, #12]
 800bb62:	e008      	b.n	800bb76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb68:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <xTaskPriorityInherit+0xc4>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d201      	bcs.n	800bb76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb72:	2301      	movs	r3, #1
 800bb74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb76:	68fb      	ldr	r3, [r7, #12]
	}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	20000ef4 	.word	0x20000ef4
 800bb84:	20000ef8 	.word	0x20000ef8
 800bb88:	200013d0 	.word	0x200013d0

0800bb8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d056      	beq.n	800bc50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bba2:	4b2e      	ldr	r3, [pc, #184]	; (800bc5c <xTaskPriorityDisinherit+0xd0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d00a      	beq.n	800bbc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	60fb      	str	r3, [r7, #12]
}
 800bbbe:	bf00      	nop
 800bbc0:	e7fe      	b.n	800bbc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10a      	bne.n	800bbe0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	60bb      	str	r3, [r7, #8]
}
 800bbdc:	bf00      	nop
 800bbde:	e7fe      	b.n	800bbde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbe4:	1e5a      	subs	r2, r3, #1
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d02c      	beq.n	800bc50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d128      	bne.n	800bc50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	3304      	adds	r3, #4
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fe f9e0 	bl	8009fc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc20:	4b0f      	ldr	r3, [pc, #60]	; (800bc60 <xTaskPriorityDisinherit+0xd4>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d903      	bls.n	800bc30 <xTaskPriorityDisinherit+0xa4>
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2c:	4a0c      	ldr	r2, [pc, #48]	; (800bc60 <xTaskPriorityDisinherit+0xd4>)
 800bc2e:	6013      	str	r3, [r2, #0]
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc34:	4613      	mov	r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	4413      	add	r3, r2
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	4a09      	ldr	r2, [pc, #36]	; (800bc64 <xTaskPriorityDisinherit+0xd8>)
 800bc3e:	441a      	add	r2, r3
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	3304      	adds	r3, #4
 800bc44:	4619      	mov	r1, r3
 800bc46:	4610      	mov	r0, r2
 800bc48:	f7fe f961 	bl	8009f0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc50:	697b      	ldr	r3, [r7, #20]
	}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3718      	adds	r7, #24
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	20000ef4 	.word	0x20000ef4
 800bc60:	200013d0 	.word	0x200013d0
 800bc64:	20000ef8 	.word	0x20000ef8

0800bc68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b088      	sub	sp, #32
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc76:	2301      	movs	r3, #1
 800bc78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d06a      	beq.n	800bd56 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10a      	bne.n	800bc9e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	60fb      	str	r3, [r7, #12]
}
 800bc9a:	bf00      	nop
 800bc9c:	e7fe      	b.n	800bc9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d902      	bls.n	800bcae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	61fb      	str	r3, [r7, #28]
 800bcac:	e002      	b.n	800bcb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcb2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb8:	69fa      	ldr	r2, [r7, #28]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d04b      	beq.n	800bd56 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bcbe:	69bb      	ldr	r3, [r7, #24]
 800bcc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcc2:	697a      	ldr	r2, [r7, #20]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d146      	bne.n	800bd56 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bcc8:	4b25      	ldr	r3, [pc, #148]	; (800bd60 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	69ba      	ldr	r2, [r7, #24]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d10a      	bne.n	800bce8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	60bb      	str	r3, [r7, #8]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	69fa      	ldr	r2, [r7, #28]
 800bcf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	db04      	blt.n	800bd06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	6959      	ldr	r1, [r3, #20]
 800bd0a:	693a      	ldr	r2, [r7, #16]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4413      	add	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4a13      	ldr	r2, [pc, #76]	; (800bd64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd16:	4413      	add	r3, r2
 800bd18:	4299      	cmp	r1, r3
 800bd1a:	d11c      	bne.n	800bd56 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	3304      	adds	r3, #4
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7fe f951 	bl	8009fc8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2a:	4b0f      	ldr	r3, [pc, #60]	; (800bd68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d903      	bls.n	800bd3a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd36:	4a0c      	ldr	r2, [pc, #48]	; (800bd68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3e:	4613      	mov	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4a07      	ldr	r2, [pc, #28]	; (800bd64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd48:	441a      	add	r2, r3
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4610      	mov	r0, r2
 800bd52:	f7fe f8dc 	bl	8009f0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd56:	bf00      	nop
 800bd58:	3720      	adds	r7, #32
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	20000ef4 	.word	0x20000ef4
 800bd64:	20000ef8 	.word	0x20000ef8
 800bd68:	200013d0 	.word	0x200013d0

0800bd6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bd6c:	b480      	push	{r7}
 800bd6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bd70:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d004      	beq.n	800bd82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bd78:	4b05      	ldr	r3, [pc, #20]	; (800bd90 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd7e:	3201      	adds	r2, #1
 800bd80:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bd82:	4b03      	ldr	r3, [pc, #12]	; (800bd90 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd84:	681b      	ldr	r3, [r3, #0]
	}
 800bd86:	4618      	mov	r0, r3
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr
 800bd90:	20000ef4 	.word	0x20000ef4

0800bd94 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bd9e:	f000 ffb9 	bl	800cd14 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bda2:	4b1e      	ldr	r3, [pc, #120]	; (800be1c <ulTaskNotifyTake+0x88>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d113      	bne.n	800bdd4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bdac:	4b1b      	ldr	r3, [pc, #108]	; (800be1c <ulTaskNotifyTake+0x88>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00b      	beq.n	800bdd4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	6838      	ldr	r0, [r7, #0]
 800bdc0:	f000 fa1e 	bl	800c200 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bdc4:	4b16      	ldr	r3, [pc, #88]	; (800be20 <ulTaskNotifyTake+0x8c>)
 800bdc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bdd4:	f000 ffce 	bl	800cd74 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bdd8:	f000 ff9c 	bl	800cd14 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bddc:	4b0f      	ldr	r3, [pc, #60]	; (800be1c <ulTaskNotifyTake+0x88>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00c      	beq.n	800be04 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d004      	beq.n	800bdfa <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bdf0:	4b0a      	ldr	r3, [pc, #40]	; (800be1c <ulTaskNotifyTake+0x88>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	655a      	str	r2, [r3, #84]	; 0x54
 800bdf8:	e004      	b.n	800be04 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bdfa:	4b08      	ldr	r3, [pc, #32]	; (800be1c <ulTaskNotifyTake+0x88>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	3a01      	subs	r2, #1
 800be02:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be04:	4b05      	ldr	r3, [pc, #20]	; (800be1c <ulTaskNotifyTake+0x88>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800be0e:	f000 ffb1 	bl	800cd74 <vPortExitCritical>

		return ulReturn;
 800be12:	68fb      	ldr	r3, [r7, #12]
	}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	20000ef4 	.word	0x20000ef4
 800be20:	e000ed04 	.word	0xe000ed04

0800be24 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800be32:	f000 ff6f 	bl	800cd14 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800be36:	4b26      	ldr	r3, [pc, #152]	; (800bed0 <xTaskNotifyWait+0xac>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	2b02      	cmp	r3, #2
 800be42:	d01a      	beq.n	800be7a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800be44:	4b22      	ldr	r3, [pc, #136]	; (800bed0 <xTaskNotifyWait+0xac>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	43d2      	mvns	r2, r2
 800be4e:	400a      	ands	r2, r1
 800be50:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800be52:	4b1f      	ldr	r3, [pc, #124]	; (800bed0 <xTaskNotifyWait+0xac>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2201      	movs	r2, #1
 800be58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00b      	beq.n	800be7a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be62:	2101      	movs	r1, #1
 800be64:	6838      	ldr	r0, [r7, #0]
 800be66:	f000 f9cb 	bl	800c200 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800be6a:	4b1a      	ldr	r3, [pc, #104]	; (800bed4 <xTaskNotifyWait+0xb0>)
 800be6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be70:	601a      	str	r2, [r3, #0]
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800be7a:	f000 ff7b 	bl	800cd74 <vPortExitCritical>

		taskENTER_CRITICAL();
 800be7e:	f000 ff49 	bl	800cd14 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d004      	beq.n	800be92 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800be88:	4b11      	ldr	r3, [pc, #68]	; (800bed0 <xTaskNotifyWait+0xac>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800be92:	4b0f      	ldr	r3, [pc, #60]	; (800bed0 <xTaskNotifyWait+0xac>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d002      	beq.n	800bea6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bea0:	2300      	movs	r3, #0
 800bea2:	617b      	str	r3, [r7, #20]
 800bea4:	e008      	b.n	800beb8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bea6:	4b0a      	ldr	r3, [pc, #40]	; (800bed0 <xTaskNotifyWait+0xac>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	43d2      	mvns	r2, r2
 800beb0:	400a      	ands	r2, r1
 800beb2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800beb4:	2301      	movs	r3, #1
 800beb6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800beb8:	4b05      	ldr	r3, [pc, #20]	; (800bed0 <xTaskNotifyWait+0xac>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bec2:	f000 ff57 	bl	800cd74 <vPortExitCritical>

		return xReturn;
 800bec6:	697b      	ldr	r3, [r7, #20]
	}
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	20000ef4 	.word	0x20000ef4
 800bed4:	e000ed04 	.word	0xe000ed04

0800bed8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b08a      	sub	sp, #40	; 0x28
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	603b      	str	r3, [r7, #0]
 800bee4:	4613      	mov	r3, r2
 800bee6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bee8:	2301      	movs	r3, #1
 800beea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10a      	bne.n	800bf08 <xTaskGenericNotify+0x30>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	61bb      	str	r3, [r7, #24]
}
 800bf04:	bf00      	nop
 800bf06:	e7fe      	b.n	800bf06 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bf0c:	f000 ff02 	bl	800cd14 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bf1e:	6a3b      	ldr	r3, [r7, #32]
 800bf20:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bf24:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bf26:	6a3b      	ldr	r3, [r7, #32]
 800bf28:	2202      	movs	r2, #2
 800bf2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800bf2e:	79fb      	ldrb	r3, [r7, #7]
 800bf30:	2b04      	cmp	r3, #4
 800bf32:	d828      	bhi.n	800bf86 <xTaskGenericNotify+0xae>
 800bf34:	a201      	add	r2, pc, #4	; (adr r2, 800bf3c <xTaskGenericNotify+0x64>)
 800bf36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf3a:	bf00      	nop
 800bf3c:	0800bfa7 	.word	0x0800bfa7
 800bf40:	0800bf51 	.word	0x0800bf51
 800bf44:	0800bf5f 	.word	0x0800bf5f
 800bf48:	0800bf6b 	.word	0x0800bf6b
 800bf4c:	0800bf73 	.word	0x0800bf73
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bf50:	6a3b      	ldr	r3, [r7, #32]
 800bf52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	431a      	orrs	r2, r3
 800bf58:	6a3b      	ldr	r3, [r7, #32]
 800bf5a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bf5c:	e026      	b.n	800bfac <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf62:	1c5a      	adds	r2, r3, #1
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bf68:	e020      	b.n	800bfac <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bf6a:	6a3b      	ldr	r3, [r7, #32]
 800bf6c:	68ba      	ldr	r2, [r7, #8]
 800bf6e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bf70:	e01c      	b.n	800bfac <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bf72:	7ffb      	ldrb	r3, [r7, #31]
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d003      	beq.n	800bf80 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bf78:	6a3b      	ldr	r3, [r7, #32]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bf7e:	e015      	b.n	800bfac <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bf84:	e012      	b.n	800bfac <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf8e:	d00c      	beq.n	800bfaa <xTaskGenericNotify+0xd2>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	617b      	str	r3, [r7, #20]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xTaskGenericNotify+0xcc>
					break;
 800bfa6:	bf00      	nop
 800bfa8:	e000      	b.n	800bfac <xTaskGenericNotify+0xd4>

					break;
 800bfaa:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bfac:	7ffb      	ldrb	r3, [r7, #31]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d13a      	bne.n	800c028 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfb2:	6a3b      	ldr	r3, [r7, #32]
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fe f806 	bl	8009fc8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bfbc:	6a3b      	ldr	r3, [r7, #32]
 800bfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc0:	4b1d      	ldr	r3, [pc, #116]	; (800c038 <xTaskGenericNotify+0x160>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d903      	bls.n	800bfd0 <xTaskGenericNotify+0xf8>
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfcc:	4a1a      	ldr	r2, [pc, #104]	; (800c038 <xTaskGenericNotify+0x160>)
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4a17      	ldr	r2, [pc, #92]	; (800c03c <xTaskGenericNotify+0x164>)
 800bfde:	441a      	add	r2, r3
 800bfe0:	6a3b      	ldr	r3, [r7, #32]
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	f7fd ff91 	bl	8009f0e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00a      	beq.n	800c00a <xTaskGenericNotify+0x132>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	613b      	str	r3, [r7, #16]
}
 800c006:	bf00      	nop
 800c008:	e7fe      	b.n	800c008 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00e:	4b0c      	ldr	r3, [pc, #48]	; (800c040 <xTaskGenericNotify+0x168>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c014:	429a      	cmp	r2, r3
 800c016:	d907      	bls.n	800c028 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c018:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <xTaskGenericNotify+0x16c>)
 800c01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01e:	601a      	str	r2, [r3, #0]
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c028:	f000 fea4 	bl	800cd74 <vPortExitCritical>

		return xReturn;
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c02e:	4618      	mov	r0, r3
 800c030:	3728      	adds	r7, #40	; 0x28
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	200013d0 	.word	0x200013d0
 800c03c:	20000ef8 	.word	0x20000ef8
 800c040:	20000ef4 	.word	0x20000ef4
 800c044:	e000ed04 	.word	0xe000ed04

0800c048 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08e      	sub	sp, #56	; 0x38
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	603b      	str	r3, [r7, #0]
 800c054:	4613      	mov	r3, r2
 800c056:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c058:	2301      	movs	r3, #1
 800c05a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10a      	bne.n	800c078 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c074:	bf00      	nop
 800c076:	e7fe      	b.n	800c076 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c078:	f000 ff2e 	bl	800ced8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c080:	f3ef 8211 	mrs	r2, BASEPRI
 800c084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c088:	f383 8811 	msr	BASEPRI, r3
 800c08c:	f3bf 8f6f 	isb	sy
 800c090:	f3bf 8f4f 	dsb	sy
 800c094:	623a      	str	r2, [r7, #32]
 800c096:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c098:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c09a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c0b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c0bc:	79fb      	ldrb	r3, [r7, #7]
 800c0be:	2b04      	cmp	r3, #4
 800c0c0:	d828      	bhi.n	800c114 <xTaskGenericNotifyFromISR+0xcc>
 800c0c2:	a201      	add	r2, pc, #4	; (adr r2, 800c0c8 <xTaskGenericNotifyFromISR+0x80>)
 800c0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c8:	0800c135 	.word	0x0800c135
 800c0cc:	0800c0dd 	.word	0x0800c0dd
 800c0d0:	0800c0eb 	.word	0x0800c0eb
 800c0d4:	0800c0f7 	.word	0x0800c0f7
 800c0d8:	0800c0ff 	.word	0x0800c0ff
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	431a      	orrs	r2, r3
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c0e8:	e027      	b.n	800c13a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c0f4:	e021      	b.n	800c13a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c0fc:	e01d      	b.n	800c13a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c0fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c102:	2b02      	cmp	r3, #2
 800c104:	d003      	beq.n	800c10e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c10c:	e015      	b.n	800c13a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c10e:	2300      	movs	r3, #0
 800c110:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c112:	e012      	b.n	800c13a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11c:	d00c      	beq.n	800c138 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	61bb      	str	r3, [r7, #24]
}
 800c130:	bf00      	nop
 800c132:	e7fe      	b.n	800c132 <xTaskGenericNotifyFromISR+0xea>
					break;
 800c134:	bf00      	nop
 800c136:	e000      	b.n	800c13a <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c138:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c13a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d146      	bne.n	800c1d0 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00a      	beq.n	800c160 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	617b      	str	r3, [r7, #20]
}
 800c15c:	bf00      	nop
 800c15e:	e7fe      	b.n	800c15e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c160:	4b21      	ldr	r3, [pc, #132]	; (800c1e8 <xTaskGenericNotifyFromISR+0x1a0>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d11d      	bne.n	800c1a4 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16a:	3304      	adds	r3, #4
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fd ff2b 	bl	8009fc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c176:	4b1d      	ldr	r3, [pc, #116]	; (800c1ec <xTaskGenericNotifyFromISR+0x1a4>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d903      	bls.n	800c186 <xTaskGenericNotifyFromISR+0x13e>
 800c17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c182:	4a1a      	ldr	r2, [pc, #104]	; (800c1ec <xTaskGenericNotifyFromISR+0x1a4>)
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4a17      	ldr	r2, [pc, #92]	; (800c1f0 <xTaskGenericNotifyFromISR+0x1a8>)
 800c194:	441a      	add	r2, r3
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	3304      	adds	r3, #4
 800c19a:	4619      	mov	r1, r3
 800c19c:	4610      	mov	r0, r2
 800c19e:	f7fd feb6 	bl	8009f0e <vListInsertEnd>
 800c1a2:	e005      	b.n	800c1b0 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	3318      	adds	r3, #24
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	4812      	ldr	r0, [pc, #72]	; (800c1f4 <xTaskGenericNotifyFromISR+0x1ac>)
 800c1ac:	f7fd feaf 	bl	8009f0e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b4:	4b10      	ldr	r3, [pc, #64]	; (800c1f8 <xTaskGenericNotifyFromISR+0x1b0>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d908      	bls.n	800c1d0 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c1c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c1ca:	4b0c      	ldr	r3, [pc, #48]	; (800c1fc <xTaskGenericNotifyFromISR+0x1b4>)
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	601a      	str	r2, [r3, #0]
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	f383 8811 	msr	BASEPRI, r3
}
 800c1da:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3738      	adds	r7, #56	; 0x38
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	200013f0 	.word	0x200013f0
 800c1ec:	200013d0 	.word	0x200013d0
 800c1f0:	20000ef8 	.word	0x20000ef8
 800c1f4:	20001388 	.word	0x20001388
 800c1f8:	20000ef4 	.word	0x20000ef4
 800c1fc:	200013dc 	.word	0x200013dc

0800c200 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c20a:	4b21      	ldr	r3, [pc, #132]	; (800c290 <prvAddCurrentTaskToDelayedList+0x90>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c210:	4b20      	ldr	r3, [pc, #128]	; (800c294 <prvAddCurrentTaskToDelayedList+0x94>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	3304      	adds	r3, #4
 800c216:	4618      	mov	r0, r3
 800c218:	f7fd fed6 	bl	8009fc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c222:	d10a      	bne.n	800c23a <prvAddCurrentTaskToDelayedList+0x3a>
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d007      	beq.n	800c23a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c22a:	4b1a      	ldr	r3, [pc, #104]	; (800c294 <prvAddCurrentTaskToDelayedList+0x94>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	3304      	adds	r3, #4
 800c230:	4619      	mov	r1, r3
 800c232:	4819      	ldr	r0, [pc, #100]	; (800c298 <prvAddCurrentTaskToDelayedList+0x98>)
 800c234:	f7fd fe6b 	bl	8009f0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c238:	e026      	b.n	800c288 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4413      	add	r3, r2
 800c240:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c242:	4b14      	ldr	r3, [pc, #80]	; (800c294 <prvAddCurrentTaskToDelayedList+0x94>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d209      	bcs.n	800c266 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c252:	4b12      	ldr	r3, [pc, #72]	; (800c29c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	4b0f      	ldr	r3, [pc, #60]	; (800c294 <prvAddCurrentTaskToDelayedList+0x94>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3304      	adds	r3, #4
 800c25c:	4619      	mov	r1, r3
 800c25e:	4610      	mov	r0, r2
 800c260:	f7fd fe79 	bl	8009f56 <vListInsert>
}
 800c264:	e010      	b.n	800c288 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c266:	4b0e      	ldr	r3, [pc, #56]	; (800c2a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <prvAddCurrentTaskToDelayedList+0x94>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	3304      	adds	r3, #4
 800c270:	4619      	mov	r1, r3
 800c272:	4610      	mov	r0, r2
 800c274:	f7fd fe6f 	bl	8009f56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c278:	4b0a      	ldr	r3, [pc, #40]	; (800c2a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d202      	bcs.n	800c288 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c282:	4a08      	ldr	r2, [pc, #32]	; (800c2a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	6013      	str	r3, [r2, #0]
}
 800c288:	bf00      	nop
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	200013cc 	.word	0x200013cc
 800c294:	20000ef4 	.word	0x20000ef4
 800c298:	200013b4 	.word	0x200013b4
 800c29c:	20001384 	.word	0x20001384
 800c2a0:	20001380 	.word	0x20001380
 800c2a4:	200013e8 	.word	0x200013e8

0800c2a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b08a      	sub	sp, #40	; 0x28
 800c2ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2b2:	f000 fba1 	bl	800c9f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2b6:	4b1c      	ldr	r3, [pc, #112]	; (800c328 <xTimerCreateTimerTask+0x80>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d021      	beq.n	800c302 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c2c6:	1d3a      	adds	r2, r7, #4
 800c2c8:	f107 0108 	add.w	r1, r7, #8
 800c2cc:	f107 030c 	add.w	r3, r7, #12
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fd fdd5 	bl	8009e80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c2d6:	6879      	ldr	r1, [r7, #4]
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	9202      	str	r2, [sp, #8]
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	460a      	mov	r2, r1
 800c2e8:	4910      	ldr	r1, [pc, #64]	; (800c32c <xTimerCreateTimerTask+0x84>)
 800c2ea:	4811      	ldr	r0, [pc, #68]	; (800c330 <xTimerCreateTimerTask+0x88>)
 800c2ec:	f7fe fd98 	bl	800ae20 <xTaskCreateStatic>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	4a10      	ldr	r2, [pc, #64]	; (800c334 <xTimerCreateTimerTask+0x8c>)
 800c2f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c2f6:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <xTimerCreateTimerTask+0x8c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c2fe:	2301      	movs	r3, #1
 800c300:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10a      	bne.n	800c31e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	613b      	str	r3, [r7, #16]
}
 800c31a:	bf00      	nop
 800c31c:	e7fe      	b.n	800c31c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c31e:	697b      	ldr	r3, [r7, #20]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	20001424 	.word	0x20001424
 800c32c:	0800ef50 	.word	0x0800ef50
 800c330:	0800c5a1 	.word	0x0800c5a1
 800c334:	20001428 	.word	0x20001428

0800c338 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b088      	sub	sp, #32
 800c33c:	af02      	add	r7, sp, #8
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c346:	202c      	movs	r0, #44	; 0x2c
 800c348:	f000 fe06 	bl	800cf58 <pvPortMalloc>
 800c34c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00d      	beq.n	800c370 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	2200      	movs	r2, #0
 800c358:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	9301      	str	r3, [sp, #4]
 800c360:	6a3b      	ldr	r3, [r7, #32]
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	68b9      	ldr	r1, [r7, #8]
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f000 f843 	bl	800c3f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c370:	697b      	ldr	r3, [r7, #20]
	}
 800c372:	4618      	mov	r0, r3
 800c374:	3718      	adds	r7, #24
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b08a      	sub	sp, #40	; 0x28
 800c37e:	af02      	add	r7, sp, #8
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	60b9      	str	r1, [r7, #8]
 800c384:	607a      	str	r2, [r7, #4]
 800c386:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c388:	232c      	movs	r3, #44	; 0x2c
 800c38a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	2b2c      	cmp	r3, #44	; 0x2c
 800c390:	d00a      	beq.n	800c3a8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	61bb      	str	r3, [r7, #24]
}
 800c3a4:	bf00      	nop
 800c3a6:	e7fe      	b.n	800c3a6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c3a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10a      	bne.n	800c3c6 <xTimerCreateStatic+0x4c>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	617b      	str	r3, [r7, #20]
}
 800c3c2:	bf00      	nop
 800c3c4:	e7fe      	b.n	800c3c4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00d      	beq.n	800c3ec <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	2202      	movs	r2, #2
 800c3d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	9301      	str	r3, [sp, #4]
 800c3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	68b9      	ldr	r1, [r7, #8]
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f000 f805 	bl	800c3f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c3ec:	69fb      	ldr	r3, [r7, #28]
	}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3720      	adds	r7, #32
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b086      	sub	sp, #24
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	60f8      	str	r0, [r7, #12]
 800c3fe:	60b9      	str	r1, [r7, #8]
 800c400:	607a      	str	r2, [r7, #4]
 800c402:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10a      	bne.n	800c420 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	617b      	str	r3, [r7, #20]
}
 800c41c:	bf00      	nop
 800c41e:	e7fe      	b.n	800c41e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c422:	2b00      	cmp	r3, #0
 800c424:	d01e      	beq.n	800c464 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c426:	f000 fae7 	bl	800c9f8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43e:	6a3a      	ldr	r2, [r7, #32]
 800c440:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c444:	3304      	adds	r3, #4
 800c446:	4618      	mov	r0, r3
 800c448:	f7fd fd54 	bl	8009ef4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d008      	beq.n	800c464 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c458:	f043 0304 	orr.w	r3, r3, #4
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c460:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c464:	bf00      	nop
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08a      	sub	sp, #40	; 0x28
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
 800c478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c47a:	2300      	movs	r3, #0
 800c47c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10a      	bne.n	800c49a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	623b      	str	r3, [r7, #32]
}
 800c496:	bf00      	nop
 800c498:	e7fe      	b.n	800c498 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c49a:	4b1a      	ldr	r3, [pc, #104]	; (800c504 <xTimerGenericCommand+0x98>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d02a      	beq.n	800c4f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	2b05      	cmp	r3, #5
 800c4b2:	dc18      	bgt.n	800c4e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c4b4:	f7ff fae4 	bl	800ba80 <xTaskGetSchedulerState>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b02      	cmp	r3, #2
 800c4bc:	d109      	bne.n	800c4d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c4be:	4b11      	ldr	r3, [pc, #68]	; (800c504 <xTimerGenericCommand+0x98>)
 800c4c0:	6818      	ldr	r0, [r3, #0]
 800c4c2:	f107 0110 	add.w	r1, r7, #16
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ca:	f7fd ff4f 	bl	800a36c <xQueueGenericSend>
 800c4ce:	6278      	str	r0, [r7, #36]	; 0x24
 800c4d0:	e012      	b.n	800c4f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c4d2:	4b0c      	ldr	r3, [pc, #48]	; (800c504 <xTimerGenericCommand+0x98>)
 800c4d4:	6818      	ldr	r0, [r3, #0]
 800c4d6:	f107 0110 	add.w	r1, r7, #16
 800c4da:	2300      	movs	r3, #0
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f7fd ff45 	bl	800a36c <xQueueGenericSend>
 800c4e2:	6278      	str	r0, [r7, #36]	; 0x24
 800c4e4:	e008      	b.n	800c4f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c4e6:	4b07      	ldr	r3, [pc, #28]	; (800c504 <xTimerGenericCommand+0x98>)
 800c4e8:	6818      	ldr	r0, [r3, #0]
 800c4ea:	f107 0110 	add.w	r1, r7, #16
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	f7fe f839 	bl	800a568 <xQueueGenericSendFromISR>
 800c4f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3728      	adds	r7, #40	; 0x28
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	20001424 	.word	0x20001424

0800c508 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b088      	sub	sp, #32
 800c50c:	af02      	add	r7, sp, #8
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c512:	4b22      	ldr	r3, [pc, #136]	; (800c59c <prvProcessExpiredTimer+0x94>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	3304      	adds	r3, #4
 800c520:	4618      	mov	r0, r3
 800c522:	f7fd fd51 	bl	8009fc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c52c:	f003 0304 	and.w	r3, r3, #4
 800c530:	2b00      	cmp	r3, #0
 800c532:	d022      	beq.n	800c57a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	699a      	ldr	r2, [r3, #24]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	18d1      	adds	r1, r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	6978      	ldr	r0, [r7, #20]
 800c542:	f000 f8d1 	bl	800c6e8 <prvInsertTimerInActiveList>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d01f      	beq.n	800c58c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c54c:	2300      	movs	r3, #0
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	2300      	movs	r3, #0
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	2100      	movs	r1, #0
 800c556:	6978      	ldr	r0, [r7, #20]
 800c558:	f7ff ff88 	bl	800c46c <xTimerGenericCommand>
 800c55c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d113      	bne.n	800c58c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	60fb      	str	r3, [r7, #12]
}
 800c576:	bf00      	nop
 800c578:	e7fe      	b.n	800c578 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c580:	f023 0301 	bic.w	r3, r3, #1
 800c584:	b2da      	uxtb	r2, r3
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	6a1b      	ldr	r3, [r3, #32]
 800c590:	6978      	ldr	r0, [r7, #20]
 800c592:	4798      	blx	r3
}
 800c594:	bf00      	nop
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	2000141c 	.word	0x2000141c

0800c5a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5a8:	f107 0308 	add.w	r3, r7, #8
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 f857 	bl	800c660 <prvGetNextExpireTime>
 800c5b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f000 f803 	bl	800c5c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c5be:	f000 f8d5 	bl	800c76c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5c2:	e7f1      	b.n	800c5a8 <prvTimerTask+0x8>

0800c5c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c5ce:	f7fe fe63 	bl	800b298 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5d2:	f107 0308 	add.w	r3, r7, #8
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f000 f866 	bl	800c6a8 <prvSampleTimeNow>
 800c5dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d130      	bne.n	800c646 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10a      	bne.n	800c600 <prvProcessTimerOrBlockTask+0x3c>
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d806      	bhi.n	800c600 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c5f2:	f7fe fe5f 	bl	800b2b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c5f6:	68f9      	ldr	r1, [r7, #12]
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7ff ff85 	bl	800c508 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c5fe:	e024      	b.n	800c64a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d008      	beq.n	800c618 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c606:	4b13      	ldr	r3, [pc, #76]	; (800c654 <prvProcessTimerOrBlockTask+0x90>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d101      	bne.n	800c614 <prvProcessTimerOrBlockTask+0x50>
 800c610:	2301      	movs	r3, #1
 800c612:	e000      	b.n	800c616 <prvProcessTimerOrBlockTask+0x52>
 800c614:	2300      	movs	r3, #0
 800c616:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c618:	4b0f      	ldr	r3, [pc, #60]	; (800c658 <prvProcessTimerOrBlockTask+0x94>)
 800c61a:	6818      	ldr	r0, [r3, #0]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	4619      	mov	r1, r3
 800c626:	f7fe fbc7 	bl	800adb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c62a:	f7fe fe43 	bl	800b2b4 <xTaskResumeAll>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10a      	bne.n	800c64a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c634:	4b09      	ldr	r3, [pc, #36]	; (800c65c <prvProcessTimerOrBlockTask+0x98>)
 800c636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	f3bf 8f6f 	isb	sy
}
 800c644:	e001      	b.n	800c64a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c646:	f7fe fe35 	bl	800b2b4 <xTaskResumeAll>
}
 800c64a:	bf00      	nop
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	20001420 	.word	0x20001420
 800c658:	20001424 	.word	0x20001424
 800c65c:	e000ed04 	.word	0xe000ed04

0800c660 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c668:	4b0e      	ldr	r3, [pc, #56]	; (800c6a4 <prvGetNextExpireTime+0x44>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <prvGetNextExpireTime+0x16>
 800c672:	2201      	movs	r2, #1
 800c674:	e000      	b.n	800c678 <prvGetNextExpireTime+0x18>
 800c676:	2200      	movs	r2, #0
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d105      	bne.n	800c690 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c684:	4b07      	ldr	r3, [pc, #28]	; (800c6a4 <prvGetNextExpireTime+0x44>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60fb      	str	r3, [r7, #12]
 800c68e:	e001      	b.n	800c694 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c690:	2300      	movs	r3, #0
 800c692:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c694:	68fb      	ldr	r3, [r7, #12]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	2000141c 	.word	0x2000141c

0800c6a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c6b0:	f7fe fe9e 	bl	800b3f0 <xTaskGetTickCount>
 800c6b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c6b6:	4b0b      	ldr	r3, [pc, #44]	; (800c6e4 <prvSampleTimeNow+0x3c>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d205      	bcs.n	800c6cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c6c0:	f000 f936 	bl	800c930 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	601a      	str	r2, [r3, #0]
 800c6ca:	e002      	b.n	800c6d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c6d2:	4a04      	ldr	r2, [pc, #16]	; (800c6e4 <prvSampleTimeNow+0x3c>)
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	2000142c 	.word	0x2000142c

0800c6e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b086      	sub	sp, #24
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	68ba      	ldr	r2, [r7, #8]
 800c6fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d812      	bhi.n	800c734 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	1ad2      	subs	r2, r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d302      	bcc.n	800c722 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c71c:	2301      	movs	r3, #1
 800c71e:	617b      	str	r3, [r7, #20]
 800c720:	e01b      	b.n	800c75a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c722:	4b10      	ldr	r3, [pc, #64]	; (800c764 <prvInsertTimerInActiveList+0x7c>)
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	3304      	adds	r3, #4
 800c72a:	4619      	mov	r1, r3
 800c72c:	4610      	mov	r0, r2
 800c72e:	f7fd fc12 	bl	8009f56 <vListInsert>
 800c732:	e012      	b.n	800c75a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d206      	bcs.n	800c74a <prvInsertTimerInActiveList+0x62>
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	429a      	cmp	r2, r3
 800c742:	d302      	bcc.n	800c74a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c744:	2301      	movs	r3, #1
 800c746:	617b      	str	r3, [r7, #20]
 800c748:	e007      	b.n	800c75a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c74a:	4b07      	ldr	r3, [pc, #28]	; (800c768 <prvInsertTimerInActiveList+0x80>)
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	3304      	adds	r3, #4
 800c752:	4619      	mov	r1, r3
 800c754:	4610      	mov	r0, r2
 800c756:	f7fd fbfe 	bl	8009f56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c75a:	697b      	ldr	r3, [r7, #20]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3718      	adds	r7, #24
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20001420 	.word	0x20001420
 800c768:	2000141c 	.word	0x2000141c

0800c76c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08e      	sub	sp, #56	; 0x38
 800c770:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c772:	e0ca      	b.n	800c90a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	da18      	bge.n	800c7ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c77a:	1d3b      	adds	r3, r7, #4
 800c77c:	3304      	adds	r3, #4
 800c77e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10a      	bne.n	800c79c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	61fb      	str	r3, [r7, #28]
}
 800c798:	bf00      	nop
 800c79a:	e7fe      	b.n	800c79a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7a2:	6850      	ldr	r0, [r2, #4]
 800c7a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7a6:	6892      	ldr	r2, [r2, #8]
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f2c0 80ab 	blt.w	800c90a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	695b      	ldr	r3, [r3, #20]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d004      	beq.n	800c7ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fd fbff 	bl	8009fc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7ca:	463b      	mov	r3, r7
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7ff ff6b 	bl	800c6a8 <prvSampleTimeNow>
 800c7d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b09      	cmp	r3, #9
 800c7d8:	f200 8096 	bhi.w	800c908 <prvProcessReceivedCommands+0x19c>
 800c7dc:	a201      	add	r2, pc, #4	; (adr r2, 800c7e4 <prvProcessReceivedCommands+0x78>)
 800c7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e2:	bf00      	nop
 800c7e4:	0800c80d 	.word	0x0800c80d
 800c7e8:	0800c80d 	.word	0x0800c80d
 800c7ec:	0800c80d 	.word	0x0800c80d
 800c7f0:	0800c881 	.word	0x0800c881
 800c7f4:	0800c895 	.word	0x0800c895
 800c7f8:	0800c8df 	.word	0x0800c8df
 800c7fc:	0800c80d 	.word	0x0800c80d
 800c800:	0800c80d 	.word	0x0800c80d
 800c804:	0800c881 	.word	0x0800c881
 800c808:	0800c895 	.word	0x0800c895
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c812:	f043 0301 	orr.w	r3, r3, #1
 800c816:	b2da      	uxtb	r2, r3
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c822:	699b      	ldr	r3, [r3, #24]
 800c824:	18d1      	adds	r1, r2, r3
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c82a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c82c:	f7ff ff5c 	bl	800c6e8 <prvInsertTimerInActiveList>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d069      	beq.n	800c90a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c83c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c844:	f003 0304 	and.w	r3, r3, #4
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d05e      	beq.n	800c90a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c850:	699b      	ldr	r3, [r3, #24]
 800c852:	441a      	add	r2, r3
 800c854:	2300      	movs	r3, #0
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	2300      	movs	r3, #0
 800c85a:	2100      	movs	r1, #0
 800c85c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c85e:	f7ff fe05 	bl	800c46c <xTimerGenericCommand>
 800c862:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c864:	6a3b      	ldr	r3, [r7, #32]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d14f      	bne.n	800c90a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	61bb      	str	r3, [r7, #24]
}
 800c87c:	bf00      	nop
 800c87e:	e7fe      	b.n	800c87e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c886:	f023 0301 	bic.w	r3, r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c892:	e03a      	b.n	800c90a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c89a:	f043 0301 	orr.w	r3, r3, #1
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ae:	699b      	ldr	r3, [r3, #24]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10a      	bne.n	800c8ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	617b      	str	r3, [r7, #20]
}
 800c8c6:	bf00      	nop
 800c8c8:	e7fe      	b.n	800c8c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8cc:	699a      	ldr	r2, [r3, #24]
 800c8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d0:	18d1      	adds	r1, r2, r3
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8d8:	f7ff ff06 	bl	800c6e8 <prvInsertTimerInActiveList>
					break;
 800c8dc:	e015      	b.n	800c90a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8e4:	f003 0302 	and.w	r3, r3, #2
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d103      	bne.n	800c8f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c8ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ee:	f000 fbff 	bl	800d0f0 <vPortFree>
 800c8f2:	e00a      	b.n	800c90a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8fa:	f023 0301 	bic.w	r3, r3, #1
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c906:	e000      	b.n	800c90a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c908:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c90a:	4b08      	ldr	r3, [pc, #32]	; (800c92c <prvProcessReceivedCommands+0x1c0>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	1d39      	adds	r1, r7, #4
 800c910:	2200      	movs	r2, #0
 800c912:	4618      	mov	r0, r3
 800c914:	f7fd fec4 	bl	800a6a0 <xQueueReceive>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f47f af2a 	bne.w	800c774 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c920:	bf00      	nop
 800c922:	bf00      	nop
 800c924:	3730      	adds	r7, #48	; 0x30
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	20001424 	.word	0x20001424

0800c930 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c936:	e048      	b.n	800c9ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c938:	4b2d      	ldr	r3, [pc, #180]	; (800c9f0 <prvSwitchTimerLists+0xc0>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c942:	4b2b      	ldr	r3, [pc, #172]	; (800c9f0 <prvSwitchTimerLists+0xc0>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3304      	adds	r3, #4
 800c950:	4618      	mov	r0, r3
 800c952:	f7fd fb39 	bl	8009fc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c964:	f003 0304 	and.w	r3, r3, #4
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d02e      	beq.n	800c9ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	4413      	add	r3, r2
 800c974:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c976:	68ba      	ldr	r2, [r7, #8]
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d90e      	bls.n	800c99c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c98a:	4b19      	ldr	r3, [pc, #100]	; (800c9f0 <prvSwitchTimerLists+0xc0>)
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	3304      	adds	r3, #4
 800c992:	4619      	mov	r1, r3
 800c994:	4610      	mov	r0, r2
 800c996:	f7fd fade 	bl	8009f56 <vListInsert>
 800c99a:	e016      	b.n	800c9ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c99c:	2300      	movs	r3, #0
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	f7ff fd60 	bl	800c46c <xTimerGenericCommand>
 800c9ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	603b      	str	r3, [r7, #0]
}
 800c9c6:	bf00      	nop
 800c9c8:	e7fe      	b.n	800c9c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9ca:	4b09      	ldr	r3, [pc, #36]	; (800c9f0 <prvSwitchTimerLists+0xc0>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1b1      	bne.n	800c938 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c9d4:	4b06      	ldr	r3, [pc, #24]	; (800c9f0 <prvSwitchTimerLists+0xc0>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c9da:	4b06      	ldr	r3, [pc, #24]	; (800c9f4 <prvSwitchTimerLists+0xc4>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a04      	ldr	r2, [pc, #16]	; (800c9f0 <prvSwitchTimerLists+0xc0>)
 800c9e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c9e2:	4a04      	ldr	r2, [pc, #16]	; (800c9f4 <prvSwitchTimerLists+0xc4>)
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	6013      	str	r3, [r2, #0]
}
 800c9e8:	bf00      	nop
 800c9ea:	3718      	adds	r7, #24
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	2000141c 	.word	0x2000141c
 800c9f4:	20001420 	.word	0x20001420

0800c9f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c9fe:	f000 f989 	bl	800cd14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca02:	4b15      	ldr	r3, [pc, #84]	; (800ca58 <prvCheckForValidListAndQueue+0x60>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d120      	bne.n	800ca4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca0a:	4814      	ldr	r0, [pc, #80]	; (800ca5c <prvCheckForValidListAndQueue+0x64>)
 800ca0c:	f7fd fa52 	bl	8009eb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca10:	4813      	ldr	r0, [pc, #76]	; (800ca60 <prvCheckForValidListAndQueue+0x68>)
 800ca12:	f7fd fa4f 	bl	8009eb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca16:	4b13      	ldr	r3, [pc, #76]	; (800ca64 <prvCheckForValidListAndQueue+0x6c>)
 800ca18:	4a10      	ldr	r2, [pc, #64]	; (800ca5c <prvCheckForValidListAndQueue+0x64>)
 800ca1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca1c:	4b12      	ldr	r3, [pc, #72]	; (800ca68 <prvCheckForValidListAndQueue+0x70>)
 800ca1e:	4a10      	ldr	r2, [pc, #64]	; (800ca60 <prvCheckForValidListAndQueue+0x68>)
 800ca20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca22:	2300      	movs	r3, #0
 800ca24:	9300      	str	r3, [sp, #0]
 800ca26:	4b11      	ldr	r3, [pc, #68]	; (800ca6c <prvCheckForValidListAndQueue+0x74>)
 800ca28:	4a11      	ldr	r2, [pc, #68]	; (800ca70 <prvCheckForValidListAndQueue+0x78>)
 800ca2a:	2110      	movs	r1, #16
 800ca2c:	200a      	movs	r0, #10
 800ca2e:	f7fd fb5d 	bl	800a0ec <xQueueGenericCreateStatic>
 800ca32:	4603      	mov	r3, r0
 800ca34:	4a08      	ldr	r2, [pc, #32]	; (800ca58 <prvCheckForValidListAndQueue+0x60>)
 800ca36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca38:	4b07      	ldr	r3, [pc, #28]	; (800ca58 <prvCheckForValidListAndQueue+0x60>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d005      	beq.n	800ca4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca40:	4b05      	ldr	r3, [pc, #20]	; (800ca58 <prvCheckForValidListAndQueue+0x60>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	490b      	ldr	r1, [pc, #44]	; (800ca74 <prvCheckForValidListAndQueue+0x7c>)
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fe f962 	bl	800ad10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca4c:	f000 f992 	bl	800cd74 <vPortExitCritical>
}
 800ca50:	bf00      	nop
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	20001424 	.word	0x20001424
 800ca5c:	200013f4 	.word	0x200013f4
 800ca60:	20001408 	.word	0x20001408
 800ca64:	2000141c 	.word	0x2000141c
 800ca68:	20001420 	.word	0x20001420
 800ca6c:	200014d0 	.word	0x200014d0
 800ca70:	20001430 	.word	0x20001430
 800ca74:	0800ef58 	.word	0x0800ef58

0800ca78 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10a      	bne.n	800caa0 <pvTimerGetTimerID+0x28>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	60fb      	str	r3, [r7, #12]
}
 800ca9c:	bf00      	nop
 800ca9e:	e7fe      	b.n	800ca9e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800caa0:	f000 f938 	bl	800cd14 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	69db      	ldr	r3, [r3, #28]
 800caa8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800caaa:	f000 f963 	bl	800cd74 <vPortExitCritical>

	return pvReturn;
 800caae:	693b      	ldr	r3, [r7, #16]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	3b04      	subs	r3, #4
 800cac8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	3b04      	subs	r3, #4
 800cad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	f023 0201 	bic.w	r2, r3, #1
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3b04      	subs	r3, #4
 800cae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cae8:	4a0c      	ldr	r2, [pc, #48]	; (800cb1c <pxPortInitialiseStack+0x64>)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3b14      	subs	r3, #20
 800caf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	3b04      	subs	r3, #4
 800cafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f06f 0202 	mvn.w	r2, #2
 800cb06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	3b20      	subs	r3, #32
 800cb0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3714      	adds	r7, #20
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	0800cb21 	.word	0x0800cb21

0800cb20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb26:	2300      	movs	r3, #0
 800cb28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb2a:	4b12      	ldr	r3, [pc, #72]	; (800cb74 <prvTaskExitError+0x54>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb32:	d00a      	beq.n	800cb4a <prvTaskExitError+0x2a>
	__asm volatile
 800cb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb38:	f383 8811 	msr	BASEPRI, r3
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	60fb      	str	r3, [r7, #12]
}
 800cb46:	bf00      	nop
 800cb48:	e7fe      	b.n	800cb48 <prvTaskExitError+0x28>
	__asm volatile
 800cb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4e:	f383 8811 	msr	BASEPRI, r3
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	60bb      	str	r3, [r7, #8]
}
 800cb5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb5e:	bf00      	nop
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d0fc      	beq.n	800cb60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb66:	bf00      	nop
 800cb68:	bf00      	nop
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	2000004c 	.word	0x2000004c
	...

0800cb80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb80:	4b07      	ldr	r3, [pc, #28]	; (800cba0 <pxCurrentTCBConst2>)
 800cb82:	6819      	ldr	r1, [r3, #0]
 800cb84:	6808      	ldr	r0, [r1, #0]
 800cb86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb8a:	f380 8809 	msr	PSP, r0
 800cb8e:	f3bf 8f6f 	isb	sy
 800cb92:	f04f 0000 	mov.w	r0, #0
 800cb96:	f380 8811 	msr	BASEPRI, r0
 800cb9a:	4770      	bx	lr
 800cb9c:	f3af 8000 	nop.w

0800cba0 <pxCurrentTCBConst2>:
 800cba0:	20000ef4 	.word	0x20000ef4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cba4:	bf00      	nop
 800cba6:	bf00      	nop

0800cba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cba8:	4808      	ldr	r0, [pc, #32]	; (800cbcc <prvPortStartFirstTask+0x24>)
 800cbaa:	6800      	ldr	r0, [r0, #0]
 800cbac:	6800      	ldr	r0, [r0, #0]
 800cbae:	f380 8808 	msr	MSP, r0
 800cbb2:	f04f 0000 	mov.w	r0, #0
 800cbb6:	f380 8814 	msr	CONTROL, r0
 800cbba:	b662      	cpsie	i
 800cbbc:	b661      	cpsie	f
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	df00      	svc	0
 800cbc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbca:	bf00      	nop
 800cbcc:	e000ed08 	.word	0xe000ed08

0800cbd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cbd6:	4b46      	ldr	r3, [pc, #280]	; (800ccf0 <xPortStartScheduler+0x120>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a46      	ldr	r2, [pc, #280]	; (800ccf4 <xPortStartScheduler+0x124>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d10a      	bne.n	800cbf6 <xPortStartScheduler+0x26>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	613b      	str	r3, [r7, #16]
}
 800cbf2:	bf00      	nop
 800cbf4:	e7fe      	b.n	800cbf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cbf6:	4b3e      	ldr	r3, [pc, #248]	; (800ccf0 <xPortStartScheduler+0x120>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a3f      	ldr	r2, [pc, #252]	; (800ccf8 <xPortStartScheduler+0x128>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d10a      	bne.n	800cc16 <xPortStartScheduler+0x46>
	__asm volatile
 800cc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc04:	f383 8811 	msr	BASEPRI, r3
 800cc08:	f3bf 8f6f 	isb	sy
 800cc0c:	f3bf 8f4f 	dsb	sy
 800cc10:	60fb      	str	r3, [r7, #12]
}
 800cc12:	bf00      	nop
 800cc14:	e7fe      	b.n	800cc14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc16:	4b39      	ldr	r3, [pc, #228]	; (800ccfc <xPortStartScheduler+0x12c>)
 800cc18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	22ff      	movs	r2, #255	; 0xff
 800cc26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc30:	78fb      	ldrb	r3, [r7, #3]
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc38:	b2da      	uxtb	r2, r3
 800cc3a:	4b31      	ldr	r3, [pc, #196]	; (800cd00 <xPortStartScheduler+0x130>)
 800cc3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc3e:	4b31      	ldr	r3, [pc, #196]	; (800cd04 <xPortStartScheduler+0x134>)
 800cc40:	2207      	movs	r2, #7
 800cc42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc44:	e009      	b.n	800cc5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc46:	4b2f      	ldr	r3, [pc, #188]	; (800cd04 <xPortStartScheduler+0x134>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	4a2d      	ldr	r2, [pc, #180]	; (800cd04 <xPortStartScheduler+0x134>)
 800cc4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc50:	78fb      	ldrb	r3, [r7, #3]
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc5a:	78fb      	ldrb	r3, [r7, #3]
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc62:	2b80      	cmp	r3, #128	; 0x80
 800cc64:	d0ef      	beq.n	800cc46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc66:	4b27      	ldr	r3, [pc, #156]	; (800cd04 <xPortStartScheduler+0x134>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f1c3 0307 	rsb	r3, r3, #7
 800cc6e:	2b04      	cmp	r3, #4
 800cc70:	d00a      	beq.n	800cc88 <xPortStartScheduler+0xb8>
	__asm volatile
 800cc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	60bb      	str	r3, [r7, #8]
}
 800cc84:	bf00      	nop
 800cc86:	e7fe      	b.n	800cc86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc88:	4b1e      	ldr	r3, [pc, #120]	; (800cd04 <xPortStartScheduler+0x134>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	021b      	lsls	r3, r3, #8
 800cc8e:	4a1d      	ldr	r2, [pc, #116]	; (800cd04 <xPortStartScheduler+0x134>)
 800cc90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc92:	4b1c      	ldr	r3, [pc, #112]	; (800cd04 <xPortStartScheduler+0x134>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc9a:	4a1a      	ldr	r2, [pc, #104]	; (800cd04 <xPortStartScheduler+0x134>)
 800cc9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	b2da      	uxtb	r2, r3
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cca6:	4b18      	ldr	r3, [pc, #96]	; (800cd08 <xPortStartScheduler+0x138>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a17      	ldr	r2, [pc, #92]	; (800cd08 <xPortStartScheduler+0x138>)
 800ccac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ccb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ccb2:	4b15      	ldr	r3, [pc, #84]	; (800cd08 <xPortStartScheduler+0x138>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a14      	ldr	r2, [pc, #80]	; (800cd08 <xPortStartScheduler+0x138>)
 800ccb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ccbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccbe:	f000 f8dd 	bl	800ce7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccc2:	4b12      	ldr	r3, [pc, #72]	; (800cd0c <xPortStartScheduler+0x13c>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccc8:	f000 f8fc 	bl	800cec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cccc:	4b10      	ldr	r3, [pc, #64]	; (800cd10 <xPortStartScheduler+0x140>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a0f      	ldr	r2, [pc, #60]	; (800cd10 <xPortStartScheduler+0x140>)
 800ccd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ccd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ccd8:	f7ff ff66 	bl	800cba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ccdc:	f7fe fc64 	bl	800b5a8 <vTaskSwitchContext>
	prvTaskExitError();
 800cce0:	f7ff ff1e 	bl	800cb20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3718      	adds	r7, #24
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	e000ed00 	.word	0xe000ed00
 800ccf4:	410fc271 	.word	0x410fc271
 800ccf8:	410fc270 	.word	0x410fc270
 800ccfc:	e000e400 	.word	0xe000e400
 800cd00:	20001520 	.word	0x20001520
 800cd04:	20001524 	.word	0x20001524
 800cd08:	e000ed20 	.word	0xe000ed20
 800cd0c:	2000004c 	.word	0x2000004c
 800cd10:	e000ef34 	.word	0xe000ef34

0800cd14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
	__asm volatile
 800cd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1e:	f383 8811 	msr	BASEPRI, r3
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	607b      	str	r3, [r7, #4]
}
 800cd2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd2e:	4b0f      	ldr	r3, [pc, #60]	; (800cd6c <vPortEnterCritical+0x58>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	3301      	adds	r3, #1
 800cd34:	4a0d      	ldr	r2, [pc, #52]	; (800cd6c <vPortEnterCritical+0x58>)
 800cd36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd38:	4b0c      	ldr	r3, [pc, #48]	; (800cd6c <vPortEnterCritical+0x58>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d10f      	bne.n	800cd60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd40:	4b0b      	ldr	r3, [pc, #44]	; (800cd70 <vPortEnterCritical+0x5c>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00a      	beq.n	800cd60 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	603b      	str	r3, [r7, #0]
}
 800cd5c:	bf00      	nop
 800cd5e:	e7fe      	b.n	800cd5e <vPortEnterCritical+0x4a>
	}
}
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	2000004c 	.word	0x2000004c
 800cd70:	e000ed04 	.word	0xe000ed04

0800cd74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd7a:	4b12      	ldr	r3, [pc, #72]	; (800cdc4 <vPortExitCritical+0x50>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10a      	bne.n	800cd98 <vPortExitCritical+0x24>
	__asm volatile
 800cd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	607b      	str	r3, [r7, #4]
}
 800cd94:	bf00      	nop
 800cd96:	e7fe      	b.n	800cd96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd98:	4b0a      	ldr	r3, [pc, #40]	; (800cdc4 <vPortExitCritical+0x50>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	4a09      	ldr	r2, [pc, #36]	; (800cdc4 <vPortExitCritical+0x50>)
 800cda0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cda2:	4b08      	ldr	r3, [pc, #32]	; (800cdc4 <vPortExitCritical+0x50>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d105      	bne.n	800cdb6 <vPortExitCritical+0x42>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	f383 8811 	msr	BASEPRI, r3
}
 800cdb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdb6:	bf00      	nop
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	2000004c 	.word	0x2000004c
	...

0800cdd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cdd0:	f3ef 8009 	mrs	r0, PSP
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	4b15      	ldr	r3, [pc, #84]	; (800ce30 <pxCurrentTCBConst>)
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	f01e 0f10 	tst.w	lr, #16
 800cde0:	bf08      	it	eq
 800cde2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cde6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdea:	6010      	str	r0, [r2, #0]
 800cdec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cdf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cdf4:	f380 8811 	msr	BASEPRI, r0
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f7fe fbd2 	bl	800b5a8 <vTaskSwitchContext>
 800ce04:	f04f 0000 	mov.w	r0, #0
 800ce08:	f380 8811 	msr	BASEPRI, r0
 800ce0c:	bc09      	pop	{r0, r3}
 800ce0e:	6819      	ldr	r1, [r3, #0]
 800ce10:	6808      	ldr	r0, [r1, #0]
 800ce12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce16:	f01e 0f10 	tst.w	lr, #16
 800ce1a:	bf08      	it	eq
 800ce1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce20:	f380 8809 	msr	PSP, r0
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	f3af 8000 	nop.w

0800ce30 <pxCurrentTCBConst>:
 800ce30:	20000ef4 	.word	0x20000ef4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop

0800ce38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	607b      	str	r3, [r7, #4]
}
 800ce50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce52:	f7fe faef 	bl	800b434 <xTaskIncrementTick>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d003      	beq.n	800ce64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce5c:	4b06      	ldr	r3, [pc, #24]	; (800ce78 <xPortSysTickHandler+0x40>)
 800ce5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	2300      	movs	r3, #0
 800ce66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	f383 8811 	msr	BASEPRI, r3
}
 800ce6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	e000ed04 	.word	0xe000ed04

0800ce7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce80:	4b0b      	ldr	r3, [pc, #44]	; (800ceb0 <vPortSetupTimerInterrupt+0x34>)
 800ce82:	2200      	movs	r2, #0
 800ce84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce86:	4b0b      	ldr	r3, [pc, #44]	; (800ceb4 <vPortSetupTimerInterrupt+0x38>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce8c:	4b0a      	ldr	r3, [pc, #40]	; (800ceb8 <vPortSetupTimerInterrupt+0x3c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a0a      	ldr	r2, [pc, #40]	; (800cebc <vPortSetupTimerInterrupt+0x40>)
 800ce92:	fba2 2303 	umull	r2, r3, r2, r3
 800ce96:	099b      	lsrs	r3, r3, #6
 800ce98:	4a09      	ldr	r2, [pc, #36]	; (800cec0 <vPortSetupTimerInterrupt+0x44>)
 800ce9a:	3b01      	subs	r3, #1
 800ce9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce9e:	4b04      	ldr	r3, [pc, #16]	; (800ceb0 <vPortSetupTimerInterrupt+0x34>)
 800cea0:	2207      	movs	r2, #7
 800cea2:	601a      	str	r2, [r3, #0]
}
 800cea4:	bf00      	nop
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	e000e010 	.word	0xe000e010
 800ceb4:	e000e018 	.word	0xe000e018
 800ceb8:	20000040 	.word	0x20000040
 800cebc:	10624dd3 	.word	0x10624dd3
 800cec0:	e000e014 	.word	0xe000e014

0800cec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ced4 <vPortEnableVFP+0x10>
 800cec8:	6801      	ldr	r1, [r0, #0]
 800ceca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cece:	6001      	str	r1, [r0, #0]
 800ced0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ced2:	bf00      	nop
 800ced4:	e000ed88 	.word	0xe000ed88

0800ced8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cede:	f3ef 8305 	mrs	r3, IPSR
 800cee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2b0f      	cmp	r3, #15
 800cee8:	d914      	bls.n	800cf14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ceea:	4a17      	ldr	r2, [pc, #92]	; (800cf48 <vPortValidateInterruptPriority+0x70>)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	4413      	add	r3, r2
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cef4:	4b15      	ldr	r3, [pc, #84]	; (800cf4c <vPortValidateInterruptPriority+0x74>)
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	7afa      	ldrb	r2, [r7, #11]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d20a      	bcs.n	800cf14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	607b      	str	r3, [r7, #4]
}
 800cf10:	bf00      	nop
 800cf12:	e7fe      	b.n	800cf12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf14:	4b0e      	ldr	r3, [pc, #56]	; (800cf50 <vPortValidateInterruptPriority+0x78>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf1c:	4b0d      	ldr	r3, [pc, #52]	; (800cf54 <vPortValidateInterruptPriority+0x7c>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d90a      	bls.n	800cf3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	603b      	str	r3, [r7, #0]
}
 800cf36:	bf00      	nop
 800cf38:	e7fe      	b.n	800cf38 <vPortValidateInterruptPriority+0x60>
	}
 800cf3a:	bf00      	nop
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	e000e3f0 	.word	0xe000e3f0
 800cf4c:	20001520 	.word	0x20001520
 800cf50:	e000ed0c 	.word	0xe000ed0c
 800cf54:	20001524 	.word	0x20001524

0800cf58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b08a      	sub	sp, #40	; 0x28
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf60:	2300      	movs	r3, #0
 800cf62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf64:	f7fe f998 	bl	800b298 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf68:	4b5b      	ldr	r3, [pc, #364]	; (800d0d8 <pvPortMalloc+0x180>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d101      	bne.n	800cf74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf70:	f000 f920 	bl	800d1b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf74:	4b59      	ldr	r3, [pc, #356]	; (800d0dc <pvPortMalloc+0x184>)
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f040 8093 	bne.w	800d0a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d01d      	beq.n	800cfc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cf88:	2208      	movs	r2, #8
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f003 0307 	and.w	r3, r3, #7
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d014      	beq.n	800cfc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f023 0307 	bic.w	r3, r3, #7
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f003 0307 	and.w	r3, r3, #7
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00a      	beq.n	800cfc4 <pvPortMalloc+0x6c>
	__asm volatile
 800cfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	617b      	str	r3, [r7, #20]
}
 800cfc0:	bf00      	nop
 800cfc2:	e7fe      	b.n	800cfc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d06e      	beq.n	800d0a8 <pvPortMalloc+0x150>
 800cfca:	4b45      	ldr	r3, [pc, #276]	; (800d0e0 <pvPortMalloc+0x188>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d869      	bhi.n	800d0a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cfd4:	4b43      	ldr	r3, [pc, #268]	; (800d0e4 <pvPortMalloc+0x18c>)
 800cfd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cfd8:	4b42      	ldr	r3, [pc, #264]	; (800d0e4 <pvPortMalloc+0x18c>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfde:	e004      	b.n	800cfea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d903      	bls.n	800cffc <pvPortMalloc+0xa4>
 800cff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1f1      	bne.n	800cfe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cffc:	4b36      	ldr	r3, [pc, #216]	; (800d0d8 <pvPortMalloc+0x180>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d002:	429a      	cmp	r2, r3
 800d004:	d050      	beq.n	800d0a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d006:	6a3b      	ldr	r3, [r7, #32]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2208      	movs	r2, #8
 800d00c:	4413      	add	r3, r2
 800d00e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	6a3b      	ldr	r3, [r7, #32]
 800d016:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01a:	685a      	ldr	r2, [r3, #4]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	1ad2      	subs	r2, r2, r3
 800d020:	2308      	movs	r3, #8
 800d022:	005b      	lsls	r3, r3, #1
 800d024:	429a      	cmp	r2, r3
 800d026:	d91f      	bls.n	800d068 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4413      	add	r3, r2
 800d02e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	f003 0307 	and.w	r3, r3, #7
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00a      	beq.n	800d050 <pvPortMalloc+0xf8>
	__asm volatile
 800d03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03e:	f383 8811 	msr	BASEPRI, r3
 800d042:	f3bf 8f6f 	isb	sy
 800d046:	f3bf 8f4f 	dsb	sy
 800d04a:	613b      	str	r3, [r7, #16]
}
 800d04c:	bf00      	nop
 800d04e:	e7fe      	b.n	800d04e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	685a      	ldr	r2, [r3, #4]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	1ad2      	subs	r2, r2, r3
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d062:	69b8      	ldr	r0, [r7, #24]
 800d064:	f000 f908 	bl	800d278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d068:	4b1d      	ldr	r3, [pc, #116]	; (800d0e0 <pvPortMalloc+0x188>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	1ad3      	subs	r3, r2, r3
 800d072:	4a1b      	ldr	r2, [pc, #108]	; (800d0e0 <pvPortMalloc+0x188>)
 800d074:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d076:	4b1a      	ldr	r3, [pc, #104]	; (800d0e0 <pvPortMalloc+0x188>)
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	4b1b      	ldr	r3, [pc, #108]	; (800d0e8 <pvPortMalloc+0x190>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d203      	bcs.n	800d08a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d082:	4b17      	ldr	r3, [pc, #92]	; (800d0e0 <pvPortMalloc+0x188>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a18      	ldr	r2, [pc, #96]	; (800d0e8 <pvPortMalloc+0x190>)
 800d088:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08c:	685a      	ldr	r2, [r3, #4]
 800d08e:	4b13      	ldr	r3, [pc, #76]	; (800d0dc <pvPortMalloc+0x184>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	431a      	orrs	r2, r3
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	2200      	movs	r2, #0
 800d09c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d09e:	4b13      	ldr	r3, [pc, #76]	; (800d0ec <pvPortMalloc+0x194>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	4a11      	ldr	r2, [pc, #68]	; (800d0ec <pvPortMalloc+0x194>)
 800d0a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0a8:	f7fe f904 	bl	800b2b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	f003 0307 	and.w	r3, r3, #7
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d00a      	beq.n	800d0cc <pvPortMalloc+0x174>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	60fb      	str	r3, [r7, #12]
}
 800d0c8:	bf00      	nop
 800d0ca:	e7fe      	b.n	800d0ca <pvPortMalloc+0x172>
	return pvReturn;
 800d0cc:	69fb      	ldr	r3, [r7, #28]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3728      	adds	r7, #40	; 0x28
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20002130 	.word	0x20002130
 800d0dc:	20002144 	.word	0x20002144
 800d0e0:	20002134 	.word	0x20002134
 800d0e4:	20002128 	.word	0x20002128
 800d0e8:	20002138 	.word	0x20002138
 800d0ec:	2000213c 	.word	0x2000213c

0800d0f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d04d      	beq.n	800d19e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d102:	2308      	movs	r3, #8
 800d104:	425b      	negs	r3, r3
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	4413      	add	r3, r2
 800d10a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	685a      	ldr	r2, [r3, #4]
 800d114:	4b24      	ldr	r3, [pc, #144]	; (800d1a8 <vPortFree+0xb8>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4013      	ands	r3, r2
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d10a      	bne.n	800d134 <vPortFree+0x44>
	__asm volatile
 800d11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	60fb      	str	r3, [r7, #12]
}
 800d130:	bf00      	nop
 800d132:	e7fe      	b.n	800d132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00a      	beq.n	800d152 <vPortFree+0x62>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	60bb      	str	r3, [r7, #8]
}
 800d14e:	bf00      	nop
 800d150:	e7fe      	b.n	800d150 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	4b14      	ldr	r3, [pc, #80]	; (800d1a8 <vPortFree+0xb8>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4013      	ands	r3, r2
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d01e      	beq.n	800d19e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d11a      	bne.n	800d19e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	685a      	ldr	r2, [r3, #4]
 800d16c:	4b0e      	ldr	r3, [pc, #56]	; (800d1a8 <vPortFree+0xb8>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	43db      	mvns	r3, r3
 800d172:	401a      	ands	r2, r3
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d178:	f7fe f88e 	bl	800b298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	685a      	ldr	r2, [r3, #4]
 800d180:	4b0a      	ldr	r3, [pc, #40]	; (800d1ac <vPortFree+0xbc>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4413      	add	r3, r2
 800d186:	4a09      	ldr	r2, [pc, #36]	; (800d1ac <vPortFree+0xbc>)
 800d188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d18a:	6938      	ldr	r0, [r7, #16]
 800d18c:	f000 f874 	bl	800d278 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d190:	4b07      	ldr	r3, [pc, #28]	; (800d1b0 <vPortFree+0xc0>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3301      	adds	r3, #1
 800d196:	4a06      	ldr	r2, [pc, #24]	; (800d1b0 <vPortFree+0xc0>)
 800d198:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d19a:	f7fe f88b 	bl	800b2b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d19e:	bf00      	nop
 800d1a0:	3718      	adds	r7, #24
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	20002144 	.word	0x20002144
 800d1ac:	20002134 	.word	0x20002134
 800d1b0:	20002140 	.word	0x20002140

0800d1b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b085      	sub	sp, #20
 800d1b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d1be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1c0:	4b27      	ldr	r3, [pc, #156]	; (800d260 <prvHeapInit+0xac>)
 800d1c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f003 0307 	and.w	r3, r3, #7
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00c      	beq.n	800d1e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3307      	adds	r3, #7
 800d1d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f023 0307 	bic.w	r3, r3, #7
 800d1da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	1ad3      	subs	r3, r2, r3
 800d1e2:	4a1f      	ldr	r2, [pc, #124]	; (800d260 <prvHeapInit+0xac>)
 800d1e4:	4413      	add	r3, r2
 800d1e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1ec:	4a1d      	ldr	r2, [pc, #116]	; (800d264 <prvHeapInit+0xb0>)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d1f2:	4b1c      	ldr	r3, [pc, #112]	; (800d264 <prvHeapInit+0xb0>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	68ba      	ldr	r2, [r7, #8]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d200:	2208      	movs	r2, #8
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	1a9b      	subs	r3, r3, r2
 800d206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f023 0307 	bic.w	r3, r3, #7
 800d20e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	4a15      	ldr	r2, [pc, #84]	; (800d268 <prvHeapInit+0xb4>)
 800d214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d216:	4b14      	ldr	r3, [pc, #80]	; (800d268 <prvHeapInit+0xb4>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2200      	movs	r2, #0
 800d21c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d21e:	4b12      	ldr	r3, [pc, #72]	; (800d268 <prvHeapInit+0xb4>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	2200      	movs	r2, #0
 800d224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	1ad2      	subs	r2, r2, r3
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d234:	4b0c      	ldr	r3, [pc, #48]	; (800d268 <prvHeapInit+0xb4>)
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	4a0a      	ldr	r2, [pc, #40]	; (800d26c <prvHeapInit+0xb8>)
 800d242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	4a09      	ldr	r2, [pc, #36]	; (800d270 <prvHeapInit+0xbc>)
 800d24a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d24c:	4b09      	ldr	r3, [pc, #36]	; (800d274 <prvHeapInit+0xc0>)
 800d24e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d252:	601a      	str	r2, [r3, #0]
}
 800d254:	bf00      	nop
 800d256:	3714      	adds	r7, #20
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr
 800d260:	20001528 	.word	0x20001528
 800d264:	20002128 	.word	0x20002128
 800d268:	20002130 	.word	0x20002130
 800d26c:	20002138 	.word	0x20002138
 800d270:	20002134 	.word	0x20002134
 800d274:	20002144 	.word	0x20002144

0800d278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d280:	4b28      	ldr	r3, [pc, #160]	; (800d324 <prvInsertBlockIntoFreeList+0xac>)
 800d282:	60fb      	str	r3, [r7, #12]
 800d284:	e002      	b.n	800d28c <prvInsertBlockIntoFreeList+0x14>
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	60fb      	str	r3, [r7, #12]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	429a      	cmp	r2, r3
 800d294:	d8f7      	bhi.n	800d286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	68ba      	ldr	r2, [r7, #8]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d108      	bne.n	800d2ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	685a      	ldr	r2, [r3, #4]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	441a      	add	r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	68ba      	ldr	r2, [r7, #8]
 800d2c4:	441a      	add	r2, r3
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d118      	bne.n	800d300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	4b15      	ldr	r3, [pc, #84]	; (800d328 <prvInsertBlockIntoFreeList+0xb0>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d00d      	beq.n	800d2f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	441a      	add	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	e008      	b.n	800d308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d2f6:	4b0c      	ldr	r3, [pc, #48]	; (800d328 <prvInsertBlockIntoFreeList+0xb0>)
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	e003      	b.n	800d308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d002      	beq.n	800d316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d316:	bf00      	nop
 800d318:	3714      	adds	r7, #20
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	20002128 	.word	0x20002128
 800d328:	20002130 	.word	0x20002130

0800d32c <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	460b      	mov	r3, r1
 800d336:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d33e:	4619      	mov	r1, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	78fa      	ldrb	r2, [r7, #3]
 800d344:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d34c:	3301      	adds	r3, #1
 800d34e:	425a      	negs	r2, r3
 800d350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d354:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d358:	bf58      	it	pl
 800d35a:	4253      	negpl	r3, r2
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d36a:	2b80      	cmp	r3, #128	; 0x80
 800d36c:	d113      	bne.n	800d396 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2201      	movs	r2, #1
 800d372:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d37c:	3301      	adds	r3, #1
 800d37e:	425a      	negs	r2, r3
 800d380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d384:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d388:	bf58      	it	pl
 800d38a:	4253      	negpl	r3, r2
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800d394:	e00b      	b.n	800d3ae <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800d3ae:	bf00      	nop
 800d3b0:	370c      	adds	r7, #12
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr

0800d3ba <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b082      	sub	sp, #8
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 f805 	bl	800d3de <RingGetNBytes>
 800d3d4:	4603      	mov	r3, r0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3708      	adds	r7, #8
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b086      	sub	sp, #24
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	60f8      	str	r0, [r7, #12]
 800d3e6:	60b9      	str	r1, [r7, #8]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d002      	beq.n	800d3fc <RingGetNBytes+0x1e>
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d101      	bne.n	800d400 <RingGetNBytes+0x22>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	e03e      	b.n	800d47e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800d400:	79fb      	ldrb	r3, [r7, #7]
 800d402:	2b80      	cmp	r3, #128	; 0x80
 800d404:	d901      	bls.n	800d40a <RingGetNBytes+0x2c>
 800d406:	2300      	movs	r3, #0
 800d408:	e039      	b.n	800d47e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d40a:	2300      	movs	r3, #0
 800d40c:	75fb      	strb	r3, [r7, #23]
 800d40e:	e01b      	b.n	800d448 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d416:	4619      	mov	r1, r3
 800d418:	7dfb      	ldrb	r3, [r7, #23]
 800d41a:	68ba      	ldr	r2, [r7, #8]
 800d41c:	4413      	add	r3, r2
 800d41e:	68fa      	ldr	r2, [r7, #12]
 800d420:	5c52      	ldrb	r2, [r2, r1]
 800d422:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d42a:	3301      	adds	r3, #1
 800d42c:	425a      	negs	r2, r3
 800d42e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d432:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d436:	bf58      	it	pl
 800d438:	4253      	negpl	r3, r2
 800d43a:	b2da      	uxtb	r2, r3
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d442:	7dfb      	ldrb	r3, [r7, #23]
 800d444:	3301      	adds	r3, #1
 800d446:	75fb      	strb	r3, [r7, #23]
 800d448:	7dfa      	ldrb	r2, [r7, #23]
 800d44a:	79fb      	ldrb	r3, [r7, #7]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d205      	bcs.n	800d45c <RingGetNBytes+0x7e>
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d456:	7dfa      	ldrb	r2, [r7, #23]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d3d9      	bcc.n	800d410 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800d462:	7dfb      	ldrb	r3, [r7, #23]
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	b2da      	uxtb	r2, r3
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2200      	movs	r2, #0
 800d472:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f000 f805 	bl	800d486 <RingClear>

	return uCounter;
 800d47c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3718      	adds	r7, #24
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800d486:	b480      	push	{r7}
 800d488:	b083      	sub	sp, #12
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2200      	movs	r2, #0
 800d492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800d4ae:	bf00      	nop
 800d4b0:	370c      	adds	r7, #12
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
	...

0800d4bc <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af02      	add	r7, sp, #8
 800d4c2:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800d4c4:	4b42      	ldr	r3, [pc, #264]	; (800d5d0 <ModbusInit+0x114>)
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d87d      	bhi.n	800d5c8 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	33d0      	adds	r3, #208	; 0xd0
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7ff ffd8 	bl	800d486 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	2b03      	cmp	r3, #3
 800d4dc:	d109      	bne.n	800d4f2 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800d4de:	4a3d      	ldr	r2, [pc, #244]	; (800d5d4 <ModbusInit+0x118>)
 800d4e0:	6879      	ldr	r1, [r7, #4]
 800d4e2:	483d      	ldr	r0, [pc, #244]	; (800d5d8 <ModbusInit+0x11c>)
 800d4e4:	f7fc f97a 	bl	80097dc <osThreadNew>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800d4f0:	e033      	b.n	800d55a <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	2b04      	cmp	r3, #4
 800d4f8:	d12e      	bne.n	800d558 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800d4fa:	4a38      	ldr	r2, [pc, #224]	; (800d5dc <ModbusInit+0x120>)
 800d4fc:	6879      	ldr	r1, [r7, #4]
 800d4fe:	4838      	ldr	r0, [pc, #224]	; (800d5e0 <ModbusInit+0x124>)
 800d500:	f7fc f96c 	bl	80097dc <osThreadNew>
 800d504:	4602      	mov	r2, r0
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d512:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d51a:	4a32      	ldr	r2, [pc, #200]	; (800d5e4 <ModbusInit+0x128>)
 800d51c:	9200      	str	r2, [sp, #0]
 800d51e:	2200      	movs	r2, #0
 800d520:	4831      	ldr	r0, [pc, #196]	; (800d5e8 <ModbusInit+0x12c>)
 800d522:	f7fe ff09 	bl	800c338 <xTimerCreate>
 800d526:	4602      	mov	r2, r0
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d534:	2b00      	cmp	r3, #0
 800d536:	d100      	bne.n	800d53a <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800d538:	e7fe      	b.n	800d538 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800d53a:	4a2c      	ldr	r2, [pc, #176]	; (800d5ec <ModbusInit+0x130>)
 800d53c:	2110      	movs	r1, #16
 800d53e:	2002      	movs	r0, #2
 800d540:	f7fc fc11 	bl	8009d66 <osMessageQueueNew>
 800d544:	4602      	mov	r2, r0
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

		  if(modH->QueueTelegramHandle == NULL)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d552:	2b00      	cmp	r3, #0
 800d554:	d101      	bne.n	800d55a <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800d556:	e7fe      	b.n	800d556 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800d558:	e7fe      	b.n	800d558 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d100      	bne.n	800d566 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800d564:	e7fe      	b.n	800d564 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800d56c:	4a20      	ldr	r2, [pc, #128]	; (800d5f0 <ModbusInit+0x134>)
 800d56e:	9200      	str	r2, [sp, #0]
 800d570:	2200      	movs	r2, #0
 800d572:	2105      	movs	r1, #5
 800d574:	481f      	ldr	r0, [pc, #124]	; (800d5f4 <ModbusInit+0x138>)
 800d576:	f7fe fedf 	bl	800c338 <xTimerCreate>
 800d57a:	4602      	mov	r2, r0
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d100      	bne.n	800d58e <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800d58c:	e7fe      	b.n	800d58c <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800d58e:	4a1a      	ldr	r2, [pc, #104]	; (800d5f8 <ModbusInit+0x13c>)
 800d590:	2101      	movs	r1, #1
 800d592:	2001      	movs	r0, #1
 800d594:	f7fc fb5e 	bl	8009c54 <osSemaphoreNew>
 800d598:	4602      	mov	r2, r0
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	  if(modH->ModBusSphrHandle == NULL)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d100      	bne.n	800d5ac <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800d5aa:	e7fe      	b.n	800d5aa <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800d5ac:	4b08      	ldr	r3, [pc, #32]	; (800d5d0 <ModbusInit+0x114>)
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	4a12      	ldr	r2, [pc, #72]	; (800d5fc <ModbusInit+0x140>)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800d5ba:	4b05      	ldr	r3, [pc, #20]	; (800d5d0 <ModbusInit+0x114>)
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	b2da      	uxtb	r2, r3
 800d5c2:	4b03      	ldr	r3, [pc, #12]	; (800d5d0 <ModbusInit+0x114>)
 800d5c4:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800d5c6:	e000      	b.n	800d5ca <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800d5c8:	e7fe      	b.n	800d5c8 <ModbusInit+0x10c>
}
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	20002150 	.word	0x20002150
 800d5d4:	0800f12c 	.word	0x0800f12c
 800d5d8:	0800d809 	.word	0x0800d809
 800d5dc:	0800f150 	.word	0x0800f150
 800d5e0:	0800dce5 	.word	0x0800dce5
 800d5e4:	0800d7ad 	.word	0x0800d7ad
 800d5e8:	0800efa4 	.word	0x0800efa4
 800d5ec:	0800f114 	.word	0x0800f114
 800d5f0:	0800d729 	.word	0x0800d729
 800d5f4:	0800efb4 	.word	0x0800efb4
 800d5f8:	0800f174 	.word	0x0800f174
 800d5fc:	20002148 	.word	0x20002148

0800d600 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d005      	beq.n	800d61e <ModbusStart+0x1e>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d618:	2b04      	cmp	r3, #4
 800d61a:	d000      	beq.n	800d61e <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800d61c:	e7fe      	b.n	800d61c <ModbusStart+0x1c>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d624:	2b01      	cmp	r3, #1
 800d626:	d004      	beq.n	800d632 <ModbusStart+0x32>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d62e:	2b04      	cmp	r3, #4
 800d630:	d15c      	bne.n	800d6ec <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d007      	beq.n	800d64a <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	68d8      	ldr	r0, [r3, #12]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	8a1b      	ldrh	r3, [r3, #16]
 800d642:	2200      	movs	r2, #0
 800d644:	4619      	mov	r1, r3
 800d646:	f7f6 fdb3 	bl	80041b0 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regsHR == NULL )
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	2b03      	cmp	r3, #3
 800d650:	d105      	bne.n	800d65e <ModbusStart+0x5e>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d100      	bne.n	800d65e <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800d65c:	e7fe      	b.n	800d65c <ModbusStart+0x5c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800d65e:	bf00      	nop
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	4618      	mov	r0, r3
 800d666:	f7f9 ffa3 	bl	80075b0 <HAL_UART_GetState>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b20      	cmp	r3, #32
 800d66e:	d1f7      	bne.n	800d660 <ModbusStart+0x60>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d676:	2b04      	cmp	r3, #4
 800d678:	d11a      	bne.n	800d6b0 <ModbusStart+0xb0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6858      	ldr	r0, [r3, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	33d0      	adds	r3, #208	; 0xd0
 800d682:	2280      	movs	r2, #128	; 0x80
 800d684:	4619      	mov	r1, r3
 800d686:	f7fb ff3c 	bl	8009502 <HAL_UARTEx_ReceiveToIdle_DMA>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d000      	beq.n	800d692 <ModbusStart+0x92>
        	   {
        	         while(1)
 800d690:	e7fe      	b.n	800d690 <ModbusStart+0x90>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f022 0204 	bic.w	r2, r2, #4
 800d6ac:	601a      	str	r2, [r3, #0]
 800d6ae:	e00b      	b.n	800d6c8 <ModbusStart+0xc8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6858      	ldr	r0, [r3, #4]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	33b8      	adds	r3, #184	; 0xb8
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	f7f9 f95e 	bl	800697c <HAL_UART_Receive_IT>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d000      	beq.n	800d6c8 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800d6c6:	e7fe      	b.n	800d6c6 <ModbusStart+0xc6>
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	7a1b      	ldrb	r3, [r3, #8]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d004      	beq.n	800d6da <ModbusStart+0xda>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	2b04      	cmp	r3, #4
 800d6d6:	d100      	bne.n	800d6da <ModbusStart+0xda>
          {
        	  while(1)
 800d6d8:	e7fe      	b.n	800d6d8 <ModbusStart+0xd8>
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	7a1b      	ldrb	r3, [r3, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d104      	bne.n	800d6ec <ModbusStart+0xec>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	2b03      	cmp	r3, #3
 800d6e8:	d100      	bne.n	800d6ec <ModbusStart+0xec>
          {
             	  while(1)
 800d6ea:	e7fe      	b.n	800d6ea <ModbusStart+0xea>
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

}
 800d720:	bf00      	nop
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af02      	add	r7, sp, #8
 800d72e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d730:	2300      	movs	r3, #0
 800d732:	60fb      	str	r3, [r7, #12]
 800d734:	e02a      	b.n	800d78c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800d736:	4a1b      	ldr	r2, [pc, #108]	; (800d7a4 <vTimerCallbackT35+0x7c>)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d73e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	429a      	cmp	r2, r3
 800d746:	d11e      	bne.n	800d786 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800d748:	4a16      	ldr	r2, [pc, #88]	; (800d7a4 <vTimerCallbackT35+0x7c>)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	2b04      	cmp	r3, #4
 800d754:	d10c      	bne.n	800d770 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800d756:	4a13      	ldr	r2, [pc, #76]	; (800d7a4 <vTimerCallbackT35+0x7c>)
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d75e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800d762:	2300      	movs	r3, #0
 800d764:	9300      	str	r3, [sp, #0]
 800d766:	2300      	movs	r3, #0
 800d768:	2200      	movs	r2, #0
 800d76a:	2103      	movs	r1, #3
 800d76c:	f7fe fe7e 	bl	800c46c <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800d770:	4a0c      	ldr	r2, [pc, #48]	; (800d7a4 <vTimerCallbackT35+0x7c>)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d778:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d77c:	2300      	movs	r3, #0
 800d77e:	2203      	movs	r2, #3
 800d780:	2100      	movs	r1, #0
 800d782:	f7fe fba9 	bl	800bed8 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3301      	adds	r3, #1
 800d78a:	60fb      	str	r3, [r7, #12]
 800d78c:	4b06      	ldr	r3, [pc, #24]	; (800d7a8 <vTimerCallbackT35+0x80>)
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	461a      	mov	r2, r3
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	4293      	cmp	r3, r2
 800d796:	dbce      	blt.n	800d736 <vTimerCallbackT35+0xe>
		}

	}
}
 800d798:	bf00      	nop
 800d79a:	bf00      	nop
 800d79c:	3710      	adds	r7, #16
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	20002148 	.word	0x20002148
 800d7a8:	20002150 	.word	0x20002150

0800d7ac <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	60fb      	str	r3, [r7, #12]
 800d7b8:	e017      	b.n	800d7ea <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800d7ba:	4a11      	ldr	r2, [pc, #68]	; (800d800 <vTimerCallbackTimeout+0x54>)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d10b      	bne.n	800d7e4 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800d7cc:	4a0c      	ldr	r2, [pc, #48]	; (800d800 <vTimerCallbackTimeout+0x54>)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7d4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d7d8:	2300      	movs	r3, #0
 800d7da:	2203      	movs	r2, #3
 800d7dc:	f06f 0107 	mvn.w	r1, #7
 800d7e0:	f7fe fb7a 	bl	800bed8 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	60fb      	str	r3, [r7, #12]
 800d7ea:	4b06      	ldr	r3, [pc, #24]	; (800d804 <vTimerCallbackTimeout+0x58>)
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	dbe1      	blt.n	800d7ba <vTimerCallbackTimeout+0xe>
		}

	}

}
 800d7f6:	bf00      	nop
 800d7f8:	bf00      	nop
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	20002148 	.word	0x20002148
 800d804:	20002150 	.word	0x20002150

0800d808 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d820:	2b01      	cmp	r3, #1
 800d822:	d004      	beq.n	800d82e <StartTaskModbusSlave+0x26>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d82a:	2b04      	cmp	r3, #4
 800d82c:	d117      	bne.n	800d85e <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800d82e:	f04f 31ff 	mov.w	r1, #4294967295
 800d832:	2001      	movs	r0, #1
 800d834:	f7fe faae 	bl	800bd94 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f000 fc21 	bl	800e080 <getRxBuffer>
 800d83e:	4603      	mov	r3, r0
 800d840:	f113 0f03 	cmn.w	r3, #3
 800d844:	d10b      	bne.n	800d85e <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	22fd      	movs	r2, #253	; 0xfd
 800d84a:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800d852:	3301      	adds	r3, #1
 800d854:	b29a      	uxth	r2, r3
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  continue;
 800d85c:	e0b7      	b.n	800d9ce <StartTaskModbusSlave+0x1c6>
	  }
   }

   if (modH->u8BufferSize < 7)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d864:	2b06      	cmp	r3, #6
 800d866:	d80b      	bhi.n	800d880 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	22fa      	movs	r2, #250	; 0xfa
 800d86c:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800d874:	3301      	adds	r3, #1
 800d876:	b29a      	uxth	r2, r3
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	  continue;
 800d87e:	e0a6      	b.n	800d9ce <StartTaskModbusSlave+0x1c6>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	7cda      	ldrb	r2, [r3, #19]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	7a1b      	ldrb	r3, [r3, #8]
 800d888:	429a      	cmp	r2, r3
 800d88a:	f040 809f 	bne.w	800d9cc <StartTaskModbusSlave+0x1c4>
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	f000 fc40 	bl	800e114 <validateRequest>
 800d894:	4603      	mov	r3, r0
 800d896:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800d898:	7afb      	ldrb	r3, [r7, #11]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00c      	beq.n	800d8b8 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800d89e:	7afb      	ldrb	r3, [r7, #11]
 800d8a0:	68f9      	ldr	r1, [r7, #12]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f000 fdda 	bl	800e45c <buildException>
			sendTxBuffer(modH);
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f000 fdf6 	bl	800e49a <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800d8ae:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800d8b6:	e08a      	b.n	800d9ce <StartTaskModbusSlave+0x1c6>
	 }

	 modH->i8lastError = 0;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d8c4:	f04f 31ff 	mov.w	r1, #4294967295
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fc ffc9 	bl	800a860 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	7d1b      	ldrb	r3, [r3, #20]
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	2b0f      	cmp	r3, #15
 800d8d6:	d86f      	bhi.n	800d9b8 <StartTaskModbusSlave+0x1b0>
 800d8d8:	a201      	add	r2, pc, #4	; (adr r2, 800d8e0 <StartTaskModbusSlave+0xd8>)
 800d8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8de:	bf00      	nop
 800d8e0:	0800d921 	.word	0x0800d921
 800d8e4:	0800d935 	.word	0x0800d935
 800d8e8:	0800d949 	.word	0x0800d949
 800d8ec:	0800d95d 	.word	0x0800d95d
 800d8f0:	0800d971 	.word	0x0800d971
 800d8f4:	0800d983 	.word	0x0800d983
 800d8f8:	0800d9b9 	.word	0x0800d9b9
 800d8fc:	0800d9b9 	.word	0x0800d9b9
 800d900:	0800d9b9 	.word	0x0800d9b9
 800d904:	0800d9b9 	.word	0x0800d9b9
 800d908:	0800d9b9 	.word	0x0800d9b9
 800d90c:	0800d9b9 	.word	0x0800d9b9
 800d910:	0800d9b9 	.word	0x0800d9b9
 800d914:	0800d9b9 	.word	0x0800d9b9
 800d918:	0800d995 	.word	0x0800d995
 800d91c:	0800d9a7 	.word	0x0800d9a7
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH,DB_COILS);
 800d920:	2101      	movs	r1, #1
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f000 fe5b 	bl	800e5de <process_FC1>
 800d928:	4603      	mov	r3, r0
 800d92a:	461a      	mov	r2, r3
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d932:	e042      	b.n	800d9ba <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH,DB_INPUT_COILS);
 800d934:	2102      	movs	r1, #2
 800d936:	68f8      	ldr	r0, [r7, #12]
 800d938:	f000 fe51 	bl	800e5de <process_FC1>
 800d93c:	4603      	mov	r3, r0
 800d93e:	461a      	mov	r2, r3
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d946:	e038      	b.n	800d9ba <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_REGISTERS:
				modH->i8state = process_FC3(modH,DB_HOLDING_REGISTER);
 800d948:	2103      	movs	r1, #3
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f000 ff0b 	bl	800e766 <process_FC3>
 800d950:	4603      	mov	r3, r0
 800d952:	461a      	mov	r2, r3
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d95a:	e02e      	b.n	800d9ba <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC3(modH,DB_INPUT_REGISTERS);
 800d95c:	2104      	movs	r1, #4
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f000 ff01 	bl	800e766 <process_FC3>
 800d964:	4603      	mov	r3, r0
 800d966:	461a      	mov	r2, r3
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d96e:	e024      	b.n	800d9ba <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f000 ff70 	bl	800e856 <process_FC5>
 800d976:	4603      	mov	r3, r0
 800d978:	461a      	mov	r2, r3
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d980:	e01b      	b.n	800d9ba <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f000 ffc0 	bl	800e908 <process_FC6>
 800d988:	4603      	mov	r3, r0
 800d98a:	461a      	mov	r2, r3
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d992:	e012      	b.n	800d9ba <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	f000 ffe9 	bl	800e96c <process_FC15>
 800d99a:	4603      	mov	r3, r0
 800d99c:	461a      	mov	r2, r3
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d9a4:	e009      	b.n	800d9ba <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f001 f86e 	bl	800ea88 <process_FC16>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d9b6:	e000      	b.n	800d9ba <StartTaskModbusSlave+0x1b2>
			default:
				break;
 800d9b8:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	2100      	movs	r1, #0
 800d9c6:	f7fc fcd1 	bl	800a36c <xQueueGenericSend>

	 continue;
 800d9ca:	e000      	b.n	800d9ce <StartTaskModbusSlave+0x1c6>
    	continue;
 800d9cc:	bf00      	nop
  {
 800d9ce:	e721      	b.n	800d814 <StartTaskModbusSlave+0xc>

0800d9d0 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 800d9d0:	b084      	sub	sp, #16
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b084      	sub	sp, #16
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
 800d9da:	f107 001c 	add.w	r0, r7, #28
 800d9de:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d9ec:	f04f 31ff 	mov.w	r1, #4294967295
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7fc ff35 	bl	800a860 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	7a1b      	ldrb	r3, [r3, #8]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d001      	beq.n	800da02 <SendQuery+0x32>
 800d9fe:	23ff      	movs	r3, #255	; 0xff
 800da00:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f993 30b9 	ldrsb.w	r3, [r3, #185]	; 0xb9
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d001      	beq.n	800da10 <SendQuery+0x40>
 800da0c:	23fe      	movs	r3, #254	; 0xfe
 800da0e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800da10:	7f3b      	ldrb	r3, [r7, #28]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d002      	beq.n	800da1c <SendQuery+0x4c>
 800da16:	7f3b      	ldrb	r3, [r7, #28]
 800da18:	2bf7      	cmp	r3, #247	; 0xf7
 800da1a:	d901      	bls.n	800da20 <SendQuery+0x50>
 800da1c:	23f7      	movs	r3, #247	; 0xf7
 800da1e:	73bb      	strb	r3, [r7, #14]


	if(error)
 800da20:	7bbb      	ldrb	r3, [r7, #14]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00e      	beq.n	800da44 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800da26:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800da34:	2300      	movs	r3, #0
 800da36:	2200      	movs	r2, #0
 800da38:	2100      	movs	r1, #0
 800da3a:	f7fc fc97 	bl	800a36c <xQueueGenericSend>
		 return error;
 800da3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da42:	e147      	b.n	800dcd4 <SendQuery+0x304>
	}


	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800da44:	7f7b      	ldrb	r3, [r7, #29]
 800da46:	2b01      	cmp	r3, #1
 800da48:	d008      	beq.n	800da5c <SendQuery+0x8c>
 800da4a:	7f7b      	ldrb	r3, [r7, #29]
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d005      	beq.n	800da5c <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800da50:	7f7b      	ldrb	r3, [r7, #29]
	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800da52:	2b05      	cmp	r3, #5
 800da54:	d002      	beq.n	800da5c <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800da56:	7f7b      	ldrb	r3, [r7, #29]
 800da58:	2b0f      	cmp	r3, #15
 800da5a:	d104      	bne.n	800da66 <SendQuery+0x96>
	{
		modH->u16regsCoils = telegram.u16reg;
 800da5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800da64:	e00f      	b.n	800da86 <SendQuery+0xb6>
	}
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800da66:	7f7b      	ldrb	r3, [r7, #29]
 800da68:	2b03      	cmp	r3, #3
 800da6a:	d008      	beq.n	800da7e <SendQuery+0xae>
 800da6c:	7f7b      	ldrb	r3, [r7, #29]
 800da6e:	2b04      	cmp	r3, #4
 800da70:	d005      	beq.n	800da7e <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800da72:	7f7b      	ldrb	r3, [r7, #29]
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800da74:	2b06      	cmp	r3, #6
 800da76:	d002      	beq.n	800da7e <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800da78:	7f7b      	ldrb	r3, [r7, #29]
 800da7a:	2b10      	cmp	r3, #16
 800da7c:	d103      	bne.n	800da86 <SendQuery+0xb6>
	{
		modH->u16regsHR = telegram.u16reg;
 800da7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800da86:	7f3a      	ldrb	r2, [r7, #28]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800da8c:	7f7a      	ldrb	r2, [r7, #29]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800da92:	8bfb      	ldrh	r3, [r7, #30]
 800da94:	0a1b      	lsrs	r3, r3, #8
 800da96:	b29b      	uxth	r3, r3
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800da9e:	8bfb      	ldrh	r3, [r7, #30]
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800daa6:	7f7b      	ldrb	r3, [r7, #29]
 800daa8:	3b01      	subs	r3, #1
 800daaa:	2b0f      	cmp	r3, #15
 800daac:	f200 80ff 	bhi.w	800dcae <SendQuery+0x2de>
 800dab0:	a201      	add	r2, pc, #4	; (adr r2, 800dab8 <SendQuery+0xe8>)
 800dab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab6:	bf00      	nop
 800dab8:	0800daf9 	.word	0x0800daf9
 800dabc:	0800daf9 	.word	0x0800daf9
 800dac0:	0800daf9 	.word	0x0800daf9
 800dac4:	0800daf9 	.word	0x0800daf9
 800dac8:	0800db17 	.word	0x0800db17
 800dacc:	0800db39 	.word	0x0800db39
 800dad0:	0800dcaf 	.word	0x0800dcaf
 800dad4:	0800dcaf 	.word	0x0800dcaf
 800dad8:	0800dcaf 	.word	0x0800dcaf
 800dadc:	0800dcaf 	.word	0x0800dcaf
 800dae0:	0800dcaf 	.word	0x0800dcaf
 800dae4:	0800dcaf 	.word	0x0800dcaf
 800dae8:	0800dcaf 	.word	0x0800dcaf
 800daec:	0800dcaf 	.word	0x0800dcaf
 800daf0:	0800db5b 	.word	0x0800db5b
 800daf4:	0800dc19 	.word	0x0800dc19
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800daf8:	8c3b      	ldrh	r3, [r7, #32]
 800dafa:	0a1b      	lsrs	r3, r3, #8
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800db04:	8c3b      	ldrh	r3, [r7, #32]
 800db06:	b2da      	uxtb	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2206      	movs	r2, #6
 800db10:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800db14:	e0cb      	b.n	800dcae <SendQuery+0x2de>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	881b      	ldrh	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d001      	beq.n	800db22 <SendQuery+0x152>
 800db1e:	22ff      	movs	r2, #255	; 0xff
 800db20:	e000      	b.n	800db24 <SendQuery+0x154>
 800db22:	2200      	movs	r2, #0
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2206      	movs	r2, #6
 800db32:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800db36:	e0ba      	b.n	800dcae <SendQuery+0x2de>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	881b      	ldrh	r3, [r3, #0]
 800db3c:	0a1b      	lsrs	r3, r3, #8
 800db3e:	b29b      	uxth	r3, r3
 800db40:	b2da      	uxtb	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800db46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db48:	881b      	ldrh	r3, [r3, #0]
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2206      	movs	r2, #6
 800db54:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800db58:	e0a9      	b.n	800dcae <SendQuery+0x2de>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800db5a:	8c3b      	ldrh	r3, [r7, #32]
 800db5c:	091b      	lsrs	r3, r3, #4
 800db5e:	b29b      	uxth	r3, r3
 800db60:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800db62:	7a7b      	ldrb	r3, [r7, #9]
 800db64:	005b      	lsls	r3, r3, #1
 800db66:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800db68:	8c3b      	ldrh	r3, [r7, #32]
 800db6a:	f003 030f 	and.w	r3, r3, #15
 800db6e:	b29b      	uxth	r3, r3
 800db70:	2b00      	cmp	r3, #0
 800db72:	d005      	beq.n	800db80 <SendQuery+0x1b0>
	    {
	        u8bytesno++;
 800db74:	7bfb      	ldrb	r3, [r7, #15]
 800db76:	3301      	adds	r3, #1
 800db78:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800db7a:	7a7b      	ldrb	r3, [r7, #9]
 800db7c:	3301      	adds	r3, #1
 800db7e:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800db80:	8c3b      	ldrh	r3, [r7, #32]
 800db82:	0a1b      	lsrs	r3, r3, #8
 800db84:	b29b      	uxth	r3, r3
 800db86:	b2da      	uxtb	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800db8c:	8c3b      	ldrh	r3, [r7, #32]
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	7bfa      	ldrb	r2, [r7, #15]
 800db98:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2207      	movs	r2, #7
 800db9e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800dba2:	2300      	movs	r3, #0
 800dba4:	81bb      	strh	r3, [r7, #12]
 800dba6:	e031      	b.n	800dc0c <SendQuery+0x23c>
	    {
	        if(i%2)
 800dba8:	89bb      	ldrh	r3, [r7, #12]
 800dbaa:	f003 0301 	and.w	r3, r3, #1
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00f      	beq.n	800dbd4 <SendQuery+0x204>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800dbb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbb6:	89bb      	ldrh	r3, [r7, #12]
 800dbb8:	085b      	lsrs	r3, r3, #1
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	005b      	lsls	r3, r3, #1
 800dbbe:	4413      	add	r3, r2
 800dbc0:	881a      	ldrh	r2, [r3, #0]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbc8:	4619      	mov	r1, r3
 800dbca:	b2d2      	uxtb	r2, r2
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	440b      	add	r3, r1
 800dbd0:	74da      	strb	r2, [r3, #19]
 800dbd2:	e010      	b.n	800dbf6 <SendQuery+0x226>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800dbd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbd6:	89bb      	ldrh	r3, [r7, #12]
 800dbd8:	085b      	lsrs	r3, r3, #1
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	005b      	lsls	r3, r3, #1
 800dbde:	4413      	add	r3, r2
 800dbe0:	881b      	ldrh	r3, [r3, #0]
 800dbe2:	0a1b      	lsrs	r3, r3, #8
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbec:	4619      	mov	r1, r3
 800dbee:	b2d2      	uxtb	r2, r2
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	440b      	add	r3, r1
 800dbf4:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800dc06:	89bb      	ldrh	r3, [r7, #12]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	81bb      	strh	r3, [r7, #12]
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	89ba      	ldrh	r2, [r7, #12]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d3c8      	bcc.n	800dba8 <SendQuery+0x1d8>
	    }
	    break;
 800dc16:	e04a      	b.n	800dcae <SendQuery+0x2de>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800dc18:	8c3b      	ldrh	r3, [r7, #32]
 800dc1a:	0a1b      	lsrs	r3, r3, #8
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	b2da      	uxtb	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800dc24:	8c3b      	ldrh	r3, [r7, #32]
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800dc2c:	8c3b      	ldrh	r3, [r7, #32]
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	005b      	lsls	r3, r3, #1
 800dc32:	b2da      	uxtb	r2, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2207      	movs	r2, #7
 800dc3c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800dc40:	2300      	movs	r3, #0
 800dc42:	817b      	strh	r3, [r7, #10]
 800dc44:	e02e      	b.n	800dca4 <SendQuery+0x2d4>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800dc46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc48:	897b      	ldrh	r3, [r7, #10]
 800dc4a:	005b      	lsls	r3, r3, #1
 800dc4c:	4413      	add	r3, r2
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	0a1b      	lsrs	r3, r3, #8
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	b2d2      	uxtb	r2, r2
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	440b      	add	r3, r1
 800dc62:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	b2da      	uxtb	r2, r3
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800dc74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc76:	897b      	ldrh	r3, [r7, #10]
 800dc78:	005b      	lsls	r3, r3, #1
 800dc7a:	4413      	add	r3, r2
 800dc7c:	881a      	ldrh	r2, [r3, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc84:	4619      	mov	r1, r3
 800dc86:	b2d2      	uxtb	r2, r2
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	440b      	add	r3, r1
 800dc8c:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc94:	3301      	adds	r3, #1
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800dc9e:	897b      	ldrh	r3, [r7, #10]
 800dca0:	3301      	adds	r3, #1
 800dca2:	817b      	strh	r3, [r7, #10]
 800dca4:	8c3b      	ldrh	r3, [r7, #32]
 800dca6:	897a      	ldrh	r2, [r7, #10]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d3cc      	bcc.n	800dc46 <SendQuery+0x276>
	    }
	    break;
 800dcac:	bf00      	nop
	}


	sendTxBuffer(modH);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fbf3 	bl	800e49a <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800dcba:	2300      	movs	r3, #0
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	f7fc fb54 	bl	800a36c <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	modH->i8lastError = 0;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	749a      	strb	r2, [r3, #18]
	return 0;
 800dcd2:	2300      	movs	r3, #0


}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcde:	b004      	add	sp, #16
 800dce0:	4770      	bx	lr
 800dce2:	bf00      	nop

0800dce4 <StartTaskModbusMaster>:


void StartTaskModbusMaster(void *argument)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b08c      	sub	sp, #48	; 0x30
 800dce8:	af02      	add	r7, sp, #8
 800dcea:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dcf6:	f107 010c 	add.w	r1, r7, #12
 800dcfa:	f04f 32ff 	mov.w	r2, #4294967295
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fc fcce 	bl	800a6a0 <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	f107 030c 	add.w	r3, r7, #12
 800dd0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd10:	f7ff fe5e 	bl	800d9d0 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800dd14:	f04f 31ff 	mov.w	r1, #4294967295
 800dd18:	2001      	movs	r0, #1
 800dd1a:	f7fe f83b 	bl	800bd94 <ulTaskNotifyTake>
 800dd1e:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800dd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd22:	2200      	movs	r2, #0
 800dd24:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800dd26:	6a3b      	ldr	r3, [r7, #32]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d018      	beq.n	800dd5e <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    	  modH->i8lastError = ERR_TIME_OUT;
 800dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd36:	22f8      	movs	r2, #248	; 0xf8
 800dd38:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dd40:	3301      	adds	r3, #1
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd46:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dd4a:	69b8      	ldr	r0, [r7, #24]
 800dd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4e:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dd52:	4619      	mov	r1, r3
 800dd54:	2300      	movs	r3, #0
 800dd56:	2203      	movs	r2, #3
 800dd58:	f7fe f8be 	bl	800bed8 <xTaskGenericNotify>
    	  continue;
 800dd5c:	e09a      	b.n	800de94 <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800dd5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd60:	f000 f98e 	bl	800e080 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd66:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd6a:	2b05      	cmp	r3, #5
 800dd6c:	d818      	bhi.n	800dda0 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	2200      	movs	r2, #0
 800dd72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		  modH->i8lastError = ERR_BAD_SIZE;
 800dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd78:	22fa      	movs	r2, #250	; 0xfa
 800dd7a:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dd82:	3301      	adds	r3, #1
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dd8c:	69b8      	ldr	r0, [r7, #24]
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd90:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dd94:	4619      	mov	r1, r3
 800dd96:	2300      	movs	r3, #0
 800dd98:	2203      	movs	r2, #3
 800dd9a:	f7fe f89d 	bl	800bed8 <xTaskGenericNotify>
		  continue;
 800dd9e:	e079      	b.n	800de94 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800dda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800dda6:	2300      	movs	r3, #0
 800dda8:	9300      	str	r3, [sp, #0]
 800ddaa:	2300      	movs	r3, #0
 800ddac:	2200      	movs	r2, #0
 800ddae:	2103      	movs	r1, #3
 800ddb0:	f7fe fb5c 	bl	800c46c <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800ddb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddb6:	f000 f8f5 	bl	800dfa4 <validateAnswer>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800ddbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d010      	beq.n	800dde8 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
         modH->i8lastError = u8exception;
 800ddce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd0:	7ffa      	ldrb	r2, [r7, #31]
 800ddd2:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800ddd4:	69b8      	ldr	r0, [r7, #24]
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd8:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dddc:	4619      	mov	r1, r3
 800ddde:	2300      	movs	r3, #0
 800dde0:	2203      	movs	r2, #3
 800dde2:	f7fe f879 	bl	800bed8 <xTaskGenericNotify>
	     continue;
 800dde6:	e055      	b.n	800de94 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	7ffa      	ldrb	r2, [r7, #31]
 800ddec:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800ddee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ddf4:	f04f 31ff 	mov.w	r1, #4294967295
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7fc fd31 	bl	800a860 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	7d1b      	ldrb	r3, [r3, #20]
 800de02:	3b01      	subs	r3, #1
 800de04:	2b0f      	cmp	r3, #15
 800de06:	d82b      	bhi.n	800de60 <StartTaskModbusMaster+0x17c>
 800de08:	a201      	add	r2, pc, #4	; (adr r2, 800de10 <StartTaskModbusMaster+0x12c>)
 800de0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de0e:	bf00      	nop
 800de10:	0800de51 	.word	0x0800de51
 800de14:	0800de51 	.word	0x0800de51
 800de18:	0800de59 	.word	0x0800de59
 800de1c:	0800de59 	.word	0x0800de59
 800de20:	0800de61 	.word	0x0800de61
 800de24:	0800de61 	.word	0x0800de61
 800de28:	0800de61 	.word	0x0800de61
 800de2c:	0800de61 	.word	0x0800de61
 800de30:	0800de61 	.word	0x0800de61
 800de34:	0800de61 	.word	0x0800de61
 800de38:	0800de61 	.word	0x0800de61
 800de3c:	0800de61 	.word	0x0800de61
 800de40:	0800de61 	.word	0x0800de61
 800de44:	0800de61 	.word	0x0800de61
 800de48:	0800de61 	.word	0x0800de61
 800de4c:	0800de61 	.word	0x0800de61
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 800de50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de52:	f000 f821 	bl	800de98 <get_FC1>
	      break;
 800de56:	e004      	b.n	800de62 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800de58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de5a:	f000 f874 	bl	800df46 <get_FC3>
	      break;
 800de5e:	e000      	b.n	800de62 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 800de60:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800de62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de64:	2200      	movs	r2, #0
 800de66:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800de6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10e      	bne.n	800de92 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800de74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de76:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800de7a:	2300      	movs	r3, #0
 800de7c:	2200      	movs	r2, #0
 800de7e:	2100      	movs	r1, #0
 800de80:	f7fc fa74 	bl	800a36c <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800de84:	69b8      	ldr	r0, [r7, #24]
 800de86:	2300      	movs	r3, #0
 800de88:	2203      	movs	r2, #3
 800de8a:	f06f 010a 	mvn.w	r1, #10
 800de8e:	f7fe f823 	bl	800bed8 <xTaskGenericNotify>
	  }


	  continue;
 800de92:	bf00      	nop
  {
 800de94:	e72c      	b.n	800dcf0 <StartTaskModbusMaster+0xc>
 800de96:	bf00      	nop

0800de98 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800de98:	b590      	push	{r4, r7, lr}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800dea0:	2303      	movs	r3, #3
 800dea2:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800dea4:	2300      	movs	r3, #0
 800dea6:	73fb      	strb	r3, [r7, #15]
 800dea8:	e043      	b.n	800df32 <get_FC1+0x9a>

        if(i%2)
 800deaa:	7bfb      	ldrb	r3, [r7, #15]
 800deac:	f003 0301 	and.w	r3, r3, #1
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d01c      	beq.n	800def0 <get_FC1+0x58>
        {
        	modH->u16regsCoils[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regsCoils[i/2]));
 800deb6:	7bfa      	ldrb	r2, [r7, #15]
 800deb8:	7bbb      	ldrb	r3, [r7, #14]
 800deba:	4413      	add	r3, r2
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	4413      	add	r3, r2
 800dec0:	7cd8      	ldrb	r0, [r3, #19]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800dec8:	7bfb      	ldrb	r3, [r7, #15]
 800deca:	085b      	lsrs	r3, r3, #1
 800decc:	b2db      	uxtb	r3, r3
 800dece:	005b      	lsls	r3, r3, #1
 800ded0:	4413      	add	r3, r2
 800ded2:	881b      	ldrh	r3, [r3, #0]
 800ded4:	b2d9      	uxtb	r1, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
 800dede:	085b      	lsrs	r3, r3, #1
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	18d4      	adds	r4, r2, r3
 800dee6:	f000 fa5f 	bl	800e3a8 <word>
 800deea:	4603      	mov	r3, r0
 800deec:	8023      	strh	r3, [r4, #0]
 800deee:	e01d      	b.n	800df2c <get_FC1+0x94>
        }
        else
        {

        	modH->u16regsCoils[i/2]= word(highByte(modH->u16regsCoils[i/2]), modH->u8Buffer[i+u8byte]);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800def6:	7bfb      	ldrb	r3, [r7, #15]
 800def8:	085b      	lsrs	r3, r3, #1
 800defa:	b2db      	uxtb	r3, r3
 800defc:	005b      	lsls	r3, r3, #1
 800defe:	4413      	add	r3, r2
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	0a1b      	lsrs	r3, r3, #8
 800df04:	b29b      	uxth	r3, r3
 800df06:	b2d8      	uxtb	r0, r3
 800df08:	7bfa      	ldrb	r2, [r7, #15]
 800df0a:	7bbb      	ldrb	r3, [r7, #14]
 800df0c:	4413      	add	r3, r2
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	4413      	add	r3, r2
 800df12:	7cd9      	ldrb	r1, [r3, #19]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800df1a:	7bfb      	ldrb	r3, [r7, #15]
 800df1c:	085b      	lsrs	r3, r3, #1
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	005b      	lsls	r3, r3, #1
 800df22:	18d4      	adds	r4, r2, r3
 800df24:	f000 fa40 	bl	800e3a8 <word>
 800df28:	4603      	mov	r3, r0
 800df2a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800df2c:	7bfb      	ldrb	r3, [r7, #15]
 800df2e:	3301      	adds	r3, #1
 800df30:	73fb      	strb	r3, [r7, #15]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	7d5b      	ldrb	r3, [r3, #21]
 800df36:	7bfa      	ldrb	r2, [r7, #15]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d3b6      	bcc.n	800deaa <get_FC1+0x12>
        }

     }
}
 800df3c:	bf00      	nop
 800df3e:	bf00      	nop
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	bd90      	pop	{r4, r7, pc}

0800df46 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800df46:	b590      	push	{r4, r7, lr}
 800df48:	b085      	sub	sp, #20
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800df4e:	2303      	movs	r3, #3
 800df50:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800df52:	2300      	movs	r3, #0
 800df54:	73bb      	strb	r3, [r7, #14]
 800df56:	e018      	b.n	800df8a <get_FC3+0x44>
    {
    	modH->u16regsHR[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800df58:	7bfb      	ldrb	r3, [r7, #15]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	4413      	add	r3, r2
 800df5e:	7cd8      	ldrb	r0, [r3, #19]
 800df60:	7bfb      	ldrb	r3, [r7, #15]
 800df62:	3301      	adds	r3, #1
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	4413      	add	r3, r2
 800df68:	7cd9      	ldrb	r1, [r3, #19]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800df70:	7bbb      	ldrb	r3, [r7, #14]
 800df72:	005b      	lsls	r3, r3, #1
 800df74:	18d4      	adds	r4, r2, r3
 800df76:	f000 fa17 	bl	800e3a8 <word>
 800df7a:	4603      	mov	r3, r0
 800df7c:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800df7e:	7bfb      	ldrb	r3, [r7, #15]
 800df80:	3302      	adds	r3, #2
 800df82:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800df84:	7bbb      	ldrb	r3, [r7, #14]
 800df86:	3301      	adds	r3, #1
 800df88:	73bb      	strb	r3, [r7, #14]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	7d5b      	ldrb	r3, [r3, #21]
 800df8e:	085b      	lsrs	r3, r3, #1
 800df90:	b2db      	uxtb	r3, r3
 800df92:	7bba      	ldrb	r2, [r7, #14]
 800df94:	429a      	cmp	r2, r3
 800df96:	d3df      	bcc.n	800df58 <get_FC3+0x12>
    }
}
 800df98:	bf00      	nop
 800df9a:	bf00      	nop
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd90      	pop	{r4, r7, pc}
	...

0800dfa4 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dfb2:	3b02      	subs	r3, #2
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	7cdb      	ldrb	r3, [r3, #19]
 800dfba:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800dfbc:	b21a      	sxth	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dfc4:	3b01      	subs	r3, #1
 800dfc6:	6879      	ldr	r1, [r7, #4]
 800dfc8:	440b      	add	r3, r1
 800dfca:	7cdb      	ldrb	r3, [r3, #19]
 800dfcc:	b21b      	sxth	r3, r3
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800dfd2:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f103 0213 	add.w	r2, r3, #19
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dfe0:	3b02      	subs	r3, #2
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	4610      	mov	r0, r2
 800dfe8:	f000 f9f1 	bl	800e3ce <calcCRC>
 800dfec:	4603      	mov	r3, r0
 800dfee:	461a      	mov	r2, r3
 800dff0:	89bb      	ldrh	r3, [r7, #12]
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d009      	beq.n	800e00a <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dffc:	3301      	adds	r3, #1
 800dffe:	b29a      	uxth	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_BAD_CRC;
 800e006:	23fc      	movs	r3, #252	; 0xfc
 800e008:	e034      	b.n	800e074 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	7d1b      	ldrb	r3, [r3, #20]
 800e00e:	b25b      	sxtb	r3, r3
 800e010:	2b00      	cmp	r3, #0
 800e012:	da09      	bge.n	800e028 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e01a:	3301      	adds	r3, #1
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_EXCEPTION;
 800e024:	23fb      	movs	r3, #251	; 0xfb
 800e026:	e025      	b.n	800e074 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 800e028:	2300      	movs	r3, #0
 800e02a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e02c:	2300      	movs	r3, #0
 800e02e:	73bb      	strb	r3, [r7, #14]
 800e030:	e00c      	b.n	800e04c <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e032:	7bbb      	ldrb	r3, [r7, #14]
 800e034:	4a11      	ldr	r2, [pc, #68]	; (800e07c <validateAnswer+0xd8>)
 800e036:	5cd2      	ldrb	r2, [r2, r3]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	7d1b      	ldrb	r3, [r3, #20]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d102      	bne.n	800e046 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800e040:	2301      	movs	r3, #1
 800e042:	73fb      	strb	r3, [r7, #15]
            break;
 800e044:	e005      	b.n	800e052 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e046:	7bbb      	ldrb	r3, [r7, #14]
 800e048:	3301      	adds	r3, #1
 800e04a:	73bb      	strb	r3, [r7, #14]
 800e04c:	7bbb      	ldrb	r3, [r7, #14]
 800e04e:	2b07      	cmp	r3, #7
 800e050:	d9ef      	bls.n	800e032 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800e052:	7bfb      	ldrb	r3, [r7, #15]
 800e054:	f083 0301 	eor.w	r3, r3, #1
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d009      	beq.n	800e072 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e064:	3301      	adds	r3, #1
 800e066:	b29a      	uxth	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return EXC_FUNC_CODE;
 800e06e:	2301      	movs	r3, #1
 800e070:	e000      	b.n	800e074 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	3710      	adds	r7, #16
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	0800f184 	.word	0x0800f184

0800e080 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d104      	bne.n	800e09c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	4618      	mov	r0, r3
 800e098:	f7f8 fdd2 	bl	8006c40 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d008      	beq.n	800e0b8 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	33d0      	adds	r3, #208	; 0xd0
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7ff f9eb 	bl	800d486 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800e0b0:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800e0b4:	81fb      	strh	r3, [r7, #14]
 800e0b6:	e019      	b.n	800e0ec <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	3313      	adds	r3, #19
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	f7ff f978 	bl	800d3ba <RingGetAllBytes>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e0da:	3301      	adds	r3, #1
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		i16result = modH->u8BufferSize;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e0ea:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d107      	bne.n	800e106 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6858      	ldr	r0, [r3, #4]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	33b8      	adds	r3, #184	; 0xb8
 800e0fe:	2201      	movs	r2, #1
 800e100:	4619      	mov	r1, r3
 800e102:	f7f8 fc3b 	bl	800697c <HAL_UART_Receive_IT>
	}

    return i16result;
 800e106:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3710      	adds	r7, #16
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
	...

0800e114 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e122:	3b02      	subs	r3, #2
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	4413      	add	r3, r2
 800e128:	7cdb      	ldrb	r3, [r3, #19]
 800e12a:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e12c:	b21a      	sxth	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e134:	3b01      	subs	r3, #1
 800e136:	6879      	ldr	r1, [r7, #4]
 800e138:	440b      	add	r3, r1
 800e13a:	7cdb      	ldrb	r3, [r3, #19]
 800e13c:	b21b      	sxth	r3, r3
 800e13e:	4313      	orrs	r3, r2
 800e140:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e142:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f103 0213 	add.w	r2, r3, #19
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e150:	3b02      	subs	r3, #2
 800e152:	b2db      	uxtb	r3, r3
 800e154:	4619      	mov	r1, r3
 800e156:	4610      	mov	r0, r2
 800e158:	f000 f939 	bl	800e3ce <calcCRC>
 800e15c:	4603      	mov	r3, r0
 800e15e:	461a      	mov	r2, r3
 800e160:	893b      	ldrh	r3, [r7, #8]
 800e162:	4293      	cmp	r3, r2
 800e164:	d009      	beq.n	800e17a <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e16c:	3301      	adds	r3, #1
 800e16e:	b29a      	uxth	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	       		return ERR_BAD_CRC;
 800e176:	23fc      	movs	r3, #252	; 0xfc
 800e178:	e10f      	b.n	800e39a <validateRequest+0x286>
	    }



	    // check fct code
	    bool isSupported = false;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e17e:	2300      	movs	r3, #0
 800e180:	73bb      	strb	r3, [r7, #14]
 800e182:	e00c      	b.n	800e19e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e184:	7bbb      	ldrb	r3, [r7, #14]
 800e186:	4a87      	ldr	r2, [pc, #540]	; (800e3a4 <validateRequest+0x290>)
 800e188:	5cd2      	ldrb	r2, [r2, r3]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	7d1b      	ldrb	r3, [r3, #20]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d102      	bne.n	800e198 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800e192:	2301      	movs	r3, #1
 800e194:	73fb      	strb	r3, [r7, #15]
	            break;
 800e196:	e005      	b.n	800e1a4 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e198:	7bbb      	ldrb	r3, [r7, #14]
 800e19a:	3301      	adds	r3, #1
 800e19c:	73bb      	strb	r3, [r7, #14]
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
 800e1a0:	2b07      	cmp	r3, #7
 800e1a2:	d9ef      	bls.n	800e184 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
 800e1a6:	f083 0301 	eor.w	r3, r3, #1
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d009      	beq.n	800e1c4 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	        return EXC_FUNC_CODE;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e0ea      	b.n	800e39a <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	7d1b      	ldrb	r3, [r3, #20]
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	2b0f      	cmp	r3, #15
 800e1d4:	f200 80e0 	bhi.w	800e398 <validateRequest+0x284>
 800e1d8:	a201      	add	r2, pc, #4	; (adr r2, 800e1e0 <validateRequest+0xcc>)
 800e1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1de:	bf00      	nop
 800e1e0:	0800e221 	.word	0x0800e221
 800e1e4:	0800e221 	.word	0x0800e221
 800e1e8:	0800e339 	.word	0x0800e339
 800e1ec:	0800e339 	.word	0x0800e339
 800e1f0:	0800e2cd 	.word	0x0800e2cd
 800e1f4:	0800e315 	.word	0x0800e315
 800e1f8:	0800e399 	.word	0x0800e399
 800e1fc:	0800e399 	.word	0x0800e399
 800e200:	0800e399 	.word	0x0800e399
 800e204:	0800e399 	.word	0x0800e399
 800e208:	0800e399 	.word	0x0800e399
 800e20c:	0800e399 	.word	0x0800e399
 800e210:	0800e399 	.word	0x0800e399
 800e214:	0800e399 	.word	0x0800e399
 800e218:	0800e221 	.word	0x0800e221
 800e21c:	0800e339 	.word	0x0800e339
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	7d5a      	ldrb	r2, [r3, #21]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	7d9b      	ldrb	r3, [r3, #22]
 800e228:	4619      	mov	r1, r3
 800e22a:	4610      	mov	r0, r2
 800e22c:	f000 f8bc 	bl	800e3a8 <word>
 800e230:	4603      	mov	r3, r0
 800e232:	091b      	lsrs	r3, r3, #4
 800e234:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	7dda      	ldrb	r2, [r3, #23]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	7e1b      	ldrb	r3, [r3, #24]
 800e23e:	4619      	mov	r1, r3
 800e240:	4610      	mov	r0, r2
 800e242:	f000 f8b1 	bl	800e3a8 <word>
 800e246:	4603      	mov	r3, r0
 800e248:	091b      	lsrs	r3, r3, #4
 800e24a:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	7dda      	ldrb	r2, [r3, #23]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	7e1b      	ldrb	r3, [r3, #24]
 800e254:	4619      	mov	r1, r3
 800e256:	4610      	mov	r0, r2
 800e258:	f000 f8a6 	bl	800e3a8 <word>
 800e25c:	4603      	mov	r3, r0
 800e25e:	f003 030f 	and.w	r3, r3, #15
 800e262:	b29b      	uxth	r3, r3
 800e264:	2b00      	cmp	r3, #0
 800e266:	d002      	beq.n	800e26e <validateRequest+0x15a>
 800e268:	897b      	ldrh	r3, [r7, #10]
 800e26a:	3301      	adds	r3, #1
 800e26c:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e26e:	89ba      	ldrh	r2, [r7, #12]
 800e270:	897b      	ldrh	r3, [r7, #10]
 800e272:	4413      	add	r3, r2
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 800e27a:	4293      	cmp	r3, r2
 800e27c:	dd01      	ble.n	800e282 <validateRequest+0x16e>
 800e27e:	2302      	movs	r3, #2
 800e280:	e08b      	b.n	800e39a <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	7dda      	ldrb	r2, [r3, #23]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	7e1b      	ldrb	r3, [r3, #24]
 800e28a:	4619      	mov	r1, r3
 800e28c:	4610      	mov	r0, r2
 800e28e:	f000 f88b 	bl	800e3a8 <word>
 800e292:	4603      	mov	r3, r0
 800e294:	08db      	lsrs	r3, r3, #3
 800e296:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	7dda      	ldrb	r2, [r3, #23]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	7e1b      	ldrb	r3, [r3, #24]
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	4610      	mov	r0, r2
 800e2a4:	f000 f880 	bl	800e3a8 <word>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	f003 0307 	and.w	r3, r3, #7
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d002      	beq.n	800e2ba <validateRequest+0x1a6>
 800e2b4:	897b      	ldrh	r3, [r7, #10]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800e2ba:	897b      	ldrh	r3, [r7, #10]
 800e2bc:	3305      	adds	r3, #5
 800e2be:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800e2c0:	897b      	ldrh	r3, [r7, #10]
 800e2c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2c6:	d960      	bls.n	800e38a <validateRequest+0x276>
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	e066      	b.n	800e39a <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	7d5a      	ldrb	r2, [r3, #21]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	7d9b      	ldrb	r3, [r3, #22]
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4610      	mov	r0, r2
 800e2d8:	f000 f866 	bl	800e3a8 <word>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	091b      	lsrs	r3, r3, #4
 800e2e0:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	7d5a      	ldrb	r2, [r3, #21]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	7d9b      	ldrb	r3, [r3, #22]
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	f000 f85b 	bl	800e3a8 <word>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	f003 030f 	and.w	r3, r3, #15
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d002      	beq.n	800e304 <validateRequest+0x1f0>
 800e2fe:	89bb      	ldrh	r3, [r7, #12]
 800e300:	3301      	adds	r3, #1
 800e302:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800e30a:	89ba      	ldrh	r2, [r7, #12]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d93e      	bls.n	800e38e <validateRequest+0x27a>
 800e310:	2302      	movs	r3, #2
 800e312:	e042      	b.n	800e39a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	7d5a      	ldrb	r2, [r3, #21]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	7d9b      	ldrb	r3, [r3, #22]
 800e31c:	4619      	mov	r1, r3
 800e31e:	4610      	mov	r0, r2
 800e320:	f000 f842 	bl	800e3a8 <word>
 800e324:	4603      	mov	r3, r0
 800e326:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regHR_size) return EXC_ADDR_RANGE;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e32e:	89ba      	ldrh	r2, [r7, #12]
 800e330:	429a      	cmp	r2, r3
 800e332:	d92e      	bls.n	800e392 <validateRequest+0x27e>
 800e334:	2302      	movs	r3, #2
 800e336:	e030      	b.n	800e39a <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	7d5a      	ldrb	r2, [r3, #21]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	7d9b      	ldrb	r3, [r3, #22]
 800e340:	4619      	mov	r1, r3
 800e342:	4610      	mov	r0, r2
 800e344:	f000 f830 	bl	800e3a8 <word>
 800e348:	4603      	mov	r3, r0
 800e34a:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	7dda      	ldrb	r2, [r3, #23]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	7e1b      	ldrb	r3, [r3, #24]
 800e354:	4619      	mov	r1, r3
 800e356:	4610      	mov	r0, r2
 800e358:	f000 f826 	bl	800e3a8 <word>
 800e35c:	4603      	mov	r3, r0
 800e35e:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regHR_size) return EXC_ADDR_RANGE;
 800e360:	89ba      	ldrh	r2, [r7, #12]
 800e362:	897b      	ldrh	r3, [r7, #10]
 800e364:	4413      	add	r3, r2
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800e36c:	4293      	cmp	r3, r2
 800e36e:	dd01      	ble.n	800e374 <validateRequest+0x260>
 800e370:	2302      	movs	r3, #2
 800e372:	e012      	b.n	800e39a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800e374:	897b      	ldrh	r3, [r7, #10]
 800e376:	005b      	lsls	r3, r3, #1
 800e378:	b29b      	uxth	r3, r3
 800e37a:	3305      	adds	r3, #5
 800e37c:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800e37e:	897b      	ldrh	r3, [r7, #10]
 800e380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e384:	d907      	bls.n	800e396 <validateRequest+0x282>
 800e386:	2303      	movs	r3, #3
 800e388:	e007      	b.n	800e39a <validateRequest+0x286>
	        break;
 800e38a:	bf00      	nop
 800e38c:	e004      	b.n	800e398 <validateRequest+0x284>
	        break;
 800e38e:	bf00      	nop
 800e390:	e002      	b.n	800e398 <validateRequest+0x284>
	        break;
 800e392:	bf00      	nop
 800e394:	e000      	b.n	800e398 <validateRequest+0x284>
	        break;
 800e396:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800e398:	2300      	movs	r3, #0

}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	0800f184 	.word	0x0800f184

0800e3a8 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	460a      	mov	r2, r1
 800e3b2:	71fb      	strb	r3, [r7, #7]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800e3b8:	79bb      	ldrb	r3, [r7, #6]
 800e3ba:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800e3bc:	79fb      	ldrb	r3, [r7, #7]
 800e3be:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800e3c0:	89bb      	ldrh	r3, [r7, #12]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3714      	adds	r7, #20
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3cc:	4770      	bx	lr

0800e3ce <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 800e3ce:	b480      	push	{r7}
 800e3d0:	b087      	sub	sp, #28
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800e3da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3de:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	74fb      	strb	r3, [r7, #19]
 800e3e4:	e023      	b.n	800e42e <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800e3e6:	7cfb      	ldrb	r3, [r7, #19]
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	4053      	eors	r3, r2
 800e3f4:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	74bb      	strb	r3, [r7, #18]
 800e3fa:	e012      	b.n	800e422 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	f003 0301 	and.w	r3, r3, #1
 800e402:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	085b      	lsrs	r3, r3, #1
 800e408:	617b      	str	r3, [r7, #20]
            if (flag)
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d005      	beq.n	800e41c <calcCRC+0x4e>
                temp ^= 0xA001;
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800e416:	f083 0301 	eor.w	r3, r3, #1
 800e41a:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e41c:	7cbb      	ldrb	r3, [r7, #18]
 800e41e:	3301      	adds	r3, #1
 800e420:	74bb      	strb	r3, [r7, #18]
 800e422:	7cbb      	ldrb	r3, [r7, #18]
 800e424:	2b08      	cmp	r3, #8
 800e426:	d9e9      	bls.n	800e3fc <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800e428:	7cfb      	ldrb	r3, [r7, #19]
 800e42a:	3301      	adds	r3, #1
 800e42c:	74fb      	strb	r3, [r7, #19]
 800e42e:	7cfa      	ldrb	r2, [r7, #19]
 800e430:	78fb      	ldrb	r3, [r7, #3]
 800e432:	429a      	cmp	r2, r3
 800e434:	d3d7      	bcc.n	800e3e6 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	0a1b      	lsrs	r3, r3, #8
 800e43a:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	021b      	lsls	r3, r3, #8
 800e440:	68fa      	ldr	r2, [r7, #12]
 800e442:	4313      	orrs	r3, r2
 800e444:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	b29b      	uxth	r3, r3
 800e44a:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	b29b      	uxth	r3, r3

}
 800e450:	4618      	mov	r0, r3
 800e452:	371c      	adds	r7, #28
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr

0800e45c <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	4603      	mov	r3, r0
 800e464:	6039      	str	r1, [r7, #0]
 800e466:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	7d1b      	ldrb	r3, [r3, #20]
 800e46c:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	7a1a      	ldrb	r2, [r3, #8]
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800e476:	7bfb      	ldrb	r3, [r7, #15]
 800e478:	3b80      	subs	r3, #128	; 0x80
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	79fa      	ldrb	r2, [r7, #7]
 800e484:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2203      	movs	r2, #3
 800e48a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800e48e:	bf00      	nop
 800e490:	3714      	adds	r7, #20
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr

0800e49a <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 800e49a:	b590      	push	{r4, r7, lr}
 800e49c:	b087      	sub	sp, #28
 800e49e:	af02      	add	r7, sp, #8
 800e4a0:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f103 0213 	add.w	r2, r3, #19
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	f7ff ff8c 	bl	800e3ce <calcCRC>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800e4ba:	89fb      	ldrh	r3, [r7, #14]
 800e4bc:	0a1b      	lsrs	r3, r3, #8
 800e4be:	b29a      	uxth	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	b2d2      	uxtb	r2, r2
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	440b      	add	r3, r1
 800e4ce:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	89fb      	ldrh	r3, [r7, #14]
 800e4ea:	b2da      	uxtb	r2, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	440b      	add	r3, r1
 800e4f0:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00c      	beq.n	800e524 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	4618      	mov	r0, r3
 800e510:	f7f8 ffa6 	bl	8007460 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	68d8      	ldr	r0, [r3, #12]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	8a1b      	ldrh	r3, [r3, #16]
 800e51c:	2201      	movs	r2, #1
 800e51e:	4619      	mov	r1, r3
 800e520:	f7f5 fe46 	bl	80041b0 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d10c      	bne.n	800e548 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6858      	ldr	r0, [r3, #4]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f103 0113 	add.w	r1, r3, #19
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e53e:	b29b      	uxth	r3, r3
 800e540:	461a      	mov	r2, r3
 800e542:	f7f8 f987 	bl	8006854 <HAL_UART_Transmit_IT>
 800e546:	e00b      	b.n	800e560 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6858      	ldr	r0, [r3, #4]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f103 0113 	add.w	r1, r3, #19
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e558:	b29b      	uxth	r3, r3
 800e55a:	461a      	mov	r2, r3
 800e55c:	f7f8 fa5a 	bl	8006a14 <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800e560:	21fa      	movs	r1, #250	; 0xfa
 800e562:	2001      	movs	r0, #1
 800e564:	f7fd fc16 	bl	800bd94 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800e568:	bf00      	nop
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	69db      	ldr	r3, [r3, #28]
 800e572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e576:	2b00      	cmp	r3, #0
 800e578:	d0f7      	beq.n	800e56a <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00c      	beq.n	800e59c <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	68d8      	ldr	r0, [r3, #12]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	8a1b      	ldrh	r3, [r3, #16]
 800e58a:	2200      	movs	r2, #0
 800e58c:	4619      	mov	r1, r3
 800e58e:	f7f5 fe0f 	bl	80041b0 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	4618      	mov	r0, r3
 800e598:	f7f8 ffb6 	bl	8007508 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	2b04      	cmp	r3, #4
 800e5a2:	d10c      	bne.n	800e5be <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 800e5aa:	f7fc ff21 	bl	800b3f0 <xTaskGetTickCount>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	9300      	str	r3, [sp, #0]
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	2102      	movs	r1, #2
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f7fd ff57 	bl	800c46c <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa


}
 800e5d6:	bf00      	nop
 800e5d8:	3714      	adds	r7, #20
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd90      	pop	{r4, r7, pc}

0800e5de <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH, uint8_t Database)
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b088      	sub	sp, #32
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	70fb      	strb	r3, [r7, #3]
    uint16_t u16currentCoil, u16coil;

    uint16_t *u16regs;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	7d5a      	ldrb	r2, [r3, #21]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	7d9b      	ldrb	r3, [r3, #22]
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	4610      	mov	r0, r2
 800e5f6:	f7ff fed7 	bl	800e3a8 <word>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	82fb      	strh	r3, [r7, #22]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	7dda      	ldrb	r2, [r3, #23]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	7e1b      	ldrb	r3, [r3, #24]
 800e606:	4619      	mov	r1, r3
 800e608:	4610      	mov	r0, r2
 800e60a:	f7ff fecd 	bl	800e3a8 <word>
 800e60e:	4603      	mov	r3, r0
 800e610:	82bb      	strh	r3, [r7, #20]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800e612:	8abb      	ldrh	r3, [r7, #20]
 800e614:	08db      	lsrs	r3, r3, #3
 800e616:	b29b      	uxth	r3, r3
 800e618:	77fb      	strb	r3, [r7, #31]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800e61a:	8abb      	ldrh	r3, [r7, #20]
 800e61c:	f003 0307 	and.w	r3, r3, #7
 800e620:	b29b      	uxth	r3, r3
 800e622:	2b00      	cmp	r3, #0
 800e624:	d002      	beq.n	800e62c <process_FC1+0x4e>
 800e626:	7ffb      	ldrb	r3, [r7, #31]
 800e628:	3301      	adds	r3, #1
 800e62a:	77fb      	strb	r3, [r7, #31]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	7ffa      	ldrb	r2, [r7, #31]
 800e630:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2203      	movs	r2, #3
 800e636:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e640:	461a      	mov	r2, r3
 800e642:	7ffb      	ldrb	r3, [r7, #31]
 800e644:	4413      	add	r3, r2
 800e646:	3b01      	subs	r3, #1
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	4413      	add	r3, r2
 800e64c:	2200      	movs	r2, #0
 800e64e:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e650:	2300      	movs	r3, #0
 800e652:	77bb      	strb	r3, [r7, #30]

    if (Database == 1){
 800e654:	78fb      	ldrb	r3, [r7, #3]
 800e656:	2b01      	cmp	r3, #1
 800e658:	d104      	bne.n	800e664 <process_FC1+0x86>
    	u16regs = modH->u16regsCoils;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e660:	61bb      	str	r3, [r7, #24]
 800e662:	e006      	b.n	800e672 <process_FC1+0x94>
    }
    else if (Database == 2){
 800e664:	78fb      	ldrb	r3, [r7, #3]
 800e666:	2b02      	cmp	r3, #2
 800e668:	d103      	bne.n	800e672 <process_FC1+0x94>
    	u16regs = modH->u16regsCoilsRO;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e670:	61bb      	str	r3, [r7, #24]
    }

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e672:	2300      	movs	r3, #0
 800e674:	83bb      	strh	r3, [r7, #28]
 800e676:	e056      	b.n	800e726 <process_FC1+0x148>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800e678:	8afa      	ldrh	r2, [r7, #22]
 800e67a:	8bbb      	ldrh	r3, [r7, #28]
 800e67c:	4413      	add	r3, r2
 800e67e:	823b      	strh	r3, [r7, #16]
        u16currentRegister =  (u16coil / 16);
 800e680:	8a3b      	ldrh	r3, [r7, #16]
 800e682:	091b      	lsrs	r3, r3, #4
 800e684:	81fb      	strh	r3, [r7, #14]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e686:	8a3b      	ldrh	r3, [r7, #16]
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	f003 030f 	and.w	r3, r3, #15
 800e68e:	737b      	strb	r3, [r7, #13]

        bitWrite(
 800e690:	89fb      	ldrh	r3, [r7, #14]
 800e692:	005b      	lsls	r3, r3, #1
 800e694:	69ba      	ldr	r2, [r7, #24]
 800e696:	4413      	add	r3, r2
 800e698:	881b      	ldrh	r3, [r3, #0]
 800e69a:	461a      	mov	r2, r3
 800e69c:	7b7b      	ldrb	r3, [r7, #13]
 800e69e:	fa42 f303 	asr.w	r3, r2, r3
 800e6a2:	f003 0301 	and.w	r3, r3, #1
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d014      	beq.n	800e6d4 <process_FC1+0xf6>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	7cda      	ldrb	r2, [r3, #19]
 800e6b8:	7fbb      	ldrb	r3, [r7, #30]
 800e6ba:	2101      	movs	r1, #1
 800e6bc:	fa01 f303 	lsl.w	r3, r1, r3
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	6879      	ldr	r1, [r7, #4]
 800e6c4:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	b2da      	uxtb	r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	440b      	add	r3, r1
 800e6d0:	74da      	strb	r2, [r3, #19]
 800e6d2:	e015      	b.n	800e700 <process_FC1+0x122>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e6da:	461a      	mov	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4413      	add	r3, r2
 800e6e0:	7cda      	ldrb	r2, [r3, #19]
 800e6e2:	7fbb      	ldrb	r3, [r7, #30]
 800e6e4:	2101      	movs	r1, #1
 800e6e6:	fa01 f303 	lsl.w	r3, r1, r3
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	43db      	mvns	r3, r3
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	6879      	ldr	r1, [r7, #4]
 800e6f2:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e6f6:	4013      	ands	r3, r2
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	440b      	add	r3, r1
 800e6fe:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800e700:	7fbb      	ldrb	r3, [r7, #30]
 800e702:	3301      	adds	r3, #1
 800e704:	77bb      	strb	r3, [r7, #30]

        if (u8bitsno > 7)
 800e706:	7fbb      	ldrb	r3, [r7, #30]
 800e708:	2b07      	cmp	r3, #7
 800e70a:	d909      	bls.n	800e720 <process_FC1+0x142>
        {
            u8bitsno = 0;
 800e70c:	2300      	movs	r3, #0
 800e70e:	77bb      	strb	r3, [r7, #30]
            modH->u8BufferSize++;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e716:	3301      	adds	r3, #1
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e720:	8bbb      	ldrh	r3, [r7, #28]
 800e722:	3301      	adds	r3, #1
 800e724:	83bb      	strh	r3, [r7, #28]
 800e726:	8bba      	ldrh	r2, [r7, #28]
 800e728:	8abb      	ldrh	r3, [r7, #20]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d3a4      	bcc.n	800e678 <process_FC1+0x9a>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800e72e:	8abb      	ldrh	r3, [r7, #20]
 800e730:	f003 0307 	and.w	r3, r3, #7
 800e734:	b29b      	uxth	r3, r3
 800e736:	2b00      	cmp	r3, #0
 800e738:	d007      	beq.n	800e74a <process_FC1+0x16c>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e740:	3301      	adds	r3, #1
 800e742:	b2da      	uxtb	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e750:	3302      	adds	r3, #2
 800e752:	74fb      	strb	r3, [r7, #19]
    sendTxBuffer(modH);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7ff fea0 	bl	800e49a <sendTxBuffer>
    return u8CopyBufferSize;
 800e75a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3720      	adds	r7, #32
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH, uint8_t Database)
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b086      	sub	sp, #24
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
 800e76e:	460b      	mov	r3, r1
 800e770:	70fb      	strb	r3, [r7, #3]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	7d5a      	ldrb	r2, [r3, #21]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	7d9b      	ldrb	r3, [r3, #22]
 800e77a:	4619      	mov	r1, r3
 800e77c:	4610      	mov	r0, r2
 800e77e:	f7ff fe13 	bl	800e3a8 <word>
 800e782:	4603      	mov	r3, r0
 800e784:	81fb      	strh	r3, [r7, #14]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	7dda      	ldrb	r2, [r3, #23]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	7e1b      	ldrb	r3, [r3, #24]
 800e78e:	4619      	mov	r1, r3
 800e790:	4610      	mov	r0, r2
 800e792:	f7ff fe09 	bl	800e3a8 <word>
 800e796:	4603      	mov	r3, r0
 800e798:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    uint16_t *u16regs;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800e79a:	7b7b      	ldrb	r3, [r7, #13]
 800e79c:	005b      	lsls	r3, r3, #1
 800e79e:	b2da      	uxtb	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2203      	movs	r2, #3
 800e7a8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    if (Database == DB_HOLDING_REGISTER)
 800e7ac:	78fb      	ldrb	r3, [r7, #3]
 800e7ae:	2b03      	cmp	r3, #3
 800e7b0:	d104      	bne.n	800e7bc <process_FC3+0x56>
    {
    	u16regs = modH->u16regsHR;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e7b8:	613b      	str	r3, [r7, #16]
 800e7ba:	e006      	b.n	800e7ca <process_FC3+0x64>
    }
    else if (Database == DB_INPUT_REGISTERS)
 800e7bc:	78fb      	ldrb	r3, [r7, #3]
 800e7be:	2b04      	cmp	r3, #4
 800e7c0:	d103      	bne.n	800e7ca <process_FC3+0x64>
    {
    	u16regs = modH->u16regsRO;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e7c8:	613b      	str	r3, [r7, #16]
    }

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e7ca:	89fb      	ldrh	r3, [r7, #14]
 800e7cc:	82fb      	strh	r3, [r7, #22]
 800e7ce:	e02e      	b.n	800e82e <process_FC3+0xc8>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(u16regs[i]);
 800e7d0:	8afb      	ldrh	r3, [r7, #22]
 800e7d2:	005b      	lsls	r3, r3, #1
 800e7d4:	693a      	ldr	r2, [r7, #16]
 800e7d6:	4413      	add	r3, r2
 800e7d8:	881b      	ldrh	r3, [r3, #0]
 800e7da:	0a1b      	lsrs	r3, r3, #8
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	b2d2      	uxtb	r2, r2
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	440b      	add	r3, r1
 800e7ec:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	b2da      	uxtb	r2, r3
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(u16regs[i]);
 800e7fe:	8afb      	ldrh	r3, [r7, #22]
 800e800:	005b      	lsls	r3, r3, #1
 800e802:	693a      	ldr	r2, [r7, #16]
 800e804:	4413      	add	r3, r2
 800e806:	881a      	ldrh	r2, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e80e:	4619      	mov	r1, r3
 800e810:	b2d2      	uxtb	r2, r2
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	440b      	add	r3, r1
 800e816:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e81e:	3301      	adds	r3, #1
 800e820:	b2da      	uxtb	r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e828:	8afb      	ldrh	r3, [r7, #22]
 800e82a:	3301      	adds	r3, #1
 800e82c:	82fb      	strh	r3, [r7, #22]
 800e82e:	8afa      	ldrh	r2, [r7, #22]
 800e830:	89f9      	ldrh	r1, [r7, #14]
 800e832:	7b7b      	ldrb	r3, [r7, #13]
 800e834:	440b      	add	r3, r1
 800e836:	429a      	cmp	r2, r3
 800e838:	dbca      	blt.n	800e7d0 <process_FC3+0x6a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e840:	3302      	adds	r3, #2
 800e842:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f7ff fe28 	bl	800e49a <sendTxBuffer>

    return u8CopyBufferSize;
 800e84a:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3718      	adds	r7, #24
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b084      	sub	sp, #16
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	7d5a      	ldrb	r2, [r3, #21]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	7d9b      	ldrb	r3, [r3, #22]
 800e866:	4619      	mov	r1, r3
 800e868:	4610      	mov	r0, r2
 800e86a:	f7ff fd9d 	bl	800e3a8 <word>
 800e86e:	4603      	mov	r3, r0
 800e870:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800e872:	89fb      	ldrh	r3, [r7, #14]
 800e874:	091b      	lsrs	r3, r3, #4
 800e876:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800e878:	89fb      	ldrh	r3, [r7, #14]
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	f003 030f 	and.w	r3, r3, #15
 800e880:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	7ddb      	ldrb	r3, [r3, #23]
 800e886:	2bff      	cmp	r3, #255	; 0xff
 800e888:	d115      	bne.n	800e8b6 <process_FC5+0x60>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e890:	89bb      	ldrh	r3, [r7, #12]
 800e892:	005b      	lsls	r3, r3, #1
 800e894:	4413      	add	r3, r2
 800e896:	8819      	ldrh	r1, [r3, #0]
 800e898:	7afb      	ldrb	r3, [r7, #11]
 800e89a:	2201      	movs	r2, #1
 800e89c:	fa02 f303 	lsl.w	r3, r2, r3
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e8a8:	89bb      	ldrh	r3, [r7, #12]
 800e8aa:	005b      	lsls	r3, r3, #1
 800e8ac:	4403      	add	r3, r0
 800e8ae:	430a      	orrs	r2, r1
 800e8b0:	b292      	uxth	r2, r2
 800e8b2:	801a      	strh	r2, [r3, #0]
 800e8b4:	e016      	b.n	800e8e4 <process_FC5+0x8e>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e8bc:	89bb      	ldrh	r3, [r7, #12]
 800e8be:	005b      	lsls	r3, r3, #1
 800e8c0:	4413      	add	r3, r2
 800e8c2:	8819      	ldrh	r1, [r3, #0]
 800e8c4:	7afb      	ldrb	r3, [r7, #11]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	43db      	mvns	r3, r3
 800e8d0:	b29a      	uxth	r2, r3
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e8d8:	89bb      	ldrh	r3, [r7, #12]
 800e8da:	005b      	lsls	r3, r3, #1
 800e8dc:	4403      	add	r3, r0
 800e8de:	400a      	ands	r2, r1
 800e8e0:	b292      	uxth	r2, r2
 800e8e2:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2206      	movs	r2, #6
 800e8e8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8f2:	3302      	adds	r3, #2
 800e8f4:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7ff fdcf 	bl	800e49a <sendTxBuffer>

    return u8CopyBufferSize;
 800e8fc:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800e900:	4618      	mov	r0, r3
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	7d5a      	ldrb	r2, [r3, #21]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	7d9b      	ldrb	r3, [r3, #22]
 800e918:	4619      	mov	r1, r3
 800e91a:	4610      	mov	r0, r2
 800e91c:	f7ff fd44 	bl	800e3a8 <word>
 800e920:	4603      	mov	r3, r0
 800e922:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	7dda      	ldrb	r2, [r3, #23]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	7e1b      	ldrb	r3, [r3, #24]
 800e92c:	4619      	mov	r1, r3
 800e92e:	4610      	mov	r0, r2
 800e930:	f7ff fd3a 	bl	800e3a8 <word>
 800e934:	4603      	mov	r3, r0
 800e936:	81bb      	strh	r3, [r7, #12]

    modH->u16regsHR[ u16add ] = u16val;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e93e:	89fb      	ldrh	r3, [r7, #14]
 800e940:	005b      	lsls	r3, r3, #1
 800e942:	4413      	add	r3, r2
 800e944:	89ba      	ldrh	r2, [r7, #12]
 800e946:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2206      	movs	r2, #6
 800e94c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e956:	3302      	adds	r3, #2
 800e958:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f7ff fd9d 	bl	800e49a <sendTxBuffer>

    return u8CopyBufferSize;
 800e960:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3710      	adds	r7, #16
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b086      	sub	sp, #24
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	7d5a      	ldrb	r2, [r3, #21]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	7d9b      	ldrb	r3, [r3, #22]
 800e97c:	4619      	mov	r1, r3
 800e97e:	4610      	mov	r0, r2
 800e980:	f7ff fd12 	bl	800e3a8 <word>
 800e984:	4603      	mov	r3, r0
 800e986:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	7dda      	ldrb	r2, [r3, #23]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	7e1b      	ldrb	r3, [r3, #24]
 800e990:	4619      	mov	r1, r3
 800e992:	4610      	mov	r0, r2
 800e994:	f7ff fd08 	bl	800e3a8 <word>
 800e998:	4603      	mov	r3, r0
 800e99a:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e99c:	2300      	movs	r3, #0
 800e99e:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800e9a0:	2307      	movs	r3, #7
 800e9a2:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	82bb      	strh	r3, [r7, #20]
 800e9a8:	e058      	b.n	800ea5c <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800e9aa:	8a7a      	ldrh	r2, [r7, #18]
 800e9ac:	8abb      	ldrh	r3, [r7, #20]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800e9b2:	89bb      	ldrh	r3, [r7, #12]
 800e9b4:	091b      	lsrs	r3, r3, #4
 800e9b6:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e9b8:	89bb      	ldrh	r3, [r7, #12]
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	f003 030f 	and.w	r3, r3, #15
 800e9c0:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800e9c2:	7dfb      	ldrb	r3, [r7, #23]
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	7cdb      	ldrb	r3, [r3, #19]
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	7dbb      	ldrb	r3, [r7, #22]
 800e9ce:	fa42 f303 	asr.w	r3, r2, r3
 800e9d2:	f003 0301 	and.w	r3, r3, #1
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	bf14      	ite	ne
 800e9da:	2301      	movne	r3, #1
 800e9dc:	2300      	moveq	r3, #0
 800e9de:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800e9e0:	7a3b      	ldrb	r3, [r7, #8]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d015      	beq.n	800ea12 <process_FC15+0xa6>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e9ec:	897b      	ldrh	r3, [r7, #10]
 800e9ee:	005b      	lsls	r3, r3, #1
 800e9f0:	4413      	add	r3, r2
 800e9f2:	8819      	ldrh	r1, [r3, #0]
 800e9f4:	7a7b      	ldrb	r3, [r7, #9]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800ea04:	897b      	ldrh	r3, [r7, #10]
 800ea06:	005b      	lsls	r3, r3, #1
 800ea08:	4403      	add	r3, r0
 800ea0a:	430a      	orrs	r2, r1
 800ea0c:	b292      	uxth	r2, r2
 800ea0e:	801a      	strh	r2, [r3, #0]
 800ea10:	e016      	b.n	800ea40 <process_FC15+0xd4>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ea18:	897b      	ldrh	r3, [r7, #10]
 800ea1a:	005b      	lsls	r3, r3, #1
 800ea1c:	4413      	add	r3, r2
 800ea1e:	8819      	ldrh	r1, [r3, #0]
 800ea20:	7a7b      	ldrb	r3, [r7, #9]
 800ea22:	2201      	movs	r2, #1
 800ea24:	fa02 f303 	lsl.w	r3, r2, r3
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	43db      	mvns	r3, r3
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800ea34:	897b      	ldrh	r3, [r7, #10]
 800ea36:	005b      	lsls	r3, r3, #1
 800ea38:	4403      	add	r3, r0
 800ea3a:	400a      	ands	r2, r1
 800ea3c:	b292      	uxth	r2, r2
 800ea3e:	801a      	strh	r2, [r3, #0]
            modH->u16regsCoils[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800ea40:	7dbb      	ldrb	r3, [r7, #22]
 800ea42:	3301      	adds	r3, #1
 800ea44:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800ea46:	7dbb      	ldrb	r3, [r7, #22]
 800ea48:	2b07      	cmp	r3, #7
 800ea4a:	d904      	bls.n	800ea56 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800ea50:	7dfb      	ldrb	r3, [r7, #23]
 800ea52:	3301      	adds	r3, #1
 800ea54:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800ea56:	8abb      	ldrh	r3, [r7, #20]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	82bb      	strh	r3, [r7, #20]
 800ea5c:	8aba      	ldrh	r2, [r7, #20]
 800ea5e:	8a3b      	ldrh	r3, [r7, #16]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d3a2      	bcc.n	800e9aa <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2206      	movs	r2, #6
 800ea68:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ea72:	3302      	adds	r3, #2
 800ea74:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f7ff fd0f 	bl	800e49a <sendTxBuffer>
    return u8CopyBufferSize;
 800ea7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3718      	adds	r7, #24
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b086      	sub	sp, #24
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	7d5b      	ldrb	r3, [r3, #21]
 800ea94:	021b      	lsls	r3, r3, #8
 800ea96:	b21a      	sxth	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	7d9b      	ldrb	r3, [r3, #22]
 800ea9c:	b21b      	sxth	r3, r3
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	b21b      	sxth	r3, r3
 800eaa2:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	7ddb      	ldrb	r3, [r3, #23]
 800eaa8:	021b      	lsls	r3, r3, #8
 800eaaa:	b21a      	sxth	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	7e1b      	ldrb	r3, [r3, #24]
 800eab0:	b21b      	sxth	r3, r3
 800eab2:	4313      	orrs	r3, r2
 800eab4:	b21b      	sxth	r3, r3
 800eab6:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800eabe:	8a7b      	ldrh	r3, [r7, #18]
 800eac0:	b2da      	uxtb	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2206      	movs	r2, #6
 800eaca:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800eace:	2300      	movs	r3, #0
 800ead0:	82fb      	strh	r3, [r7, #22]
 800ead2:	e01d      	b.n	800eb10 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800ead4:	8afb      	ldrh	r3, [r7, #22]
 800ead6:	005b      	lsls	r3, r3, #1
 800ead8:	3307      	adds	r3, #7
        temp = word(
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	4413      	add	r3, r2
 800eade:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800eae0:	8afb      	ldrh	r3, [r7, #22]
 800eae2:	3304      	adds	r3, #4
 800eae4:	005b      	lsls	r3, r3, #1
        temp = word(
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	4413      	add	r3, r2
 800eaea:	7cdb      	ldrb	r3, [r3, #19]
 800eaec:	4619      	mov	r1, r3
 800eaee:	f7ff fc5b 	bl	800e3a8 <word>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	81fb      	strh	r3, [r7, #14]

        modH->u16regsHR[ u16StartAdd + i ] = temp;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800eafc:	8ab9      	ldrh	r1, [r7, #20]
 800eafe:	8afb      	ldrh	r3, [r7, #22]
 800eb00:	440b      	add	r3, r1
 800eb02:	005b      	lsls	r3, r3, #1
 800eb04:	4413      	add	r3, r2
 800eb06:	89fa      	ldrh	r2, [r7, #14]
 800eb08:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800eb0a:	8afb      	ldrh	r3, [r7, #22]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	82fb      	strh	r3, [r7, #22]
 800eb10:	8afa      	ldrh	r2, [r7, #22]
 800eb12:	8a7b      	ldrh	r3, [r7, #18]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d3dd      	bcc.n	800ead4 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eb1e:	3302      	adds	r3, #2
 800eb20:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f7ff fcb9 	bl	800e49a <sendTxBuffer>

    return u8CopyBufferSize;
 800eb28:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3718      	adds	r7, #24
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b086      	sub	sp, #24
 800eb38:	af02      	add	r7, sp, #8
 800eb3a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800eb40:	2300      	movs	r3, #0
 800eb42:	60fb      	str	r3, [r7, #12]
 800eb44:	e019      	b.n	800eb7a <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800eb46:	4a17      	ldr	r2, [pc, #92]	; (800eba4 <HAL_UART_TxCpltCallback+0x70>)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d10e      	bne.n	800eb74 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800eb56:	4a13      	ldr	r2, [pc, #76]	; (800eba4 <HAL_UART_TxCpltCallback+0x70>)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb5e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800eb62:	f107 0308 	add.w	r3, r7, #8
 800eb66:	9300      	str	r3, [sp, #0]
 800eb68:	2300      	movs	r3, #0
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	f7fd fa6b 	bl	800c048 <xTaskGenericNotifyFromISR>
	   		break;
 800eb72:	e008      	b.n	800eb86 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	3301      	adds	r3, #1
 800eb78:	60fb      	str	r3, [r7, #12]
 800eb7a:	4b0b      	ldr	r3, [pc, #44]	; (800eba8 <HAL_UART_TxCpltCallback+0x74>)
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	4293      	cmp	r3, r2
 800eb84:	dbdf      	blt.n	800eb46 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d007      	beq.n	800eb9c <HAL_UART_TxCpltCallback+0x68>
 800eb8c:	4b07      	ldr	r3, [pc, #28]	; (800ebac <HAL_UART_TxCpltCallback+0x78>)
 800eb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800eb9c:	bf00      	nop
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	20002148 	.word	0x20002148
 800eba8:	20002150 	.word	0x20002150
 800ebac:	e000ed04 	.word	0xe000ed04

0800ebb0 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800ebb0:	b590      	push	{r4, r7, lr}
 800ebb2:	b087      	sub	sp, #28
 800ebb4:	af02      	add	r7, sp, #8
 800ebb6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	60fb      	str	r3, [r7, #12]
 800ebc0:	e042      	b.n	800ec48 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800ebc2:	4a2d      	ldr	r2, [pc, #180]	; (800ec78 <HAL_UART_RxCpltCallback+0xc8>)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d137      	bne.n	800ec42 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800ebd2:	4a29      	ldr	r2, [pc, #164]	; (800ec78 <HAL_UART_RxCpltCallback+0xc8>)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebda:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d139      	bne.n	800ec56 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800ebe2:	4a25      	ldr	r2, [pc, #148]	; (800ec78 <HAL_UART_RxCpltCallback+0xc8>)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebea:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ebee:	4922      	ldr	r1, [pc, #136]	; (800ec78 <HAL_UART_RxCpltCallback+0xc8>)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ebf6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	4610      	mov	r0, r2
 800ebfe:	f7fe fb95 	bl	800d32c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800ec02:	4a1d      	ldr	r2, [pc, #116]	; (800ec78 <HAL_UART_RxCpltCallback+0xc8>)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec0a:	6858      	ldr	r0, [r3, #4]
 800ec0c:	4a1a      	ldr	r2, [pc, #104]	; (800ec78 <HAL_UART_RxCpltCallback+0xc8>)
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec14:	33b8      	adds	r3, #184	; 0xb8
 800ec16:	2201      	movs	r2, #1
 800ec18:	4619      	mov	r1, r3
 800ec1a:	f7f7 feaf 	bl	800697c <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800ec1e:	4a16      	ldr	r2, [pc, #88]	; (800ec78 <HAL_UART_RxCpltCallback+0xc8>)
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec26:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 800ec2a:	f7fc fbf1 	bl	800b410 <xTaskGetTickCountFromISR>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	f107 0308 	add.w	r3, r7, #8
 800ec34:	2100      	movs	r1, #0
 800ec36:	9100      	str	r1, [sp, #0]
 800ec38:	2107      	movs	r1, #7
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f7fd fc16 	bl	800c46c <xTimerGenericCommand>
    		}
    		break;
 800ec40:	e009      	b.n	800ec56 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3301      	adds	r3, #1
 800ec46:	60fb      	str	r3, [r7, #12]
 800ec48:	4b0c      	ldr	r3, [pc, #48]	; (800ec7c <HAL_UART_RxCpltCallback+0xcc>)
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	4293      	cmp	r3, r2
 800ec52:	dbb6      	blt.n	800ebc2 <HAL_UART_RxCpltCallback+0x12>
 800ec54:	e000      	b.n	800ec58 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800ec56:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d007      	beq.n	800ec6e <HAL_UART_RxCpltCallback+0xbe>
 800ec5e:	4b08      	ldr	r3, [pc, #32]	; (800ec80 <HAL_UART_RxCpltCallback+0xd0>)
 800ec60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec64:	601a      	str	r2, [r3, #0]
 800ec66:	f3bf 8f4f 	dsb	sy
 800ec6a:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800ec6e:	bf00      	nop
 800ec70:	3714      	adds	r7, #20
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd90      	pop	{r4, r7, pc}
 800ec76:	bf00      	nop
 800ec78:	20002148 	.word	0x20002148
 800ec7c:	20002150 	.word	0x20002150
 800ec80:	e000ed04 	.word	0xe000ed04

0800ec84 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	60fb      	str	r3, [r7, #12]
 800ec90:	e041      	b.n	800ed16 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800ec92:	4a27      	ldr	r2, [pc, #156]	; (800ed30 <HAL_UART_ErrorCallback+0xac>)
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d136      	bne.n	800ed10 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800eca2:	4a23      	ldr	r2, [pc, #140]	; (800ed30 <HAL_UART_ErrorCallback+0xac>)
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecaa:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ecae:	2b04      	cmp	r3, #4
 800ecb0:	d138      	bne.n	800ed24 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ecb2:	e007      	b.n	800ecc4 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800ecb4:	4a1e      	ldr	r2, [pc, #120]	; (800ed30 <HAL_UART_ErrorCallback+0xac>)
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7f7 ff28 	bl	8006b14 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ecc4:	4a1a      	ldr	r2, [pc, #104]	; (800ed30 <HAL_UART_ErrorCallback+0xac>)
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eccc:	6858      	ldr	r0, [r3, #4]
 800ecce:	4a18      	ldr	r2, [pc, #96]	; (800ed30 <HAL_UART_ErrorCallback+0xac>)
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecd6:	33d0      	adds	r3, #208	; 0xd0
 800ecd8:	2280      	movs	r2, #128	; 0x80
 800ecda:	4619      	mov	r1, r3
 800ecdc:	f7fa fc11 	bl	8009502 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1e6      	bne.n	800ecb4 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800ece6:	4a12      	ldr	r2, [pc, #72]	; (800ed30 <HAL_UART_ErrorCallback+0xac>)
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	490d      	ldr	r1, [pc, #52]	; (800ed30 <HAL_UART_ErrorCallback+0xac>)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f022 0204 	bic.w	r2, r2, #4
 800ed0c:	601a      	str	r2, [r3, #0]

    		}

    		break;
 800ed0e:	e009      	b.n	800ed24 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	3301      	adds	r3, #1
 800ed14:	60fb      	str	r3, [r7, #12]
 800ed16:	4b07      	ldr	r3, [pc, #28]	; (800ed34 <HAL_UART_ErrorCallback+0xb0>)
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	dbb7      	blt.n	800ec92 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800ed22:	e000      	b.n	800ed26 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800ed24:	bf00      	nop
}
 800ed26:	bf00      	nop
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	20002148 	.word	0x20002148
 800ed34:	20002150 	.word	0x20002150

0800ed38 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b086      	sub	sp, #24
 800ed3c:	af02      	add	r7, sp, #8
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	460b      	mov	r3, r1
 800ed42:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ed44:	2300      	movs	r3, #0
 800ed46:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800ed48:	2300      	movs	r3, #0
 800ed4a:	60fb      	str	r3, [r7, #12]
 800ed4c:	e061      	b.n	800ee12 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800ed4e:	4a3c      	ldr	r2, [pc, #240]	; (800ee40 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d156      	bne.n	800ee0c <HAL_UARTEx_RxEventCallback+0xd4>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800ed5e:	4a38      	ldr	r2, [pc, #224]	; (800ee40 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed66:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ed6a:	2b04      	cmp	r3, #4
 800ed6c:	d158      	bne.n	800ee20 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800ed6e:	887b      	ldrh	r3, [r7, #2]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d055      	beq.n	800ee20 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800ed74:	4a32      	ldr	r2, [pc, #200]	; (800ee40 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed7c:	887a      	ldrh	r2, [r7, #2]
 800ed7e:	b2d2      	uxtb	r2, r2
 800ed80:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		    				mHandlers[i]->xBufferRX.overflow = false;
 800ed84:	4a2e      	ldr	r2, [pc, #184]	; (800ee40 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ed92:	e007      	b.n	800eda4 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800ed94:	4a2a      	ldr	r2, [pc, #168]	; (800ee40 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7f7 feb8 	bl	8006b14 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800eda4:	4a26      	ldr	r2, [pc, #152]	; (800ee40 <HAL_UARTEx_RxEventCallback+0x108>)
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edac:	6858      	ldr	r0, [r3, #4]
 800edae:	4a24      	ldr	r2, [pc, #144]	; (800ee40 <HAL_UARTEx_RxEventCallback+0x108>)
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edb6:	33d0      	adds	r3, #208	; 0xd0
 800edb8:	2280      	movs	r2, #128	; 0x80
 800edba:	4619      	mov	r1, r3
 800edbc:	f7fa fba1 	bl	8009502 <HAL_UARTEx_ReceiveToIdle_DMA>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d1e6      	bne.n	800ed94 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800edc6:	4a1e      	ldr	r2, [pc, #120]	; (800ee40 <HAL_UARTEx_RxEventCallback+0x108>)
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	4919      	ldr	r1, [pc, #100]	; (800ee40 <HAL_UARTEx_RxEventCallback+0x108>)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f022 0204 	bic.w	r2, r2, #4
 800edec:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800edee:	4a14      	ldr	r2, [pc, #80]	; (800ee40 <HAL_UARTEx_RxEventCallback+0x108>)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edf6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800edfa:	f107 0308 	add.w	r3, r7, #8
 800edfe:	9300      	str	r3, [sp, #0]
 800ee00:	2300      	movs	r3, #0
 800ee02:	2203      	movs	r2, #3
 800ee04:	2100      	movs	r1, #0
 800ee06:	f7fd f91f 	bl	800c048 <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 800ee0a:	e009      	b.n	800ee20 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	3301      	adds	r3, #1
 800ee10:	60fb      	str	r3, [r7, #12]
 800ee12:	4b0c      	ldr	r3, [pc, #48]	; (800ee44 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	461a      	mov	r2, r3
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	db97      	blt.n	800ed4e <HAL_UARTEx_RxEventCallback+0x16>
 800ee1e:	e000      	b.n	800ee22 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800ee20:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d007      	beq.n	800ee38 <HAL_UARTEx_RxEventCallback+0x100>
 800ee28:	4b07      	ldr	r3, [pc, #28]	; (800ee48 <HAL_UARTEx_RxEventCallback+0x110>)
 800ee2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee2e:	601a      	str	r2, [r3, #0]
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	f3bf 8f6f 	isb	sy
}
 800ee38:	bf00      	nop
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	20002148 	.word	0x20002148
 800ee44:	20002150 	.word	0x20002150
 800ee48:	e000ed04 	.word	0xe000ed04

0800ee4c <memset>:
 800ee4c:	4402      	add	r2, r0
 800ee4e:	4603      	mov	r3, r0
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d100      	bne.n	800ee56 <memset+0xa>
 800ee54:	4770      	bx	lr
 800ee56:	f803 1b01 	strb.w	r1, [r3], #1
 800ee5a:	e7f9      	b.n	800ee50 <memset+0x4>

0800ee5c <__libc_init_array>:
 800ee5c:	b570      	push	{r4, r5, r6, lr}
 800ee5e:	4d0d      	ldr	r5, [pc, #52]	; (800ee94 <__libc_init_array+0x38>)
 800ee60:	4c0d      	ldr	r4, [pc, #52]	; (800ee98 <__libc_init_array+0x3c>)
 800ee62:	1b64      	subs	r4, r4, r5
 800ee64:	10a4      	asrs	r4, r4, #2
 800ee66:	2600      	movs	r6, #0
 800ee68:	42a6      	cmp	r6, r4
 800ee6a:	d109      	bne.n	800ee80 <__libc_init_array+0x24>
 800ee6c:	4d0b      	ldr	r5, [pc, #44]	; (800ee9c <__libc_init_array+0x40>)
 800ee6e:	4c0c      	ldr	r4, [pc, #48]	; (800eea0 <__libc_init_array+0x44>)
 800ee70:	f000 f826 	bl	800eec0 <_init>
 800ee74:	1b64      	subs	r4, r4, r5
 800ee76:	10a4      	asrs	r4, r4, #2
 800ee78:	2600      	movs	r6, #0
 800ee7a:	42a6      	cmp	r6, r4
 800ee7c:	d105      	bne.n	800ee8a <__libc_init_array+0x2e>
 800ee7e:	bd70      	pop	{r4, r5, r6, pc}
 800ee80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee84:	4798      	blx	r3
 800ee86:	3601      	adds	r6, #1
 800ee88:	e7ee      	b.n	800ee68 <__libc_init_array+0xc>
 800ee8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee8e:	4798      	blx	r3
 800ee90:	3601      	adds	r6, #1
 800ee92:	e7f2      	b.n	800ee7a <__libc_init_array+0x1e>
 800ee94:	0800f194 	.word	0x0800f194
 800ee98:	0800f194 	.word	0x0800f194
 800ee9c:	0800f194 	.word	0x0800f194
 800eea0:	0800f198 	.word	0x0800f198

0800eea4 <memcpy>:
 800eea4:	440a      	add	r2, r1
 800eea6:	4291      	cmp	r1, r2
 800eea8:	f100 33ff 	add.w	r3, r0, #4294967295
 800eeac:	d100      	bne.n	800eeb0 <memcpy+0xc>
 800eeae:	4770      	bx	lr
 800eeb0:	b510      	push	{r4, lr}
 800eeb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eeba:	4291      	cmp	r1, r2
 800eebc:	d1f9      	bne.n	800eeb2 <memcpy+0xe>
 800eebe:	bd10      	pop	{r4, pc}

0800eec0 <_init>:
 800eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec2:	bf00      	nop
 800eec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eec6:	bc08      	pop	{r3}
 800eec8:	469e      	mov	lr, r3
 800eeca:	4770      	bx	lr

0800eecc <_fini>:
 800eecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eece:	bf00      	nop
 800eed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eed2:	bc08      	pop	{r3}
 800eed4:	469e      	mov	lr, r3
 800eed6:	4770      	bx	lr
