
IO_Module_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000ecf8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800ee38  0800ee38  0001ee38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f0e4  0800f0e4  0001f0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f0ec  0800f0ec  0001f0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f0f0  0800f0f0  0001f0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000008  0800f0f4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020a8  20000080  0800f168  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20002128  0800f168  00022128  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
=======
  1 .text         0000f35c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800f49c  0800f49c  0001f49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f70c  0800f70c  0001f70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f714  0800f714  0001f714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f718  0800f718  0001f718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000004c  20000008  0800f71c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000024c0  20000058  0800f768  00020058  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20002518  0800f768  00022518  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 11 .debug_info   00030062  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005db9  00000000  00000000  00050151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b58  00000000  00000000  00055f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002187  00000000  00000000  00058a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000288cf  00000000  00000000  0005abef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002e9f7  00000000  00000000  000834be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001012f5  00000000  00000000  000b1eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bb40  00000000  00000000  001b31ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  001becec  2**0
=======
 11 .debug_info   000310db  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006103  00000000  00000000  000511a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c38  00000000  00000000  000572a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002234  00000000  00000000  00059ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028e8a  00000000  00000000  0005c114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002fa2c  00000000  00000000  00084f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00101ef6  00000000  00000000  000b49ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bf00  00000000  00000000  001b68c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001c27c0  2**0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000058 	.word	0x20000058
 800015c:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000160:	0800ee20 	.word	0x0800ee20
=======
 8000160:	0800f484 	.word	0x0800f484
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000178:	20000084 	.word	0x20000084
 800017c:	0800ee20 	.word	0x0800ee20
=======
 8000178:	2000005c 	.word	0x2000005c
 800017c:	0800f484 	.word	0x0800f484
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <HAL_ADC_ConvCpltCallback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

// ADC complete conversion callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

	//osEventFlagsSet(tempFlagsHandle,0x01);
	osThreadFlagsSet(TempCalcHandle, 0x01);
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000c28:	f008 fd8e 	bl	8009748 <osThreadFlagsSet>
=======
 8000c28:	f009 f8c0 	bl	8009dac <osThreadFlagsSet>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000074 	.word	0x20000074

08000c38 <ADC_Temp_Thread_Start>:

// Initializes the thread and event flags in charge of calculating the temperature values form PT1000
void ADC_Temp_Thread_Start(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	TempCalcHandle = osThreadNew(CalculateTemp_Thread, NULL, &TempCalc_attributes);
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <ADC_Temp_Thread_Start+0x24>)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4807      	ldr	r0, [pc, #28]	; (8000c60 <ADC_Temp_Thread_Start+0x28>)
<<<<<<< HEAD
 8000c42:	f008 fcef 	bl	8009624 <osThreadNew>
=======
 8000c42:	f009 f821 	bl	8009c88 <osThreadNew>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <ADC_Temp_Thread_Start+0x2c>)
 8000c4a:	6013      	str	r3, [r2, #0]
	tempFlagsHandle = osEventFlagsNew(&tempFlags_attributes);
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <ADC_Temp_Thread_Start+0x30>)
<<<<<<< HEAD
 8000c4e:	f008 ff25 	bl	8009a9c <osEventFlagsNew>
=======
 8000c4e:	f009 f997 	bl	8009f80 <osEventFlagsNew>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <ADC_Temp_Thread_Start+0x34>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 8000c5c:	0800ef18 	.word	0x0800ef18
 8000c60:	08000cb9 	.word	0x08000cb9
 8000c64:	2000009c 	.word	0x2000009c
 8000c68:	0800ef3c 	.word	0x0800ef3c
 8000c6c:	200000a0 	.word	0x200000a0
=======
 8000c5c:	0800f574 	.word	0x0800f574
 8000c60:	08000c71 	.word	0x08000c71
 8000c64:	20000074 	.word	0x20000074
 8000c68:	0800f598 	.word	0x0800f598
 8000c6c:	20000078 	.word	0x20000078
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

08000c70 <CalculateTemp_Thread>:

<<<<<<< HEAD
// Initializes required components for Control algorithm thread

void Control_Thread_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8000c74:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <Control_Thread_Init+0x2c>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <Control_Thread_Init+0x30>)
 8000c7a:	f008 fcd3 	bl	8009624 <osThreadNew>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <Control_Thread_Init+0x34>)
 8000c82:	6013      	str	r3, [r2, #0]
	controlTimerHandle = osTimerNew(ControlExecTim, osTimerPeriodic, NULL, &controlTimer_attributes);
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <Control_Thread_Init+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4808      	ldr	r0, [pc, #32]	; (8000cac <Control_Thread_Init+0x3c>)
 8000c8c:	f008 fe5c 	bl	8009948 <osTimerNew>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <Control_Thread_Init+0x40>)
 8000c94:	6013      	str	r3, [r2, #0]
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	0800ef4c 	.word	0x0800ef4c
 8000ca0:	08000d7d 	.word	0x08000d7d
 8000ca4:	200000a4 	.word	0x200000a4
 8000ca8:	0800ef70 	.word	0x0800ef70
 8000cac:	08000db9 	.word	0x08000db9
 8000cb0:	200000a8 	.word	0x200000a8
 8000cb4:	00000000 	.word	0x00000000

08000cb8 <CalculateTemp_Thread>:

// System Threads

void CalculateTemp_Thread(void *argument){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000cc0:	217f      	movs	r1, #127	; 0x7f
 8000cc2:	4829      	ldr	r0, [pc, #164]	; (8000d68 <CalculateTemp_Thread+0xb0>)
 8000cc4:	f002 fb76 	bl	80033b4 <HAL_ADCEx_Calibration_Start>

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4928      	ldr	r1, [pc, #160]	; (8000d6c <CalculateTemp_Thread+0xb4>)
 8000ccc:	4826      	ldr	r0, [pc, #152]	; (8000d68 <CalculateTemp_Thread+0xb0>)
 8000cce:	f001 fa9b 	bl	8002208 <HAL_ADC_Start_DMA>
		//osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f008 fd83 	bl	80097e4 <osThreadFlagsWait>
		ADCvoltage = ADCrawReading * 0.00073242;
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <CalculateTemp_Thread+0xb4>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fb9d 	bl	8000424 <__aeabi_i2d>
 8000cea:	a319      	add	r3, pc, #100	; (adr r3, 8000d50 <CalculateTemp_Thread+0x98>)
 8000cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf0:	f7ff fc02 	bl	80004f8 <__aeabi_dmul>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	491d      	ldr	r1, [pc, #116]	; (8000d70 <CalculateTemp_Thread+0xb8>)
 8000cfa:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((ADCvoltage - 0.408)*100) / 2.04;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <CalculateTemp_Thread+0xb8>)
 8000d00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d04:	a314      	add	r3, pc, #80	; (adr r3, 8000d58 <CalculateTemp_Thread+0xa0>)
 8000d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0a:	f7ff fa3d 	bl	8000188 <__aeabi_dsub>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <CalculateTemp_Thread+0xbc>)
 8000d1c:	f7ff fbec 	bl	80004f8 <__aeabi_dmul>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4610      	mov	r0, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	a30d      	add	r3, pc, #52	; (adr r3, 8000d60 <CalculateTemp_Thread+0xa8>)
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	f7ff fd0d 	bl	800074c <__aeabi_ddiv>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	4910      	ldr	r1, [pc, #64]	; (8000d78 <CalculateTemp_Thread+0xc0>)
 8000d38:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <CalculateTemp_Thread+0xb0>)
 8000d3e:	f001 fae7 	bl	8002310 <HAL_ADC_Stop_DMA>
		osDelay(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f008 fdcf 	bl	80098e6 <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000d48:	e7be      	b.n	8000cc8 <CalculateTemp_Thread+0x10>
 8000d4a:	bf00      	nop
 8000d4c:	f3af 8000 	nop.w
 8000d50:	f9353597 	.word	0xf9353597
 8000d54:	3f47fffb 	.word	0x3f47fffb
 8000d58:	083126e9 	.word	0x083126e9
 8000d5c:	3fda1cac 	.word	0x3fda1cac
 8000d60:	851eb852 	.word	0x851eb852
 8000d64:	400051eb 	.word	0x400051eb
 8000d68:	200000c0 	.word	0x200000c0
 8000d6c:	200000ac 	.word	0x200000ac
 8000d70:	200000b0 	.word	0x200000b0
 8000d74:	40590000 	.word	0x40590000
 8000d78:	200000b8 	.word	0x200000b8

08000d7c <ControlTask>:
=======
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}

}

<<<<<<< HEAD
void ControlTask(void *argument){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	// Add the control algorithm and schedule the task properly to execute every period of time
	// TODO
	osTimerStart(controlTimerHandle, CONTROLFREQ);
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <ControlTask+0x34>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f008 fe57 	bl	8009a40 <osTimerStart>

	for(;;)
	{
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000d92:	f04f 32ff 	mov.w	r2, #4294967295
 8000d96:	2100      	movs	r1, #0
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f008 fd23 	bl	80097e4 <osThreadFlagsWait>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <ControlTask+0x38>)
 8000da2:	f003 f941 	bl	8004028 <HAL_GPIO_TogglePin>
		pid_Px = KPx * pid_error;
		pid_Ix = pid_Ix + (KIx * pid_error);
		pid_Dx = KDx * ((pid_error - last_x_error) / dt);
		pid_X = pid_Px + pid_Ix + pid_Dx;
		last_x_error = pid_error;*/
		osDelay(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f008 fd9d 	bl	80098e6 <osDelay>
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000dac:	e7f1      	b.n	8000d92 <ControlTask+0x16>
 8000dae:	bf00      	nop
 8000db0:	200000a8 	.word	0x200000a8
 8000db4:	48000400 	.word	0x48000400

08000db8 <ControlExecTim>:

}

/* ControlExecTim function */
void ControlExecTim(void *argument)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlExecTim */
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	osThreadFlagsSet(ControlHandle, 0x01);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <ControlExecTim+0x1c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f008 fcbe 	bl	8009748 <osThreadFlagsSet>
  /* USER CODE END ControlExecTim */
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200000a4 	.word	0x200000a4

08000dd8 <LL_RCC_LSE_SetDriveCapability>:
=======
void CalculateTemp_Thread(void *argument){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c78:	217f      	movs	r1, #127	; 0x7f
 8000c7a:	4829      	ldr	r0, [pc, #164]	; (8000d20 <CalculateTemp_Thread+0xb0>)
 8000c7c:	f002 fb6e 	bl	800335c <HAL_ADCEx_Calibration_Start>

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	4928      	ldr	r1, [pc, #160]	; (8000d24 <CalculateTemp_Thread+0xb4>)
 8000c84:	4826      	ldr	r0, [pc, #152]	; (8000d20 <CalculateTemp_Thread+0xb0>)
 8000c86:	f001 fa93 	bl	80021b0 <HAL_ADC_Start_DMA>
		//osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2001      	movs	r0, #1
 8000c92:	f009 f8d9 	bl	8009e48 <osThreadFlagsWait>
		ADCvoltage = ADCrawReading * 0.00073242;
 8000c96:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <CalculateTemp_Thread+0xb4>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fbc1 	bl	8000424 <__aeabi_i2d>
 8000ca2:	a319      	add	r3, pc, #100	; (adr r3, 8000d08 <CalculateTemp_Thread+0x98>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	f7ff fc26 	bl	80004f8 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	491d      	ldr	r1, [pc, #116]	; (8000d28 <CalculateTemp_Thread+0xb8>)
 8000cb2:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((ADCvoltage - 0.408)*100) / 2.04;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <CalculateTemp_Thread+0xb8>)
 8000cb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cbc:	a314      	add	r3, pc, #80	; (adr r3, 8000d10 <CalculateTemp_Thread+0xa0>)
 8000cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc2:	f7ff fa61 	bl	8000188 <__aeabi_dsub>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	4610      	mov	r0, r2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f04f 0200 	mov.w	r2, #0
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <CalculateTemp_Thread+0xbc>)
 8000cd4:	f7ff fc10 	bl	80004f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4610      	mov	r0, r2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	a30d      	add	r3, pc, #52	; (adr r3, 8000d18 <CalculateTemp_Thread+0xa8>)
 8000ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce6:	f7ff fd31 	bl	800074c <__aeabi_ddiv>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	4910      	ldr	r1, [pc, #64]	; (8000d30 <CalculateTemp_Thread+0xc0>)
 8000cf0:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <CalculateTemp_Thread+0xb0>)
 8000cf6:	f001 fadf 	bl	80022b8 <HAL_ADC_Stop_DMA>
		osDelay(2);
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f009 f925 	bl	8009f4a <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000d00:	e7be      	b.n	8000c80 <CalculateTemp_Thread+0x10>
 8000d02:	bf00      	nop
 8000d04:	f3af 8000 	nop.w
 8000d08:	f9353597 	.word	0xf9353597
 8000d0c:	3f47fffb 	.word	0x3f47fffb
 8000d10:	083126e9 	.word	0x083126e9
 8000d14:	3fda1cac 	.word	0x3fda1cac
 8000d18:	851eb852 	.word	0x851eb852
 8000d1c:	400051eb 	.word	0x400051eb
 8000d20:	200000a8 	.word	0x200000a8
 8000d24:	2000007c 	.word	0x2000007c
 8000d28:	20000080 	.word	0x20000080
 8000d2c:	40590000 	.word	0x40590000
 8000d30:	20000088 	.word	0x20000088

08000d34 <LL_RCC_LSE_SetDriveCapability>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
<<<<<<< HEAD
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000de8:	f023 0218 	bic.w	r2, r3, #24
 8000dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_AHB1_GRP1_EnableClock>:
=======
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d44:	f023 0218 	bic.w	r2, r3, #24
 8000d48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_AHB1_GRP1_EnableClock>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
<<<<<<< HEAD
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e28:	68fb      	ldr	r3, [r7, #12]
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <LL_AHB2_GRP1_EnableClock>:
=======
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d84:	68fb      	ldr	r3, [r7, #12]
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <LL_AHB2_GRP1_EnableClock>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
<<<<<<< HEAD
 8000e36:	b480      	push	{r7}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4013      	ands	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <main>:
=======
 8000d92:	b480      	push	{r7}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000da0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4013      	ands	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <main>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
=======
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000e6c:	f000 fdfe 	bl	8001a6c <HAL_Init>
=======
 8000dc8:	f000 fe00 	bl	80019cc <HAL_Init>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000e70:	f000 f872 	bl	8000f58 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e74:	f000 f8e6 	bl	8001044 <PeriphCommonClock_Config>
=======
 8000dcc:	f000 f872 	bl	8000eb4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000dd0:	f000 f8e6 	bl	8000fa0 <PeriphCommonClock_Config>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000e78:	f000 fa50 	bl	800131c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e7c:	f000 fa2c 	bl	80012d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e80:	f000 f9b6 	bl	80011f0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000e84:	f000 fa00 	bl	8001288 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000e88:	f000 f90e 	bl	80010a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e8c:	f000 f970 	bl	8001170 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ModbusH.uModbusType = MB_SLAVE;
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <main+0xc8>)
 8000e92:	2203      	movs	r2, #3
 8000e94:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <main+0xc8>)
 8000e98:	4a26      	ldr	r2, [pc, #152]	; (8000f34 <main+0xcc>)
 8000e9a:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <main+0xc8>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <main+0xc8>)
 8000ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ea8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8000eac:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <main+0xc8>)
 8000eae:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <main+0xd0>)
 8000eb0:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <main+0xc8>)
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regsHR = Holding_Registers_Database;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <main+0xc8>)
 8000eba:	4a20      	ldr	r2, [pc, #128]	; (8000f3c <main+0xd4>)
 8000ebc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsRO = Input_Register_Database;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <main+0xc8>)
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <main+0xd8>)
 8000ec4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  ModbusH.u16regsCoils = Holding_Coils_Database;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <main+0xc8>)
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <main+0xdc>)
 8000ecc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  ModbusH.u16regsCoilsRO = Input_Coils_Database;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <main+0xc8>)
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <main+0xe0>)
 8000ed4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  ModbusH.u16regHR_size = sizeof(Holding_Registers_Database)/sizeof(Holding_Registers_Database[0]);
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <main+0xc8>)
 8000eda:	220a      	movs	r2, #10
 8000edc:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  ModbusH.u16regRO_size = sizeof(Input_Register_Database)/sizeof(Input_Register_Database[0]);
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <main+0xc8>)
 8000ee2:	2214      	movs	r2, #20
 8000ee4:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  ModbusH.u16regCoils_size = sizeof(Holding_Coils_Database)/sizeof(Holding_Coils_Database[0]);
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <main+0xc8>)
 8000eea:	220a      	movs	r2, #10
 8000eec:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  ModbusH.u16regCoilsRO_size = sizeof(Input_Coils_Database)/sizeof(Input_Coils_Database[0]);
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <main+0xc8>)
 8000ef2:	220a      	movs	r2, #10
 8000ef4:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  ModbusH.xTypeHW = USART_HW_DMA;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <main+0xc8>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <main+0xc8>)
 8000f02:	f00c fa93 	bl	800d42c <ModbusInit>

  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000f06:	480a      	ldr	r0, [pc, #40]	; (8000f30 <main+0xc8>)
 8000f08:	f00c fb32 	bl	800d570 <ModbusStart>

=======
 8000dd4:	f000 fa50 	bl	8001278 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dd8:	f000 fa2c 	bl	8001234 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ddc:	f000 f9b6 	bl	800114c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000de0:	f000 fa00 	bl	80011e4 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000de4:	f000 f90e 	bl	8001004 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000de8:	f000 f970 	bl	80010cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ModbusH.uModbusType = MB_SLAVE;
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <main+0xc8>)
 8000dee:	2203      	movs	r2, #3
 8000df0:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <main+0xc8>)
 8000df4:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <main+0xcc>)
 8000df6:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <main+0xc8>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <main+0xc8>)
 8000e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e04:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8000e08:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <main+0xc8>)
 8000e0a:	4a22      	ldr	r2, [pc, #136]	; (8000e94 <main+0xd0>)
 8000e0c:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <main+0xc8>)
 8000e10:	2208      	movs	r2, #8
 8000e12:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regsHR = Holding_Registers_Database;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <main+0xc8>)
 8000e16:	4a20      	ldr	r2, [pc, #128]	; (8000e98 <main+0xd4>)
 8000e18:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsRO = Input_Register_Database;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <main+0xc8>)
 8000e1e:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <main+0xd8>)
 8000e20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  ModbusH.u16regsCoils = Holding_Coils_Database;
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <main+0xc8>)
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <main+0xdc>)
 8000e28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  ModbusH.u16regsCoilsRO = Input_Coils_Database;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <main+0xc8>)
 8000e2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <main+0xe0>)
 8000e30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  ModbusH.u16regHR_size = sizeof(Holding_Registers_Database)/sizeof(Holding_Registers_Database[0]);
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <main+0xc8>)
 8000e36:	220a      	movs	r2, #10
 8000e38:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  ModbusH.u16regRO_size = sizeof(Input_Register_Database)/sizeof(Input_Register_Database[0]);
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <main+0xc8>)
 8000e3e:	2214      	movs	r2, #20
 8000e40:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  ModbusH.u16regCoils_size = sizeof(Holding_Coils_Database)/sizeof(Holding_Coils_Database[0]);
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <main+0xc8>)
 8000e46:	2205      	movs	r2, #5
 8000e48:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  ModbusH.u16regCoilsRO_size = sizeof(Input_Coils_Database)/sizeof(Input_Coils_Database[0]);
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <main+0xc8>)
 8000e4e:	2205      	movs	r2, #5
 8000e50:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  ModbusH.xTypeHW = USART_HW_DMA;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <main+0xc8>)
 8000e56:	2204      	movs	r2, #4
 8000e58:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <main+0xc8>)
 8000e5e:	f00c fcf5 	bl	800d84c <ModbusInit>

  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000e62:	480a      	ldr	r0, [pc, #40]	; (8000e8c <main+0xc8>)
 8000e64:	f00c fd94 	bl	800d990 <ModbusStart>

  //Initialize the SSD1306 OLED
  ssd1306_Init();
 8000e68:	f00e f9ea 	bl	800f240 <ssd1306_Init>
  //ssd1306_TestAll();
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
<<<<<<< HEAD
 8000f0c:	f008 fb40 	bl	8009590 <osKernelInitialize>
=======
 8000e6c:	f008 fec2 	bl	8009bf4 <osKernelInitialize>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
<<<<<<< HEAD
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <main+0xe4>)
 8000f12:	2100      	movs	r1, #0
 8000f14:	480e      	ldr	r0, [pc, #56]	; (8000f50 <main+0xe8>)
 8000f16:	f008 fb85 	bl	8009624 <osThreadNew>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <main+0xec>)
 8000f1e:	6013      	str	r3, [r2, #0]
=======
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <main+0xe4>)
 8000e72:	2100      	movs	r1, #0
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <main+0xe8>)
 8000e76:	f008 ff07 	bl	8009c88 <osThreadNew>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <main+0xec>)
 8000e7e:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Temp_Thread_Start();
<<<<<<< HEAD
 8000f20:	f7ff fe8a 	bl	8000c38 <ADC_Temp_Thread_Start>
  Control_Thread_Init();
 8000f24:	f7ff fea4 	bl	8000c70 <Control_Thread_Init>
=======
 8000e80:	f7ff feda 	bl	8000c38 <ADC_Temp_Thread_Start>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< HEAD
 8000f28:	f008 fb56 	bl	80095d8 <osKernelStart>
=======
 8000e84:	f008 feda 	bl	8009c3c <osKernelStart>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< HEAD
 8000f2c:	e7fe      	b.n	8000f2c <main+0xc4>
 8000f2e:	bf00      	nop
 8000f30:	20000624 	.word	0x20000624
 8000f34:	200001d8 	.word	0x200001d8
 8000f38:	48000800 	.word	0x48000800
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	2000001c 	.word	0x2000001c
 8000f44:	20000044 	.word	0x20000044
 8000f48:	20000058 	.word	0x20000058
 8000f4c:	0800ef80 	.word	0x0800ef80
 8000f50:	080013f9 	.word	0x080013f9
 8000f54:	20000620 	.word	0x20000620

08000f58 <SystemClock_Config>:
=======
 8000e88:	e7fe      	b.n	8000e88 <main+0xc4>
 8000e8a:	bf00      	nop
 8000e8c:	2000060c 	.word	0x2000060c
 8000e90:	200001c0 	.word	0x200001c0
 8000e94:	48000800 	.word	0x48000800
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	2000001c 	.word	0x2000001c
 8000ea0:	20000090 	.word	0x20000090
 8000ea4:	2000009c 	.word	0x2000009c
 8000ea8:	0800f5a8 	.word	0x0800f5a8
 8000eac:	08001359 	.word	0x08001359
 8000eb0:	20000608 	.word	0x20000608

08000eb4 <SystemClock_Config>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09a      	sub	sp, #104	; 0x68
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2248      	movs	r2, #72	; 0x48
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f00d ff20 	bl	800edac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	619a      	str	r2, [r3, #24]
=======
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b09a      	sub	sp, #104	; 0x68
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	2248      	movs	r2, #72	; 0x48
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00e faa4 	bl	800f410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	619a      	str	r2, [r3, #24]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
<<<<<<< HEAD
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f8c:	60d3      	str	r3, [r2, #12]
=======
 8000eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ee8:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
<<<<<<< HEAD
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	f023 0303 	bic.w	r3, r3, #3
 8000f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	60d3      	str	r3, [r2, #12]
=======
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	f023 0303 	bic.w	r3, r3, #3
 8000ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
<<<<<<< HEAD
 8000fa2:	f003 fa91 	bl	80044c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff ff16 	bl	8000dd8 <LL_RCC_LSE_SetDriveCapability>
=======
 8000efe:	f003 fe15 	bl	8004b2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff ff16 	bl	8000d34 <LL_RCC_LSE_SetDriveCapability>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
<<<<<<< HEAD
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <SystemClock_Config+0xe8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fb4:	4a22      	ldr	r2, [pc, #136]	; (8001040 <SystemClock_Config+0xe8>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <SystemClock_Config+0xe8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]
=======
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <SystemClock_Config+0xe8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f10:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <SystemClock_Config+0xe8>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <SystemClock_Config+0xe8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
<<<<<<< HEAD
 8000fc8:	2327      	movs	r3, #39	; 0x27
 8000fca:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fe8:	2360      	movs	r3, #96	; 0x60
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fe07 	bl	8004c08 <HAL_RCC_OscConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001000:	f000 fa14 	bl	800142c <Error_Handler>
=======
 8000f24:	2327      	movs	r3, #39	; 0x27
 8000f26:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3c:	2340      	movs	r3, #64	; 0x40
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f44:	2360      	movs	r3, #96	; 0x60
 8000f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 f98b 	bl	800526c <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f5c:	f000 fa16 	bl	800138c <Error_Handler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
<<<<<<< HEAD
 8001004:	236f      	movs	r3, #111	; 0x6f
 8001006:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001008:	2302      	movs	r3, #2
 800100a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2101      	movs	r1, #1
 8001024:	4618      	mov	r0, r3
 8001026:	f004 f963 	bl	80052f0 <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001030:	f000 f9fc 	bl	800142c <Error_Handler>
=======
 8000f60:	236f      	movs	r3, #111	; 0x6f
 8000f62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f64:	2302      	movs	r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 fce7 	bl	8005954 <HAL_RCC_ClockConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000f8c:	f000 f9fe 	bl	800138c <Error_Handler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
<<<<<<< HEAD
 8001034:	f004 ff50 	bl	8005ed8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001038:	bf00      	nop
 800103a:	3768      	adds	r7, #104	; 0x68
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	58000400 	.word	0x58000400

08001044 <PeriphCommonClock_Config>:
=======
 8000f90:	f005 fad4 	bl	800653c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f94:	bf00      	nop
 8000f96:	3768      	adds	r7, #104	; 0x68
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	58000400 	.word	0x58000400

08000fa0 <PeriphCommonClock_Config>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
<<<<<<< HEAD
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	; 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2250      	movs	r2, #80	; 0x50
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f00d feab 	bl	800edac <memset>
=======
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2250      	movs	r2, #80	; 0x50
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f00e fa2f 	bl	800f410 <memset>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
<<<<<<< HEAD
 8001056:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 800105a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800105c:	2318      	movs	r3, #24
 800105e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800106a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800106c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001070:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001072:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8001076:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001078:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800107e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001088:	2300      	movs	r3, #0
 800108a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4618      	mov	r0, r3
 8001090:	f004 fdac 	bl	8005bec <HAL_RCCEx_PeriphCLKConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800109a:	f000 f9c7 	bl	800142c <Error_Handler>
=======
 8000fb2:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 8000fb6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000fb8:	2318      	movs	r3, #24
 8000fba:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fc6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000fc8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fcc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000fce:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8000fd2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000fd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 f930 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000ff6:	f000 f9c9 	bl	800138c <Error_Handler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
<<<<<<< HEAD
 800109e:	bf00      	nop
 80010a0:	3750      	adds	r7, #80	; 0x50
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <MX_ADC1_Init>:
=======
 8000ffa:	bf00      	nop
 8000ffc:	3750      	adds	r7, #80	; 0x50
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <MX_ADC1_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
=======
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 80010ae:	463b      	mov	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]
=======
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010c0:	4a29      	ldr	r2, [pc, #164]	; (8001168 <MX_ADC1_Init+0xc0>)
 80010c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010de:	2204      	movs	r2, #4
 80010e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001104:	2200      	movs	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_ADC1_Init+0xbc>)
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001112:	2200      	movs	r2, #0
 8001114:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111e:	4811      	ldr	r0, [pc, #68]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001120:	f000 ff26 	bl	8001f70 <HAL_ADC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800112a:	f000 f97f 	bl	800142c <Error_Handler>
=======
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <MX_ADC1_Init+0xbc>)
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <MX_ADC1_Init+0xc0>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <MX_ADC1_Init+0xbc>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <MX_ADC1_Init+0xbc>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <MX_ADC1_Init+0xbc>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <MX_ADC1_Init+0xbc>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_ADC1_Init+0xbc>)
 800103a:	2204      	movs	r2, #4
 800103c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <MX_ADC1_Init+0xbc>)
 8001040:	2200      	movs	r2, #0
 8001042:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_ADC1_Init+0xbc>)
 8001046:	2200      	movs	r2, #0
 8001048:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <MX_ADC1_Init+0xbc>)
 800104c:	2201      	movs	r2, #1
 800104e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_ADC1_Init+0xbc>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <MX_ADC1_Init+0xbc>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_ADC1_Init+0xbc>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_ADC1_Init+0xbc>)
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_ADC1_Init+0xbc>)
 800106e:	2200      	movs	r2, #0
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_ADC1_Init+0xbc>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107a:	4811      	ldr	r0, [pc, #68]	; (80010c0 <MX_ADC1_Init+0xbc>)
 800107c:	f000 ff4c 	bl	8001f18 <HAL_ADC_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001086:	f000 f981 	bl	800138c <Error_Handler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
<<<<<<< HEAD
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_ADC1_Init+0xc4>)
 8001130:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001132:	2306      	movs	r3, #6
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001136:	2302      	movs	r3, #2
 8001138:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113a:	237f      	movs	r3, #127	; 0x7f
 800113c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800113e:	2304      	movs	r3, #4
 8001140:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_ADC1_Init+0xbc>)
 800114c:	f001 fb16 	bl	800277c <HAL_ADC_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001156:	f000 f969 	bl	800142c <Error_Handler>
=======
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_ADC1_Init+0xc4>)
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800108e:	2306      	movs	r3, #6
 8001090:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001092:	2302      	movs	r3, #2
 8001094:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001096:	237f      	movs	r3, #127	; 0x7f
 8001098:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800109a:	2304      	movs	r3, #4
 800109c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <MX_ADC1_Init+0xbc>)
 80010a8:	f001 fb3c 	bl	8002724 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010b2:	f000 f96b 	bl	800138c <Error_Handler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000c0 	.word	0x200000c0
 8001168:	50040000 	.word	0x50040000
 800116c:	14f00020 	.word	0x14f00020

08001170 <MX_I2C1_Init>:
=======
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200000a8 	.word	0x200000a8
 80010c4:	50040000 	.word	0x50040000
 80010c8:	14f00020 	.word	0x14f00020

080010cc <MX_I2C1_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
=======
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <MX_I2C1_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_I2C1_Init+0x74>)
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <MX_I2C1_Init+0x7c>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001188:	2201      	movs	r2, #1
 800118a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_I2C1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_I2C1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011ac:	f002 ff56 	bl	800405c <HAL_I2C_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011b6:	f000 f939 	bl	800142c <Error_Handler>
=======
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_I2C1_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <MX_I2C1_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_I2C1_Init+0x74>)
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <MX_I2C1_Init+0x7c>)
 80010da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_I2C1_Init+0x74>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_I2C1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <MX_I2C1_Init+0x74>)
 8001108:	f002 ff62 	bl	8003fd0 <HAL_I2C_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001112:	f000 f93b 	bl	800138c <Error_Handler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< HEAD
 80011ba:	2100      	movs	r1, #0
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011be:	f002 ffe8 	bl	8004192 <HAL_I2CEx_ConfigAnalogFilter>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011c8:	f000 f930 	bl	800142c <Error_Handler>
=======
 8001116:	2100      	movs	r1, #0
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_I2C1_Init+0x74>)
 800111a:	f003 fb6d 	bl	80047f8 <HAL_I2CEx_ConfigAnalogFilter>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001124:	f000 f932 	bl	800138c <Error_Handler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
<<<<<<< HEAD
 80011cc:	2100      	movs	r1, #0
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011d0:	f003 f82a 	bl	8004228 <HAL_I2CEx_ConfigDigitalFilter>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011da:	f000 f927 	bl	800142c <Error_Handler>
=======
 8001128:	2100      	movs	r1, #0
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_I2C1_Init+0x74>)
 800112c:	f003 fbaf 	bl	800488e <HAL_I2CEx_ConfigDigitalFilter>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001136:	f000 f929 	bl	800138c <Error_Handler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000184 	.word	0x20000184
 80011e8:	40005400 	.word	0x40005400
 80011ec:	00300f38 	.word	0x00300f38

080011f0 <MX_USART1_UART_Init>:
=======
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000016c 	.word	0x2000016c
 8001144:	40005400 	.word	0x40005400
 8001148:	00300f38 	.word	0x00300f38

0800114c <MX_USART1_UART_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
=======
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_USART1_UART_Init+0x90>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <MX_USART1_UART_Init+0x94>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_USART1_UART_Init+0x90>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800123a:	f005 f9df 	bl	80065fc <HAL_UART_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 f8f2 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800124c:	f008 f801 	bl	8009252 <HAL_UARTEx_SetTxFifoThreshold>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001256:	f000 f8e9 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800125e:	f008 f836 	bl	80092ce <HAL_UARTEx_SetRxFifoThreshold>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001268:	f000 f8e0 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800126e:	f007 ffb7 	bl	80091e0 <HAL_UARTEx_DisableFifoMode>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 f8d8 	bl	800142c <Error_Handler>
=======
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <MX_USART1_UART_Init+0x90>)
 8001152:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <MX_USART1_UART_Init+0x94>)
 8001154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_USART1_UART_Init+0x90>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_USART1_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_USART1_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_USART1_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_USART1_UART_Init+0x90>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_USART1_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_USART1_UART_Init+0x90>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_USART1_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_USART1_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_USART1_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001194:	4811      	ldr	r0, [pc, #68]	; (80011dc <MX_USART1_UART_Init+0x90>)
 8001196:	f005 fd63 	bl	8006c60 <HAL_UART_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011a0:	f000 f8f4 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a4:	2100      	movs	r1, #0
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_USART1_UART_Init+0x90>)
 80011a8:	f008 fb85 	bl	80098b6 <HAL_UARTEx_SetTxFifoThreshold>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011b2:	f000 f8eb 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <MX_USART1_UART_Init+0x90>)
 80011ba:	f008 fbba 	bl	8009932 <HAL_UARTEx_SetRxFifoThreshold>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011c4:	f000 f8e2 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_USART1_UART_Init+0x90>)
 80011ca:	f008 fb3b 	bl	8009844 <HAL_UARTEx_DisableFifoMode>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f000 f8da 	bl	800138c <Error_Handler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001d8 	.word	0x200001d8
 8001284:	40013800 	.word	0x40013800

08001288 <MX_USB_PCD_Init>:
=======
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200001c0 	.word	0x200001c0
 80011e0:	40013800 	.word	0x40013800

080011e4 <MX_USB_PCD_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
<<<<<<< HEAD
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
=======
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
<<<<<<< HEAD
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <MX_USB_PCD_Init+0x4c>)
 8001290:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 8001294:	2208      	movs	r2, #8
 8001296:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 800129a:	2202      	movs	r2, #2
 800129c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012be:	f002 ffff 	bl	80042c0 <HAL_PCD_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80012c8:	f000 f8b0 	bl	800142c <Error_Handler>
=======
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_USB_PCD_Init+0x48>)
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <MX_USB_PCD_Init+0x4c>)
 80011ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_USB_PCD_Init+0x48>)
 80011f0:	2208      	movs	r2, #8
 80011f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <MX_USB_PCD_Init+0x48>)
 80011f6:	2202      	movs	r2, #2
 80011f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_USB_PCD_Init+0x48>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_USB_PCD_Init+0x48>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_USB_PCD_Init+0x48>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_USB_PCD_Init+0x48>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_USB_PCD_Init+0x48>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_USB_PCD_Init+0x48>)
 800121a:	f003 fb84 	bl	8004926 <HAL_PCD_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001224:	f000 f8b2 	bl	800138c <Error_Handler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
<<<<<<< HEAD
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000032c 	.word	0x2000032c
 80012d4:	40006800 	.word	0x40006800

080012d8 <MX_DMA_Init>:
=======
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000314 	.word	0x20000314
 8001230:	40006800 	.word	0x40006800

08001234 <MX_DMA_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
<<<<<<< HEAD
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012dc:	2004      	movs	r0, #4
 80012de:	f7ff fd91 	bl	8000e04 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff fd8e 	bl	8000e04 <LL_AHB1_GRP1_EnableClock>
=======
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001238:	2004      	movs	r0, #4
 800123a:	f7ff fd91 	bl	8000d60 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff fd8e 	bl	8000d60 <LL_AHB1_GRP1_EnableClock>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
<<<<<<< HEAD
 80012e8:	2200      	movs	r2, #0
 80012ea:	2105      	movs	r1, #5
 80012ec:	200b      	movs	r0, #11
 80012ee:	f002 f9ad 	bl	800364c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012f2:	200b      	movs	r0, #11
 80012f4:	f002 f9c4 	bl	8003680 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2105      	movs	r1, #5
 80012fc:	200c      	movs	r0, #12
 80012fe:	f002 f9a5 	bl	800364c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001302:	200c      	movs	r0, #12
 8001304:	f002 f9bc 	bl	8003680 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2105      	movs	r1, #5
 800130c:	200d      	movs	r0, #13
 800130e:	f002 f99d 	bl	800364c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001312:	200d      	movs	r0, #13
 8001314:	f002 f9b4 	bl	8003680 <HAL_NVIC_EnableIRQ>

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <MX_GPIO_Init>:
=======
 8001244:	2200      	movs	r2, #0
 8001246:	2105      	movs	r1, #5
 8001248:	200b      	movs	r0, #11
 800124a:	f002 f9d3 	bl	80035f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800124e:	200b      	movs	r0, #11
 8001250:	f002 f9ea 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2105      	movs	r1, #5
 8001258:	200c      	movs	r0, #12
 800125a:	f002 f9cb 	bl	80035f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800125e:	200c      	movs	r0, #12
 8001260:	f002 f9e2 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2105      	movs	r1, #5
 8001268:	200d      	movs	r0, #13
 800126a:	f002 f9c3 	bl	80035f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800126e:	200d      	movs	r0, #13
 8001270:	f002 f9da 	bl	8003628 <HAL_NVIC_EnableIRQ>

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <MX_GPIO_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
=======
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 8001330:	2004      	movs	r0, #4
 8001332:	f7ff fd80 	bl	8000e36 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2002      	movs	r0, #2
 8001338:	f7ff fd7d 	bl	8000e36 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff fd7a 	bl	8000e36 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	2008      	movs	r0, #8
 8001344:	f7ff fd77 	bl	8000e36 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2108      	movs	r1, #8
 800134c:	4827      	ldr	r0, [pc, #156]	; (80013ec <MX_GPIO_Init+0xd0>)
 800134e:	f002 fe53 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2102      	movs	r1, #2
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f002 fe4d 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2103      	movs	r1, #3
 8001362:	4823      	ldr	r0, [pc, #140]	; (80013f0 <MX_GPIO_Init+0xd4>)
 8001364:	f002 fe48 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 8001368:	2308      	movs	r3, #8
 800136a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <MX_GPIO_Init+0xd0>)
 800137e:	f002 fccb 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001382:	2302      	movs	r3, #2
 8001384:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f002 fcbd 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800139e:	2310      	movs	r3, #16
 80013a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	480f      	ldr	r0, [pc, #60]	; (80013ec <MX_GPIO_Init+0xd0>)
 80013b0:	f002 fcb2 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 80013b4:	2303      	movs	r3, #3
 80013b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <MX_GPIO_Init+0xd4>)
 80013ca:	f002 fca5 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80013ce:	2303      	movs	r3, #3
 80013d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_GPIO_Init+0xd8>)
 80013e0:	f002 fc9a 	bl	8003d18 <HAL_GPIO_Init>
=======
 800128c:	2004      	movs	r0, #4
 800128e:	f7ff fd80 	bl	8000d92 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2002      	movs	r0, #2
 8001294:	f7ff fd7d 	bl	8000d92 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff fd7a 	bl	8000d92 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	2008      	movs	r0, #8
 80012a0:	f7ff fd77 	bl	8000d92 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2108      	movs	r1, #8
 80012a8:	4828      	ldr	r0, [pc, #160]	; (800134c <MX_GPIO_Init+0xd4>)
 80012aa:	f002 fe79 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2102      	movs	r1, #2
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f002 fe73 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 80012ba:	2200      	movs	r2, #0
 80012bc:	f24f 0103 	movw	r1, #61443	; 0xf003
 80012c0:	4823      	ldr	r0, [pc, #140]	; (8001350 <MX_GPIO_Init+0xd8>)
 80012c2:	f002 fe6d 	bl	8003fa0 <HAL_GPIO_WritePin>
                          |TWA3_Pin|TWA4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 80012c6:	2308      	movs	r3, #8
 80012c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	481c      	ldr	r0, [pc, #112]	; (800134c <MX_GPIO_Init+0xd4>)
 80012dc:	f002 fcf0 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012e0:	2302      	movs	r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f002 fce2 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012fc:	2310      	movs	r3, #16
 80012fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <MX_GPIO_Init+0xd4>)
 800130e:	f002 fcd7 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TWA1_Pin TWA2_Pin
                           TWA3_Pin TWA4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 8001312:	f24f 0303 	movw	r3, #61443	; 0xf003
 8001316:	607b      	str	r3, [r7, #4]
                          |TWA3_Pin|TWA4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4809      	ldr	r0, [pc, #36]	; (8001350 <MX_GPIO_Init+0xd8>)
 800132a:	f002 fcc9 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800132e:	2303      	movs	r3, #3
 8001330:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_GPIO_Init+0xdc>)
 8001340:	f002 fcbe 	bl	8003cc0 <HAL_GPIO_Init>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	48000800 	.word	0x48000800
 80013f0:	48000400 	.word	0x48000400
 80013f4:	48000c00 	.word	0x48000c00

080013f8 <StartDefaultTask>:
=======
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	48000800 	.word	0x48000800
 8001350:	48000400 	.word	0x48000400
 8001354:	48000c00 	.word	0x48000c00

08001358 <StartDefaultTask>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
<<<<<<< HEAD
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
=======
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
<<<<<<< HEAD
 8001400:	2001      	movs	r0, #1
 8001402:	f008 fa70 	bl	80098e6 <osDelay>
 8001406:	e7fb      	b.n	8001400 <StartDefaultTask+0x8>

08001408 <HAL_TIM_PeriodElapsedCallback>:
=======
 8001360:	2001      	movs	r0, #1
 8001362:	f008 fdf2 	bl	8009f4a <osDelay>
 8001366:	e7fb      	b.n	8001360 <StartDefaultTask+0x8>

08001368 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
=======
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
<<<<<<< HEAD
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800141a:	f000 fb47 	bl	8001aac <HAL_IncTick>
=======
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800137a:	f000 fb47 	bl	8001a0c <HAL_IncTick>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40014400 	.word	0x40014400

0800142c <Error_Handler>:
=======
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40014400 	.word	0x40014400

0800138c <Error_Handler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
=======
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
=======
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>

08001436 <LL_AHB2_GRP1_EnableClock>:
{
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800143e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001442:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4313      	orrs	r3, r2
 800144c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800144e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4013      	ands	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_APB1_GRP1_EnableClock>:
=======
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>

08001396 <LL_AHB2_GRP1_EnableClock>:
{
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4013      	ands	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_APB1_GRP1_EnableClock>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
<<<<<<< HEAD
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001474:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4313      	orrs	r3, r2
 800147e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001484:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800148c:	68fb      	ldr	r3, [r7, #12]
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_APB2_GRP1_EnableClock>:
=======
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ec:	68fb      	ldr	r3, [r7, #12]
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <LL_APB2_GRP1_EnableClock>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
<<<<<<< HEAD
 800149a:	b480      	push	{r7}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4013      	ands	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_MspInit>:
=======
 80013fa:	b480      	push	{r7}
 80013fc:	b085      	sub	sp, #20
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001406:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4313      	orrs	r3, r2
 8001410:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001416:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4013      	ands	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_MspInit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
=======
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 80014d0:	2200      	movs	r2, #0
 80014d2:	210f      	movs	r1, #15
 80014d4:	f06f 0001 	mvn.w	r0, #1
 80014d8:	f002 f8b8 	bl	800364c <HAL_NVIC_SetPriority>
=======
 8001430:	2200      	movs	r2, #0
 8001432:	210f      	movs	r1, #15
 8001434:	f06f 0001 	mvn.w	r0, #1
 8001438:	f002 f8dc 	bl	80035f4 <HAL_NVIC_SetPriority>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_ADC_MspInit>:
=======
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_ADC_MspInit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a26      	ldr	r2, [pc, #152]	; (8001598 <HAL_ADC_MspInit+0xb8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d146      	bne.n	8001590 <HAL_ADC_MspInit+0xb0>
=======
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <HAL_ADC_MspInit+0xb8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d146      	bne.n	80014f0 <HAL_ADC_MspInit+0xb0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
<<<<<<< HEAD
 8001502:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001506:	f7ff ff96 	bl	8001436 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2001      	movs	r0, #1
 800150c:	f7ff ff93 	bl	8001436 <LL_AHB2_GRP1_EnableClock>
=======
 8001462:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001466:	f7ff ff96 	bl	8001396 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff ff93 	bl	8001396 <LL_AHB2_GRP1_EnableClock>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
<<<<<<< HEAD
 8001510:	2301      	movs	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001514:	2303      	movs	r3, #3
 8001516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f002 fbf7 	bl	8003d18 <HAL_GPIO_Init>
=======
 8001470:	2301      	movs	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001486:	f002 fc1b 	bl	8003cc0 <HAL_GPIO_Init>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
<<<<<<< HEAD
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_ADC_MspInit+0xbc>)
 800152c:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <HAL_ADC_MspInit+0xc0>)
 800152e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_ADC_MspInit+0xbc>)
 8001532:	2205      	movs	r2, #5
 8001534:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_ADC_MspInit+0xbc>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800153c:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_ADC_MspInit+0xbc>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_ADC_MspInit+0xbc>)
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_ADC_MspInit+0xbc>)
 800154a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_ADC_MspInit+0xbc>)
 8001552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001556:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_ADC_MspInit+0xbc>)
 800155a:	2220      	movs	r2, #32
 800155c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_ADC_MspInit+0xbc>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001564:	480d      	ldr	r0, [pc, #52]	; (800159c <HAL_ADC_MspInit+0xbc>)
 8001566:	f002 f899 	bl	800369c <HAL_DMA_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001570:	f7ff ff5c 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <HAL_ADC_MspInit+0xbc>)
 8001578:	64da      	str	r2, [r3, #76]	; 0x4c
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_ADC_MspInit+0xbc>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2105      	movs	r1, #5
 8001584:	2012      	movs	r0, #18
 8001586:	f002 f861 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800158a:	2012      	movs	r0, #18
 800158c:	f002 f878 	bl	8003680 <HAL_NVIC_EnableIRQ>
=======
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 800148c:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_ADC_MspInit+0xc0>)
 800148e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 8001492:	2205      	movs	r2, #5
 8001494:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014ba:	2220      	movs	r2, #32
 80014bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014c6:	f002 f8bd 	bl	8003644 <HAL_DMA_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 80014d0:	f7ff ff5c 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2105      	movs	r1, #5
 80014e4:	2012      	movs	r0, #18
 80014e6:	f002 f885 	bl	80035f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80014ea:	2012      	movs	r0, #18
 80014ec:	f002 f89c 	bl	8003628 <HAL_NVIC_EnableIRQ>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	50040000 	.word	0x50040000
 800159c:	20000124 	.word	0x20000124
 80015a0:	40020030 	.word	0x40020030

080015a4 <HAL_I2C_MspInit>:
=======
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	50040000 	.word	0x50040000
 80014fc:	2000010c 	.word	0x2000010c
 8001500:	40020030 	.word	0x40020030

08001504 <HAL_I2C_MspInit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b09c      	sub	sp, #112	; 0x70
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
<<<<<<< HEAD
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2250      	movs	r2, #80	; 0x50
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00d fbf1 	bl	800edac <memset>
=======
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2250      	movs	r2, #80	; 0x50
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f00d ff73 	bl	800f410 <memset>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  if(hi2c->Instance==I2C1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_I2C_MspInit+0x88>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d126      	bne.n	8001622 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015d4:	2304      	movs	r3, #4
 80015d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015d8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fb02 	bl	8005bec <HAL_RCCEx_PeriphCLKConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015ee:	f7ff ff1d 	bl	800142c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2002      	movs	r0, #2
 80015f4:	f7ff ff1f 	bl	8001436 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fe:	2312      	movs	r3, #18
 8001600:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160a:	2304      	movs	r3, #4
 800160c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001612:	4619      	mov	r1, r3
 8001614:	4806      	ldr	r0, [pc, #24]	; (8001630 <HAL_I2C_MspInit+0x8c>)
 8001616:	f002 fb7f 	bl	8003d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800161e:	f7ff ff23 	bl	8001468 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3770      	adds	r7, #112	; 0x70
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40005400 	.word	0x40005400
 8001630:	48000400 	.word	0x48000400

<<<<<<< HEAD
08001634 <HAL_UART_MspInit>:
=======
08001594 <HAL_UART_MspInit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8001634:	b580      	push	{r7, lr}
 8001636:	b09c      	sub	sp, #112	; 0x70
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2250      	movs	r2, #80	; 0x50
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f00d fba9 	bl	800edac <memset>
  if(huart->Instance==USART1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a43      	ldr	r2, [pc, #268]	; (800176c <HAL_UART_MspInit+0x138>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d17f      	bne.n	8001764 <HAL_UART_MspInit+0x130>
=======
 8001594:	b580      	push	{r7, lr}
 8001596:	b09c      	sub	sp, #112	; 0x70
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2250      	movs	r2, #80	; 0x50
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00d ff2b 	bl	800f410 <memset>
  if(huart->Instance==USART1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a43      	ldr	r2, [pc, #268]	; (80016cc <HAL_UART_MspInit+0x138>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d17f      	bne.n	80016c4 <HAL_UART_MspInit+0x130>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
<<<<<<< HEAD
 8001664:	2301      	movs	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4618      	mov	r0, r3
 8001672:	f004 fabb 	bl	8005bec <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800167c:	f7ff fed6 	bl	800142c <Error_Handler>
=======
 80015c4:	2301      	movs	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fe3d 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015dc:	f7ff fed6 	bl	800138c <Error_Handler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 8001680:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001684:	f7ff ff09 	bl	800149a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	2002      	movs	r0, #2
 800168a:	f7ff fed4 	bl	8001436 <LL_AHB2_GRP1_EnableClock>
=======
 80015e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015e4:	f7ff ff09 	bl	80013fa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	2002      	movs	r0, #2
 80015ea:	f7ff fed4 	bl	8001396 <LL_AHB2_GRP1_EnableClock>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
<<<<<<< HEAD
 800168e:	23c0      	movs	r3, #192	; 0xc0
 8001690:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001696:	2301      	movs	r3, #1
 8001698:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800169e:	2307      	movs	r3, #7
 80016a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016a6:	4619      	mov	r1, r3
 80016a8:	4831      	ldr	r0, [pc, #196]	; (8001770 <HAL_UART_MspInit+0x13c>)
 80016aa:	f002 fb35 	bl	8003d18 <HAL_GPIO_Init>
=======
 80015ee:	23c0      	movs	r3, #192	; 0xc0
 80015f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015fe:	2307      	movs	r3, #7
 8001600:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001606:	4619      	mov	r1, r3
 8001608:	4831      	ldr	r0, [pc, #196]	; (80016d0 <HAL_UART_MspInit+0x13c>)
 800160a:	f002 fb59 	bl	8003cc0 <HAL_GPIO_Init>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
<<<<<<< HEAD
 80016ae:	4b31      	ldr	r3, [pc, #196]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016b0:	4a31      	ldr	r2, [pc, #196]	; (8001778 <HAL_UART_MspInit+0x144>)
 80016b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016b6:	220e      	movs	r2, #14
 80016b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016cc:	4b29      	ldr	r3, [pc, #164]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d2:	4b28      	ldr	r3, [pc, #160]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016e4:	4823      	ldr	r0, [pc, #140]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016e6:	f001 ffd9 	bl	800369c <HAL_DMA_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80016f0:	f7ff fe9c 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_UART_MspInit+0x148>)
 8001704:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <HAL_UART_MspInit+0x14c>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_UART_MspInit+0x148>)
 800170a:	220f      	movs	r2, #15
 800170c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_UART_MspInit+0x148>)
 8001710:	2210      	movs	r2, #16
 8001712:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_UART_MspInit+0x148>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_UART_MspInit+0x148>)
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_UART_MspInit+0x148>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_UART_MspInit+0x148>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_UART_MspInit+0x148>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_UART_MspInit+0x148>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001738:	4810      	ldr	r0, [pc, #64]	; (800177c <HAL_UART_MspInit+0x148>)
 800173a:	f001 ffaf 	bl	800369c <HAL_DMA_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001744:	f7ff fe72 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_UART_MspInit+0x148>)
 800174c:	67da      	str	r2, [r3, #124]	; 0x7c
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_UART_MspInit+0x148>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2105      	movs	r1, #5
 8001758:	2024      	movs	r0, #36	; 0x24
 800175a:	f001 ff77 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800175e:	2024      	movs	r0, #36	; 0x24
 8001760:	f001 ff8e 	bl	8003680 <HAL_NVIC_EnableIRQ>
=======
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001610:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <HAL_UART_MspInit+0x144>)
 8001612:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001616:	220e      	movs	r2, #14
 8001618:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161a:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001620:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001644:	4823      	ldr	r0, [pc, #140]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001646:	f001 fffd 	bl	8003644 <HAL_DMA_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001650:	f7ff fe9c 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001664:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <HAL_UART_MspInit+0x14c>)
 8001666:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_UART_MspInit+0x148>)
 800166a:	220f      	movs	r2, #15
 800166c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001670:	2210      	movs	r2, #16
 8001672:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_UART_MspInit+0x148>)
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_UART_MspInit+0x148>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001698:	4810      	ldr	r0, [pc, #64]	; (80016dc <HAL_UART_MspInit+0x148>)
 800169a:	f001 ffd3 	bl	8003644 <HAL_DMA_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 80016a4:	f7ff fe72 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <HAL_UART_MspInit+0x148>)
 80016ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_UART_MspInit+0x148>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2105      	movs	r1, #5
 80016b8:	2024      	movs	r0, #36	; 0x24
 80016ba:	f001 ff9b 	bl	80035f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016be:	2024      	movs	r0, #36	; 0x24
 80016c0:	f001 ffb2 	bl	8003628 <HAL_NVIC_EnableIRQ>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001764:	bf00      	nop
 8001766:	3770      	adds	r7, #112	; 0x70
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40013800 	.word	0x40013800
 8001770:	48000400 	.word	0x48000400
 8001774:	2000026c 	.word	0x2000026c
 8001778:	40020008 	.word	0x40020008
 800177c:	200002cc 	.word	0x200002cc
 8001780:	4002001c 	.word	0x4002001c

08001784 <HAL_PCD_MspInit>:
=======
 80016c4:	bf00      	nop
 80016c6:	3770      	adds	r7, #112	; 0x70
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40013800 	.word	0x40013800
 80016d0:	48000400 	.word	0x48000400
 80016d4:	20000254 	.word	0x20000254
 80016d8:	40020008 	.word	0x40020008
 80016dc:	200002b4 	.word	0x200002b4
 80016e0:	4002001c 	.word	0x4002001c

080016e4 <HAL_PCD_MspInit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
<<<<<<< HEAD
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_PCD_MspInit+0x5c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d118      	bne.n	80017d8 <HAL_PCD_MspInit+0x54>
=======
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <HAL_PCD_MspInit+0x5c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d118      	bne.n	8001738 <HAL_PCD_MspInit+0x54>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff fe45 	bl	8001436 <LL_AHB2_GRP1_EnableClock>
=======
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fe45 	bl	8001396 <LL_AHB2_GRP1_EnableClock>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< HEAD
 80017ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80017be:	230a      	movs	r3, #10
 80017c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017cc:	f002 faa4 	bl	8003d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80017d0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80017d4:	f7ff fe48 	bl	8001468 <LL_APB1_GRP1_EnableClock>
=======
 800170c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001710:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800171e:	230a      	movs	r3, #10
 8001720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172c:	f002 fac8 	bl	8003cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001730:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001734:	f7ff fe48 	bl	80013c8 <LL_APB1_GRP1_EnableClock>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
<<<<<<< HEAD
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40006800 	.word	0x40006800

080017e4 <LL_APB2_GRP1_EnableClock>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80017ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001800:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001808:	68fb      	ldr	r3, [r7, #12]
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <HAL_InitTick>:
=======
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40006800 	.word	0x40006800

08001744 <LL_APB2_GRP1_EnableClock>:
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4313      	orrs	r3, r2
 800175a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001768:	68fb      	ldr	r3, [r7, #12]
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_InitTick>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	; 0x30
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001828:	2200      	movs	r2, #0
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	2019      	movs	r0, #25
 800182e:	f001 ff0d 	bl	800364c <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001832:	2019      	movs	r0, #25
 8001834:	f001 ff24 	bl	8003680 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001838:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800183c:	f7ff ffd2 	bl	80017e4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001840:	f107 0208 	add.w	r2, r7, #8
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	4611      	mov	r1, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f003 ff3c 	bl	80056c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001850:	f003 ff24 	bl	800569c <HAL_RCC_GetPCLK2Freq>
 8001854:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <HAL_InitTick+0x8c>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9b      	lsrs	r3, r3, #18
 8001860:	3b01      	subs	r3, #1
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_InitTick+0x90>)
 8001866:	4a11      	ldr	r2, [pc, #68]	; (80018ac <HAL_InitTick+0x94>)
 8001868:	601a      	str	r2, [r3, #0]
=======
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	2019      	movs	r0, #25
 800178e:	f001 ff31 	bl	80035f4 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001792:	2019      	movs	r0, #25
 8001794:	f001 ff48 	bl	8003628 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001798:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800179c:	f7ff ffd2 	bl	8001744 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a0:	f107 0208 	add.w	r2, r7, #8
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fabe 	bl	8005d2c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017b0:	f004 faa6 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 80017b4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_InitTick+0x8c>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0c9b      	lsrs	r3, r3, #18
 80017c0:	3b01      	subs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_InitTick+0x90>)
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_InitTick+0x94>)
 80017c8:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< HEAD
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_InitTick+0x90>)
 800186c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001870:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001872:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <HAL_InitTick+0x90>)
 8001874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001876:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_InitTick+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_InitTick+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <HAL_InitTick+0x90>)
 8001886:	f004 fc3e 	bl	8006106 <HAL_TIM_Base_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d104      	bne.n	800189a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <HAL_InitTick+0x90>)
 8001892:	f004 fc99 	bl	80061c8 <HAL_TIM_Base_Start_IT>
 8001896:	4603      	mov	r3, r0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x84>
=======
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_InitTick+0x90>)
 80017cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d0:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80017d2:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_InitTick+0x90>)
 80017d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d6:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_InitTick+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_InitTick+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <HAL_InitTick+0x90>)
 80017e6:	f004 ffc0 	bl	800676a <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_InitTick+0x90>)
 80017f2:	f005 f81b 	bl	800682c <HAL_TIM_Base_Start_IT>
 80017f6:	4603      	mov	r3, r0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x84>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Return function status */
  return HAL_ERROR;
<<<<<<< HEAD
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3730      	adds	r7, #48	; 0x30
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	431bde83 	.word	0x431bde83
 80018a8:	2000077c 	.word	0x2000077c
 80018ac:	40014400 	.word	0x40014400

080018b0 <NMI_Handler>:
=======
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	431bde83 	.word	0x431bde83
 8001808:	20000764 	.word	0x20000764
 800180c:	40014400 	.word	0x40014400

08001810 <NMI_Handler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
=======
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:
=======
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
=======
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:
=======
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
=======
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:
=======
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
=======
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:
=======
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
=======
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <DebugMon_Handler>:
=======
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <DebugMon_Handler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
=======
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DMA1_Channel1_IRQHandler>:
=======
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DMA1_Channel1_IRQHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
<<<<<<< HEAD
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
=======
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
<<<<<<< HEAD
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA1_Channel1_IRQHandler+0x10>)
 80018e2:	f002 f8bc 	bl	8003a5e <HAL_DMA_IRQHandler>
=======
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Channel1_IRQHandler+0x10>)
 8001842:	f002 f8e0 	bl	8003a06 <HAL_DMA_IRQHandler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
<<<<<<< HEAD
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000026c 	.word	0x2000026c

080018f0 <DMA1_Channel2_IRQHandler>:
=======
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000254 	.word	0x20000254

08001850 <DMA1_Channel2_IRQHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
<<<<<<< HEAD
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
=======
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
<<<<<<< HEAD
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <DMA1_Channel2_IRQHandler+0x10>)
 80018f6:	f002 f8b2 	bl	8003a5e <HAL_DMA_IRQHandler>
=======
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA1_Channel2_IRQHandler+0x10>)
 8001856:	f002 f8d6 	bl	8003a06 <HAL_DMA_IRQHandler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
<<<<<<< HEAD
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002cc 	.word	0x200002cc

08001904 <DMA1_Channel3_IRQHandler>:
=======
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200002b4 	.word	0x200002b4

08001864 <DMA1_Channel3_IRQHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
<<<<<<< HEAD
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
=======
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA1_Channel3_IRQHandler+0x10>)
 800190a:	f002 f8a8 	bl	8003a5e <HAL_DMA_IRQHandler>
=======
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA1_Channel3_IRQHandler+0x10>)
 800186a:	f002 f8cc 	bl	8003a06 <HAL_DMA_IRQHandler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
<<<<<<< HEAD
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000124 	.word	0x20000124

08001918 <ADC1_IRQHandler>:
=======
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000010c 	.word	0x2000010c

08001878 <ADC1_IRQHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
<<<<<<< HEAD
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
=======
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
<<<<<<< HEAD
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <ADC1_IRQHandler+0x10>)
 800191e:	f000 fd58 	bl	80023d2 <HAL_ADC_IRQHandler>
=======
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <ADC1_IRQHandler+0x10>)
 800187e:	f000 fd7c 	bl	800237a <HAL_ADC_IRQHandler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
<<<<<<< HEAD
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200000c0 	.word	0x200000c0

0800192c <TIM1_UP_TIM16_IRQHandler>:
=======
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200000a8 	.word	0x200000a8

0800188c <TIM1_UP_TIM16_IRQHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
<<<<<<< HEAD
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
=======
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
<<<<<<< HEAD
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001932:	f004 fc97 	bl	8006264 <HAL_TIM_IRQHandler>
=======
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001892:	f005 f819 	bl	80068c8 <HAL_TIM_IRQHandler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
<<<<<<< HEAD
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000077c 	.word	0x2000077c

08001940 <USART1_IRQHandler>:
=======
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000764 	.word	0x20000764

080018a0 <USART1_IRQHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
=======
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <USART1_IRQHandler+0x10>)
 8001946:	f005 f96d 	bl	8006c24 <HAL_UART_IRQHandler>
=======
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <USART1_IRQHandler+0x10>)
 80018a6:	f005 fcef 	bl	8007288 <HAL_UART_IRQHandler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200001d8 	.word	0x200001d8

08001954 <SystemInit>:
=======
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001c0 	.word	0x200001c0

080018b4 <SystemInit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
=======
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <SystemInit+0x98>)
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195e:	4a23      	ldr	r2, [pc, #140]	; (80019ec <SystemInit+0x98>)
 8001960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <SystemInit+0x98>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a23      	ldr	r2, [pc, #140]	; (800194c <SystemInit+0x98>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
<<<<<<< HEAD
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001980:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <SystemInit+0x9c>)
 800198e:	4013      	ands	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199e:	f023 0305 	bic.w	r3, r3, #5
 80019a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80019ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019be:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <SystemInit+0xa0>)
 80019c0:	60da      	str	r2, [r3, #12]
=======
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80018e0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <SystemInit+0x9c>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fe:	f023 0305 	bic.w	r3, r3, #5
 8001902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <SystemInit+0xa0>)
 8001920:	60da      	str	r2, [r3, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
<<<<<<< HEAD
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <SystemInit+0xa0>)
 80019c8:	611a      	str	r2, [r3, #16]
=======
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <SystemInit+0xa0>)
 8001928:	611a      	str	r2, [r3, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
<<<<<<< HEAD
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00
 80019f0:	faf6fefb 	.word	0xfaf6fefb
 80019f4:	22041000 	.word	0x22041000

080019f8 <CopyDataInit>:
=======
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001938:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	faf6fefb 	.word	0xfaf6fefb
 8001954:	22041000 	.word	0x22041000

08001958 <CopyDataInit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
<<<<<<< HEAD
 80019f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fc:	3304      	adds	r3, #4

080019fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a00:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001a02:	d3f9      	bcc.n	80019f8 <CopyDataInit>
  bx lr
 8001a04:	4770      	bx	lr

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001a06:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001a08:	3004      	adds	r0, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001a0a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>
  bx lr
 8001a0e:	4770      	bx	lr

08001a10 <Reset_Handler>:
=======
 8001958:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195c:	3304      	adds	r3, #4

0800195e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001960:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001962:	d3f9      	bcc.n	8001958 <CopyDataInit>
  bx lr
 8001964:	4770      	bx	lr

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001966:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001968:	3004      	adds	r0, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800196a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>
  bx lr
 800196e:	4770      	bx	lr

08001970 <Reset_Handler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< HEAD
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a14:	f7ff ff9e 	bl	8001954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001a18:	480b      	ldr	r0, [pc, #44]	; (8001a48 <LoopForever+0x6>)
 8001a1a:	490c      	ldr	r1, [pc, #48]	; (8001a4c <LoopForever+0xa>)
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <LoopForever+0xe>)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f7ff ffed 	bl	80019fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a24:	480b      	ldr	r0, [pc, #44]	; (8001a54 <LoopForever+0x12>)
 8001a26:	490c      	ldr	r1, [pc, #48]	; (8001a58 <LoopForever+0x16>)
 8001a28:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <LoopForever+0x1a>)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f7ff ffe7 	bl	80019fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <LoopForever+0x1e>)
 8001a32:	490c      	ldr	r1, [pc, #48]	; (8001a64 <LoopForever+0x22>)
 8001a34:	2300      	movs	r3, #0
 8001a36:	f7ff ffe8 	bl	8001a0a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a3a:	f00d f9bf 	bl	800edbc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a3e:	f7ff fa13 	bl	8000e68 <main>

08001a42 <LoopForever>:

LoopForever:
  b LoopForever
 8001a42:	e7fe      	b.n	8001a42 <LoopForever>
  ldr   r0, =_estack
 8001a44:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	2000007c 	.word	0x2000007c
 8001a50:	0800f0f4 	.word	0x0800f0f4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a54:	20030000 	.word	0x20030000
 8001a58:	20030000 	.word	0x20030000
 8001a5c:	0800f168 	.word	0x0800f168
  INIT_BSS _sbss, _ebss
 8001a60:	20000080 	.word	0x20000080
 8001a64:	20002128 	.word	0x20002128

08001a68 <AES1_IRQHandler>:
=======
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001972:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001974:	f7ff ff9e 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <LoopForever+0x6>)
 800197a:	490c      	ldr	r1, [pc, #48]	; (80019ac <LoopForever+0xa>)
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <LoopForever+0xe>)
 800197e:	2300      	movs	r3, #0
 8001980:	f7ff ffed 	bl	800195e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001984:	480b      	ldr	r0, [pc, #44]	; (80019b4 <LoopForever+0x12>)
 8001986:	490c      	ldr	r1, [pc, #48]	; (80019b8 <LoopForever+0x16>)
 8001988:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <LoopForever+0x1a>)
 800198a:	2300      	movs	r3, #0
 800198c:	f7ff ffe7 	bl	800195e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <LoopForever+0x1e>)
 8001992:	490c      	ldr	r1, [pc, #48]	; (80019c4 <LoopForever+0x22>)
 8001994:	2300      	movs	r3, #0
 8001996:	f7ff ffe8 	bl	800196a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800199a:	f00d fd41 	bl	800f420 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800199e:	f7ff fa11 	bl	8000dc4 <main>

080019a2 <LoopForever>:

LoopForever:
  b LoopForever
 80019a2:	e7fe      	b.n	80019a2 <LoopForever>
  ldr   r0, =_estack
 80019a4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000054 	.word	0x20000054
 80019b0:	0800f71c 	.word	0x0800f71c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019b4:	20030000 	.word	0x20030000
 80019b8:	20030000 	.word	0x20030000
 80019bc:	0800f768 	.word	0x0800f768
  INIT_BSS _sbss, _ebss
 80019c0:	20000058 	.word	0x20000058
 80019c4:	20002518 	.word	0x20002518

080019c8 <AES1_IRQHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8001a68:	e7fe      	b.n	8001a68 <AES1_IRQHandler>
	...

08001a6c <HAL_Init>:
=======
 80019c8:	e7fe      	b.n	80019c8 <AES1_IRQHandler>
	...

080019cc <HAL_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	71fb      	strb	r3, [r7, #7]
=======
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_Init+0x3c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_Init+0x3c>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6013      	str	r3, [r2, #0]
=======
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_Init+0x3c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <HAL_Init+0x3c>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001a82:	2003      	movs	r0, #3
 8001a84:	f001 fdd7 	bl	8003636 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a88:	200f      	movs	r0, #15
 8001a8a:	f7ff fec5 	bl	8001818 <HAL_InitTick>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	e001      	b.n	8001a9e <HAL_Init+0x32>
=======
 80019e2:	2003      	movs	r0, #3
 80019e4:	f001 fdfb 	bl	80035de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e8:	200f      	movs	r0, #15
 80019ea:	f7ff fec5 	bl	8001778 <HAL_InitTick>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	e001      	b.n	80019fe <HAL_Init+0x32>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< HEAD
 8001a9a:	f7ff fd17 	bl	80014cc <HAL_MspInit>
=======
 80019fa:	f7ff fd17 	bl	800142c <HAL_MspInit>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	58004000 	.word	0x58004000

08001aac <HAL_IncTick>:
=======
 80019fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	58004000 	.word	0x58004000

08001a0c <HAL_IncTick>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x20>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_IncTick+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000074 	.word	0x20000074
 8001ad0:	200007c8 	.word	0x200007c8

08001ad4 <HAL_GetTick>:
=======
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	2000004c 	.word	0x2000004c
 8001a30:	200007b0 	.word	0x200007b0

08001a34 <HAL_GetTick>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_GetTick+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	200007c8 	.word	0x200007c8

08001aec <HAL_GetTickPrio>:
=======
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	200007b0 	.word	0x200007b0

08001a4c <HAL_GetTickPrio>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
<<<<<<< HEAD
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_GetTickPrio+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000070 	.word	0x20000070

08001b04 <LL_ADC_SetCommonClock>:
=======
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTickPrio+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000048 	.word	0x20000048

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff ffe2 	bl	8001a34 <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_Delay+0x44>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffd2 	bl	8001a34 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000004c 	.word	0x2000004c

08001aac <LL_ADC_SetCommonClock>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
<<<<<<< HEAD
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
=======
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
<<<<<<< HEAD
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_ADC_SetCommonPathInternalCh>:
=======
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_SetCommonPathInternalCh>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
<<<<<<< HEAD
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	609a      	str	r2, [r3, #8]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_GetCommonPathInternalCh>:
=======
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_GetCommonPathInternalCh>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< HEAD
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_SetOffset>:
=======
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_SetOffset>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
<<<<<<< HEAD
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3360      	adds	r3, #96	; 0x60
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <LL_ADC_SetOffset+0x44>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ba4:	bf00      	nop
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	03fff000 	.word	0x03fff000

08001bb4 <LL_ADC_GetOffsetChannel>:
=======
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3360      	adds	r3, #96	; 0x60
 8001b26:	461a      	mov	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <LL_ADC_SetOffset+0x44>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	03fff000 	.word	0x03fff000

08001b5c <LL_ADC_GetOffsetChannel>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
<<<<<<< HEAD
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3360      	adds	r3, #96	; 0x60
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_SetOffsetState>:
=======
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3360      	adds	r3, #96	; 0x60
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_SetOffsetState>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
<<<<<<< HEAD
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3360      	adds	r3, #96	; 0x60
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	431a      	orrs	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_REG_IsTriggerSourceSWStart>:
=======
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3360      	adds	r3, #96	; 0x60
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bb2:	bf00      	nop
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_REG_IsTriggerSourceSWStart>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
=======
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
<<<<<<< HEAD
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c2e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_REG_SetSequencerRanks>:
=======
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bd6:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_REG_SetSequencerRanks>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
<<<<<<< HEAD
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
=======
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
<<<<<<< HEAD
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3330      	adds	r3, #48	; 0x30
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	211f      	movs	r1, #31
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	f003 011f 	and.w	r1, r3, #31
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	431a      	orrs	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]
=======
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3330      	adds	r3, #48	; 0x30
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	211f      	movs	r1, #31
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	401a      	ands	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0e9b      	lsrs	r3, r3, #26
 8001c1c:	f003 011f 	and.w	r1, r3, #31
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
<<<<<<< HEAD
 8001c88:	bf00      	nop
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_REG_GetDMATransfer>:
=======
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_REG_GetDMATransfer>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
=======
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
<<<<<<< HEAD
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
=======
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_INJ_IsTriggerSourceSWStart>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_SetChannelSamplingTime>:
=======
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_SetChannelSamplingTime>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
<<<<<<< HEAD
 8001cd6:	b480      	push	{r7}
 8001cd8:	b087      	sub	sp, #28
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
=======
 8001c7e:	b480      	push	{r7}
 8001c80:	b087      	sub	sp, #28
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
<<<<<<< HEAD
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3314      	adds	r3, #20
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	0e5b      	lsrs	r3, r3, #25
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	4413      	add	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	681a      	ldr	r2, [r3, #0]
=======
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3314      	adds	r3, #20
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	0e5b      	lsrs	r3, r3, #25
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	0d1b      	lsrs	r3, r3, #20
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2107      	movs	r1, #7
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	0d1b      	lsrs	r3, r3, #20
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0318 	and.w	r3, r3, #24
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cf8:	40d9      	lsrs	r1, r3
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	0d1b      	lsrs	r3, r3, #20
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	2107      	movs	r1, #7
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	0d1b      	lsrs	r3, r3, #20
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d20:	bf00      	nop
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d44:	43db      	mvns	r3, r3
 8001d46:	401a      	ands	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0318 	and.w	r3, r3, #24
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d50:	40d9      	lsrs	r1, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	400b      	ands	r3, r1
 8001d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	0007ffff 	.word	0x0007ffff

08001d74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
=======
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
<<<<<<< HEAD
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6093      	str	r3, [r2, #8]
=======
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6093      	str	r3, [r2, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

<<<<<<< HEAD
08001d98 <LL_ADC_IsDeepPowerDownEnabled>:
=======
08001d40 <LL_ADC_IsDeepPowerDownEnabled>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
=======
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dac:	d101      	bne.n	8001db2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
=======
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_IsInternalRegulatorEnabled>:
=======
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_IsInternalRegulatorEnabled>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dfc:	d101      	bne.n	8001e02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_Enable>:
=======
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001da4:	d101      	bne.n	8001daa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_Enable>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e4c:	f043 0202 	orr.w	r2, r3, #2
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <LL_ADC_IsEnabled+0x18>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <LL_ADC_IsEnabled+0x1a>
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d101      	bne.n	8001e9e <LL_ADC_IsDisableOngoing+0x18>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_ADC_IsDisableOngoing+0x1a>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec0:	f043 0204 	orr.w	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ee8:	f043 0210 	orr.w	r2, r3, #16
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d101      	bne.n	8001f14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f36:	f043 0220 	orr.w	r2, r3, #32
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d101      	bne.n	8001f62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

<<<<<<< HEAD
08001f70 <HAL_ADC_Init>:
=======
08001f18 <HAL_ADC_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
=======
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
<<<<<<< HEAD
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e12e      	b.n	80021ec <HAL_ADC_Init+0x27c>
=======
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e12e      	b.n	8002194 <HAL_ADC_Init+0x27c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b00      	cmp	r3, #0
=======
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d109      	bne.n	8001fb0 <HAL_ADC_Init+0x40>
=======
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_Init+0x40>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fa9f 	bl	80014e0 <HAL_ADC_MspInit>
=======
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fa7b 	bl	8001440 <HAL_ADC_MspInit>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff feef 	bl	8001d98 <LL_ADC_IsDeepPowerDownEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d004      	beq.n	8001fca <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fed5 	bl	8001d74 <LL_ADC_DisableDeepPowerDown>
=======
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff feef 	bl	8001d40 <LL_ADC_IsDeepPowerDownEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fed5 	bl	8001d1c <LL_ADC_DisableDeepPowerDown>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff0a 	bl	8001de8 <LL_ADC_IsInternalRegulatorEnabled>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d115      	bne.n	8002006 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff feee 	bl	8001dc0 <LL_ADC_EnableInternalRegulator>
=======
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff0a 	bl	8001d90 <LL_ADC_IsInternalRegulatorEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff feee 	bl	8001d68 <LL_ADC_EnableInternalRegulator>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8001fe4:	4b83      	ldr	r3, [pc, #524]	; (80021f4 <HAL_ADC_Init+0x284>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	4a83      	ldr	r2, [pc, #524]	; (80021f8 <HAL_ADC_Init+0x288>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ff8:	e002      	b.n	8002000 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f9      	bne.n	8001ffa <HAL_ADC_Init+0x8a>
=======
 8001f8c:	4b83      	ldr	r3, [pc, #524]	; (800219c <HAL_ADC_Init+0x284>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	4a83      	ldr	r2, [pc, #524]	; (80021a0 <HAL_ADC_Init+0x288>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f9      	bne.n	8001fa2 <HAL_ADC_Init+0x8a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff feec 	bl	8001de8 <LL_ADC_IsInternalRegulatorEnabled>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f043 0210 	orr.w	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	77fb      	strb	r3, [r7, #31]
=======
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff feec 	bl	8001d90 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f043 0210 	orr.w	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	77fb      	strb	r3, [r7, #31]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff60 	bl	8001efc <LL_ADC_REG_IsConversionOngoing>
 800203c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 80c7 	bne.w	80021da <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 80c3 	bne.w	80021da <HAL_ADC_Init+0x26a>
=======
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff60 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8001fe4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 80c7 	bne.w	8002182 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80c3 	bne.w	8002182 <HAL_ADC_Init+0x26a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800205c:	f043 0202 	orr.w	r2, r3, #2
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002004:	f043 0202 	orr.w	r2, r3, #2
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fef9 	bl	8001e60 <LL_ADC_IsEnabled>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10b      	bne.n	800208c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002074:	4861      	ldr	r0, [pc, #388]	; (80021fc <HAL_ADC_Init+0x28c>)
 8002076:	f7ff fef3 	bl	8001e60 <LL_ADC_IsEnabled>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <HAL_ADC_Init+0x11c>
=======
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fef9 	bl	8001e08 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800201c:	4861      	ldr	r0, [pc, #388]	; (80021a4 <HAL_ADC_Init+0x28c>)
 800201e:	f7ff fef3 	bl	8001e08 <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <HAL_ADC_Init+0x11c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
<<<<<<< HEAD
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4619      	mov	r1, r3
 8002086:	485e      	ldr	r0, [pc, #376]	; (8002200 <HAL_ADC_Init+0x290>)
 8002088:	f7ff fd3c 	bl	8001b04 <LL_ADC_SetCommonClock>
=======
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4619      	mov	r1, r3
 800202e:	485e      	ldr	r0, [pc, #376]	; (80021a8 <HAL_ADC_Init+0x290>)
 8002030:	f7ff fd3c 	bl	8001aac <LL_ADC_SetCommonClock>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
<<<<<<< HEAD
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7e5b      	ldrb	r3, [r3, #25]
 8002090:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002096:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800209c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80020a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020aa:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80020ac:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d106      	bne.n	80020cc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	3b01      	subs	r3, #1
 80020c4:	045b      	lsls	r3, r3, #17
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
=======
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7e5b      	ldrb	r3, [r3, #25]
 8002038:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800203e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002044:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800204a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002052:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002054:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d106      	bne.n	8002074 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	3b01      	subs	r3, #1
 800206c:	045b      	lsls	r3, r3, #17
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
=======
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d009      	beq.n	8002090 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
<<<<<<< HEAD
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	4b45      	ldr	r3, [pc, #276]	; (8002204 <HAL_ADC_Init+0x294>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	60d3      	str	r3, [r2, #12]
=======
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	4b45      	ldr	r3, [pc, #276]	; (80021ac <HAL_ADC_Init+0x294>)
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fefb 	bl	8001efc <LL_ADC_REG_IsConversionOngoing>
 8002106:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff1c 	bl	8001f4a <LL_ADC_INJ_IsConversionOngoing>
 8002112:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d13d      	bne.n	8002196 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d13a      	bne.n	8002196 <HAL_ADC_Init+0x226>
=======
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fefb 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 80020ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff1c 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 80020ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d13d      	bne.n	800213e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d13a      	bne.n	800213e <HAL_ADC_Init+0x226>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
<<<<<<< HEAD
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002124:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800212c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800213c:	f023 0302 	bic.w	r3, r3, #2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	69b9      	ldr	r1, [r7, #24]
 8002146:	430b      	orrs	r3, r1
 8002148:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002150:	2b01      	cmp	r3, #1
 8002152:	d118      	bne.n	8002186 <HAL_ADC_Init+0x216>
=======
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020cc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020e4:	f023 0302 	bic.w	r3, r3, #2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	69b9      	ldr	r1, [r7, #24]
 80020ee:	430b      	orrs	r3, r1
 80020f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d118      	bne.n	800212e <HAL_ADC_Init+0x216>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
<<<<<<< HEAD
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800215e:	f023 0304 	bic.w	r3, r3, #4
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002170:	4311      	orrs	r1, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002176:	430a      	orrs	r2, r1
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	611a      	str	r2, [r3, #16]
 8002184:	e007      	b.n	8002196 <HAL_ADC_Init+0x226>
=======
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002106:	f023 0304 	bic.w	r3, r3, #4
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002118:	4311      	orrs	r1, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800211e:	430a      	orrs	r2, r1
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	611a      	str	r2, [r3, #16]
 800212c:	e007      	b.n	800213e <HAL_ADC_Init+0x226>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
<<<<<<< HEAD
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	611a      	str	r2, [r3, #16]
=======
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	611a      	str	r2, [r3, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d10c      	bne.n	80021b8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	f023 010f 	bic.w	r1, r3, #15
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	1e5a      	subs	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
 80021b6:	e007      	b.n	80021c8 <HAL_ADC_Init+0x258>
=======
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10c      	bne.n	8002160 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f023 010f 	bic.w	r1, r3, #15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	1e5a      	subs	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
 800215e:	e007      	b.n	8002170 <HAL_ADC_Init+0x258>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
<<<<<<< HEAD
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 020f 	bic.w	r2, r2, #15
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 020f 	bic.w	r2, r2, #15
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
<<<<<<< HEAD
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	f023 0303 	bic.w	r3, r3, #3
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54
 80021d8:	e007      	b.n	80021ea <HAL_ADC_Init+0x27a>
=======
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f023 0303 	bic.w	r3, r3, #3
 8002178:	f043 0201 	orr.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
 8002180:	e007      	b.n	8002192 <HAL_ADC_Init+0x27a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	f043 0210 	orr.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	77fb      	strb	r3, [r7, #31]
=======
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	77fb      	strb	r3, [r7, #31]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 80021ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	2000006c 	.word	0x2000006c
 80021f8:	053e2d63 	.word	0x053e2d63
 80021fc:	50040000 	.word	0x50040000
 8002200:	50040300 	.word	0x50040300
 8002204:	fff0c007 	.word	0xfff0c007

08002208 <HAL_ADC_Start_DMA>:
=======
 8002192:	7ffb      	ldrb	r3, [r7, #31]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3720      	adds	r7, #32
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000044 	.word	0x20000044
 80021a0:	053e2d63 	.word	0x053e2d63
 80021a4:	50040000 	.word	0x50040000
 80021a8:	50040300 	.word	0x50040300
 80021ac:	fff0c007 	.word	0xfff0c007

080021b0 <HAL_ADC_Start_DMA>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
<<<<<<< HEAD
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
=======
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fe6f 	bl	8001efc <LL_ADC_REG_IsConversionOngoing>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d167      	bne.n	80022f4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_ADC_Start_DMA+0x2a>
 800222e:	2302      	movs	r3, #2
 8002230:	e063      	b.n	80022fa <HAL_ADC_Start_DMA+0xf2>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 ff20 	bl	8003080 <ADC_Enable>
 8002240:	4603      	mov	r3, r0
 8002242:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d14f      	bne.n	80022ea <HAL_ADC_Start_DMA+0xe2>
=======
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fe6f 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d167      	bne.n	800229c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Start_DMA+0x2a>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e063      	b.n	80022a2 <HAL_ADC_Start_DMA+0xf2>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 ff20 	bl	8003028 <ADC_Enable>
 80021e8:	4603      	mov	r3, r0
 80021ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d14f      	bne.n	8002292 <HAL_ADC_Start_DMA+0xe2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
<<<<<<< HEAD
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	f023 0206 	bic.w	r2, r3, #6
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	659a      	str	r2, [r3, #88]	; 0x58
 8002276:	e002      	b.n	800227e <HAL_ADC_Start_DMA+0x76>
=======
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f023 0206 	bic.w	r2, r3, #6
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	659a      	str	r2, [r3, #88]	; 0x58
 800221e:	e002      	b.n	8002226 <HAL_ADC_Start_DMA+0x76>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	659a      	str	r2, [r3, #88]	; 0x58
=======
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
<<<<<<< HEAD
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	4a20      	ldr	r2, [pc, #128]	; (8002304 <HAL_ADC_Start_DMA+0xfc>)
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <HAL_ADC_Start_DMA+0x100>)
 800228c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4a1e      	ldr	r2, [pc, #120]	; (800230c <HAL_ADC_Start_DMA+0x104>)
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	4a20      	ldr	r2, [pc, #128]	; (80022ac <HAL_ADC_Start_DMA+0xfc>)
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <HAL_ADC_Start_DMA+0x100>)
 8002234:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_ADC_Start_DMA+0x104>)
 800223c:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
<<<<<<< HEAD
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	221c      	movs	r2, #28
 800229c:	601a      	str	r2, [r3, #0]
=======
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	221c      	movs	r2, #28
 8002244:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
<<<<<<< HEAD
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0210 	orr.w	r2, r2, #16
 80022b4:	605a      	str	r2, [r3, #4]
=======
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0210 	orr.w	r2, r2, #16
 800225c:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
<<<<<<< HEAD
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0201 	orr.w	r2, r2, #1
 80022c4:	60da      	str	r2, [r3, #12]
=======
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	60da      	str	r2, [r3, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
<<<<<<< HEAD
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3340      	adds	r3, #64	; 0x40
 80022d0:	4619      	mov	r1, r3
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f001 fa89 	bl	80037ec <HAL_DMA_Start_IT>
 80022da:	4603      	mov	r3, r0
 80022dc:	75fb      	strb	r3, [r7, #23]
=======
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3340      	adds	r3, #64	; 0x40
 8002278:	4619      	mov	r1, r3
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f001 fa89 	bl	8003794 <HAL_DMA_Start_IT>
 8002282:	4603      	mov	r3, r0
 8002284:	75fb      	strb	r3, [r7, #23]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
<<<<<<< HEAD
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fde2 	bl	8001eac <LL_ADC_REG_StartConversion>
 80022e8:	e006      	b.n	80022f8 <HAL_ADC_Start_DMA+0xf0>
=======
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fde2 	bl	8001e54 <LL_ADC_REG_StartConversion>
 8002290:	e006      	b.n	80022a0 <HAL_ADC_Start_DMA+0xf0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80022f2:	e001      	b.n	80022f8 <HAL_ADC_Start_DMA+0xf0>
=======
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800229a:	e001      	b.n	80022a0 <HAL_ADC_Start_DMA+0xf0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
<<<<<<< HEAD
 80022f4:	2302      	movs	r3, #2
 80022f6:	75fb      	strb	r3, [r7, #23]
=======
 800229c:	2302      	movs	r3, #2
 800229e:	75fb      	strb	r3, [r7, #23]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	08003233 	.word	0x08003233
 8002308:	0800330b 	.word	0x0800330b
 800230c:	08003327 	.word	0x08003327

08002310 <HAL_ADC_Stop_DMA>:
=======
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	080031db 	.word	0x080031db
 80022b0:	080032b3 	.word	0x080032b3
 80022b4:	080032cf 	.word	0x080032cf

080022b8 <HAL_ADC_Stop_DMA>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
=======
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_ADC_Stop_DMA+0x16>
 8002322:	2302      	movs	r3, #2
 8002324:	e051      	b.n	80023ca <HAL_ADC_Stop_DMA+0xba>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Stop_DMA+0x16>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e051      	b.n	8002372 <HAL_ADC_Stop_DMA+0xba>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
<<<<<<< HEAD
 800232e:	2103      	movs	r1, #3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fde9 	bl	8002f08 <ADC_ConversionStop>
 8002336:	4603      	mov	r3, r0
 8002338:	73fb      	strb	r3, [r7, #15]
=======
 80022d6:	2103      	movs	r1, #3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fde9 	bl	8002eb0 <ADC_ConversionStop>
 80022de:	4603      	mov	r3, r0
 80022e0:	73fb      	strb	r3, [r7, #15]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
<<<<<<< HEAD
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d13f      	bne.n	80023c0 <HAL_ADC_Stop_DMA+0xb0>
=======
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d13f      	bne.n	8002368 <HAL_ADC_Stop_DMA+0xb0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
<<<<<<< HEAD
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	60da      	str	r2, [r3, #12]
=======
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	60da      	str	r2, [r3, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
<<<<<<< HEAD
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d10f      	bne.n	800237e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	4618      	mov	r0, r3
 8002364:	f001 fabd 	bl	80038e2 <HAL_DMA_Abort>
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d10f      	bne.n	8002326 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4618      	mov	r0, r3
 800230c:	f001 fabd 	bl	800388a <HAL_DMA_Abort>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
<<<<<<< HEAD
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0210 	bic.w	r2, r2, #16
 800238c:	605a      	str	r2, [r3, #4]
=======
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0210 	bic.w	r2, r2, #16
 8002334:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
<<<<<<< HEAD
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 feed 	bl	8003174 <ADC_Disable>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e002      	b.n	80023a6 <HAL_ADC_Stop_DMA+0x96>
=======
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 feed 	bl	800311c <ADC_Disable>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e002      	b.n	800234e <HAL_ADC_Stop_DMA+0x96>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      (void)ADC_Disable(hadc);
<<<<<<< HEAD
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fee7 	bl	8003174 <ADC_Disable>
=======
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fee7 	bl	800311c <ADC_Disable>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
<<<<<<< HEAD
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_ADC_Stop_DMA+0xb0>
=======
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_ADC_Stop_DMA+0xb0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_ADC_IRQHandler>:
=======
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002370:	7bfb      	ldrb	r3, [r7, #15]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_ADC_IRQHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b088      	sub	sp, #32
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	617b      	str	r3, [r7, #20]
=======
 800237a:	b580      	push	{r7, lr}
 800237c:	b088      	sub	sp, #32
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
<<<<<<< HEAD
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d017      	beq.n	8002428 <HAL_ADC_IRQHandler+0x56>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d012      	beq.n	8002428 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d017      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x56>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d012      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
<<<<<<< HEAD
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f001 f854 	bl	80034c8 <HAL_ADCEx_EndOfSamplingCallback>
=======
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f001 f854 	bl	8003470 <HAL_ADCEx_EndOfSamplingCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
<<<<<<< HEAD
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2202      	movs	r2, #2
 8002426:	601a      	str	r2, [r3, #0]
=======
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2202      	movs	r2, #2
 80023ce:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
<<<<<<< HEAD
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <HAL_ADC_IRQHandler+0x6a>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002442:	2b00      	cmp	r3, #0
 8002444:	d05d      	beq.n	8002502 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d058      	beq.n	8002502 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x6a>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d05d      	beq.n	80024aa <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d058      	beq.n	80024aa <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
<<<<<<< HEAD
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fbd2 	bl	8001c16 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d03d      	beq.n	80024f4 <HAL_ADC_IRQHandler+0x122>
=======
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fbd2 	bl	8001bbe <LL_ADC_REG_IsTriggerSourceSWStart>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d03d      	beq.n	800249c <HAL_ADC_IRQHandler+0x122>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
<<<<<<< HEAD
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002486:	d035      	beq.n	80024f4 <HAL_ADC_IRQHandler+0x122>
=======
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242e:	d035      	beq.n	800249c <HAL_ADC_IRQHandler+0x122>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
<<<<<<< HEAD
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b08      	cmp	r3, #8
 8002494:	d12e      	bne.n	80024f4 <HAL_ADC_IRQHandler+0x122>
=======
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b08      	cmp	r3, #8
 800243c:	d12e      	bne.n	800249c <HAL_ADC_IRQHandler+0x122>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fd2e 	bl	8001efc <LL_ADC_REG_IsConversionOngoing>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d11a      	bne.n	80024dc <HAL_ADC_IRQHandler+0x10a>
=======
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fd2e 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11a      	bne.n	8002484 <HAL_ADC_IRQHandler+0x10a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
<<<<<<< HEAD
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 020c 	bic.w	r2, r2, #12
 80024b4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d112      	bne.n	80024f4 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
 80024da:	e00b      	b.n	80024f4 <HAL_ADC_IRQHandler+0x122>
=======
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 020c 	bic.w	r2, r2, #12
 800245c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d112      	bne.n	800249c <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
 8002482:	e00b      	b.n	800249c <HAL_ADC_IRQHandler+0x122>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e0:	f043 0210 	orr.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	659a      	str	r2, [r3, #88]	; 0x58
=======
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0210 	orr.w	r2, r3, #16
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7fe fb8f 	bl	8000c18 <HAL_ADC_ConvCpltCallback>
=======
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fe fbbb 	bl	8000c18 <HAL_ADC_ConvCpltCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
<<<<<<< HEAD
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	220c      	movs	r2, #12
 8002500:	601a      	str	r2, [r3, #0]
=======
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	220c      	movs	r2, #12
 80024a8:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
<<<<<<< HEAD
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <HAL_ADC_IRQHandler+0x144>
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800251c:	2b00      	cmp	r3, #0
 800251e:	d074      	beq.n	800260a <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d06f      	beq.n	800260a <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <HAL_ADC_IRQHandler+0x144>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d074      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d06f      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d105      	bne.n	80024ea <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
<<<<<<< HEAD
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fbb2 	bl	8001cb0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800254c:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fb5f 	bl	8001c16 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002558:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
=======
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fbb2 	bl	8001c58 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80024f4:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fb5f 	bl	8001bbe <LL_ADC_REG_IsTriggerSourceSWStart>
 8002500:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
<<<<<<< HEAD
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d049      	beq.n	80025fc <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <HAL_ADC_IRQHandler+0x1b0>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d041      	beq.n	80025fc <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d13c      	bne.n	80025fc <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258c:	2b40      	cmp	r3, #64	; 0x40
 800258e:	d135      	bne.n	80025fc <HAL_ADC_IRQHandler+0x22a>
=======
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d049      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_ADC_IRQHandler+0x1b0>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d041      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002526:	2b00      	cmp	r3, #0
 8002528:	d13c      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d135      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
<<<<<<< HEAD
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d12e      	bne.n	80025fc <HAL_ADC_IRQHandler+0x22a>
=======
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d12e      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fcd1 	bl	8001f4a <LL_ADC_INJ_IsConversionOngoing>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11a      	bne.n	80025e4 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025bc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d112      	bne.n	80025fc <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
 80025e2:	e00b      	b.n	80025fc <HAL_ADC_IRQHandler+0x22a>
=======
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fcd1 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d11a      	bne.n	800258c <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002564:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d112      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
 800258a:	e00b      	b.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f043 0210 	orr.w	r2, r3, #16
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	659a      	str	r2, [r3, #88]	; 0x58
=======
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f043 0210 	orr.w	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
<<<<<<< HEAD
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 ff3b 	bl	8003478 <HAL_ADCEx_InjectedConvCpltCallback>
=======
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 ff3b 	bl	8003420 <HAL_ADCEx_InjectedConvCpltCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
<<<<<<< HEAD
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2260      	movs	r2, #96	; 0x60
 8002608:	601a      	str	r2, [r3, #0]
=======
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2260      	movs	r2, #96	; 0x60
 80025b0:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
<<<<<<< HEAD
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002610:	2b00      	cmp	r3, #0
 8002612:	d011      	beq.n	8002638 <HAL_ADC_IRQHandler+0x266>
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00c      	beq.n	8002638 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d011      	beq.n	80025e0 <HAL_ADC_IRQHandler+0x266>
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
<<<<<<< HEAD
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f891 	bl	8002752 <HAL_ADC_LevelOutOfWindowCallback>
=======
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f891 	bl	80026fa <HAL_ADC_LevelOutOfWindowCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
<<<<<<< HEAD
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	601a      	str	r2, [r3, #0]
=======
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
<<<<<<< HEAD
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d012      	beq.n	8002668 <HAL_ADC_IRQHandler+0x296>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00d      	beq.n	8002668 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d012      	beq.n	8002610 <HAL_ADC_IRQHandler+0x296>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
<<<<<<< HEAD
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 ff21 	bl	80034a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
=======
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 ff21 	bl	8003448 <HAL_ADCEx_LevelOutOfWindow2Callback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
<<<<<<< HEAD
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002666:	601a      	str	r2, [r3, #0]
=======
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800260e:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
<<<<<<< HEAD
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266e:	2b00      	cmp	r3, #0
 8002670:	d012      	beq.n	8002698 <HAL_ADC_IRQHandler+0x2c6>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002616:	2b00      	cmp	r3, #0
 8002618:	d012      	beq.n	8002640 <HAL_ADC_IRQHandler+0x2c6>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
<<<<<<< HEAD
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 ff13 	bl	80034b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
=======
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 ff13 	bl	800345c <HAL_ADCEx_LevelOutOfWindow3Callback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
<<<<<<< HEAD
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002696:	601a      	str	r2, [r3, #0]
=======
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
<<<<<<< HEAD
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d02b      	beq.n	80026fa <HAL_ADC_IRQHandler+0x328>
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d026      	beq.n	80026fa <HAL_ADC_IRQHandler+0x328>
=======
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	d02b      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x328>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d026      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x328>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
<<<<<<< HEAD
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80026b4:	2301      	movs	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	e009      	b.n	80026ce <HAL_ADC_IRQHandler+0x2fc>
=======
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 800265c:	2301      	movs	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	e009      	b.n	8002676 <HAL_ADC_IRQHandler+0x2fc>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
<<<<<<< HEAD
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fae8 	bl	8001c94 <LL_ADC_REG_GetDMATransfer>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
=======
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fae8 	bl	8001c3c <LL_ADC_REG_GetDMATransfer>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002672:	2301      	movs	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }

    if (overrun_error == 1UL)
<<<<<<< HEAD
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10e      	bne.n	80026f2 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	f043 0202 	orr.w	r2, r3, #2
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	659a      	str	r2, [r3, #88]	; 0x58
=======
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10e      	bne.n	800269a <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f83a 	bl	8002766 <HAL_ADC_ErrorCallback>
=======
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f83a 	bl	800270e <HAL_ADC_ErrorCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
<<<<<<< HEAD
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2210      	movs	r2, #16
 80026f8:	601a      	str	r2, [r3, #0]
=======
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2210      	movs	r2, #16
 80026a0:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
<<<<<<< HEAD
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d018      	beq.n	8002736 <HAL_ADC_IRQHandler+0x364>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270a:	2b00      	cmp	r3, #0
 800270c:	d013      	beq.n	8002736 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271e:	f043 0208 	orr.w	r2, r3, #8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800272e:	601a      	str	r2, [r3, #0]
=======
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d018      	beq.n	80026de <HAL_ADC_IRQHandler+0x364>
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d013      	beq.n	80026de <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	f043 0208 	orr.w	r2, r3, #8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d6:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
<<<<<<< HEAD
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 feab 	bl	800348c <HAL_ADCEx_InjectedQueueOverflowCallback>
=======
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 feab 	bl	8003434 <HAL_ADCEx_InjectedQueueOverflowCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
<<<<<<< HEAD
 8002736:	bf00      	nop
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_ADC_ConvHalfCpltCallback>:
=======
 80026de:	bf00      	nop
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
=======
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_ADC_LevelOutOfWindowCallback>:
=======
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_ADC_LevelOutOfWindowCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
=======
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_ADC_ErrorCallback>:
=======
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_ADC_ErrorCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
=======
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_ADC_ConfigChannel>:
=======
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_ADC_ConfigChannel>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
<<<<<<< HEAD
 800277c:	b580      	push	{r7, lr}
 800277e:	b0b6      	sub	sp, #216	; 0xd8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
=======
 8002724:	b580      	push	{r7, lr}
 8002726:	b0b6      	sub	sp, #216	; 0xd8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
<<<<<<< HEAD
 8002786:	2300      	movs	r3, #0
 8002788:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
=======
 800272e:	2300      	movs	r3, #0
 8002730:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x22>
 800279a:	2302      	movs	r3, #2
 800279c:	e39f      	b.n	8002ede <HAL_ADC_ConfigChannel+0x762>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x22>
 8002742:	2302      	movs	r3, #2
 8002744:	e39f      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x762>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fba6 	bl	8001efc <LL_ADC_REG_IsConversionOngoing>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 8384 	bne.w	8002ec0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	f7ff fa39 	bl	8001c3c <LL_ADC_REG_SetSequencerRanks>
=======
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fba6 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 8384 	bne.w	8002e68 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	f7ff fa39 	bl	8001be4 <LL_ADC_REG_SetSequencerRanks>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fb94 	bl	8001efc <LL_ADC_REG_IsConversionOngoing>
 80027d4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fbb4 	bl	8001f4a <LL_ADC_INJ_IsConversionOngoing>
 80027e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 81a6 	bne.w	8002b3c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 81a1 	bne.w	8002b3c <HAL_ADC_ConfigChannel+0x3c0>
=======
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fb94 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 800277c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fbb4 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 800278a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800278e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 81a6 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800279c:	2b00      	cmp	r3, #0
 800279e:	f040 81a1 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x3c0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
<<<<<<< HEAD
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	461a      	mov	r2, r3
 8002808:	f7ff fa65 	bl	8001cd6 <LL_ADC_SetChannelSamplingTime>
=======
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f7ff fa65 	bl	8001c7e <LL_ADC_SetChannelSamplingTime>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
<<<<<<< HEAD
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	08db      	lsrs	r3, r3, #3
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b04      	cmp	r3, #4
 800282c:	d00a      	beq.n	8002844 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6919      	ldr	r1, [r3, #16]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800283e:	f7ff f995 	bl	8001b6c <LL_ADC_SetOffset>
 8002842:	e17b      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x3c0>
=======
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	08db      	lsrs	r3, r3, #3
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d00a      	beq.n	80027ec <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6919      	ldr	r1, [r3, #16]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027e6:	f7ff f995 	bl	8001b14 <LL_ADC_SetOffset>
 80027ea:	e17b      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x3c0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
<<<<<<< HEAD
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff f9b2 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <HAL_ADC_ConfigChannel+0xf4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff f9a7 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	e01e      	b.n	80028ae <HAL_ADC_ConfigChannel+0x132>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff f99c 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
=======
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f9b2 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <HAL_ADC_ConfigChannel+0xf4>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff f9a7 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	0e9b      	lsrs	r3, r3, #26
 8002812:	f003 021f 	and.w	r2, r3, #31
 8002816:	e01e      	b.n	8002856 <HAL_ADC_ConfigChannel+0x132>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff f99c 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
<<<<<<< HEAD
 8002882:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
=======
 800282a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
<<<<<<< HEAD
 800288e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002892:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
=======
 8002836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800283a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
<<<<<<< HEAD
 8002896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800289e:	2320      	movs	r3, #32
 80028a0:	e004      	b.n	80028ac <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80028a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x14a>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0e9b      	lsrs	r3, r3, #26
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	e018      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x17c>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e004      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80028ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d106      	bne.n	800290a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2200      	movs	r2, #0
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff f96b 	bl	8001be0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2101      	movs	r1, #1
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff f94f 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x1ba>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff f944 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	0e9b      	lsrs	r3, r3, #26
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	e01e      	b.n	8002974 <HAL_ADC_ConfigChannel+0x1f8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff f939 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800295c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e004      	b.n	8002972 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002968:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297c:	2b00      	cmp	r3, #0
 800297e:	d105      	bne.n	800298c <HAL_ADC_ConfigChannel+0x210>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0e9b      	lsrs	r3, r3, #26
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	e018      	b.n	80029be <HAL_ADC_ConfigChannel+0x242>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80029b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	429a      	cmp	r2, r3
 80029c0:	d106      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff f908 	bl	8001be0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2102      	movs	r1, #2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff f8ec 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x280>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2102      	movs	r1, #2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f8e1 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	f003 021f 	and.w	r2, r3, #31
 80029fa:	e01e      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x2be>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2102      	movs	r1, #2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff f8d6 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	e004      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
=======
 800283e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002846:	2320      	movs	r3, #32
 8002848:	e004      	b.n	8002854 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800284a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_ADC_ConfigChannel+0x14a>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	e018      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x17c>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800288a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e004      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d106      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff f96b 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff f94f 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <HAL_ADC_ConfigChannel+0x1ba>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f944 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80028d4:	4603      	mov	r3, r0
 80028d6:	0e9b      	lsrs	r3, r3, #26
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	e01e      	b.n	800291c <HAL_ADC_ConfigChannel+0x1f8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff f939 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002900:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800290c:	2320      	movs	r3, #32
 800290e:	e004      	b.n	800291a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x210>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	e018      	b.n	8002966 <HAL_ADC_ConfigChannel+0x242>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002948:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800294c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002958:	2320      	movs	r3, #32
 800295a:	e004      	b.n	8002966 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800295c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	429a      	cmp	r2, r3
 8002968:	d106      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f908 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2102      	movs	r1, #2
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f8ec 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10a      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x280>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2102      	movs	r1, #2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff f8e1 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 800299a:	4603      	mov	r3, r0
 800299c:	0e9b      	lsrs	r3, r3, #26
 800299e:	f003 021f 	and.w	r2, r3, #31
 80029a2:	e01e      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x2be>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2102      	movs	r1, #2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff f8d6 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80029d2:	2320      	movs	r3, #32
 80029d4:	e004      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80029d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x2d6>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	0e9b      	lsrs	r3, r3, #26
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	e016      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x304>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e004      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2102      	movs	r1, #2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f8a7 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a3a:	687b      	ldr	r3, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d105      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x2d6>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	e016      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x304>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e004      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff f8a7 	bl	8001be0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2103      	movs	r1, #3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff f88b 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x342>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2103      	movs	r1, #3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f880 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	e017      	b.n	8002aee <HAL_ADC_ConfigChannel+0x372>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2103      	movs	r1, #3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff f875 	bl	8001bb4 <LL_ADC_GetOffsetChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x38a>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	0e9b      	lsrs	r3, r3, #26
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	e011      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x3ae>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b16:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	e003      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d106      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
<<<<<<< HEAD
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	2103      	movs	r1, #3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f852 	bl	8001be0 <LL_ADC_SetOffsetState>
=======
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2103      	movs	r1, #3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff f852 	bl	8001b88 <LL_ADC_SetOffsetState>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff f98d 	bl	8001e60 <LL_ADC_IsEnabled>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f040 81c2 	bne.w	8002ed2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f7ff f8e6 	bl	8001d2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a8e      	ldr	r2, [pc, #568]	; (8002da0 <HAL_ADC_ConfigChannel+0x624>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	f040 8130 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x650>
=======
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f98d 	bl	8001e08 <LL_ADC_IsEnabled>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 81c2 	bne.w	8002e7a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f7ff f8e6 	bl	8001cd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a8e      	ldr	r2, [pc, #568]	; (8002d48 <HAL_ADC_ConfigChannel+0x624>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	f040 8130 	bne.w	8002d74 <HAL_ADC_ConfigChannel+0x650>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
<<<<<<< HEAD
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x418>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	3301      	adds	r3, #1
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	2b09      	cmp	r3, #9
 8002b8a:	bf94      	ite	ls
 8002b8c:	2301      	movls	r3, #1
 8002b8e:	2300      	movhi	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e019      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x44c>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e003      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2b09      	cmp	r3, #9
 8002bc0:	bf94      	ite	ls
 8002bc2:	2301      	movls	r3, #1
 8002bc4:	2300      	movhi	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d079      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x544>
=======
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x46c>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	3301      	adds	r3, #1
 8002be0:	069b      	lsls	r3, r3, #26
 8002be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be6:	e015      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x498>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	069b      	lsls	r3, r3, #26
 8002c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x4b8>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0e9b      	lsrs	r3, r3, #26
 8002c26:	3301      	adds	r3, #1
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	e017      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x4e8>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c44:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e003      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	ea42 0103 	orr.w	r1, r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x50e>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	051b      	lsls	r3, r3, #20
 8002c88:	e018      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x540>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	e080      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x560>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	069b      	lsls	r3, r3, #26
 8002cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cda:	e015      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x58c>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e003      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	069b      	lsls	r3, r3, #26
 8002d04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x5ac>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2101      	movs	r1, #1
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	e017      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x5dc>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	61fb      	str	r3, [r7, #28]
  return result;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e003      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2101      	movs	r1, #1
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	ea42 0103 	orr.w	r1, r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x608>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	3b1e      	subs	r3, #30
 8002d7c:	051b      	lsls	r3, r3, #20
 8002d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d82:	e01d      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x644>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	613b      	str	r3, [r7, #16]
  return result;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e005      	b.n	8002dac <HAL_ADC_ConfigChannel+0x630>
 8002da0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f003 021f 	and.w	r2, r3, #31
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	3b1e      	subs	r3, #30
 8002dba:	051b      	lsls	r3, r3, #20
 8002dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
<<<<<<< HEAD
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7fe ff85 	bl	8001cd6 <LL_ADC_SetChannelSamplingTime>
=======
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7fe ff85 	bl	8001c7e <LL_ADC_SetChannelSamplingTime>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
<<<<<<< HEAD
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <HAL_ADC_ConfigChannel+0x76c>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d07c      	beq.n	8002ed2 <HAL_ADC_ConfigChannel+0x756>
=======
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <HAL_ADC_ConfigChannel+0x76c>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d07c      	beq.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
<<<<<<< HEAD
 8002dd8:	4844      	ldr	r0, [pc, #272]	; (8002eec <HAL_ADC_ConfigChannel+0x770>)
 8002dda:	f7fe feb9 	bl	8001b50 <LL_ADC_GetCommonPathInternalCh>
 8002dde:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
=======
 8002d80:	4844      	ldr	r0, [pc, #272]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002d82:	f7fe feb9 	bl	8001af8 <LL_ADC_GetCommonPathInternalCh>
 8002d86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 8002de2:	4843      	ldr	r0, [pc, #268]	; (8002ef0 <HAL_ADC_ConfigChannel+0x774>)
 8002de4:	f7ff f83c 	bl	8001e60 <LL_ADC_IsEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d15e      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x730>
=======
 8002d8a:	4843      	ldr	r0, [pc, #268]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002d8c:	f7ff f83c 	bl	8001e08 <LL_ADC_IsEnabled>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d15e      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x730>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
<<<<<<< HEAD
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a40      	ldr	r2, [pc, #256]	; (8002ef4 <HAL_ADC_ConfigChannel+0x778>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d127      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x6cc>
 8002df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d121      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a39      	ldr	r2, [pc, #228]	; (8002ef0 <HAL_ADC_ConfigChannel+0x774>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d161      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e16:	4619      	mov	r1, r3
 8002e18:	4834      	ldr	r0, [pc, #208]	; (8002eec <HAL_ADC_ConfigChannel+0x770>)
 8002e1a:	f7fe fe86 	bl	8001b2a <LL_ADC_SetCommonPathInternalCh>
=======
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a40      	ldr	r2, [pc, #256]	; (8002e9c <HAL_ADC_ConfigChannel+0x778>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d127      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x6cc>
 8002da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d121      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a39      	ldr	r2, [pc, #228]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d161      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4834      	ldr	r0, [pc, #208]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002dc2:	f7fe fe86 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8002e1e:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_ADC_ConfigChannel+0x77c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	099b      	lsrs	r3, r3, #6
 8002e24:	4a35      	ldr	r2, [pc, #212]	; (8002efc <HAL_ADC_ConfigChannel+0x780>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	099b      	lsrs	r3, r3, #6
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002e38:	e002      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f9      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e46:	e044      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x756>
=======
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_ADC_ConfigChannel+0x77c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	4a35      	ldr	r2, [pc, #212]	; (8002ea4 <HAL_ADC_ConfigChannel+0x780>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	099b      	lsrs	r3, r3, #6
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002de0:	e002      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f9      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dee:	e044      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
<<<<<<< HEAD
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2c      	ldr	r2, [pc, #176]	; (8002f00 <HAL_ADC_ConfigChannel+0x784>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d113      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x6fe>
 8002e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <HAL_ADC_ConfigChannel+0x774>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d134      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e70:	4619      	mov	r1, r3
 8002e72:	481e      	ldr	r0, [pc, #120]	; (8002eec <HAL_ADC_ConfigChannel+0x770>)
 8002e74:	f7fe fe59 	bl	8001b2a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e78:	e02b      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a21      	ldr	r2, [pc, #132]	; (8002f04 <HAL_ADC_ConfigChannel+0x788>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d126      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x756>
 8002e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d120      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <HAL_ADC_ConfigChannel+0x774>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d11b      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4811      	ldr	r0, [pc, #68]	; (8002eec <HAL_ADC_ConfigChannel+0x770>)
 8002ea6:	f7fe fe40 	bl	8001b2a <LL_ADC_SetCommonPathInternalCh>
 8002eaa:	e012      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x756>
=======
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <HAL_ADC_ConfigChannel+0x784>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d113      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x6fe>
 8002dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10d      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d134      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481e      	ldr	r0, [pc, #120]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002e1c:	f7fe fe59 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e20:	e02b      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a21      	ldr	r2, [pc, #132]	; (8002eac <HAL_ADC_ConfigChannel+0x788>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d126      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
 8002e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d120      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d11b      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4811      	ldr	r0, [pc, #68]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002e4e:	f7fe fe40 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
 8002e52:	e012      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	f043 0220 	orr.w	r2, r3, #32
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ebe:	e008      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x756>
=======
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e66:	e008      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	f043 0220 	orr.w	r2, r3, #32
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
=======
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8002eda:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	37d8      	adds	r7, #216	; 0xd8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	80080000 	.word	0x80080000
 8002eec:	50040300 	.word	0x50040300
 8002ef0:	50040000 	.word	0x50040000
 8002ef4:	c7520000 	.word	0xc7520000
 8002ef8:	2000006c 	.word	0x2000006c
 8002efc:	053e2d63 	.word	0x053e2d63
 8002f00:	cb840000 	.word	0xcb840000
 8002f04:	80000001 	.word	0x80000001

08002f08 <ADC_ConversionStop>:
=======
 8002e82:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	37d8      	adds	r7, #216	; 0xd8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	80080000 	.word	0x80080000
 8002e94:	50040300 	.word	0x50040300
 8002e98:	50040000 	.word	0x50040000
 8002e9c:	c7520000 	.word	0xc7520000
 8002ea0:	20000044 	.word	0x20000044
 8002ea4:	053e2d63 	.word	0x053e2d63
 8002ea8:	cb840000 	.word	0xcb840000
 8002eac:	80000001 	.word	0x80000001

08002eb0 <ADC_ConversionStop>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
<<<<<<< HEAD
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
=======
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
<<<<<<< HEAD
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	61bb      	str	r3, [r7, #24]
=======
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe ffec 	bl	8001efc <LL_ADC_REG_IsConversionOngoing>
 8002f24:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f80d 	bl	8001f4a <LL_ADC_INJ_IsConversionOngoing>
 8002f30:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d103      	bne.n	8002f40 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 8098 	beq.w	8003070 <ADC_ConversionStop+0x168>
=======
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe ffec 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002ecc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f80d 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 8002ed8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8098 	beq.w	8003018 <ADC_ConversionStop+0x168>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
<<<<<<< HEAD
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d02a      	beq.n	8002fa4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7e5b      	ldrb	r3, [r3, #25]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d126      	bne.n	8002fa4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7e1b      	ldrb	r3, [r3, #24]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d122      	bne.n	8002fa4 <ADC_ConversionStop+0x9c>
=======
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d02a      	beq.n	8002f4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7e5b      	ldrb	r3, [r3, #25]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d126      	bne.n	8002f4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7e1b      	ldrb	r3, [r3, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d122      	bne.n	8002f4c <ADC_ConversionStop+0x9c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
<<<<<<< HEAD
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f62:	e014      	b.n	8002f8e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	4a45      	ldr	r2, [pc, #276]	; (800307c <ADC_ConversionStop+0x174>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d90d      	bls.n	8002f88 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f043 0210 	orr.w	r2, r3, #16
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	f043 0201 	orr.w	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e074      	b.n	8003072 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d1e3      	bne.n	8002f64 <ADC_ConversionStop+0x5c>
=======
 8002f06:	2301      	movs	r3, #1
 8002f08:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f0a:	e014      	b.n	8002f36 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	4a45      	ldr	r2, [pc, #276]	; (8003024 <ADC_ConversionStop+0x174>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d90d      	bls.n	8002f30 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0210 	orr.w	r2, r3, #16
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e074      	b.n	800301a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	d1e3      	bne.n	8002f0c <ADC_ConversionStop+0x5c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
<<<<<<< HEAD
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2240      	movs	r2, #64	; 0x40
 8002fa2:	601a      	str	r2, [r3, #0]
=======
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2240      	movs	r2, #64	; 0x40
 8002f4a:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
<<<<<<< HEAD
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d014      	beq.n	8002fd4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe ffa4 	bl	8001efc <LL_ADC_REG_IsConversionOngoing>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00c      	beq.n	8002fd4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe ff61 	bl	8001e86 <LL_ADC_IsDisableOngoing>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe ff80 	bl	8001ed4 <LL_ADC_REG_StopConversion>
=======
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d014      	beq.n	8002f7c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe ffa4 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00c      	beq.n	8002f7c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe ff61 	bl	8001e2e <LL_ADC_IsDisableOngoing>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe ff80 	bl	8001e7c <LL_ADC_REG_StopConversion>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
<<<<<<< HEAD
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d014      	beq.n	8003004 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe ffb3 	bl	8001f4a <LL_ADC_INJ_IsConversionOngoing>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00c      	beq.n	8003004 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe ff49 	bl	8001e86 <LL_ADC_IsDisableOngoing>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d104      	bne.n	8003004 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe ff8f 	bl	8001f22 <LL_ADC_INJ_StopConversion>
=======
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d014      	beq.n	8002fac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe ffb3 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe ff49 	bl	8001e2e <LL_ADC_IsDisableOngoing>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d104      	bne.n	8002fac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe ff8f 	bl	8001eca <LL_ADC_INJ_StopConversion>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
<<<<<<< HEAD
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d005      	beq.n	8003016 <ADC_ConversionStop+0x10e>
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d105      	bne.n	800301c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003010:	230c      	movs	r3, #12
 8003012:	617b      	str	r3, [r7, #20]
        break;
 8003014:	e005      	b.n	8003022 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003016:	2308      	movs	r3, #8
 8003018:	617b      	str	r3, [r7, #20]
        break;
 800301a:	e002      	b.n	8003022 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800301c:	2304      	movs	r3, #4
 800301e:	617b      	str	r3, [r7, #20]
        break;
 8003020:	bf00      	nop
=======
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d005      	beq.n	8002fbe <ADC_ConversionStop+0x10e>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d105      	bne.n	8002fc4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002fb8:	230c      	movs	r3, #12
 8002fba:	617b      	str	r3, [r7, #20]
        break;
 8002fbc:	e005      	b.n	8002fca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	617b      	str	r3, [r7, #20]
        break;
 8002fc2:	e002      	b.n	8002fca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	617b      	str	r3, [r7, #20]
        break;
 8002fc8:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003022:	f7fe fd57 	bl	8001ad4 <HAL_GetTick>
 8003026:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003028:	e01b      	b.n	8003062 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800302a:	f7fe fd53 	bl	8001ad4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b05      	cmp	r3, #5
 8003036:	d914      	bls.n	8003062 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00d      	beq.n	8003062 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f043 0210 	orr.w	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	f043 0201 	orr.w	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e007      	b.n	8003072 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1dc      	bne.n	800302a <ADC_ConversionStop+0x122>
=======
 8002fca:	f7fe fd33 	bl	8001a34 <HAL_GetTick>
 8002fce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fd0:	e01b      	b.n	800300a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002fd2:	f7fe fd2f 	bl	8001a34 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d914      	bls.n	800300a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e007      	b.n	800301a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1dc      	bne.n	8002fd2 <ADC_ConversionStop+0x122>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	a33fffff 	.word	0xa33fffff

08003080 <ADC_Enable>:
=======
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	a33fffff 	.word	0xa33fffff

08003028 <ADC_Enable>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003088:	2300      	movs	r3, #0
 800308a:	60bb      	str	r3, [r7, #8]
=======
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe fee5 	bl	8001e60 <LL_ADC_IsEnabled>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d15e      	bne.n	800315a <ADC_Enable+0xda>
=======
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe fee5 	bl	8001e08 <LL_ADC_IsEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d15e      	bne.n	8003102 <ADC_Enable+0xda>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
<<<<<<< HEAD
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	4b30      	ldr	r3, [pc, #192]	; (8003164 <ADC_Enable+0xe4>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <ADC_Enable+0x46>
=======
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	4b30      	ldr	r3, [pc, #192]	; (800310c <ADC_Enable+0xe4>)
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <ADC_Enable+0x46>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e04a      	b.n	800315c <ADC_Enable+0xdc>
=======
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	f043 0210 	orr.w	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e04a      	b.n	8003104 <ADC_Enable+0xdc>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
<<<<<<< HEAD
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fea0 	bl	8001e10 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030d0:	4825      	ldr	r0, [pc, #148]	; (8003168 <ADC_Enable+0xe8>)
 80030d2:	f7fe fd3d 	bl	8001b50 <LL_ADC_GetCommonPathInternalCh>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00f      	beq.n	8003100 <ADC_Enable+0x80>
=======
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fea0 	bl	8001db8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003078:	4825      	ldr	r0, [pc, #148]	; (8003110 <ADC_Enable+0xe8>)
 800307a:	f7fe fd3d 	bl	8001af8 <LL_ADC_GetCommonPathInternalCh>
 800307e:	4603      	mov	r3, r0
 8003080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00f      	beq.n	80030a8 <ADC_Enable+0x80>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 80030e0:	4b22      	ldr	r3, [pc, #136]	; (800316c <ADC_Enable+0xec>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	4a22      	ldr	r2, [pc, #136]	; (8003170 <ADC_Enable+0xf0>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	3301      	adds	r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030f2:	e002      	b.n	80030fa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f9      	bne.n	80030f4 <ADC_Enable+0x74>
=======
 8003088:	4b22      	ldr	r3, [pc, #136]	; (8003114 <ADC_Enable+0xec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	4a22      	ldr	r2, [pc, #136]	; (8003118 <ADC_Enable+0xf0>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800309a:	e002      	b.n	80030a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f9      	bne.n	800309c <ADC_Enable+0x74>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003100:	f7fe fce8 	bl	8001ad4 <HAL_GetTick>
 8003104:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003106:	e021      	b.n	800314c <ADC_Enable+0xcc>
=======
 80030a8:	f7fe fcc4 	bl	8001a34 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ae:	e021      	b.n	80030f4 <ADC_Enable+0xcc>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe fea7 	bl	8001e60 <LL_ADC_IsEnabled>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d104      	bne.n	8003122 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe fe77 	bl	8001e10 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003122:	f7fe fcd7 	bl	8001ad4 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d90d      	bls.n	800314c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	f043 0210 	orr.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e007      	b.n	800315c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d1d6      	bne.n	8003108 <ADC_Enable+0x88>
=======
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe fea7 	bl	8001e08 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe fe77 	bl	8001db8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ca:	f7fe fcb3 	bl	8001a34 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d90d      	bls.n	80030f4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	f043 0210 	orr.w	r2, r3, #16
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e007      	b.n	8003104 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d1d6      	bne.n	80030b0 <ADC_Enable+0x88>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	8000003f 	.word	0x8000003f
 8003168:	50040300 	.word	0x50040300
 800316c:	2000006c 	.word	0x2000006c
 8003170:	053e2d63 	.word	0x053e2d63

08003174 <ADC_Disable>:
=======
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	8000003f 	.word	0x8000003f
 8003110:	50040300 	.word	0x50040300
 8003114:	20000044 	.word	0x20000044
 8003118:	053e2d63 	.word	0x053e2d63

0800311c <ADC_Disable>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe fe80 	bl	8001e86 <LL_ADC_IsDisableOngoing>
 8003186:	60f8      	str	r0, [r7, #12]
=======
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fe80 	bl	8001e2e <LL_ADC_IsDisableOngoing>
 800312e:	60f8      	str	r0, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fe67 	bl	8001e60 <LL_ADC_IsEnabled>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d047      	beq.n	8003228 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d144      	bne.n	8003228 <ADC_Disable+0xb4>
=======
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe fe67 	bl	8001e08 <LL_ADC_IsEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d047      	beq.n	80031d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d144      	bne.n	80031d0 <ADC_Disable+0xb4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
<<<<<<< HEAD
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 030d 	and.w	r3, r3, #13
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d10c      	bne.n	80031c6 <ADC_Disable+0x52>
=======
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 030d 	and.w	r3, r3, #13
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10c      	bne.n	800316e <ADC_Disable+0x52>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
<<<<<<< HEAD
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe fe41 	bl	8001e38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2203      	movs	r2, #3
 80031bc:	601a      	str	r2, [r3, #0]
=======
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fe41 	bl	8001de0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2203      	movs	r2, #3
 8003164:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 80031be:	f7fe fc89 	bl	8001ad4 <HAL_GetTick>
 80031c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031c4:	e029      	b.n	800321a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f043 0210 	orr.w	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	f043 0201 	orr.w	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e023      	b.n	800322a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031e2:	f7fe fc77 	bl	8001ad4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d914      	bls.n	800321a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00d      	beq.n	800321a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	f043 0210 	orr.w	r2, r3, #16
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	f043 0201 	orr.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e007      	b.n	800322a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1dc      	bne.n	80031e2 <ADC_Disable+0x6e>
=======
 8003166:	f7fe fc65 	bl	8001a34 <HAL_GetTick>
 800316a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800316c:	e029      	b.n	80031c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f043 0210 	orr.w	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e023      	b.n	80031d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800318a:	f7fe fc53 	bl	8001a34 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d914      	bls.n	80031c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f043 0210 	orr.w	r2, r3, #16
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b6:	f043 0201 	orr.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e007      	b.n	80031d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1dc      	bne.n	800318a <ADC_Disable+0x6e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <ADC_DMAConvCplt>:
=======
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <ADC_DMAConvCplt>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003248:	2b00      	cmp	r3, #0
 800324a:	d14b      	bne.n	80032e4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d14b      	bne.n	800328c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
<<<<<<< HEAD
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d021      	beq.n	80032aa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe fcd3 	bl	8001c16 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d032      	beq.n	80032dc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d12b      	bne.n	80032dc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d11f      	bne.n	80032dc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
 80032a8:	e018      	b.n	80032dc <ADC_DMAConvCplt+0xaa>
=======
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d021      	beq.n	8003252 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fcd3 	bl	8001bbe <LL_ADC_REG_IsTriggerSourceSWStart>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d032      	beq.n	8003284 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d12b      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d11f      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
 8003250:	e018      	b.n	8003284 <ADC_DMAConvCplt+0xaa>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
<<<<<<< HEAD
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d111      	bne.n	80032dc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d111      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7fd fc9b 	bl	8000c18 <HAL_ADC_ConvCpltCallback>
=======
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7fd fcc7 	bl	8000c18 <HAL_ADC_ConvCpltCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 80032e2:	e00e      	b.n	8003302 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff fa38 	bl	8002766 <HAL_ADC_ErrorCallback>
}
 80032f6:	e004      	b.n	8003302 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4798      	blx	r3
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <ADC_DMAHalfConvCplt>:
=======
 800328a:	e00e      	b.n	80032aa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff fa38 	bl	800270e <HAL_ADC_ErrorCallback>
}
 800329e:	e004      	b.n	80032aa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
}
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <ADC_DMAHalfConvCplt>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	60fb      	str	r3, [r7, #12]
=======
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f7ff fa10 	bl	800273e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <ADC_DMAError>:
=======
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff fa10 	bl	80026e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <ADC_DMAError>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	f043 0204 	orr.w	r2, r3, #4
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	659a      	str	r2, [r3, #88]	; 0x58
=======
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	f043 0204 	orr.w	r2, r3, #4
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7ff fa0a 	bl	8002766 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <LL_ADC_StartCalibration>:
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800336c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003376:	4313      	orrs	r3, r2
 8003378:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	609a      	str	r2, [r3, #8]
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <LL_ADC_IsCalibrationOnGoing>:
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800339c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033a0:	d101      	bne.n	80033a6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_ADCEx_Calibration_Start>:
=======
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff fa0a 	bl	800270e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <LL_ADC_StartCalibration>:
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800331e:	4313      	orrs	r3, r2
 8003320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LL_ADC_IsCalibrationOnGoing>:
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003348:	d101      	bne.n	800334e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_ADCEx_Calibration_Start>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
<<<<<<< HEAD
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
=======
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
<<<<<<< HEAD
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
=======
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_ADCEx_Calibration_Start+0x1c>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e04d      	b.n	800346c <HAL_ADCEx_Calibration_Start+0xb8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_ADCEx_Calibration_Start+0x1c>
 8003374:	2302      	movs	r3, #2
 8003376:	e04d      	b.n	8003414 <HAL_ADCEx_Calibration_Start+0xb8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
<<<<<<< HEAD
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fecb 	bl	8003174 <ADC_Disable>
 80033de:	4603      	mov	r3, r0
 80033e0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d136      	bne.n	8003456 <HAL_ADCEx_Calibration_Start+0xa2>
=======
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fecb 	bl	800311c <ADC_Disable>
 8003386:	4603      	mov	r3, r0
 8003388:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d136      	bne.n	80033fe <HAL_ADCEx_Calibration_Start+0xa2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033f0:	f023 0302 	bic.w	r3, r3, #2
 80033f4:	f043 0202 	orr.w	r2, r3, #2
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003398:	f023 0302 	bic.w	r3, r3, #2
 800339c:	f043 0202 	orr.w	r2, r3, #2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
<<<<<<< HEAD
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6839      	ldr	r1, [r7, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ffa9 	bl	800335a <LL_ADC_StartCalibration>
=======
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6839      	ldr	r1, [r7, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ffa9 	bl	8003302 <LL_ADC_StartCalibration>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
<<<<<<< HEAD
 8003408:	e014      	b.n	8003434 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	3301      	adds	r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d90d      	bls.n	8003434 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	f023 0312 	bic.w	r3, r3, #18
 8003420:	f043 0210 	orr.w	r2, r3, #16
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80033b0:	e014      	b.n	80033dc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3301      	adds	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4a18      	ldr	r2, [pc, #96]	; (800341c <HAL_ADCEx_Calibration_Start+0xc0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d90d      	bls.n	80033dc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	f023 0312 	bic.w	r3, r3, #18
 80033c8:	f043 0210 	orr.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e01b      	b.n	800346c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ffa7 	bl	800338c <LL_ADC_IsCalibrationOnGoing>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e2      	bne.n	800340a <HAL_ADCEx_Calibration_Start+0x56>
=======
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e01b      	b.n	8003414 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ffa7 	bl	8003334 <LL_ADC_IsCalibrationOnGoing>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e2      	bne.n	80033b2 <HAL_ADCEx_Calibration_Start+0x56>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f023 0303 	bic.w	r3, r3, #3
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
 8003454:	e005      	b.n	8003462 <HAL_ADCEx_Calibration_Start+0xae>
=======
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f023 0303 	bic.w	r3, r3, #3
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
 80033fc:	e005      	b.n	800340a <HAL_ADCEx_Calibration_Start+0xae>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	f043 0210 	orr.w	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f043 0210 	orr.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	00026aaa 	.word	0x00026aaa

08003478 <HAL_ADCEx_InjectedConvCpltCallback>:
=======
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	00026aaa 	.word	0x00026aaa

08003420 <HAL_ADCEx_InjectedConvCpltCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
=======
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_ADCEx_InjectedQueueOverflowCallback>:
=======
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_ADCEx_InjectedQueueOverflowCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
=======
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
=======
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_ADCEx_LevelOutOfWindow2Callback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
=======
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
=======
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_ADCEx_LevelOutOfWindow3Callback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
=======
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_ADCEx_EndOfSamplingCallback>:
=======
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_ADCEx_EndOfSamplingCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
=======
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <__NVIC_SetPriorityGrouping>:
=======
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <__NVIC_SetPriorityGrouping>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f8:	4013      	ands	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800350e:	4a04      	ldr	r2, [pc, #16]	; (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	60d3      	str	r3, [r2, #12]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <__NVIC_GetPriorityGrouping>:
=======
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <__NVIC_GetPriorityGrouping+0x18>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 0307 	and.w	r3, r3, #7
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_EnableIRQ>:
=======
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	2b00      	cmp	r3, #0
 8003550:	db0b      	blt.n	800356a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	4907      	ldr	r1, [pc, #28]	; (8003578 <__NVIC_EnableIRQ+0x38>)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	2001      	movs	r0, #1
 8003562:	fa00 f202 	lsl.w	r2, r0, r2
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	e000e100 	.word	0xe000e100

0800357c <__NVIC_SetPriority>:
=======
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	6039      	str	r1, [r7, #0]
 8003586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	2b00      	cmp	r3, #0
 800358e:	db0a      	blt.n	80035a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	490c      	ldr	r1, [pc, #48]	; (80035c8 <__NVIC_SetPriority+0x4c>)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	0112      	lsls	r2, r2, #4
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	440b      	add	r3, r1
 80035a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	; (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 80035a4:	e00a      	b.n	80035bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4908      	ldr	r1, [pc, #32]	; (80035cc <__NVIC_SetPriority+0x50>)
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3b04      	subs	r3, #4
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	440b      	add	r3, r1
 80035ba:	761a      	strb	r2, [r3, #24]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000e100 	.word	0xe000e100
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <NVIC_EncodePriority>:
=======
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	; 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	61fb      	str	r3, [r7, #28]
=======
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f1c3 0307 	rsb	r3, r3, #7
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	bf28      	it	cs
 80035ee:	2304      	movcs	r3, #4
 80035f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d902      	bls.n	8003600 <NVIC_EncodePriority+0x30>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3b03      	subs	r3, #3
 80035fe:	e000      	b.n	8003602 <NVIC_EncodePriority+0x32>
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	401a      	ands	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43d9      	mvns	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	4313      	orrs	r3, r2
         );
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	; 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_NVIC_SetPriorityGrouping>:
=======
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
         );
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
=======
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ff4c 	bl	80034dc <__NVIC_SetPriorityGrouping>
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_NVIC_SetPriority>:
=======
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ff4c 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_NVIC_SetPriority>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	73fb      	strb	r3, [r7, #15]
=======
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	73fb      	strb	r3, [r7, #15]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 800365a:	f7ff ff63 	bl	8003524 <__NVIC_GetPriorityGrouping>
 800365e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	6978      	ldr	r0, [r7, #20]
 8003666:	f7ff ffb3 	bl	80035d0 <NVIC_EncodePriority>
 800366a:	4602      	mov	r2, r0
 800366c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff ff82 	bl	800357c <__NVIC_SetPriority>
}
 8003678:	bf00      	nop
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_NVIC_EnableIRQ>:
=======
 8003602:	f7ff ff63 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003606:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	6978      	ldr	r0, [r7, #20]
 800360e:	f7ff ffb3 	bl	8003578 <NVIC_EncodePriority>
 8003612:	4602      	mov	r2, r0
 8003614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ff82 	bl	8003524 <__NVIC_SetPriority>
}
 8003620:	bf00      	nop
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_NVIC_EnableIRQ>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
=======
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ff56 	bl	8003540 <__NVIC_EnableIRQ>
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_DMA_Init>:
=======
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff56 	bl	80034e8 <__NVIC_EnableIRQ>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_DMA_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
=======
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
<<<<<<< HEAD
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e08e      	b.n	80037cc <HAL_DMA_Init+0x130>
=======
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e08e      	b.n	8003774 <HAL_DMA_Init+0x130>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
<<<<<<< HEAD
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_DMA_Init+0x138>)
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d80f      	bhi.n	80036da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <HAL_DMA_Init+0x13c>)
 80036c2:	4413      	add	r3, r2
 80036c4:	4a45      	ldr	r2, [pc, #276]	; (80037dc <HAL_DMA_Init+0x140>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	009a      	lsls	r2, r3, #2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a42      	ldr	r2, [pc, #264]	; (80037e0 <HAL_DMA_Init+0x144>)
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
 80036d8:	e00e      	b.n	80036f8 <HAL_DMA_Init+0x5c>
=======
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_DMA_Init+0x138>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d80f      	bhi.n	8003682 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b45      	ldr	r3, [pc, #276]	; (8003780 <HAL_DMA_Init+0x13c>)
 800366a:	4413      	add	r3, r2
 800366c:	4a45      	ldr	r2, [pc, #276]	; (8003784 <HAL_DMA_Init+0x140>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a42      	ldr	r2, [pc, #264]	; (8003788 <HAL_DMA_Init+0x144>)
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
 8003680:	e00e      	b.n	80036a0 <HAL_DMA_Init+0x5c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
<<<<<<< HEAD
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <HAL_DMA_Init+0x148>)
 80036e2:	4413      	add	r3, r2
 80036e4:	4a3d      	ldr	r2, [pc, #244]	; (80037dc <HAL_DMA_Init+0x140>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	009a      	lsls	r2, r3, #2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a3c      	ldr	r2, [pc, #240]	; (80037e8 <HAL_DMA_Init+0x14c>)
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_DMA_Init+0x148>)
 800368a:	4413      	add	r3, r2
 800368c:	4a3d      	ldr	r2, [pc, #244]	; (8003784 <HAL_DMA_Init+0x140>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	009a      	lsls	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a3c      	ldr	r2, [pc, #240]	; (8003790 <HAL_DMA_Init+0x14c>)
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800370e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003712:	60fb      	str	r3, [r7, #12]
=======
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< HEAD
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800371c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	601a      	str	r2, [r3, #0]
=======
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
<<<<<<< HEAD
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fa80 	bl	8003c50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003758:	d102      	bne.n	8003760 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	605a      	str	r2, [r3, #4]
=======
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa80 	bl	8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003700:	d102      	bne.n	8003708 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
<<<<<<< HEAD
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003768:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800376c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003776:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d010      	beq.n	80037a2 <HAL_DMA_Init+0x106>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b04      	cmp	r3, #4
 8003786:	d80c      	bhi.n	80037a2 <HAL_DMA_Init+0x106>
=======
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003714:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800371e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d010      	beq.n	800374a <HAL_DMA_Init+0x106>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d80c      	bhi.n	800374a <HAL_DMA_Init+0x106>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
<<<<<<< HEAD
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fa9f 	bl	8003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	e008      	b.n	80037b4 <HAL_DMA_Init+0x118>
=======
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fa9f 	bl	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	e008      	b.n	800375c <HAL_DMA_Init+0x118>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
<<<<<<< HEAD
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	65da      	str	r2, [r3, #92]	; 0x5c
=======
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	65da      	str	r2, [r3, #92]	; 0x5c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
<<<<<<< HEAD
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40020407 	.word	0x40020407
 80037d8:	bffdfff8 	.word	0xbffdfff8
 80037dc:	cccccccd 	.word	0xcccccccd
 80037e0:	40020000 	.word	0x40020000
 80037e4:	bffdfbf8 	.word	0xbffdfbf8
 80037e8:	40020400 	.word	0x40020400

080037ec <HAL_DMA_Start_IT>:
=======
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40020407 	.word	0x40020407
 8003780:	bffdfff8 	.word	0xbffdfff8
 8003784:	cccccccd 	.word	0xcccccccd
 8003788:	40020000 	.word	0x40020000
 800378c:	bffdfbf8 	.word	0xbffdfbf8
 8003790:	40020400 	.word	0x40020400

08003794 <HAL_DMA_Start_IT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
<<<<<<< HEAD
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]
=======
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_DMA_Start_IT+0x20>
 8003808:	2302      	movs	r3, #2
 800380a:	e066      	b.n	80038da <HAL_DMA_Start_IT+0xee>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d155      	bne.n	80038cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f9c5 	bl	8003bd4 <DMA_SetConfig>
=======
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Start_IT+0x20>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e066      	b.n	8003882 <HAL_DMA_Start_IT+0xee>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d155      	bne.n	8003874 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f9c5 	bl	8003b7c <DMA_SetConfig>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
<<<<<<< HEAD
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 020e 	orr.w	r2, r2, #14
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e00f      	b.n	8003884 <HAL_DMA_Start_IT+0x98>
=======
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 020e 	orr.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e00f      	b.n	800382c <HAL_DMA_Start_IT+0x98>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
<<<<<<< HEAD
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0204 	bic.w	r2, r2, #4
 8003872:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 020a 	orr.w	r2, r2, #10
 8003882:	601a      	str	r2, [r3, #0]
=======
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 020a 	orr.w	r2, r2, #10
 800382a:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
<<<<<<< HEAD
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_DMA_Start_IT+0xce>
=======
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003848:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_DMA_Start_IT+0xce>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b8:	601a      	str	r2, [r3, #0]
=======
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003860:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e005      	b.n	80038d8 <HAL_DMA_Start_IT+0xec>
=======
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e005      	b.n	8003880 <HAL_DMA_Start_IT+0xec>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
 80038d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_DMA_Abort>:
=======
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800387c:	2302      	movs	r3, #2
 800387e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003880:	7dfb      	ldrb	r3, [r7, #23]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_DMA_Abort>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e04f      	b.n	8003994 <HAL_DMA_Abort+0xb2>
=======
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e04f      	b.n	800393c <HAL_DMA_Abort+0xb2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
<<<<<<< HEAD
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d008      	beq.n	8003912 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2204      	movs	r2, #4
 8003904:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e040      	b.n	8003994 <HAL_DMA_Abort+0xb2>
=======
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d008      	beq.n	80038ba <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2204      	movs	r2, #4
 80038ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e040      	b.n	800393c <HAL_DMA_Abort+0xb2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 020e 	bic.w	r2, r2, #14
 8003920:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003930:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f003 021c 	and.w	r2, r3, #28
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	2101      	movs	r1, #1
 8003950:	fa01 f202 	lsl.w	r2, r1, r2
 8003954:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800395e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00c      	beq.n	8003982 <HAL_DMA_Abort+0xa0>
=======
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 020e 	bic.w	r2, r2, #14
 80038c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f003 021c 	and.w	r2, r3, #28
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f202 	lsl.w	r2, r1, r2
 80038fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003906:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00c      	beq.n	800392a <HAL_DMA_Abort+0xa0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003976:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003980:	605a      	str	r2, [r3, #4]
=======
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800391e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003928:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_DMA_Abort_IT>:
=======
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_DMA_Abort_IT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d005      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2204      	movs	r2, #4
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	e047      	b.n	8003a54 <HAL_DMA_Abort_IT+0xb4>
=======
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d005      	beq.n	800396c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2204      	movs	r2, #4
 8003964:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e047      	b.n	80039fc <HAL_DMA_Abort_IT+0xb4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 020e 	bic.w	r2, r2, #14
 80039d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	f003 021c 	and.w	r2, r3, #28
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	2101      	movs	r1, #1
 8003a02:	fa01 f202 	lsl.w	r2, r1, r2
 8003a06:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a10:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00c      	beq.n	8003a34 <HAL_DMA_Abort_IT+0x94>
=======
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 020e 	bic.w	r2, r2, #14
 800397a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800399a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f003 021c 	and.w	r2, r3, #28
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f202 	lsl.w	r2, r1, r2
 80039ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_DMA_Abort_IT+0x94>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a32:	605a      	str	r2, [r3, #4]
=======
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039da:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
    }
  }
  return status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_DMA_IRQHandler>:
=======
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
    }
  }
  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_DMA_IRQHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f003 031c 	and.w	r3, r3, #28
 8003a7e:	2204      	movs	r2, #4
 8003a80:	409a      	lsls	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d026      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x7a>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d021      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d107      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0204 	bic.w	r2, r2, #4
 8003ab0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f003 021c 	and.w	r2, r3, #28
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2104      	movs	r1, #4
 8003ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac4:	605a      	str	r2, [r3, #4]
=======
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f003 031c 	and.w	r3, r3, #28
 8003a26:	2204      	movs	r2, #4
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d026      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x7a>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d021      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d107      	bne.n	8003a5a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0204 	bic.w	r2, r2, #4
 8003a58:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f003 021c 	and.w	r2, r3, #28
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2104      	movs	r1, #4
 8003a68:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6c:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d071      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ad6:	e06c      	b.n	8003bb2 <HAL_DMA_IRQHandler+0x154>
=======
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d071      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a7e:	e06c      	b.n	8003b5a <HAL_DMA_IRQHandler+0x154>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
<<<<<<< HEAD
=======
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	f003 031c 	and.w	r3, r3, #28
 8003a88:	2202      	movs	r2, #2
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02e      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xec>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d029      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 020a 	bic.w	r2, r2, #10
 8003aba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f003 021c 	and.w	r2, r3, #28
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2102      	movs	r1, #2
 8003ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	f003 031c 	and.w	r3, r3, #28
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d02e      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xec>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d029      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 020a 	bic.w	r2, r2, #10
 8003b12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b20:	f003 021c 	and.w	r2, r3, #28
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	2102      	movs	r1, #2
 8003b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d038      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8003b48:	e033      	b.n	8003bb2 <HAL_DMA_IRQHandler+0x154>
=======
 8003af0:	e033      	b.n	8003b5a <HAL_DMA_IRQHandler+0x154>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
<<<<<<< HEAD
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f003 031c 	and.w	r3, r3, #28
 8003b52:	2208      	movs	r2, #8
 8003b54:	409a      	lsls	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d02a      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x156>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d025      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x156>
=======
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f003 031c 	and.w	r3, r3, #28
 8003afa:	2208      	movs	r2, #8
 8003afc:	409a      	lsls	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d02a      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d025      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 020e 	bic.w	r2, r2, #14
 8003b76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	f003 021c 	and.w	r2, r3, #28
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
=======
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 020e 	bic.w	r2, r2, #14
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f003 021c 	and.w	r2, r3, #28
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    /* Nothing To Do */
  }
  return;
<<<<<<< HEAD
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
}
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_DMA_GetError>:
=======
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
}
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_DMA_GetError>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <DMA_SetConfig>:
=======
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <DMA_SetConfig>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bfc:	605a      	str	r2, [r3, #4]
=======
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ba4:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
<<<<<<< HEAD
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f003 021c 	and.w	r2, r3, #28
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d108      	bne.n	8003c34 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	60da      	str	r2, [r3, #12]
=======
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f003 021c 	and.w	r2, r3, #28
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d108      	bne.n	8003bdc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
<<<<<<< HEAD
 8003c32:	e007      	b.n	8003c44 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	60da      	str	r2, [r3, #12]
}
 8003c44:	bf00      	nop
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <DMA_CalcDMAMUXChannelBaseAndMask>:
=======
 8003bda:	e007      	b.n	8003bec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	60da      	str	r2, [r3, #12]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <DMA_CalcDMAMUXChannelBaseAndMask>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
=======
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
<<<<<<< HEAD
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d80a      	bhi.n	8003c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	089b      	lsrs	r3, r3, #2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c70:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6493      	str	r3, [r2, #72]	; 0x48
 8003c78:	e007      	b.n	8003c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
=======
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d80a      	bhi.n	8003c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c18:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6493      	str	r3, [r2, #72]	; 0x48
 8003c20:	e007      	b.n	8003c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
<<<<<<< HEAD
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	009a      	lsls	r2, r3, #2
 8003c82:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c84:	4413      	add	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6493      	str	r3, [r2, #72]	; 0x48
=======
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	009a      	lsls	r2, r3, #2
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6493      	str	r3, [r2, #72]	; 0x48
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
<<<<<<< HEAD
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	3b08      	subs	r3, #8
 8003c92:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ca0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2201      	movs	r2, #1
 8003caa:	409a      	lsls	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cb0:	bf00      	nop
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40020407 	.word	0x40020407
 8003cc0:	4002081c 	.word	0x4002081c
 8003cc4:	cccccccd 	.word	0xcccccccd
 8003cc8:	40020880 	.word	0x40020880

08003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
=======
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	3b08      	subs	r3, #8
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c48:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2201      	movs	r2, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40020407 	.word	0x40020407
 8003c68:	4002081c 	.word	0x4002081c
 8003c6c:	cccccccd 	.word	0xcccccccd
 8003c70:	40020880 	.word	0x40020880

08003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003cf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	1000823f 	.word	0x1000823f
 8003d14:	40020940 	.word	0x40020940

08003d18 <HAL_GPIO_Init>:
=======
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c84:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003c98:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	1000823f 	.word	0x1000823f
 8003cbc:	40020940 	.word	0x40020940

08003cc0 <HAL_GPIO_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
=======
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8003d26:	e14c      	b.n	8003fc2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	fa01 f303 	lsl.w	r3, r1, r3
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 813e 	beq.w	8003fbc <HAL_GPIO_Init+0x2a4>
=======
 8003cce:	e14c      	b.n	8003f6a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 813e 	beq.w	8003f64 <HAL_GPIO_Init+0x2a4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d005      	beq.n	8003d58 <HAL_GPIO_Init+0x40>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d130      	bne.n	8003dba <HAL_GPIO_Init+0xa2>
=======
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d005      	beq.n	8003d00 <HAL_GPIO_Init+0x40>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d130      	bne.n	8003d62 <HAL_GPIO_Init+0xa2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	2203      	movs	r2, #3
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d8e:	2201      	movs	r2, #1
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 0201 	and.w	r2, r3, #1
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	605a      	str	r2, [r3, #4]
=======
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d36:	2201      	movs	r2, #1
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0201 	and.w	r2, r3, #1
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< HEAD
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d017      	beq.n	8003df6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	60da      	str	r2, [r3, #12]
=======
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d017      	beq.n	8003d9e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	60da      	str	r2, [r3, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d123      	bne.n	8003e4a <HAL_GPIO_Init+0x132>
=======
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d123      	bne.n	8003df2 <HAL_GPIO_Init+0x132>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< HEAD
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	220f      	movs	r2, #15
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	08da      	lsrs	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3208      	adds	r2, #8
 8003e44:	6939      	ldr	r1, [r7, #16]
 8003e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	08da      	lsrs	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3208      	adds	r2, #8
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	08da      	lsrs	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3208      	adds	r2, #8
 8003dec:	6939      	ldr	r1, [r7, #16]
 8003dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 0203 	and.w	r2, r3, #3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	601a      	str	r2, [r3, #0]
=======
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0203 	and.w	r2, r3, #3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8098 	beq.w	8003fbc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e8c:	4a54      	ldr	r2, [pc, #336]	; (8003fe0 <HAL_GPIO_Init+0x2c8>)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	3302      	adds	r3, #2
 8003e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	220f      	movs	r2, #15
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003eb6:	d019      	beq.n	8003eec <HAL_GPIO_Init+0x1d4>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a4a      	ldr	r2, [pc, #296]	; (8003fe4 <HAL_GPIO_Init+0x2cc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <HAL_GPIO_Init+0x1d0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a49      	ldr	r2, [pc, #292]	; (8003fe8 <HAL_GPIO_Init+0x2d0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00d      	beq.n	8003ee4 <HAL_GPIO_Init+0x1cc>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a48      	ldr	r2, [pc, #288]	; (8003fec <HAL_GPIO_Init+0x2d4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <HAL_GPIO_Init+0x1c8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a47      	ldr	r2, [pc, #284]	; (8003ff0 <HAL_GPIO_Init+0x2d8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d101      	bne.n	8003edc <HAL_GPIO_Init+0x1c4>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	e008      	b.n	8003eee <HAL_GPIO_Init+0x1d6>
 8003edc:	2307      	movs	r3, #7
 8003ede:	e006      	b.n	8003eee <HAL_GPIO_Init+0x1d6>
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e004      	b.n	8003eee <HAL_GPIO_Init+0x1d6>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e002      	b.n	8003eee <HAL_GPIO_Init+0x1d6>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <HAL_GPIO_Init+0x1d6>
 8003eec:	2300      	movs	r3, #0
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	f002 0203 	and.w	r2, r2, #3
 8003ef4:	0092      	lsls	r2, r2, #2
 8003ef6:	4093      	lsls	r3, r2
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003efe:	4938      	ldr	r1, [pc, #224]	; (8003fe0 <HAL_GPIO_Init+0x2c8>)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	3302      	adds	r3, #2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f0c:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_GPIO_Init+0x2dc>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f30:	4a30      	ldr	r2, [pc, #192]	; (8003ff4 <HAL_GPIO_Init+0x2dc>)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f36:	4b2f      	ldr	r3, [pc, #188]	; (8003ff4 <HAL_GPIO_Init+0x2dc>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f5a:	4a26      	ldr	r2, [pc, #152]	; (8003ff4 <HAL_GPIO_Init+0x2dc>)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_GPIO_Init+0x2dc>)
 8003f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f86:	4a1b      	ldr	r2, [pc, #108]	; (8003ff4 <HAL_GPIO_Init+0x2dc>)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003f8e:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_GPIO_Init+0x2dc>)
 8003f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ff4 <HAL_GPIO_Init+0x2dc>)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
=======
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8098 	beq.w	8003f64 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e34:	4a54      	ldr	r2, [pc, #336]	; (8003f88 <HAL_GPIO_Init+0x2c8>)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	220f      	movs	r2, #15
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e5e:	d019      	beq.n	8003e94 <HAL_GPIO_Init+0x1d4>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a4a      	ldr	r2, [pc, #296]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d013      	beq.n	8003e90 <HAL_GPIO_Init+0x1d0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a49      	ldr	r2, [pc, #292]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00d      	beq.n	8003e8c <HAL_GPIO_Init+0x1cc>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a48      	ldr	r2, [pc, #288]	; (8003f94 <HAL_GPIO_Init+0x2d4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d007      	beq.n	8003e88 <HAL_GPIO_Init+0x1c8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a47      	ldr	r2, [pc, #284]	; (8003f98 <HAL_GPIO_Init+0x2d8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_GPIO_Init+0x1c4>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e008      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e84:	2307      	movs	r3, #7
 8003e86:	e006      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e004      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e002      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e94:	2300      	movs	r3, #0
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	f002 0203 	and.w	r2, r2, #3
 8003e9c:	0092      	lsls	r2, r2, #2
 8003e9e:	4093      	lsls	r3, r2
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ea6:	4938      	ldr	r1, [pc, #224]	; (8003f88 <HAL_GPIO_Init+0x2c8>)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	3302      	adds	r3, #2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eb4:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ed8:	4a30      	ldr	r2, [pc, #192]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ede:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f02:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f08:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f2e:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003f36:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f5c:	4a0f      	ldr	r2, [pc, #60]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }

    position++;
<<<<<<< HEAD
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f47f aeab 	bne.w	8003d28 <HAL_GPIO_Init+0x10>
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	48000400 	.word	0x48000400
 8003fe8:	48000800 	.word	0x48000800
 8003fec:	48000c00 	.word	0x48000c00
 8003ff0:	48001000 	.word	0x48001000
 8003ff4:	58000800 	.word	0x58000800

08003ff8 <HAL_GPIO_WritePin>:
=======
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3301      	adds	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f47f aeab 	bne.w	8003cd0 <HAL_GPIO_Init+0x10>
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	48000400 	.word	0x48000400
 8003f90:	48000800 	.word	0x48000800
 8003f94:	48000c00 	.word	0x48000c00
 8003f98:	48001000 	.word	0x48001000
 8003f9c:	58000800 	.word	0x58000800

08003fa0 <HAL_GPIO_WritePin>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
 8004004:	4613      	mov	r3, r2
 8004006:	707b      	strb	r3, [r7, #1]
=======
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
 8003fac:	4613      	mov	r3, r2
 8003fae:	707b      	strb	r3, [r7, #1]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8004008:	787b      	ldrb	r3, [r7, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	619a      	str	r2, [r3, #24]
=======
 8003fb0:	787b      	ldrb	r3, [r7, #1]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	619a      	str	r2, [r3, #24]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< HEAD
 8004014:	e002      	b.n	800401c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004016:	887a      	ldrh	r2, [r7, #2]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800403a:	887a      	ldrh	r2, [r7, #2]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4013      	ands	r3, r2
 8004040:	041a      	lsls	r2, r3, #16
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	43d9      	mvns	r1, r3
 8004046:	887b      	ldrh	r3, [r7, #2]
 8004048:	400b      	ands	r3, r1
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	619a      	str	r2, [r3, #24]
=======
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e08d      	b.n	800418a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd fa8e 	bl	80015a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	; 0x24
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	e006      	b.n	80040e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d108      	bne.n	80040fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fa:	605a      	str	r2, [r3, #4]
 80040fc:	e007      	b.n	800410e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800410c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800411c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004120:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004130:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69d9      	ldr	r1, [r3, #28]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1a      	ldr	r2, [r3, #32]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d138      	bne.n	800421a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e032      	b.n	800421c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2224      	movs	r2, #36	; 0x24
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6819      	ldr	r1, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b20      	cmp	r3, #32
 800423c:	d139      	bne.n	80042b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004248:	2302      	movs	r3, #2
 800424a:	e033      	b.n	80042b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	; 0x24
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800427a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

<<<<<<< HEAD
080042c0 <HAL_PCD_Init>:
=======
08004926 <HAL_PCD_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 80042c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c2:	b08b      	sub	sp, #44	; 0x2c
 80042c4:	af06      	add	r7, sp, #24
 80042c6:	6078      	str	r0, [r7, #4]
=======
 8004926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004928:	b08b      	sub	sp, #44	; 0x2c
 800492a:	af06      	add	r7, sp, #24
 800492c:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0cb      	b.n	800446a <HAL_PCD_Init+0x1aa>
=======
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0cb      	b.n	8004ad0 <HAL_PCD_Init+0x1aa>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
<<<<<<< HEAD
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
=======
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd fa4c 	bl	8001784 <HAL_PCD_MspInit>
=======
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7fc fec9 	bl	80016e4 <HAL_PCD_MspInit>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2203      	movs	r2, #3
 80042f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f005 f8c9 	bl	8009490 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
 8004302:	e040      	b.n	8004386 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	440b      	add	r3, r1
 8004314:	3301      	adds	r3, #1
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	440b      	add	r3, r1
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	440b      	add	r3, r1
 800433e:	3303      	adds	r3, #3
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	440b      	add	r3, r1
 8004352:	3338      	adds	r3, #56	; 0x38
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004358:	7bfa      	ldrb	r2, [r7, #15]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	440b      	add	r3, r1
 8004366:	333c      	adds	r3, #60	; 0x3c
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800436c:	7bfa      	ldrb	r2, [r7, #15]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	440b      	add	r3, r1
 800437a:	3340      	adds	r3, #64	; 0x40
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	3301      	adds	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
 8004386:	7bfa      	ldrb	r2, [r7, #15]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	d3b9      	bcc.n	8004304 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004390:	2300      	movs	r3, #0
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e044      	b.n	8004420 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	440b      	add	r3, r1
 80043a4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	440b      	add	r3, r1
 80043ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043be:	7bfa      	ldrb	r2, [r7, #15]
 80043c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	440b      	add	r3, r1
 80043d0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043d8:	7bfa      	ldrb	r2, [r7, #15]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	440b      	add	r3, r1
 80043fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004404:	7bfa      	ldrb	r2, [r7, #15]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	440b      	add	r3, r1
 8004412:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	3301      	adds	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
 8004420:	7bfa      	ldrb	r2, [r7, #15]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	429a      	cmp	r2, r3
 8004428:	d3b5      	bcc.n	8004396 <HAL_PCD_Init+0xd6>
=======
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2203      	movs	r2, #3
 8004956:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f005 f8c8 	bl	8009af4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]
 8004968:	e040      	b.n	80049ec <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	440b      	add	r3, r1
 800497a:	3301      	adds	r3, #1
 800497c:	2201      	movs	r2, #1
 800497e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	440b      	add	r3, r1
 8004990:	7bfa      	ldrb	r2, [r7, #15]
 8004992:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	440b      	add	r3, r1
 80049a4:	3303      	adds	r3, #3
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	440b      	add	r3, r1
 80049b8:	3338      	adds	r3, #56	; 0x38
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	440b      	add	r3, r1
 80049cc:	333c      	adds	r3, #60	; 0x3c
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	440b      	add	r3, r1
 80049e0:	3340      	adds	r3, #64	; 0x40
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	3301      	adds	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
 80049ec:	7bfa      	ldrb	r2, [r7, #15]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d3b9      	bcc.n	800496a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
 80049fa:	e044      	b.n	8004a86 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049fc:	7bfa      	ldrb	r2, [r7, #15]
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	440b      	add	r3, r1
 8004a0a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a12:	7bfa      	ldrb	r2, [r7, #15]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	440b      	add	r3, r1
 8004a20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a28:	7bfa      	ldrb	r2, [r7, #15]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	440b      	add	r3, r1
 8004a36:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a3e:	7bfa      	ldrb	r2, [r7, #15]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	440b      	add	r3, r1
 8004a4c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a54:	7bfa      	ldrb	r2, [r7, #15]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	440b      	add	r3, r1
 8004a62:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	440b      	add	r3, r1
 8004a78:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	3301      	adds	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d3b5      	bcc.n	80049fc <HAL_PCD_Init+0xd6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
<<<<<<< HEAD
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	687e      	ldr	r6, [r7, #4]
 8004432:	466d      	mov	r5, sp
 8004434:	f106 0410 	add.w	r4, r6, #16
 8004438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800443a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	602b      	str	r3, [r5, #0]
 8004440:	1d33      	adds	r3, r6, #4
 8004442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004444:	6838      	ldr	r0, [r7, #0]
 8004446:	f005 f83e 	bl	80094c6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d102      	bne.n	8004468 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f805 	bl	8004472 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004472 <HAL_PCDEx_ActivateLPM>:
=======
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	687e      	ldr	r6, [r7, #4]
 8004a98:	466d      	mov	r5, sp
 8004a9a:	f106 0410 	add.w	r4, r6, #16
 8004a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	602b      	str	r3, [r5, #0]
 8004aa6:	1d33      	adds	r3, r6, #4
 8004aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aaa:	6838      	ldr	r0, [r7, #0]
 8004aac:	f005 f83d 	bl	8009b2a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d102      	bne.n	8004ace <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f805 	bl	8004ad8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ad8 <HAL_PCDEx_ActivateLPM>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004496:	b29b      	uxth	r3, r3
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_PWR_EnableBkUpAccess>:
=======
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f043 0302 	orr.w	r3, r3, #2
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_PWR_EnableBkUpAccess>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
<<<<<<< HEAD
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d6:	6013      	str	r3, [r2, #0]
}
 80044d8:	bf00      	nop
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	58000400 	.word	0x58000400

080044e8 <HAL_PWREx_GetVoltageRange>:
=======
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3a:	6013      	str	r3, [r2, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	58000400 	.word	0x58000400

08004b4c <HAL_PWREx_GetVoltageRange>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< HEAD
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <HAL_PWREx_GetVoltageRange+0x18>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	58000400 	.word	0x58000400

08004504 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004516:	d101      	bne.n	800451c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_RCC_HSE_Enable>:
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453a:	6013      	str	r3, [r2, #0]
}
 800453c:	bf00      	nop
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <LL_RCC_HSE_Disable>:
{
 8004546:	b480      	push	{r7}
 8004548:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004558:	6013      	str	r3, [r2, #0]
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <LL_RCC_HSE_IsReady>:
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004576:	d101      	bne.n	800457c <LL_RCC_HSE_IsReady+0x18>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <LL_RCC_HSE_IsReady+0x1a>
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_RCC_HSI_Enable>:
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800458c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <LL_RCC_HSI_Disable>:
{
 80045a6:	b480      	push	{r7}
 80045a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80045aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b8:	6013      	str	r3, [r2, #0]
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_RCC_HSI_IsReady>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80045c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d6:	d101      	bne.n	80045dc <LL_RCC_HSI_IsReady+0x18>
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <LL_RCC_HSI_IsReady+0x1a>
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	061b      	lsls	r3, r3, #24
 80045fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004602:	4313      	orrs	r3, r2
 8004604:	604b      	str	r3, [r1, #4]
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <LL_RCC_HSI48_Enable>:
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800461e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800462a:	bf00      	nop
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_RCC_HSI48_Disable>:
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800464c:	bf00      	nop
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <LL_RCC_HSI48_IsReady>:
{
 8004656:	b480      	push	{r7}
 8004658:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800465a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d101      	bne.n	800466e <LL_RCC_HSI48_IsReady+0x18>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <LL_RCC_HSI48_IsReady+0x1a>
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <LL_RCC_LSE_Enable>:
{
 800467a:	b480      	push	{r7}
 800467c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800467e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004692:	bf00      	nop
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_RCC_LSE_Disable>:
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <LL_RCC_LSE_EnableBypass>:
{
 80046be:	b480      	push	{r7}
 80046c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ce:	f043 0304 	orr.w	r3, r3, #4
 80046d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046d6:	bf00      	nop
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <LL_RCC_LSE_DisableBypass>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f0:	f023 0304 	bic.w	r3, r3, #4
 80046f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <LL_RCC_LSE_IsReady>:
=======
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	58000400 	.word	0x58000400

08004b68 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7a:	d101      	bne.n	8004b80 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_RCC_HSE_Enable>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9e:	6013      	str	r3, [r2, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <LL_RCC_HSE_Disable>:
{
 8004baa:	b480      	push	{r7}
 8004bac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_HSE_IsReady>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bda:	d101      	bne.n	8004be0 <LL_RCC_HSE_IsReady+0x18>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <LL_RCC_HSE_IsReady+0x1a>
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <LL_RCC_HSI_Enable>:
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <LL_RCC_HSI_Disable>:
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1c:	6013      	str	r3, [r2, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <LL_RCC_HSI_IsReady>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3a:	d101      	bne.n	8004c40 <LL_RCC_HSI_IsReady+0x18>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <LL_RCC_HSI_IsReady+0x1a>
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <LL_RCC_HSI_SetCalibTrimming>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	061b      	lsls	r3, r3, #24
 8004c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c66:	4313      	orrs	r3, r2
 8004c68:	604b      	str	r3, [r1, #4]
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <LL_RCC_HSI48_Enable>:
{
 8004c76:	b480      	push	{r7}
 8004c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004c8e:	bf00      	nop
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <LL_RCC_HSI48_Disable>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004cb0:	bf00      	nop
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <LL_RCC_HSI48_IsReady>:
{
 8004cba:	b480      	push	{r7}
 8004cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d101      	bne.n	8004cd2 <LL_RCC_HSI48_IsReady+0x18>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <LL_RCC_HSI48_IsReady+0x1a>
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_RCC_LSE_Enable>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004cf6:	bf00      	nop
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <LL_RCC_LSE_Disable>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <LL_RCC_LSE_EnableBypass>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_RCC_LSE_DisableBypass>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_RCC_LSE_IsReady>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
<<<<<<< HEAD
 8004702:	b480      	push	{r7}
 8004704:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d101      	bne.n	800471a <LL_RCC_LSE_IsReady+0x18>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <LL_RCC_LSE_IsReady+0x1a>
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <LL_RCC_LSI1_Enable>:
=======
 8004d66:	b480      	push	{r7}
 8004d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d101      	bne.n	8004d7e <LL_RCC_LSE_IsReady+0x18>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <LL_RCC_LSE_IsReady+0x1a>
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <LL_RCC_LSI1_Enable>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
<<<<<<< HEAD
 8004726:	b480      	push	{r7}
 8004728:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800473e:	bf00      	nop
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <LL_RCC_LSI1_Disable>:
=======
 8004d8a:	b480      	push	{r7}
 8004d8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004da2:	bf00      	nop
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <LL_RCC_LSI1_Disable>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
<<<<<<< HEAD
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800474c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <LL_RCC_LSI1_IsReady>:
=======
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004dc4:	bf00      	nop
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <LL_RCC_LSI1_IsReady>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
<<<<<<< HEAD
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b02      	cmp	r3, #2
 800477c:	d101      	bne.n	8004782 <LL_RCC_LSI1_IsReady+0x18>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <LL_RCC_LSI1_IsReady+0x1a>
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <LL_RCC_LSI2_Enable>:
=======
 8004dce:	b480      	push	{r7}
 8004dd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d101      	bne.n	8004de6 <LL_RCC_LSI1_IsReady+0x18>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <LL_RCC_LSI1_IsReady+0x1a>
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <LL_RCC_LSI2_Enable>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
<<<<<<< HEAD
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479e:	f043 0304 	orr.w	r3, r3, #4
 80047a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047a6:	bf00      	nop
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <LL_RCC_LSI2_Disable>:
=======
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e02:	f043 0304 	orr.w	r3, r3, #4
 8004e06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e0a:	bf00      	nop
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_RCC_LSI2_Disable>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
<<<<<<< HEAD
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80047b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c0:	f023 0304 	bic.w	r3, r3, #4
 80047c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <LL_RCC_LSI2_IsReady>:
=======
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e24:	f023 0304 	bic.w	r3, r3, #4
 8004e28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <LL_RCC_LSI2_IsReady>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
<<<<<<< HEAD
 80047d2:	b480      	push	{r7}
 80047d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d101      	bne.n	80047ea <LL_RCC_LSI2_IsReady+0x18>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <LL_RCC_LSI2_IsReady+0x1a>
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <LL_RCC_LSI2_SetTrimming>:
=======
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d101      	bne.n	8004e4e <LL_RCC_LSI2_IsReady+0x18>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <LL_RCC_LSI2_IsReady+0x1a>
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_RCC_LSI2_SetTrimming>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
<<<<<<< HEAD
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80047fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004806:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <LL_RCC_MSI_Enable>:
=======
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <LL_RCC_MSI_Enable>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
<<<<<<< HEAD
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	6013      	str	r3, [r2, #0]
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <LL_RCC_MSI_Disable>:
=======
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	6013      	str	r3, [r2, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <LL_RCC_MSI_Disable>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
<<<<<<< HEAD
 8004842:	b480      	push	{r7}
 8004844:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	6013      	str	r3, [r2, #0]
}
 8004856:	bf00      	nop
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <LL_RCC_MSI_IsReady>:
=======
 8004ea6:	b480      	push	{r7}
 8004ea8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6013      	str	r3, [r2, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <LL_RCC_MSI_IsReady>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
<<<<<<< HEAD
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b02      	cmp	r3, #2
 8004870:	d101      	bne.n	8004876 <LL_RCC_MSI_IsReady+0x16>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <LL_RCC_MSI_IsReady+0x18>
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <LL_RCC_MSI_SetRange>:
=======
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d101      	bne.n	8004eda <LL_RCC_MSI_IsReady+0x16>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <LL_RCC_MSI_IsReady+0x18>
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_RCC_MSI_SetRange>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
<<<<<<< HEAD
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4313      	orrs	r3, r2
 800489c:	600b      	str	r3, [r1, #0]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <LL_RCC_MSI_GetRange>:
=======
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <LL_RCC_MSI_GetRange>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
<<<<<<< HEAD
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80048b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ba:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2bb0      	cmp	r3, #176	; 0xb0
 80048c0:	d901      	bls.n	80048c6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80048c2:	23b0      	movs	r3, #176	; 0xb0
 80048c4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80048c6:	687b      	ldr	r3, [r7, #4]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <LL_RCC_MSI_SetCalibTrimming>:
=======
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f1e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2bb0      	cmp	r3, #176	; 0xb0
 8004f24:	d901      	bls.n	8004f2a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004f26:	23b0      	movs	r3, #176	; 0xb0
 8004f28:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004f2a:	687b      	ldr	r3, [r7, #4]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_RCC_MSI_SetCalibTrimming>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
<<<<<<< HEAD
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80048dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_RCC_SetSysClkSource>:
=======
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_SetSysClkSource>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
<<<<<<< HEAD
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f023 0203 	bic.w	r2, r3, #3
 8004910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <LL_RCC_GetSysClkSource>:
=======
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f023 0203 	bic.w	r2, r3, #3
 8004f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <LL_RCC_GetSysClkSource>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
<<<<<<< HEAD
 8004926:	b480      	push	{r7}
 8004928:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800492a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 030c 	and.w	r3, r3, #12
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <LL_RCC_SetAHBPrescaler>:
=======
 8004f8a:	b480      	push	{r7}
 8004f8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 030c 	and.w	r3, r3, #12
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <LL_RCC_SetAHBPrescaler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
<<<<<<< HEAD
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <LL_C2_RCC_SetAHBPrescaler>:
=======
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <LL_C2_RCC_SetAHBPrescaler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
<<<<<<< HEAD
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800496e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004972:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800497a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <LL_RCC_SetAHB4Prescaler>:
=======
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <LL_RCC_SetAHB4Prescaler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
<<<<<<< HEAD
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049a2:	f023 020f 	bic.w	r2, r3, #15
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_RCC_SetAPB1Prescaler>:
=======
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005006:	f023 020f 	bic.w	r2, r3, #15
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <LL_RCC_SetAPB1Prescaler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
<<<<<<< HEAD
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <LL_RCC_SetAPB2Prescaler>:
=======
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800502c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4313      	orrs	r3, r2
 800503e:	608b      	str	r3, [r1, #8]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <LL_RCC_SetAPB2Prescaler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
<<<<<<< HEAD
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80049f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	608b      	str	r3, [r1, #8]
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_RCC_GetAHBPrescaler>:
=======
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800505e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4313      	orrs	r3, r2
 8005066:	608b      	str	r3, [r1, #8]
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_RCC_GetAHBPrescaler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
<<<<<<< HEAD
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_C2_RCC_GetAHBPrescaler>:
=======
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005082:	4618      	mov	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <LL_C2_RCC_GetAHBPrescaler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
<<<<<<< HEAD
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <LL_RCC_GetAHB4Prescaler>:
=======
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005094:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800509c:	4618      	mov	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <LL_RCC_GetAHB4Prescaler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
<<<<<<< HEAD
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <LL_RCC_GetAPB1Prescaler>:
=======
 80050a6:	b480      	push	{r7}
 80050a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80050aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_RCC_GetAPB1Prescaler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
<<<<<<< HEAD
 8004a5e:	b480      	push	{r7}
 8004a60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <LL_RCC_GetAPB2Prescaler>:
=======
 80050c2:	b480      	push	{r7}
 80050c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80050c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <LL_RCC_GetAPB2Prescaler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
<<<<<<< HEAD
 8004a76:	b480      	push	{r7}
 8004a78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <LL_RCC_PLL_Enable>:
=======
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <LL_RCC_PLL_Enable>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
<<<<<<< HEAD
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa0:	6013      	str	r3, [r2, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <LL_RCC_PLL_Disable>:
=======
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005104:	6013      	str	r3, [r2, #0]
}
 8005106:	bf00      	nop
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <LL_RCC_PLL_Disable>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
<<<<<<< HEAD
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004abe:	6013      	str	r3, [r2, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <LL_RCC_PLL_IsReady>:
=======
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <LL_RCC_PLL_IsReady>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
<<<<<<< HEAD
 8004aca:	b480      	push	{r7}
 8004acc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004adc:	d101      	bne.n	8004ae2 <LL_RCC_PLL_IsReady+0x18>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <LL_RCC_PLL_IsReady+0x1a>
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <LL_RCC_PLL_GetN>:
=======
 800512e:	b480      	push	{r7}
 8005130:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005140:	d101      	bne.n	8005146 <LL_RCC_PLL_IsReady+0x18>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <LL_RCC_PLL_IsReady+0x1a>
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <LL_RCC_PLL_GetN>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
<<<<<<< HEAD
 8004aee:	b480      	push	{r7}
 8004af0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <LL_RCC_PLL_GetR>:
=======
 8005152:	b480      	push	{r7}
 8005154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	0a1b      	lsrs	r3, r3, #8
 800515e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005162:	4618      	mov	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_RCC_PLL_GetR>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
<<<<<<< HEAD
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_RCC_PLL_GetDivider>:
=======
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800517a:	4618      	mov	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <LL_RCC_PLL_GetDivider>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
<<<<<<< HEAD
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_RCC_PLL_GetMainSource>:
=======
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005192:	4618      	mov	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <LL_RCC_PLL_GetMainSource>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
<<<<<<< HEAD
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0303 	and.w	r3, r3, #3
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <LL_RCC_IsActiveFlag_HPRE>:
=======
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f003 0303 	and.w	r3, r3, #3
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_RCC_IsActiveFlag_HPRE>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
<<<<<<< HEAD
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b62:	d101      	bne.n	8004b68 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <LL_RCC_IsActiveFlag_C2HPRE>:
=======
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80051b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c6:	d101      	bne.n	80051cc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_IsActiveFlag_C2HPRE>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
<<<<<<< HEAD
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b88:	d101      	bne.n	8004b8e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <LL_RCC_IsActiveFlag_SHDHPRE>:
=======
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ec:	d101      	bne.n	80051f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <LL_RCC_IsActiveFlag_SHDHPRE>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
<<<<<<< HEAD
 8004b9a:	b480      	push	{r7}
 8004b9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bae:	d101      	bne.n	8004bb4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <LL_RCC_IsActiveFlag_PPRE1>:
=======
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005206:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800520a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005212:	d101      	bne.n	8005218 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <LL_RCC_IsActiveFlag_PPRE1>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
<<<<<<< HEAD
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bd2:	d101      	bne.n	8004bd8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <LL_RCC_IsActiveFlag_PPRE2>:
=======
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005236:	d101      	bne.n	800523c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_RCC_IsActiveFlag_PPRE2>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
<<<<<<< HEAD
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bf6:	d101      	bne.n	8004bfc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_RCC_OscConfig>:
=======
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800525a:	d101      	bne.n	8005260 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_RCC_OscConfig>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b08d      	sub	sp, #52	; 0x34
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
=======
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b08d      	sub	sp, #52	; 0x34
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e363      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
=======
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e363      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
<<<<<<< HEAD
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 808d 	beq.w	8004d42 <HAL_RCC_OscConfig+0x13a>
=======
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 808d 	beq.w	80053a6 <HAL_RCC_OscConfig+0x13a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8004c28:	f7ff fe7d 	bl	8004926 <LL_RCC_GetSysClkSource>
 8004c2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c2e:	f7ff ff83 	bl	8004b38 <LL_RCC_PLL_GetMainSource>
 8004c32:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_RCC_OscConfig+0x3e>
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d147      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d144      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e347      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
=======
 800528c:	f7ff fe7d 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005290:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005292:	f7ff ff83 	bl	800519c <LL_RCC_PLL_GetMainSource>
 8005296:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_RCC_OscConfig+0x3e>
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d147      	bne.n	8005334 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d144      	bne.n	8005334 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e347      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< HEAD
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004c56:	f7ff fe28 	bl	80048aa <LL_RCC_MSI_GetRange>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	429c      	cmp	r4, r3
 8004c5e:	d914      	bls.n	8004c8a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fd61 	bl	800572c <RCC_SetFlashLatencyFromMSIRange>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e336      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
=======
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80052ba:	f7ff fe28 	bl	8004f0e <LL_RCC_MSI_GetRange>
 80052be:	4603      	mov	r3, r0
 80052c0:	429c      	cmp	r4, r3
 80052c2:	d914      	bls.n	80052ee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fd61 	bl	8005d90 <RCC_SetFlashLatencyFromMSIRange>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e336      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fe02 	bl	8004882 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fe26 	bl	80048d4 <LL_RCC_MSI_SetCalibTrimming>
 8004c88:	e013      	b.n	8004cb2 <HAL_RCC_OscConfig+0xaa>
=======
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff fe02 	bl	8004ee6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fe26 	bl	8004f38 <LL_RCC_MSI_SetCalibTrimming>
 80052ec:	e013      	b.n	8005316 <HAL_RCC_OscConfig+0xaa>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff fdf7 	bl	8004882 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fe1b 	bl	80048d4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fd42 	bl	800572c <RCC_SetFlashLatencyFromMSIRange>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e317      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
=======
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fdf7 	bl	8004ee6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fe1b 	bl	8004f38 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fd42 	bl	8005d90 <RCC_SetFlashLatencyFromMSIRange>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e317      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
<<<<<<< HEAD
 8004cb2:	f000 fcc9 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4aa4      	ldr	r2, [pc, #656]	; (8004f4c <HAL_RCC_OscConfig+0x344>)
 8004cba:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cbc:	4ba4      	ldr	r3, [pc, #656]	; (8004f50 <HAL_RCC_OscConfig+0x348>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fc fda9 	bl	8001818 <HAL_InitTick>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d039      	beq.n	8004d40 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e308      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
=======
 8005316:	f000 fcc9 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 800531a:	4603      	mov	r3, r0
 800531c:	4aa4      	ldr	r2, [pc, #656]	; (80055b0 <HAL_RCC_OscConfig+0x344>)
 800531e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005320:	4ba4      	ldr	r3, [pc, #656]	; (80055b4 <HAL_RCC_OscConfig+0x348>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f7fc fa27 	bl	8001778 <HAL_InitTick>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d039      	beq.n	80053a4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e308      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< HEAD
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01e      	beq.n	8004d16 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cd8:	f7ff fda4 	bl	8004824 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cdc:	f7fc fefa 	bl	8001ad4 <HAL_GetTick>
 8004ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ce4:	f7fc fef6 	bl	8001ad4 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e2f5      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004cf6:	f7ff fdb3 	bl	8004860 <LL_RCC_MSI_IsReady>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f1      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xdc>
=======
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01e      	beq.n	800537a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800533c:	f7ff fda4 	bl	8004e88 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005340:	f7fc fb78 	bl	8001a34 <HAL_GetTick>
 8005344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005348:	f7fc fb74 	bl	8001a34 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e2f5      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800535a:	f7ff fdb3 	bl	8004ec4 <LL_RCC_MSI_IsReady>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f1      	beq.n	8005348 <HAL_RCC_OscConfig+0xdc>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fdbc 	bl	8004882 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fde0 	bl	80048d4 <LL_RCC_MSI_SetCalibTrimming>
 8004d14:	e015      	b.n	8004d42 <HAL_RCC_OscConfig+0x13a>
=======
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fdbc 	bl	8004ee6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fde0 	bl	8004f38 <LL_RCC_MSI_SetCalibTrimming>
 8005378:	e015      	b.n	80053a6 <HAL_RCC_OscConfig+0x13a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< HEAD
 8004d16:	f7ff fd94 	bl	8004842 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d1a:	f7fc fedb 	bl	8001ad4 <HAL_GetTick>
 8004d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d22:	f7fc fed7 	bl	8001ad4 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e2d6      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d34:	f7ff fd94 	bl	8004860 <LL_RCC_MSI_IsReady>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f1      	bne.n	8004d22 <HAL_RCC_OscConfig+0x11a>
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d40:	bf00      	nop
=======
 800537a:	f7ff fd94 	bl	8004ea6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800537e:	f7fc fb59 	bl	8001a34 <HAL_GetTick>
 8005382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005386:	f7fc fb55 	bl	8001a34 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e2d6      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005398:	f7ff fd94 	bl	8004ec4 <LL_RCC_MSI_IsReady>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f1      	bne.n	8005386 <HAL_RCC_OscConfig+0x11a>
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80053a4:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d047      	beq.n	8004dde <HAL_RCC_OscConfig+0x1d6>
=======
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d047      	beq.n	8005442 <HAL_RCC_OscConfig+0x1d6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8004d4e:	f7ff fdea 	bl	8004926 <LL_RCC_GetSysClkSource>
 8004d52:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d54:	f7ff fef0 	bl	8004b38 <LL_RCC_PLL_GetMainSource>
 8004d58:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_OscConfig+0x164>
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d108      	bne.n	8004d78 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d105      	bne.n	8004d78 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d134      	bne.n	8004dde <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e2b4      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
=======
 80053b2:	f7ff fdea 	bl	8004f8a <LL_RCC_GetSysClkSource>
 80053b6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b8:	f7ff fef0 	bl	800519c <LL_RCC_PLL_GetMainSource>
 80053bc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_OscConfig+0x164>
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	d108      	bne.n	80053dc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d105      	bne.n	80053dc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d134      	bne.n	8005442 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e2b4      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d80:	d102      	bne.n	8004d88 <HAL_RCC_OscConfig+0x180>
 8004d82:	f7ff fbd1 	bl	8004528 <LL_RCC_HSE_Enable>
 8004d86:	e001      	b.n	8004d8c <HAL_RCC_OscConfig+0x184>
 8004d88:	f7ff fbdd 	bl	8004546 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d012      	beq.n	8004dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fc fe9e 	bl	8001ad4 <HAL_GetTick>
 8004d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fc fe9a 	bl	8001ad4 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e299      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004dae:	f7ff fbd9 	bl	8004564 <LL_RCC_HSE_IsReady>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f1      	beq.n	8004d9c <HAL_RCC_OscConfig+0x194>
 8004db8:	e011      	b.n	8004dde <HAL_RCC_OscConfig+0x1d6>
=======
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d102      	bne.n	80053ec <HAL_RCC_OscConfig+0x180>
 80053e6:	f7ff fbd1 	bl	8004b8c <LL_RCC_HSE_Enable>
 80053ea:	e001      	b.n	80053f0 <HAL_RCC_OscConfig+0x184>
 80053ec:	f7ff fbdd 	bl	8004baa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d012      	beq.n	800541e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f8:	f7fc fb1c 	bl	8001a34 <HAL_GetTick>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005400:	f7fc fb18 	bl	8001a34 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	; 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e299      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005412:	f7ff fbd9 	bl	8004bc8 <LL_RCC_HSE_IsReady>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f1      	beq.n	8005400 <HAL_RCC_OscConfig+0x194>
 800541c:	e011      	b.n	8005442 <HAL_RCC_OscConfig+0x1d6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004dba:	f7fc fe8b 	bl	8001ad4 <HAL_GetTick>
 8004dbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc2:	f7fc fe87 	bl	8001ad4 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b64      	cmp	r3, #100	; 0x64
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e286      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004dd4:	f7ff fbc6 	bl	8004564 <LL_RCC_HSE_IsReady>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f1      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x1ba>
=======
 800541e:	f7fc fb09 	bl	8001a34 <HAL_GetTick>
 8005422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005426:	f7fc fb05 	bl	8001a34 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b64      	cmp	r3, #100	; 0x64
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e286      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005438:	f7ff fbc6 	bl	8004bc8 <LL_RCC_HSE_IsReady>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f1      	bne.n	8005426 <HAL_RCC_OscConfig+0x1ba>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d04c      	beq.n	8004e84 <HAL_RCC_OscConfig+0x27c>
=======
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d04c      	beq.n	80054e8 <HAL_RCC_OscConfig+0x27c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8004dea:	f7ff fd9c 	bl	8004926 <LL_RCC_GetSysClkSource>
 8004dee:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004df0:	f7ff fea2 	bl	8004b38 <LL_RCC_PLL_GetMainSource>
 8004df4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_OscConfig+0x200>
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d10e      	bne.n	8004e20 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d10b      	bne.n	8004e20 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e266      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
=======
 800544e:	f7ff fd9c 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005452:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005454:	f7ff fea2 	bl	800519c <LL_RCC_PLL_GetMainSource>
 8005458:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d005      	beq.n	800546c <HAL_RCC_OscConfig+0x200>
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d10e      	bne.n	8005484 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d10b      	bne.n	8005484 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e266      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fbe5 	bl	80045e8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e1e:	e031      	b.n	8004e84 <HAL_RCC_OscConfig+0x27c>
=======
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fbe5 	bl	8004c4c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005482:	e031      	b.n	80054e8 <HAL_RCC_OscConfig+0x27c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d019      	beq.n	8004e5c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e28:	f7ff fbae 	bl	8004588 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fc fe52 	bl	8001ad4 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e34:	f7fc fe4e 	bl	8001ad4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e24d      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e46:	f7ff fbbd 	bl	80045c4 <LL_RCC_HSI_IsReady>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f1      	beq.n	8004e34 <HAL_RCC_OscConfig+0x22c>
=======
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d019      	beq.n	80054c0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800548c:	f7ff fbae 	bl	8004bec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7fc fad0 	bl	8001a34 <HAL_GetTick>
 8005494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005498:	f7fc facc 	bl	8001a34 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e24d      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80054aa:	f7ff fbbd 	bl	8004c28 <LL_RCC_HSI_IsReady>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f1      	beq.n	8005498 <HAL_RCC_OscConfig+0x22c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fbc7 	bl	80045e8 <LL_RCC_HSI_SetCalibTrimming>
 8004e5a:	e013      	b.n	8004e84 <HAL_RCC_OscConfig+0x27c>
=======
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fbc7 	bl	8004c4c <LL_RCC_HSI_SetCalibTrimming>
 80054be:	e013      	b.n	80054e8 <HAL_RCC_OscConfig+0x27c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8004e5c:	f7ff fba3 	bl	80045a6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fc fe38 	bl	8001ad4 <HAL_GetTick>
 8004e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e68:	f7fc fe34 	bl	8001ad4 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e233      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e7a:	f7ff fba3 	bl	80045c4 <LL_RCC_HSI_IsReady>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f1      	bne.n	8004e68 <HAL_RCC_OscConfig+0x260>
=======
 80054c0:	f7ff fba3 	bl	8004c0a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fc fab6 	bl	8001a34 <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054cc:	f7fc fab2 	bl	8001a34 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e233      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80054de:	f7ff fba3 	bl	8004c28 <LL_RCC_HSI_IsReady>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f1      	bne.n	80054cc <HAL_RCC_OscConfig+0x260>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
<<<<<<< HEAD
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a3 	beq.w	8004fe4 <HAL_RCC_OscConfig+0x3dc>
=======
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80a3 	beq.w	8005648 <HAL_RCC_OscConfig+0x3dc>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d076      	beq.n	8004f94 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d046      	beq.n	8004f40 <HAL_RCC_OscConfig+0x338>
=======
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d076      	beq.n	80055f8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	d046      	beq.n	80055a4 <HAL_RCC_OscConfig+0x338>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
<<<<<<< HEAD
 8004eb2:	f7ff fc5a 	bl	800476a <LL_RCC_LSI1_IsReady>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d113      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004ebc:	f7ff fc33 	bl	8004726 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ec0:	f7fc fe08 	bl	8001ad4 <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ec8:	f7fc fe04 	bl	8001ad4 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e203      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004eda:	f7ff fc46 	bl	800476a <LL_RCC_LSI1_IsReady>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f1      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x2c0>
=======
 8005516:	f7ff fc5a 	bl	8004dce <LL_RCC_LSI1_IsReady>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d113      	bne.n	8005548 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005520:	f7ff fc33 	bl	8004d8a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005524:	f7fc fa86 	bl	8001a34 <HAL_GetTick>
 8005528:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800552c:	f7fc fa82 	bl	8001a34 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e203      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800553e:	f7ff fc46 	bl	8004dce <LL_RCC_LSI1_IsReady>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f1      	beq.n	800552c <HAL_RCC_OscConfig+0x2c0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
<<<<<<< HEAD
 8004ee4:	f7ff fc53 	bl	800478e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fc fdf4 	bl	8001ad4 <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ef0:	f7fc fdf0 	bl	8001ad4 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e1ef      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f02:	f7ff fc66 	bl	80047d2 <LL_RCC_LSI2_IsReady>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f1      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x2e8>
=======
 8005548:	f7ff fc53 	bl	8004df2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fc fa72 	bl	8001a34 <HAL_GetTick>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005554:	f7fc fa6e 	bl	8001a34 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b03      	cmp	r3, #3
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e1ef      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005566:	f7ff fc66 	bl	8004e36 <LL_RCC_LSI2_IsReady>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f1      	beq.n	8005554 <HAL_RCC_OscConfig+0x2e8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
<<<<<<< HEAD
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fc70 	bl	80047f6 <LL_RCC_LSI2_SetTrimming>
=======
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fc70 	bl	8004e5a <LL_RCC_LSI2_SetTrimming>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
<<<<<<< HEAD
 8004f16:	f7ff fc17 	bl	8004748 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1a:	f7fc fddb 	bl	8001ad4 <HAL_GetTick>
 8004f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f22:	f7fc fdd7 	bl	8001ad4 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e1d6      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f34:	f7ff fc19 	bl	800476a <LL_RCC_LSI1_IsReady>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f1      	bne.n	8004f22 <HAL_RCC_OscConfig+0x31a>
 8004f3e:	e051      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3dc>
=======
 800557a:	f7ff fc17 	bl	8004dac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557e:	f7fc fa59 	bl	8001a34 <HAL_GetTick>
 8005582:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005586:	f7fc fa55 	bl	8001a34 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1d6      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005598:	f7ff fc19 	bl	8004dce <LL_RCC_LSI1_IsReady>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f1      	bne.n	8005586 <HAL_RCC_OscConfig+0x31a>
 80055a2:	e051      	b.n	8005648 <HAL_RCC_OscConfig+0x3dc>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
<<<<<<< HEAD
 8004f40:	f7ff fbf1 	bl	8004726 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fc fdc6 	bl	8001ad4 <HAL_GetTick>
 8004f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f4a:	e00c      	b.n	8004f66 <HAL_RCC_OscConfig+0x35e>
 8004f4c:	2000006c 	.word	0x2000006c
 8004f50:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f54:	f7fc fdbe 	bl	8001ad4 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e1bd      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f66:	f7ff fc00 	bl	800476a <LL_RCC_LSI1_IsReady>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f1      	beq.n	8004f54 <HAL_RCC_OscConfig+0x34c>
=======
 80055a4:	f7ff fbf1 	bl	8004d8a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fc fa44 	bl	8001a34 <HAL_GetTick>
 80055ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80055ae:	e00c      	b.n	80055ca <HAL_RCC_OscConfig+0x35e>
 80055b0:	20000044 	.word	0x20000044
 80055b4:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80055b8:	f7fc fa3c 	bl	8001a34 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e1bd      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80055ca:	f7ff fc00 	bl	8004dce <LL_RCC_LSI1_IsReady>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f1      	beq.n	80055b8 <HAL_RCC_OscConfig+0x34c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
<<<<<<< HEAD
 8004f70:	f7ff fc1e 	bl	80047b0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f76:	f7fc fdad 	bl	8001ad4 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e1ac      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f88:	f7ff fc23 	bl	80047d2 <LL_RCC_LSI2_IsReady>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f1      	bne.n	8004f76 <HAL_RCC_OscConfig+0x36e>
 8004f92:	e027      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3dc>
=======
 80055d4:	f7ff fc1e 	bl	8004e14 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80055da:	f7fc fa2b 	bl	8001a34 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e1ac      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80055ec:	f7ff fc23 	bl	8004e36 <LL_RCC_LSI2_IsReady>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f1      	bne.n	80055da <HAL_RCC_OscConfig+0x36e>
 80055f6:	e027      	b.n	8005648 <HAL_RCC_OscConfig+0x3dc>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
<<<<<<< HEAD
 8004f94:	f7ff fc0c 	bl	80047b0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f98:	f7fc fd9c 	bl	8001ad4 <HAL_GetTick>
 8004f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fa0:	f7fc fd98 	bl	8001ad4 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e197      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004fb2:	f7ff fc0e 	bl	80047d2 <LL_RCC_LSI2_IsReady>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f1      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x398>
=======
 80055f8:	f7ff fc0c 	bl	8004e14 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fc fa1a 	bl	8001a34 <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005604:	f7fc fa16 	bl	8001a34 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b03      	cmp	r3, #3
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e197      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005616:	f7ff fc0e 	bl	8004e36 <LL_RCC_LSI2_IsReady>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f1      	bne.n	8005604 <HAL_RCC_OscConfig+0x398>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
<<<<<<< HEAD
 8004fbc:	f7ff fbc4 	bl	8004748 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc0:	f7fc fd88 	bl	8001ad4 <HAL_GetTick>
 8004fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fc8:	f7fc fd84 	bl	8001ad4 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e183      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004fda:	f7ff fbc6 	bl	800476a <LL_RCC_LSI1_IsReady>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f1      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x3c0>
=======
 8005620:	f7ff fbc4 	bl	8004dac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005624:	f7fc fa06 	bl	8001a34 <HAL_GetTick>
 8005628:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800562c:	f7fc fa02 	bl	8001a34 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e183      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800563e:	f7ff fbc6 	bl	8004dce <LL_RCC_LSI1_IsReady>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1f1      	bne.n	800562c <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d05b      	beq.n	80050a8 <HAL_RCC_OscConfig+0x4a0>
=======
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d05b      	beq.n	800570c <HAL_RCC_OscConfig+0x4a0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
<<<<<<< HEAD
 8004ff0:	4ba7      	ldr	r3, [pc, #668]	; (8005290 <HAL_RCC_OscConfig+0x688>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d114      	bne.n	8005026 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004ffc:	f7ff fa64 	bl	80044c8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005000:	f7fc fd68 	bl	8001ad4 <HAL_GetTick>
 8005004:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005008:	f7fc fd64 	bl	8001ad4 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e163      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800501a:	4b9d      	ldr	r3, [pc, #628]	; (8005290 <HAL_RCC_OscConfig+0x688>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x400>
=======
 8005654:	4ba7      	ldr	r3, [pc, #668]	; (80058f4 <HAL_RCC_OscConfig+0x688>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d114      	bne.n	800568a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005660:	f7ff fa64 	bl	8004b2c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005664:	f7fc f9e6 	bl	8001a34 <HAL_GetTick>
 8005668:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566c:	f7fc f9e2 	bl	8001a34 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e163      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800567e:	4b9d      	ldr	r3, [pc, #628]	; (80058f4 <HAL_RCC_OscConfig+0x688>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x400>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d102      	bne.n	8005034 <HAL_RCC_OscConfig+0x42c>
 800502e:	f7ff fb24 	bl	800467a <LL_RCC_LSE_Enable>
 8005032:	e00c      	b.n	800504e <HAL_RCC_OscConfig+0x446>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b05      	cmp	r3, #5
 800503a:	d104      	bne.n	8005046 <HAL_RCC_OscConfig+0x43e>
 800503c:	f7ff fb3f 	bl	80046be <LL_RCC_LSE_EnableBypass>
 8005040:	f7ff fb1b 	bl	800467a <LL_RCC_LSE_Enable>
 8005044:	e003      	b.n	800504e <HAL_RCC_OscConfig+0x446>
 8005046:	f7ff fb29 	bl	800469c <LL_RCC_LSE_Disable>
 800504a:	f7ff fb49 	bl	80046e0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d014      	beq.n	8005080 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005056:	f7fc fd3d 	bl	8001ad4 <HAL_GetTick>
 800505a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800505c:	e00a      	b.n	8005074 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505e:	f7fc fd39 	bl	8001ad4 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	f241 3288 	movw	r2, #5000	; 0x1388
 800506c:	4293      	cmp	r3, r2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e136      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005074:	f7ff fb45 	bl	8004702 <LL_RCC_LSE_IsReady>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0ef      	beq.n	800505e <HAL_RCC_OscConfig+0x456>
 800507e:	e013      	b.n	80050a8 <HAL_RCC_OscConfig+0x4a0>
=======
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d102      	bne.n	8005698 <HAL_RCC_OscConfig+0x42c>
 8005692:	f7ff fb24 	bl	8004cde <LL_RCC_LSE_Enable>
 8005696:	e00c      	b.n	80056b2 <HAL_RCC_OscConfig+0x446>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b05      	cmp	r3, #5
 800569e:	d104      	bne.n	80056aa <HAL_RCC_OscConfig+0x43e>
 80056a0:	f7ff fb3f 	bl	8004d22 <LL_RCC_LSE_EnableBypass>
 80056a4:	f7ff fb1b 	bl	8004cde <LL_RCC_LSE_Enable>
 80056a8:	e003      	b.n	80056b2 <HAL_RCC_OscConfig+0x446>
 80056aa:	f7ff fb29 	bl	8004d00 <LL_RCC_LSE_Disable>
 80056ae:	f7ff fb49 	bl	8004d44 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d014      	beq.n	80056e4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ba:	f7fc f9bb 	bl	8001a34 <HAL_GetTick>
 80056be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80056c0:	e00a      	b.n	80056d8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c2:	f7fc f9b7 	bl	8001a34 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e136      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80056d8:	f7ff fb45 	bl	8004d66 <LL_RCC_LSE_IsReady>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ef      	beq.n	80056c2 <HAL_RCC_OscConfig+0x456>
 80056e2:	e013      	b.n	800570c <HAL_RCC_OscConfig+0x4a0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005080:	f7fc fd28 	bl	8001ad4 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005086:	e00a      	b.n	800509e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005088:	f7fc fd24 	bl	8001ad4 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	f241 3288 	movw	r2, #5000	; 0x1388
 8005096:	4293      	cmp	r3, r2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e121      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800509e:	f7ff fb30 	bl	8004702 <LL_RCC_LSE_IsReady>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1ef      	bne.n	8005088 <HAL_RCC_OscConfig+0x480>
=======
 80056e4:	f7fc f9a6 	bl	8001a34 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80056ea:	e00a      	b.n	8005702 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ec:	f7fc f9a2 	bl	8001a34 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e121      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005702:	f7ff fb30 	bl	8004d66 <LL_RCC_LSE_IsReady>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1ef      	bne.n	80056ec <HAL_RCC_OscConfig+0x480>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02c      	beq.n	800510e <HAL_RCC_OscConfig+0x506>
=======
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d02c      	beq.n	8005772 <HAL_RCC_OscConfig+0x506>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< HEAD
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d014      	beq.n	80050e6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050bc:	f7ff faa9 	bl	8004612 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c0:	f7fc fd08 	bl	8001ad4 <HAL_GetTick>
 80050c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050c8:	f7fc fd04 	bl	8001ad4 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e103      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80050da:	f7ff fabc 	bl	8004656 <LL_RCC_HSI48_IsReady>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f1      	beq.n	80050c8 <HAL_RCC_OscConfig+0x4c0>
 80050e4:	e013      	b.n	800510e <HAL_RCC_OscConfig+0x506>
=======
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d014      	beq.n	800574a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005720:	f7ff faa9 	bl	8004c76 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005724:	f7fc f986 	bl	8001a34 <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800572c:	f7fc f982 	bl	8001a34 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e103      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800573e:	f7ff fabc 	bl	8004cba <LL_RCC_HSI48_IsReady>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f1      	beq.n	800572c <HAL_RCC_OscConfig+0x4c0>
 8005748:	e013      	b.n	8005772 <HAL_RCC_OscConfig+0x506>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 80050e6:	f7ff faa5 	bl	8004634 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ea:	f7fc fcf3 	bl	8001ad4 <HAL_GetTick>
 80050ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050f2:	f7fc fcef 	bl	8001ad4 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e0ee      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005104:	f7ff faa7 	bl	8004656 <LL_RCC_HSI48_IsReady>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f1      	bne.n	80050f2 <HAL_RCC_OscConfig+0x4ea>
=======
 800574a:	f7ff faa5 	bl	8004c98 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574e:	f7fc f971 	bl	8001a34 <HAL_GetTick>
 8005752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005756:	f7fc f96d 	bl	8001a34 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e0ee      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005768:	f7ff faa7 	bl	8004cba <LL_RCC_HSI48_IsReady>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f1      	bne.n	8005756 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< HEAD
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80e4 	beq.w	80052e0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005118:	f7ff fc05 	bl	8004926 <LL_RCC_GetSysClkSource>
 800511c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	2b02      	cmp	r3, #2
 800512c:	f040 80b4 	bne.w	8005298 <HAL_RCC_OscConfig+0x690>
=======
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80e4 	beq.w	8005944 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800577c:	f7ff fc05 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005780:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	2b02      	cmp	r3, #2
 8005790:	f040 80b4 	bne.w	80058fc <HAL_RCC_OscConfig+0x690>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
<<<<<<< HEAD
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0203 	and.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	429a      	cmp	r2, r3
 800513c:	d123      	bne.n	8005186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d11c      	bne.n	8005186 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d114      	bne.n	8005186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d10d      	bne.n	8005186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d106      	bne.n	8005186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d05d      	beq.n	8005242 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b0c      	cmp	r3, #12
 800518a:	d058      	beq.n	800523e <HAL_RCC_OscConfig+0x636>
=======
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0203 	and.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	429a      	cmp	r2, r3
 80057a0:	d123      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d11c      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d114      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d10d      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d106      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d05d      	beq.n	80058a6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b0c      	cmp	r3, #12
 80057ee:	d058      	beq.n	80058a2 <HAL_RCC_OscConfig+0x636>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
<<<<<<< HEAD
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0a1      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
=======
 80057f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e0a1      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800519e:	f7ff fc85 	bl	8004aac <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051a2:	f7fc fc97 	bl	8001ad4 <HAL_GetTick>
 80051a6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051aa:	f7fc fc93 	bl	8001ad4 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e092      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ef      	bne.n	80051aa <HAL_RCC_OscConfig+0x5a2>
=======
 8005802:	f7ff fc85 	bl	8005110 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005806:	f7fc f915 	bl	8001a34 <HAL_GetTick>
 800580a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580e:	f7fc f911 	bl	8001a34 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e092      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1ef      	bne.n	800580e <HAL_RCC_OscConfig+0x5a2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 80051ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	4b30      	ldr	r3, [pc, #192]	; (8005294 <HAL_RCC_OscConfig+0x68c>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051dc:	4311      	orrs	r1, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051e2:	0212      	lsls	r2, r2, #8
 80051e4:	4311      	orrs	r1, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051ea:	4311      	orrs	r1, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051f0:	4311      	orrs	r1, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80051f6:	430a      	orrs	r2, r1
 80051f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60cb      	str	r3, [r1, #12]
=======
 800582e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	4b30      	ldr	r3, [pc, #192]	; (80058f8 <HAL_RCC_OscConfig+0x68c>)
 8005836:	4013      	ands	r3, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005840:	4311      	orrs	r1, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005846:	0212      	lsls	r2, r2, #8
 8005848:	4311      	orrs	r1, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800584e:	4311      	orrs	r1, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005854:	4311      	orrs	r1, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800585a:	430a      	orrs	r2, r1
 800585c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005860:	4313      	orrs	r3, r2
 8005862:	60cb      	str	r3, [r1, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8005200:	f7ff fc45 	bl	8004a8e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005212:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005214:	f7fc fc5e 	bl	8001ad4 <HAL_GetTick>
 8005218:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800521c:	f7fc fc5a 	bl	8001ad4 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e059      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0ef      	beq.n	800521c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800523c:	e050      	b.n	80052e0 <HAL_RCC_OscConfig+0x6d8>
=======
 8005864:	f7ff fc45 	bl	80050f2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005876:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005878:	f7fc f8dc 	bl	8001a34 <HAL_GetTick>
 800587c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005880:	f7fc f8d8 	bl	8001a34 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e059      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0ef      	beq.n	8005880 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058a0:	e050      	b.n	8005944 <HAL_RCC_OscConfig+0x6d8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< HEAD
 800523e:	2301      	movs	r3, #1
 8005240:	e04f      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
=======
 80058a2:	2301      	movs	r3, #1
 80058a4:	e04f      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< HEAD
 8005242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d147      	bne.n	80052e0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005250:	f7ff fc1d 	bl	8004a8e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005262:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005264:	f7fc fc36 	bl	8001ad4 <HAL_GetTick>
 8005268:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526c:	f7fc fc32 	bl	8001ad4 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e031      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ef      	beq.n	800526c <HAL_RCC_OscConfig+0x664>
 800528c:	e028      	b.n	80052e0 <HAL_RCC_OscConfig+0x6d8>
 800528e:	bf00      	nop
 8005290:	58000400 	.word	0x58000400
 8005294:	11c1808c 	.word	0x11c1808c
=======
 80058a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d147      	bne.n	8005944 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058b4:	f7ff fc1d 	bl	80050f2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058c8:	f7fc f8b4 	bl	8001a34 <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fc f8b0 	bl	8001a34 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e031      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ef      	beq.n	80058d0 <HAL_RCC_OscConfig+0x664>
 80058f0:	e028      	b.n	8005944 <HAL_RCC_OscConfig+0x6d8>
 80058f2:	bf00      	nop
 80058f4:	58000400 	.word	0x58000400
 80058f8:	11c1808c 	.word	0x11c1808c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
<<<<<<< HEAD
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b0c      	cmp	r3, #12
 800529c:	d01e      	beq.n	80052dc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529e:	f7ff fc05 	bl	8004aac <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fc fc17 	bl	8001ad4 <HAL_GetTick>
 80052a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052aa:	f7fc fc13 	bl	8001ad4 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e012      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1ef      	bne.n	80052aa <HAL_RCC_OscConfig+0x6a2>
=======
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b0c      	cmp	r3, #12
 8005900:	d01e      	beq.n	8005940 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005902:	f7ff fc05 	bl	8005110 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005906:	f7fc f895 	bl	8001a34 <HAL_GetTick>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590e:	f7fc f891 	bl	8001a34 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e012      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1ef      	bne.n	800590e <HAL_RCC_OscConfig+0x6a2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
<<<<<<< HEAD
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <HAL_RCC_OscConfig+0x6e4>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	60cb      	str	r3, [r1, #12]
 80052da:	e001      	b.n	80052e0 <HAL_RCC_OscConfig+0x6d8>
=======
 800592e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <HAL_RCC_OscConfig+0x6e4>)
 800593a:	4013      	ands	r3, r2
 800593c:	60cb      	str	r3, [r1, #12]
 800593e:	e001      	b.n	8005944 <HAL_RCC_OscConfig+0x6d8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< HEAD
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
=======
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3734      	adds	r7, #52	; 0x34
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd90      	pop	{r4, r7, pc}
 80052ea:	bf00      	nop
 80052ec:	eefefffc 	.word	0xeefefffc

080052f0 <HAL_RCC_ClockConfig>:
=======
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3734      	adds	r7, #52	; 0x34
 800594a:	46bd      	mov	sp, r7
 800594c:	bd90      	pop	{r4, r7, pc}
 800594e:	bf00      	nop
 8005950:	eefefffc 	.word	0xeefefffc

08005954 <HAL_RCC_ClockConfig>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
=======
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e12d      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
=======
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e12d      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005304:	4b98      	ldr	r3, [pc, #608]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d91b      	bls.n	800534a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005312:	4b95      	ldr	r3, [pc, #596]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 0207 	bic.w	r2, r3, #7
 800531a:	4993      	ldr	r1, [pc, #588]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	4313      	orrs	r3, r2
 8005320:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005322:	f7fc fbd7 	bl	8001ad4 <HAL_GetTick>
 8005326:	60f8      	str	r0, [r7, #12]
=======
 8005968:	4b98      	ldr	r3, [pc, #608]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d91b      	bls.n	80059ae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005976:	4b95      	ldr	r3, [pc, #596]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 0207 	bic.w	r2, r3, #7
 800597e:	4993      	ldr	r1, [pc, #588]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005986:	f7fc f855 	bl	8001a34 <HAL_GetTick>
 800598a:	60f8      	str	r0, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8005328:	e008      	b.n	800533c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800532a:	f7fc fbd3 	bl	8001ad4 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e111      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800533c:	4b8a      	ldr	r3, [pc, #552]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d1ef      	bne.n	800532a <HAL_RCC_ClockConfig+0x3a>
=======
 800598c:	e008      	b.n	80059a0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800598e:	f7fc f851 	bl	8001a34 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e111      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a0:	4b8a      	ldr	r3, [pc, #552]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d1ef      	bne.n	800598e <HAL_RCC_ClockConfig+0x3a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d016      	beq.n	8005384 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff faef 	bl	800493e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005360:	f7fc fbb8 	bl	8001ad4 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005368:	f7fc fbb4 	bl	8001ad4 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e0f2      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800537a:	f7ff fbe9 	bl	8004b50 <LL_RCC_IsActiveFlag_HPRE>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f1      	beq.n	8005368 <HAL_RCC_ClockConfig+0x78>
=======
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d016      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff faef 	bl	8004fa2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059c4:	f7fc f836 	bl	8001a34 <HAL_GetTick>
 80059c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059cc:	f7fc f832 	bl	8001a34 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e0f2      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80059de:	f7ff fbe9 	bl	80051b4 <LL_RCC_IsActiveFlag_HPRE>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f1      	beq.n	80059cc <HAL_RCC_ClockConfig+0x78>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
<<<<<<< HEAD
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d016      	beq.n	80053be <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff fae6 	bl	8004966 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800539a:	f7fc fb9b 	bl	8001ad4 <HAL_GetTick>
 800539e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053a2:	f7fc fb97 	bl	8001ad4 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0d5      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80053b4:	f7ff fbde 	bl	8004b74 <LL_RCC_IsActiveFlag_C2HPRE>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0f1      	beq.n	80053a2 <HAL_RCC_ClockConfig+0xb2>
=======
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d016      	beq.n	8005a22 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fae6 	bl	8004fca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059fe:	f7fc f819 	bl	8001a34 <HAL_GetTick>
 8005a02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a06:	f7fc f815 	bl	8001a34 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e0d5      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a18:	f7ff fbde 	bl	80051d8 <LL_RCC_IsActiveFlag_C2HPRE>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f1      	beq.n	8005a06 <HAL_RCC_ClockConfig+0xb2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
<<<<<<< HEAD
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fadf 	bl	8004992 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053d4:	f7fc fb7e 	bl	8001ad4 <HAL_GetTick>
 80053d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053dc:	f7fc fb7a 	bl	8001ad4 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e0b8      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053ee:	f7ff fbd4 	bl	8004b9a <LL_RCC_IsActiveFlag_SHDHPRE>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f1      	beq.n	80053dc <HAL_RCC_ClockConfig+0xec>
=======
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d016      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fadf 	bl	8004ff6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a38:	f7fb fffc 	bl	8001a34 <HAL_GetTick>
 8005a3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a40:	f7fb fff8 	bl	8001a34 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e0b8      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a52:	f7ff fbd4 	bl	80051fe <LL_RCC_IsActiveFlag_SHDHPRE>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f1      	beq.n	8005a40 <HAL_RCC_ClockConfig+0xec>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d016      	beq.n	8005432 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fad9 	bl	80049c0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800540e:	f7fc fb61 	bl	8001ad4 <HAL_GetTick>
 8005412:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005414:	e008      	b.n	8005428 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005416:	f7fc fb5d 	bl	8001ad4 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e09b      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005428:	f7ff fbca 	bl	8004bc0 <LL_RCC_IsActiveFlag_PPRE1>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f1      	beq.n	8005416 <HAL_RCC_ClockConfig+0x126>
=======
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d016      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fad9 	bl	8005024 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a72:	f7fb ffdf 	bl	8001a34 <HAL_GetTick>
 8005a76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a7a:	f7fb ffdb 	bl	8001a34 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e09b      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a8c:	f7ff fbca 	bl	8005224 <LL_RCC_IsActiveFlag_PPRE1>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f1      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x126>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d017      	beq.n	800546e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff facf 	bl	80049e8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800544a:	f7fc fb43 	bl	8001ad4 <HAL_GetTick>
 800544e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005450:	e008      	b.n	8005464 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005452:	f7fc fb3f 	bl	8001ad4 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e07d      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005464:	f7ff fbbe 	bl	8004be4 <LL_RCC_IsActiveFlag_PPRE2>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f1      	beq.n	8005452 <HAL_RCC_ClockConfig+0x162>
=======
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d017      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff facf 	bl	800504c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005aae:	f7fb ffc1 	bl	8001a34 <HAL_GetTick>
 8005ab2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ab6:	f7fb ffbd 	bl	8001a34 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e07d      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ac8:	f7ff fbbe 	bl	8005248 <LL_RCC_IsActiveFlag_PPRE2>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0f1      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x162>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d043      	beq.n	8005502 <HAL_RCC_ClockConfig+0x212>
=======
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d043      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x212>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d106      	bne.n	8005490 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005482:	f7ff f86f 	bl	8004564 <LL_RCC_HSE_IsReady>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d11e      	bne.n	80054ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e067      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
=======
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d106      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005ae6:	f7ff f86f 	bl	8004bc8 <LL_RCC_HSE_IsReady>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d11e      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e067      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b03      	cmp	r3, #3
 8005496:	d106      	bne.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005498:	f7ff fb17 	bl	8004aca <LL_RCC_PLL_IsReady>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d113      	bne.n	80054ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e05c      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
=======
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d106      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005afc:	f7ff fb17 	bl	800512e <LL_RCC_PLL_IsReady>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d113      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e05c      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< HEAD
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80054ae:	f7ff f9d7 	bl	8004860 <LL_RCC_MSI_IsReady>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d108      	bne.n	80054ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e051      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
=======
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005b12:	f7ff f9d7 	bl	8004ec4 <LL_RCC_MSI_IsReady>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d108      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e051      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
<<<<<<< HEAD
 80054bc:	f7ff f882 	bl	80045c4 <LL_RCC_HSI_IsReady>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e04a      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
=======
 8005b20:	f7ff f882 	bl	8004c28 <LL_RCC_HSI_IsReady>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e04a      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fa15 	bl	80048fe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d4:	f7fc fafe 	bl	8001ad4 <HAL_GetTick>
 80054d8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054da:	e00a      	b.n	80054f2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054dc:	f7fc fafa 	bl	8001ad4 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e036      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f2:	f7ff fa18 	bl	8004926 <LL_RCC_GetSysClkSource>
 80054f6:	4602      	mov	r2, r0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	429a      	cmp	r2, r3
 8005500:	d1ec      	bne.n	80054dc <HAL_RCC_ClockConfig+0x1ec>
=======
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fa15 	bl	8004f62 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b38:	f7fb ff7c 	bl	8001a34 <HAL_GetTick>
 8005b3c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b40:	f7fb ff78 	bl	8001a34 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e036      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b56:	f7ff fa18 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d1ec      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x1ec>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005502:	4b19      	ldr	r3, [pc, #100]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d21b      	bcs.n	8005548 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005510:	4b15      	ldr	r3, [pc, #84]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f023 0207 	bic.w	r2, r3, #7
 8005518:	4913      	ldr	r1, [pc, #76]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005520:	f7fc fad8 	bl	8001ad4 <HAL_GetTick>
 8005524:	60f8      	str	r0, [r7, #12]
=======
 8005b66:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d21b      	bcs.n	8005bac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b74:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f023 0207 	bic.w	r2, r3, #7
 8005b7c:	4913      	ldr	r1, [pc, #76]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b84:	f7fb ff56 	bl	8001a34 <HAL_GetTick>
 8005b88:	60f8      	str	r0, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8005526:	e008      	b.n	800553a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005528:	f7fc fad4 	bl	8001ad4 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e012      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d1ef      	bne.n	8005528 <HAL_RCC_ClockConfig+0x238>
=======
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b8c:	f7fb ff52 	bl	8001a34 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e012      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d1ef      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x238>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
<<<<<<< HEAD
 8005548:	f000 f87e 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 800554c:	4603      	mov	r3, r0
 800554e:	4a07      	ldr	r2, [pc, #28]	; (800556c <HAL_RCC_ClockConfig+0x27c>)
 8005550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005552:	f7fc facb 	bl	8001aec <HAL_GetTickPrio>
 8005556:	4603      	mov	r3, r0
 8005558:	4618      	mov	r0, r3
 800555a:	f7fc f95d 	bl	8001818 <HAL_InitTick>
 800555e:	4603      	mov	r3, r0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	58004000 	.word	0x58004000
 800556c:	2000006c 	.word	0x2000006c

08005570 <HAL_RCC_GetSysClockFreq>:
=======
 8005bac:	f000 f87e 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	4a07      	ldr	r2, [pc, #28]	; (8005bd0 <HAL_RCC_ClockConfig+0x27c>)
 8005bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005bb6:	f7fb ff49 	bl	8001a4c <HAL_GetTickPrio>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fb fddb 	bl	8001778 <HAL_InitTick>
 8005bc2:	4603      	mov	r3, r0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	58004000 	.word	0x58004000
 8005bd0:	20000044 	.word	0x20000044

08005bd4 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
=======
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8005576:	f7ff f9d6 	bl	8004926 <LL_RCC_GetSysClkSource>
 800557a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <HAL_RCC_GetSysClockFreq+0x28>
=======
 8005bda:	f7ff f9d6 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005bde:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <HAL_RCC_GetSysClockFreq+0x28>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
<<<<<<< HEAD
 8005582:	f7ff f992 	bl	80048aa <LL_RCC_MSI_GetRange>
 8005586:	4603      	mov	r3, r0
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	4a2b      	ldr	r2, [pc, #172]	; (800563c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e04b      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b04      	cmp	r3, #4
 800559c:	d102      	bne.n	80055a4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800559e:	4b28      	ldr	r3, [pc, #160]	; (8005640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e045      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d10a      	bne.n	80055c0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80055aa:	f7fe ffab 	bl	8004504 <LL_RCC_HSE_IsEnabledDiv2>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d102      	bne.n	80055ba <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80055b4:	4b22      	ldr	r3, [pc, #136]	; (8005640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e03a      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xc0>
=======
 8005be6:	f7ff f992 	bl	8004f0e <LL_RCC_MSI_GetRange>
 8005bea:	4603      	mov	r3, r0
 8005bec:	091b      	lsrs	r3, r3, #4
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	e04b      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d102      	bne.n	8005c08 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c02:	4b28      	ldr	r3, [pc, #160]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	e045      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d10a      	bne.n	8005c24 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c0e:	f7fe ffab 	bl	8004b68 <LL_RCC_HSE_IsEnabledDiv2>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d102      	bne.n	8005c1e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005c18:	4b22      	ldr	r3, [pc, #136]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e03a      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 80055ba:	4b22      	ldr	r3, [pc, #136]	; (8005644 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	e037      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xc0>
=======
 8005c1e:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e037      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
<<<<<<< HEAD
 80055c0:	f7ff faba 	bl	8004b38 <LL_RCC_PLL_GetMainSource>
 80055c4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d003      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0x64>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d003      	beq.n	80055da <HAL_RCC_GetSysClockFreq+0x6a>
 80055d2:	e00d      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80055d4:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055d6:	60bb      	str	r3, [r7, #8]
        break;
 80055d8:	e015      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80055da:	f7fe ff93 	bl	8004504 <LL_RCC_HSE_IsEnabledDiv2>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d102      	bne.n	80055ea <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80055e4:	4b16      	ldr	r3, [pc, #88]	; (8005640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055e6:	60bb      	str	r3, [r7, #8]
=======
 8005c24:	f7ff faba 	bl	800519c <LL_RCC_PLL_GetMainSource>
 8005c28:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d003      	beq.n	8005c38 <HAL_RCC_GetSysClockFreq+0x64>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d003      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0x6a>
 8005c36:	e00d      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005c38:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c3a:	60bb      	str	r3, [r7, #8]
        break;
 8005c3c:	e015      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c3e:	f7fe ff93 	bl	8004b68 <LL_RCC_HSE_IsEnabledDiv2>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d102      	bne.n	8005c4e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005c48:	4b16      	ldr	r3, [pc, #88]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c4a:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
<<<<<<< HEAD
 80055e8:	e00d      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80055ea:	4b16      	ldr	r3, [pc, #88]	; (8005644 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055ec:	60bb      	str	r3, [r7, #8]
        break;
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80055f0:	f7ff f95b 	bl	80048aa <LL_RCC_MSI_GetRange>
 80055f4:	4603      	mov	r3, r0
 80055f6:	091b      	lsrs	r3, r3, #4
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	4a0f      	ldr	r2, [pc, #60]	; (800563c <HAL_RCC_GetSysClockFreq+0xcc>)
 80055fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005602:	60bb      	str	r3, [r7, #8]
        break;
 8005604:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005606:	f7ff fa72 	bl	8004aee <LL_RCC_PLL_GetN>
 800560a:	4602      	mov	r2, r0
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	fb03 f402 	mul.w	r4, r3, r2
 8005612:	f7ff fa85 	bl	8004b20 <LL_RCC_PLL_GetDivider>
 8005616:	4603      	mov	r3, r0
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	3301      	adds	r3, #1
 800561c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005620:	f7ff fa72 	bl	8004b08 <LL_RCC_PLL_GetR>
 8005624:	4603      	mov	r3, r0
 8005626:	0f5b      	lsrs	r3, r3, #29
 8005628:	3301      	adds	r3, #1
 800562a:	fbb4 f3f3 	udiv	r3, r4, r3
 800562e:	60fb      	str	r3, [r7, #12]
=======
 8005c4c:	e00d      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005c4e:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c50:	60bb      	str	r3, [r7, #8]
        break;
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c54:	f7ff f95b 	bl	8004f0e <LL_RCC_MSI_GetRange>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c66:	60bb      	str	r3, [r7, #8]
        break;
 8005c68:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005c6a:	f7ff fa72 	bl	8005152 <LL_RCC_PLL_GetN>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	fb03 f402 	mul.w	r4, r3, r2
 8005c76:	f7ff fa85 	bl	8005184 <LL_RCC_PLL_GetDivider>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	091b      	lsrs	r3, r3, #4
 8005c7e:	3301      	adds	r3, #1
 8005c80:	fbb4 f4f3 	udiv	r4, r4, r3
 8005c84:	f7ff fa72 	bl	800516c <LL_RCC_PLL_GetR>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	0f5b      	lsrs	r3, r3, #29
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c92:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
<<<<<<< HEAD
 8005630:	68fb      	ldr	r3, [r7, #12]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bd90      	pop	{r4, r7, pc}
 800563a:	bf00      	nop
 800563c:	0800f004 	.word	0x0800f004
 8005640:	00f42400 	.word	0x00f42400
 8005644:	01e84800 	.word	0x01e84800

08005648 <HAL_RCC_GetHCLKFreq>:
=======
 8005c94:	68fb      	ldr	r3, [r7, #12]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd90      	pop	{r4, r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	0800f62c 	.word	0x0800f62c
 8005ca4:	00f42400 	.word	0x00f42400
 8005ca8:	01e84800 	.word	0x01e84800

08005cac <HAL_RCC_GetHCLKFreq>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8005648:	b598      	push	{r3, r4, r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800564c:	f7ff ff90 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8005650:	4604      	mov	r4, r0
 8005652:	f7ff f9dd 	bl	8004a10 <LL_RCC_GetAHBPrescaler>
 8005656:	4603      	mov	r3, r0
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	4a03      	ldr	r2, [pc, #12]	; (800566c <HAL_RCC_GetHCLKFreq+0x24>)
 8005660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005664:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005668:	4618      	mov	r0, r3
 800566a:	bd98      	pop	{r3, r4, r7, pc}
 800566c:	0800efa4 	.word	0x0800efa4

08005670 <HAL_RCC_GetPCLK1Freq>:
=======
 8005cac:	b598      	push	{r3, r4, r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005cb0:	f7ff ff90 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	f7ff f9dd 	bl	8005074 <LL_RCC_GetAHBPrescaler>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	4a03      	ldr	r2, [pc, #12]	; (8005cd0 <HAL_RCC_GetHCLKFreq+0x24>)
 8005cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd98      	pop	{r3, r4, r7, pc}
 8005cd0:	0800f5cc 	.word	0x0800f5cc

08005cd4 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8005670:	b598      	push	{r3, r4, r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005674:	f7ff ffe8 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005678:	4604      	mov	r4, r0
 800567a:	f7ff f9f0 	bl	8004a5e <LL_RCC_GetAPB1Prescaler>
 800567e:	4603      	mov	r3, r0
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	4a04      	ldr	r2, [pc, #16]	; (8005698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd98      	pop	{r3, r4, r7, pc}
 8005698:	0800efe4 	.word	0x0800efe4

0800569c <HAL_RCC_GetPCLK2Freq>:
=======
 8005cd4:	b598      	push	{r3, r4, r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005cd8:	f7ff ffe8 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005cdc:	4604      	mov	r4, r0
 8005cde:	f7ff f9f0 	bl	80050c2 <LL_RCC_GetAPB1Prescaler>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	0a1b      	lsrs	r3, r3, #8
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	4a04      	ldr	r2, [pc, #16]	; (8005cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd98      	pop	{r3, r4, r7, pc}
 8005cfc:	0800f60c 	.word	0x0800f60c

08005d00 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 800569c:	b598      	push	{r3, r4, r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80056a0:	f7ff ffd2 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 80056a4:	4604      	mov	r4, r0
 80056a6:	f7ff f9e6 	bl	8004a76 <LL_RCC_GetAPB2Prescaler>
 80056aa:	4603      	mov	r3, r0
 80056ac:	0adb      	lsrs	r3, r3, #11
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	4a04      	ldr	r2, [pc, #16]	; (80056c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd98      	pop	{r3, r4, r7, pc}
 80056c4:	0800efe4 	.word	0x0800efe4

080056c8 <HAL_RCC_GetClockConfig>:
=======
 8005d00:	b598      	push	{r3, r4, r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005d04:	f7ff ffd2 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005d08:	4604      	mov	r4, r0
 8005d0a:	f7ff f9e6 	bl	80050da <LL_RCC_GetAPB2Prescaler>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	0adb      	lsrs	r3, r3, #11
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	bd98      	pop	{r3, r4, r7, pc}
 8005d28:	0800f60c 	.word	0x0800f60c

08005d2c <HAL_RCC_GetClockConfig>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
=======
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
<<<<<<< HEAD
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	226f      	movs	r2, #111	; 0x6f
 80056d6:	601a      	str	r2, [r3, #0]
=======
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	226f      	movs	r2, #111	; 0x6f
 8005d3a:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
<<<<<<< HEAD
 80056d8:	f7ff f925 	bl	8004926 <LL_RCC_GetSysClkSource>
 80056dc:	4602      	mov	r2, r0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80056e2:	f7ff f995 	bl	8004a10 <LL_RCC_GetAHBPrescaler>
 80056e6:	4602      	mov	r2, r0
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80056ec:	f7ff f9b7 	bl	8004a5e <LL_RCC_GetAPB1Prescaler>
 80056f0:	4602      	mov	r2, r0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80056f6:	f7ff f9be 	bl	8004a76 <LL_RCC_GetAPB2Prescaler>
 80056fa:	4602      	mov	r2, r0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005700:	f7ff f992 	bl	8004a28 <LL_C2_RCC_GetAHBPrescaler>
 8005704:	4602      	mov	r2, r0
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800570a:	f7ff f99a 	bl	8004a42 <LL_RCC_GetAHB4Prescaler>
 800570e:	4602      	mov	r2, r0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005714:	4b04      	ldr	r3, [pc, #16]	; (8005728 <HAL_RCC_GetClockConfig+0x60>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0207 	and.w	r2, r3, #7
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	601a      	str	r2, [r3, #0]
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	58004000 	.word	0x58004000

0800572c <RCC_SetFlashLatencyFromMSIRange>:
=======
 8005d3c:	f7ff f925 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005d40:	4602      	mov	r2, r0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005d46:	f7ff f995 	bl	8005074 <LL_RCC_GetAHBPrescaler>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005d50:	f7ff f9b7 	bl	80050c2 <LL_RCC_GetAPB1Prescaler>
 8005d54:	4602      	mov	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005d5a:	f7ff f9be 	bl	80050da <LL_RCC_GetAPB2Prescaler>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005d64:	f7ff f992 	bl	800508c <LL_C2_RCC_GetAHBPrescaler>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005d6e:	f7ff f99a 	bl	80050a6 <LL_RCC_GetAHB4Prescaler>
 8005d72:	4602      	mov	r2, r0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005d78:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <HAL_RCC_GetClockConfig+0x60>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0207 	and.w	r2, r3, #7
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	601a      	str	r2, [r3, #0]
}
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	58004000 	.word	0x58004000

08005d90 <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
<<<<<<< HEAD
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
=======
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
<<<<<<< HEAD
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2bb0      	cmp	r3, #176	; 0xb0
 8005738:	d903      	bls.n	8005742 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800573a:	4b15      	ldr	r3, [pc, #84]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e007      	b.n	8005752 <RCC_SetFlashLatencyFromMSIRange+0x26>
=======
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2bb0      	cmp	r3, #176	; 0xb0
 8005d9c:	d903      	bls.n	8005da6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005d9e:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e007      	b.n	8005db6 <RCC_SetFlashLatencyFromMSIRange+0x26>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
<<<<<<< HEAD
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	4a11      	ldr	r2, [pc, #68]	; (8005790 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800574c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005750:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005752:	f7ff f976 	bl	8004a42 <LL_RCC_GetAHB4Prescaler>
 8005756:	4603      	mov	r3, r0
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	4a0d      	ldr	r2, [pc, #52]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	fbb2 f3f3 	udiv	r3, r2, r3
 800576a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005770:	fba2 2303 	umull	r2, r3, r2, r3
 8005774:	0c9c      	lsrs	r4, r3, #18
 8005776:	f7fe feb7 	bl	80044e8 <HAL_PWREx_GetVoltageRange>
 800577a:	4603      	mov	r3, r0
 800577c:	4619      	mov	r1, r3
 800577e:	4620      	mov	r0, r4
 8005780:	f000 f80c 	bl	800579c <RCC_SetFlashLatency>
 8005784:	4603      	mov	r3, r0
=======
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	4a11      	ldr	r2, [pc, #68]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005db6:	f7ff f976 	bl	80050a6 <LL_RCC_GetAHB4Prescaler>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	091b      	lsrs	r3, r3, #4
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	4a0d      	ldr	r2, [pc, #52]	; (8005df8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dce:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	0c9c      	lsrs	r4, r3, #18
 8005dda:	f7fe feb7 	bl	8004b4c <HAL_PWREx_GetVoltageRange>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4619      	mov	r1, r3
 8005de2:	4620      	mov	r0, r4
 8005de4:	f000 f80c 	bl	8005e00 <RCC_SetFlashLatency>
 8005de8:	4603      	mov	r3, r0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
<<<<<<< HEAD
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	bd90      	pop	{r4, r7, pc}
 800578e:	bf00      	nop
 8005790:	0800f004 	.word	0x0800f004
 8005794:	0800efa4 	.word	0x0800efa4
 8005798:	431bde83 	.word	0x431bde83

0800579c <RCC_SetFlashLatency>:
=======
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd90      	pop	{r4, r7, pc}
 8005df2:	bf00      	nop
 8005df4:	0800f62c 	.word	0x0800f62c
 8005df8:	0800f5cc 	.word	0x0800f5cc
 8005dfc:	431bde83 	.word	0x431bde83

08005e00 <RCC_SetFlashLatency>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
<<<<<<< HEAD
 800579c:	b590      	push	{r4, r7, lr}
 800579e:	b093      	sub	sp, #76	; 0x4c
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80057a6:	4b37      	ldr	r3, [pc, #220]	; (8005884 <RCC_SetFlashLatency+0xe8>)
 80057a8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80057ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80057b2:	4a35      	ldr	r2, [pc, #212]	; (8005888 <RCC_SetFlashLatency+0xec>)
 80057b4:	f107 031c 	add.w	r3, r7, #28
 80057b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80057ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80057be:	4b33      	ldr	r3, [pc, #204]	; (800588c <RCC_SetFlashLatency+0xf0>)
 80057c0:	f107 040c 	add.w	r4, r7, #12
 80057c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80057ca:	2300      	movs	r3, #0
 80057cc:	647b      	str	r3, [r7, #68]	; 0x44
=======
 8005e00:	b590      	push	{r4, r7, lr}
 8005e02:	b093      	sub	sp, #76	; 0x4c
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <RCC_SetFlashLatency+0xe8>)
 8005e0c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005e16:	4a35      	ldr	r2, [pc, #212]	; (8005eec <RCC_SetFlashLatency+0xec>)
 8005e18:	f107 031c 	add.w	r3, r7, #28
 8005e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005e22:	4b33      	ldr	r3, [pc, #204]	; (8005ef0 <RCC_SetFlashLatency+0xf0>)
 8005e24:	f107 040c 	add.w	r4, r7, #12
 8005e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005e2e:	2300      	movs	r3, #0
 8005e30:	647b      	str	r3, [r7, #68]	; 0x44
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
<<<<<<< HEAD
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d4:	d11a      	bne.n	800580c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	643b      	str	r3, [r7, #64]	; 0x40
 80057da:	e013      	b.n	8005804 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80057dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	3348      	adds	r3, #72	; 0x48
 80057e2:	443b      	add	r3, r7
 80057e4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d807      	bhi.n	80057fe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80057ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	3348      	adds	r3, #72	; 0x48
 80057f4:	443b      	add	r3, r7
 80057f6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80057fa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80057fc:	e020      	b.n	8005840 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80057fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005800:	3301      	adds	r3, #1
 8005802:	643b      	str	r3, [r7, #64]	; 0x40
 8005804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005806:	2b03      	cmp	r3, #3
 8005808:	d9e8      	bls.n	80057dc <RCC_SetFlashLatency+0x40>
 800580a:	e019      	b.n	8005840 <RCC_SetFlashLatency+0xa4>
=======
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e38:	d11a      	bne.n	8005e70 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e3e:	e013      	b.n	8005e68 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	3348      	adds	r3, #72	; 0x48
 8005e46:	443b      	add	r3, r7
 8005e48:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d807      	bhi.n	8005e62 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	3348      	adds	r3, #72	; 0x48
 8005e58:	443b      	add	r3, r7
 8005e5a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e5e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005e60:	e020      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	3301      	adds	r3, #1
 8005e66:	643b      	str	r3, [r7, #64]	; 0x40
 8005e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d9e8      	bls.n	8005e40 <RCC_SetFlashLatency+0x40>
 8005e6e:	e019      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
<<<<<<< HEAD
 800580c:	2300      	movs	r3, #0
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005810:	e013      	b.n	800583a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	3348      	adds	r3, #72	; 0x48
 8005818:	443b      	add	r3, r7
 800581a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d807      	bhi.n	8005834 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	3348      	adds	r3, #72	; 0x48
 800582a:	443b      	add	r3, r7
 800582c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005830:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005832:	e005      	b.n	8005840 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005836:	3301      	adds	r3, #1
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583c:	2b02      	cmp	r3, #2
 800583e:	d9e8      	bls.n	8005812 <RCC_SetFlashLatency+0x76>
=======
 8005e70:	2300      	movs	r3, #0
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e74:	e013      	b.n	8005e9e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	3348      	adds	r3, #72	; 0x48
 8005e7c:	443b      	add	r3, r7
 8005e7e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d807      	bhi.n	8005e98 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	3348      	adds	r3, #72	; 0x48
 8005e8e:	443b      	add	r3, r7
 8005e90:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e94:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005e96:	e005      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d9e8      	bls.n	8005e76 <RCC_SetFlashLatency+0x76>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< HEAD
 8005840:	4b13      	ldr	r3, [pc, #76]	; (8005890 <RCC_SetFlashLatency+0xf4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f023 0207 	bic.w	r2, r3, #7
 8005848:	4911      	ldr	r1, [pc, #68]	; (8005890 <RCC_SetFlashLatency+0xf4>)
 800584a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800584c:	4313      	orrs	r3, r2
 800584e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005850:	f7fc f940 	bl	8001ad4 <HAL_GetTick>
 8005854:	63b8      	str	r0, [r7, #56]	; 0x38
=======
 8005ea4:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f023 0207 	bic.w	r2, r3, #7
 8005eac:	4911      	ldr	r1, [pc, #68]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005eb4:	f7fb fdbe 	bl	8001a34 <HAL_GetTick>
 8005eb8:	63b8      	str	r0, [r7, #56]	; 0x38
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< HEAD
 8005856:	e008      	b.n	800586a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005858:	f7fc f93c 	bl	8001ad4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e007      	b.n	800587a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800586a:	4b09      	ldr	r3, [pc, #36]	; (8005890 <RCC_SetFlashLatency+0xf4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005874:	429a      	cmp	r2, r3
 8005876:	d1ef      	bne.n	8005858 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	374c      	adds	r7, #76	; 0x4c
 800587e:	46bd      	mov	sp, r7
 8005880:	bd90      	pop	{r4, r7, pc}
 8005882:	bf00      	nop
 8005884:	0800ee74 	.word	0x0800ee74
 8005888:	0800ee84 	.word	0x0800ee84
 800588c:	0800ee90 	.word	0x0800ee90
 8005890:	58004000 	.word	0x58004000

08005894 <LL_RCC_LSE_IsEnabled>:
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <LL_RCC_LSE_IsEnabled+0x18>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <LL_RCC_LSE_IsEnabled+0x1a>
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <LL_RCC_LSE_IsReady>:
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80058bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d101      	bne.n	80058d0 <LL_RCC_LSE_IsReady+0x18>
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <LL_RCC_LSE_IsReady+0x1a>
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <LL_RCC_MSI_EnablePLLMode>:
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80058e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ea:	f043 0304 	orr.w	r3, r3, #4
 80058ee:	6013      	str	r3, [r2, #0]
}
 80058f0:	bf00      	nop
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <LL_RCC_SetRFWKPClockSource>:
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800590a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800590e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <LL_RCC_SetSMPSClockSource>:
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800592e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	f023 0203 	bic.w	r2, r3, #3
 8005938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4313      	orrs	r3, r2
 8005940:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <LL_RCC_SetSMPSPrescaler>:
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4313      	orrs	r3, r2
 8005968:	624b      	str	r3, [r1, #36]	; 0x24
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <LL_RCC_SetUSARTClockSource>:
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800597e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005986:	f023 0203 	bic.w	r2, r3, #3
 800598a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <LL_RCC_SetLPUARTClockSource>:
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80059aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <LL_RCC_SetI2CClockSource>:
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80059d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80059e6:	43db      	mvns	r3, r3
 80059e8:	401a      	ands	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80059f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <LL_RCC_SetLPTIMClockSource>:
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	041b      	lsls	r3, r3, #16
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	401a      	ands	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <LL_RCC_SetSAIClockSource>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <LL_RCC_SetRNGClockSource>:
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a78:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005a7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <LL_RCC_SetCLK48ClockSource>:
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <LL_RCC_SetUSBClockSource>:
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff ffe3 	bl	8005a94 <LL_RCC_SetCLK48ClockSource>
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <LL_RCC_SetADCClockSource>:
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <LL_RCC_SetRTCClockSource>:
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <LL_RCC_GetRTCClockSource>:
{
 8005b2e:	b480      	push	{r7}
 8005b30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <LL_RCC_ForceBackupDomainReset>:
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b60:	bf00      	nop
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <LL_RCC_ReleaseBackupDomainReset>:
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b82:	bf00      	nop
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <LL_RCC_PLLSAI1_Enable>:
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b9e:	6013      	str	r3, [r2, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <LL_RCC_PLLSAI1_Disable>:
{
 8005baa:	b480      	push	{r7}
 8005bac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bbc:	6013      	str	r3, [r2, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <LL_RCC_PLLSAI1_IsReady>:
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bda:	d101      	bne.n	8005be0 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_RCCEx_PeriphCLKConfig>:
=======
 8005eba:	e008      	b.n	8005ece <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ebc:	f7fb fdba 	bl	8001a34 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e007      	b.n	8005ede <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ece:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d1ef      	bne.n	8005ebc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	374c      	adds	r7, #76	; 0x4c
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd90      	pop	{r4, r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	0800f4d0 	.word	0x0800f4d0
 8005eec:	0800f4e0 	.word	0x0800f4e0
 8005ef0:	0800f4ec 	.word	0x0800f4ec
 8005ef4:	58004000 	.word	0x58004000

08005ef8 <LL_RCC_LSE_IsEnabled>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <LL_RCC_LSE_IsEnabled+0x18>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <LL_RCC_LSE_IsEnabled+0x1a>
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_RCC_LSE_IsReady>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d101      	bne.n	8005f34 <LL_RCC_LSE_IsReady+0x18>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <LL_RCC_LSE_IsReady+0x1a>
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_RCC_MSI_EnablePLLMode>:
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	6013      	str	r3, [r2, #0]
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <LL_RCC_SetRFWKPClockSource>:
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <LL_RCC_SetSMPSClockSource>:
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	f023 0203 	bic.w	r2, r3, #3
 8005f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <LL_RCC_SetSMPSPrescaler>:
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <LL_RCC_SetUSARTClockSource>:
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f023 0203 	bic.w	r2, r3, #3
 8005fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <LL_RCC_SetLPUARTClockSource>:
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800600e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800601a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <LL_RCC_SetI2CClockSource>:
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800603a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800604a:	43db      	mvns	r3, r3
 800604c:	401a      	ands	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <LL_RCC_SetLPTIMClockSource>:
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006078:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	041b      	lsls	r3, r3, #16
 8006082:	43db      	mvns	r3, r3
 8006084:	401a      	ands	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <LL_RCC_SetSAIClockSource>:
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80060a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_RCC_SetRNGClockSource>:
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80060e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <LL_RCC_SetCLK48ClockSource>:
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006108:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800610c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <LL_RCC_SetUSBClockSource>:
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ffe3 	bl	80060f8 <LL_RCC_SetCLK48ClockSource>
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <LL_RCC_SetADCClockSource>:
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800614e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <LL_RCC_SetRTCClockSource>:
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800616e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006176:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800617a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <LL_RCC_GetRTCClockSource>:
{
 8006192:	b480      	push	{r7}
 8006194:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LL_RCC_ForceBackupDomainReset>:
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_RCC_ReleaseBackupDomainReset>:
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061e6:	bf00      	nop
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <LL_RCC_PLLSAI1_Enable>:
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006202:	6013      	str	r3, [r2, #0]
}
 8006204:	bf00      	nop
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <LL_RCC_PLLSAI1_Disable>:
{
 800620e:	b480      	push	{r7}
 8006210:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800621c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006220:	6013      	str	r3, [r2, #0]
}
 8006222:	bf00      	nop
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <LL_RCC_PLLSAI1_IsReady>:
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800623a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623e:	d101      	bne.n	8006244 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	77bb      	strb	r3, [r7, #30]
=======
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006258:	2300      	movs	r3, #0
 800625a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800625c:	2300      	movs	r3, #0
 800625e:	77bb      	strb	r3, [r7, #30]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
<<<<<<< HEAD
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d034      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x86>
=======
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d034      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
<<<<<<< HEAD
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c10:	d021      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005c12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c16:	d81b      	bhi.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c1c:	d01d      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c22:	d815      	bhi.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c2c:	d110      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x64>
=======
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006274:	d021      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006276:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800627a:	d81b      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800627c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006280:	d01d      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006286:	d815      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800628c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006290:	d110      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
<<<<<<< HEAD
 8005c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c3c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005c3e:	e00d      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x70>
=======
 8006292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800629c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80062a2:	e00d      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
<<<<<<< HEAD
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 f94d 	bl	8005ee4 <RCCEx_PLLSAI1_ConfigNP>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005c4e:	e005      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x70>
=======
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 f94d 	bl	8006548 <RCCEx_PLLSAI1_ConfigNP>
 80062ae:	4603      	mov	r3, r0
 80062b0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062b2:	e005      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8005c50:	2301      	movs	r3, #1
 8005c52:	77fb      	strb	r3, [r7, #31]
        break;
 8005c54:	e002      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005c56:	bf00      	nop
 8005c58:	e000      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c5c:	7ffb      	ldrb	r3, [r7, #31]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fee8 	bl	8005a3c <LL_RCC_SetSAIClockSource>
 8005c6c:	e001      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x86>
=======
 80062b4:	2301      	movs	r3, #1
 80062b6:	77fb      	strb	r3, [r7, #31]
        break;
 80062b8:	e002      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80062ba:	bf00      	nop
 80062bc:	e000      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80062be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c0:	7ffb      	ldrb	r3, [r7, #31]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d105      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fee8 	bl	80060a0 <LL_RCC_SetSAIClockSource>
 80062d0:	e001      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8005c6e:	7ffb      	ldrb	r3, [r7, #31]
 8005c70:	77bb      	strb	r3, [r7, #30]
=======
 80062d2:	7ffb      	ldrb	r3, [r7, #31]
 80062d4:	77bb      	strb	r3, [r7, #30]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d046      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005c7e:	f7ff ff56 	bl	8005b2e <LL_RCC_GetRTCClockSource>
 8005c82:	61b8      	str	r0, [r7, #24]
=======
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d046      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80062e2:	f7ff ff56 	bl	8006192 <LL_RCC_GetRTCClockSource>
 80062e6:	61b8      	str	r0, [r7, #24]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
<<<<<<< HEAD
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d03c      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005c8e:	f7fe fc1b 	bl	80044c8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d105      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff ff30 	bl	8005b02 <LL_RCC_SetRTCClockSource>
 8005ca2:	e02e      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x116>
=======
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d03c      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80062f2:	f7fe fc1b 	bl	8004b2c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff ff30 	bl	8006166 <LL_RCC_SetRTCClockSource>
 8006306:	e02e      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x116>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
<<<<<<< HEAD
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cac:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005cae:	f7ff ff4b 	bl	8005b48 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005cb2:	f7ff ff5a 	bl	8005b6a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005cce:	f7ff fde1 	bl	8005894 <LL_RCC_LSE_IsEnabled>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d114      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cd8:	f7fb fefc 	bl	8001ad4 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005cde:	e00b      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce0:	f7fb fef8 	bl	8001ad4 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d902      	bls.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	77fb      	strb	r3, [r7, #31]
              break;
 8005cf6:	e004      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005cf8:	f7ff fdde 	bl	80058b8 <LL_RCC_LSE_IsReady>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d1ee      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
=======
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006312:	f7ff ff4b 	bl	80061ac <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006316:	f7ff ff5a 	bl	80061ce <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006332:	f7ff fde1 	bl	8005ef8 <LL_RCC_LSE_IsEnabled>
 8006336:	4603      	mov	r3, r0
 8006338:	2b01      	cmp	r3, #1
 800633a:	d114      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800633c:	f7fb fb7a 	bl	8001a34 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006342:	e00b      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006344:	f7fb fb76 	bl	8001a34 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006352:	4293      	cmp	r3, r2
 8006354:	d902      	bls.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	77fb      	strb	r3, [r7, #31]
              break;
 800635a:	e004      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800635c:	f7ff fdde 	bl	8005f1c <LL_RCC_LSE_IsReady>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d1ee      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }
        }
      }

      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8005d02:	7ffb      	ldrb	r3, [r7, #31]
 8005d04:	77bb      	strb	r3, [r7, #30]
 8005d06:	e001      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x120>
=======
 8006366:	7ffb      	ldrb	r3, [r7, #31]
 8006368:	77bb      	strb	r3, [r7, #30]
 800636a:	e001      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x120>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8005d08:	7ffb      	ldrb	r3, [r7, #31]
 8005d0a:	77bb      	strb	r3, [r7, #30]
=======
 800636c:	7ffb      	ldrb	r3, [r7, #31]
 800636e:	77bb      	strb	r3, [r7, #30]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d004      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x136>
=======
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x136>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fe2a 	bl	8005976 <LL_RCC_SetUSARTClockSource>
=======
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fe2a 	bl	8005fda <LL_RCC_SetUSARTClockSource>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d004      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
=======
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x14c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff fe35 	bl	80059a2 <LL_RCC_SetLPUARTClockSource>
=======
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fe35 	bl	8006006 <LL_RCC_SetLPUARTClockSource>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< HEAD
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff fe5d 	bl	8005a08 <LL_RCC_SetLPTIMClockSource>
=======
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff fe5d 	bl	800606c <LL_RCC_SetLPTIMClockSource>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< HEAD
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fe52 	bl	8005a08 <LL_RCC_SetLPTIMClockSource>
=======
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fe52 	bl	800606c <LL_RCC_SetLPTIMClockSource>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x18e>
=======
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x18e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fe2a 	bl	80059ce <LL_RCC_SetI2CClockSource>
=======
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fe2a 	bl	8006032 <LL_RCC_SetI2CClockSource>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
=======
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff fe1f 	bl	80059ce <LL_RCC_SetI2CClockSource>
=======
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fe1f 	bl	8006032 <LL_RCC_SetI2CClockSource>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< HEAD
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d022      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fe8d 	bl	8005ac0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dae:	d107      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dbe:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dc8:	d10b      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 f8e3 	bl	8005f9a <RCCEx_PLLSAI1_ConfigNQ>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005dd8:	7ffb      	ldrb	r3, [r7, #31]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005dde:	7ffb      	ldrb	r3, [r7, #31]
 8005de0:	77bb      	strb	r3, [r7, #30]
=======
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d022      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fe8d 	bl	8006124 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006412:	d107      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800641e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006422:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800642c:	d10b      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f8e3 	bl	80065fe <RCCEx_PLLSAI1_ConfigNQ>
 8006438:	4603      	mov	r3, r0
 800643a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800643c:	7ffb      	ldrb	r3, [r7, #31]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006442:	7ffb      	ldrb	r3, [r7, #31]
 8006444:	77bb      	strb	r3, [r7, #30]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< HEAD
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d02b      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
=======
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800644e:	2b00      	cmp	r3, #0
 8006450:	d02b      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
<<<<<<< HEAD
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df6:	d008      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e00:	d003      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fe2a 	bl	8005a68 <LL_RCC_SetRNGClockSource>
 8005e14:	e00a      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	2000      	movs	r0, #0
 8005e22:	f7ff fe21 	bl	8005a68 <LL_RCC_SetRNGClockSource>
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f7ff fe34 	bl	8005a94 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005e34:	d107      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e44:	60d3      	str	r3, [r2, #12]
=======
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d008      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006464:	d003      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff fe2a 	bl	80060cc <LL_RCC_SetRNGClockSource>
 8006478:	e00a      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	2000      	movs	r0, #0
 8006486:	f7ff fe21 	bl	80060cc <LL_RCC_SetRNGClockSource>
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fe34 	bl	80060f8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006498:	d107      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800649a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064a8:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d022      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
=======
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d022      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff fe3d 	bl	8005ad6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e64:	d107      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e74:	60d3      	str	r3, [r2, #12]
=======
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fe3d 	bl	800613a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c8:	d107      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
<<<<<<< HEAD
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e7e:	d10b      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 f8e3 	bl	8006050 <RCCEx_PLLSAI1_ConfigNR>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005e8e:	7ffb      	ldrb	r3, [r7, #31]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005e94:	7ffb      	ldrb	r3, [r7, #31]
 8005e96:	77bb      	strb	r3, [r7, #30]
=======
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064e2:	d10b      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 f8e3 	bl	80066b4 <RCCEx_PLLSAI1_ConfigNR>
 80064ee:	4603      	mov	r3, r0
 80064f0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80064f2:	7ffb      	ldrb	r3, [r7, #31]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80064f8:	7ffb      	ldrb	r3, [r7, #31]
 80064fa:	77bb      	strb	r3, [r7, #30]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
<<<<<<< HEAD
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d004      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
=======
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
<<<<<<< HEAD
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fd26 	bl	80058fa <LL_RCC_SetRFWKPClockSource>
=======
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fd26 	bl	8005f5e <LL_RCC_SetRFWKPClockSource>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
<<<<<<< HEAD
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2e2>
=======
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
<<<<<<< HEAD
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff fd45 	bl	800594e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fd2c 	bl	8005926 <LL_RCC_SetSMPSClockSource>
=======
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff fd45 	bl	8005fb2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff fd2c 	bl	8005f8a <LL_RCC_SetSMPSClockSource>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
<<<<<<< HEAD
 8005ece:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3720      	adds	r7, #32
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_RCCEx_EnableMSIPLLMode>:
=======
 8006532:	7fbb      	ldrb	r3, [r7, #30]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3720      	adds	r7, #32
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_RCCEx_EnableMSIPLLMode>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
<<<<<<< HEAD
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005edc:	f7ff fcfe 	bl	80058dc <LL_RCC_MSI_EnablePLLMode>
}
 8005ee0:	bf00      	nop
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <RCCEx_PLLSAI1_ConfigNP>:
=======
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006540:	f7ff fcfe 	bl	8005f40 <LL_RCC_MSI_EnablePLLMode>
}
 8006544:	bf00      	nop
 8006546:	bd80      	pop	{r7, pc}

08006548 <RCCEx_PLLSAI1_ConfigNP>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< HEAD
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	73fb      	strb	r3, [r7, #15]
=======
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< HEAD
 8005ef0:	f7ff fe5b 	bl	8005baa <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ef4:	f7fb fdee 	bl	8001ad4 <HAL_GetTick>
 8005ef8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005efa:	e009      	b.n	8005f10 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005efc:	f7fb fdea 	bl	8001ad4 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d902      	bls.n	8005f10 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f0e:	e004      	b.n	8005f1a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f10:	f7ff fe5a 	bl	8005bc8 <LL_RCC_PLLSAI1_IsReady>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <RCCEx_PLLSAI1_ConfigNP+0x18>
=======
 8006554:	f7ff fe5b 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006558:	f7fb fa6c 	bl	8001a34 <HAL_GetTick>
 800655c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800655e:	e009      	b.n	8006574 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006560:	f7fb fa68 	bl	8001a34 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d902      	bls.n	8006574 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	73fb      	strb	r3, [r7, #15]
      break;
 8006572:	e004      	b.n	800657e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006574:	f7ff fe5a 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <RCCEx_PLLSAI1_ConfigNP+0x18>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  if (status == HAL_OK)
<<<<<<< HEAD
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d137      	bne.n	8005f90 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f34:	4313      	orrs	r3, r2
 8005f36:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f4e:	f7ff fe1d 	bl	8005b8c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f52:	f7fb fdbf 	bl	8001ad4 <HAL_GetTick>
 8005f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f58:	e009      	b.n	8005f6e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f5a:	f7fb fdbb 	bl	8001ad4 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d902      	bls.n	8005f6e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	73fb      	strb	r3, [r7, #15]
        break;
 8005f6c:	e004      	b.n	8005f78 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f6e:	f7ff fe2b 	bl	8005bc8 <LL_RCC_PLLSAI1_IsReady>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d1f0      	bne.n	8005f5a <RCCEx_PLLSAI1_ConfigNP+0x76>
=======
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d137      	bne.n	80065f4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006598:	4313      	orrs	r3, r2
 800659a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800659c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065ae:	4313      	orrs	r3, r2
 80065b0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80065b2:	f7ff fe1d 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b6:	f7fb fa3d 	bl	8001a34 <HAL_GetTick>
 80065ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065bc:	e009      	b.n	80065d2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065be:	f7fb fa39 	bl	8001a34 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d902      	bls.n	80065d2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	73fb      	strb	r3, [r7, #15]
        break;
 80065d0:	e004      	b.n	80065dc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065d2:	f7ff fe2b 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d1f0      	bne.n	80065be <RCCEx_PLLSAI1_ConfigNP+0x76>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }

    if (status == HAL_OK)
<<<<<<< HEAD
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d108      	bne.n	8005f90 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	610b      	str	r3, [r1, #16]
=======
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80065e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065f0:	4313      	orrs	r3, r2
 80065f2:	610b      	str	r3, [r1, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  return status;
<<<<<<< HEAD
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <RCCEx_PLLSAI1_ConfigNQ>:
=======
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <RCCEx_PLLSAI1_ConfigNQ>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< HEAD
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]
=======
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< HEAD
 8005fa6:	f7ff fe00 	bl	8005baa <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005faa:	f7fb fd93 	bl	8001ad4 <HAL_GetTick>
 8005fae:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fb0:	e009      	b.n	8005fc6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fb2:	f7fb fd8f 	bl	8001ad4 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d902      	bls.n	8005fc6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc4:	e004      	b.n	8005fd0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fc6:	f7ff fdff 	bl	8005bc8 <LL_RCC_PLLSAI1_IsReady>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f0      	bne.n	8005fb2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
=======
 800660a:	f7ff fe00 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800660e:	f7fb fa11 	bl	8001a34 <HAL_GetTick>
 8006612:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006614:	e009      	b.n	800662a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006616:	f7fb fa0d 	bl	8001a34 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d902      	bls.n	800662a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	73fb      	strb	r3, [r7, #15]
      break;
 8006628:	e004      	b.n	8006634 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800662a:	f7ff fdff 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1f0      	bne.n	8006616 <RCCEx_PLLSAI1_ConfigNQ+0x18>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  if (status == HAL_OK)
<<<<<<< HEAD
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d137      	bne.n	8006046 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fea:	4313      	orrs	r3, r2
 8005fec:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006000:	4313      	orrs	r3, r2
 8006002:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006004:	f7ff fdc2 	bl	8005b8c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006008:	f7fb fd64 	bl	8001ad4 <HAL_GetTick>
 800600c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800600e:	e009      	b.n	8006024 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006010:	f7fb fd60 	bl	8001ad4 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d902      	bls.n	8006024 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	73fb      	strb	r3, [r7, #15]
        break;
 8006022:	e004      	b.n	800602e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006024:	f7ff fdd0 	bl	8005bc8 <LL_RCC_PLLSAI1_IsReady>
 8006028:	4603      	mov	r3, r0
 800602a:	2b01      	cmp	r3, #1
 800602c:	d1f0      	bne.n	8006010 <RCCEx_PLLSAI1_ConfigNQ+0x76>
=======
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d137      	bne.n	80066aa <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800663a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800664e:	4313      	orrs	r3, r2
 8006650:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006664:	4313      	orrs	r3, r2
 8006666:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006668:	f7ff fdc2 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666c:	f7fb f9e2 	bl	8001a34 <HAL_GetTick>
 8006670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006672:	e009      	b.n	8006688 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006674:	f7fb f9de 	bl	8001a34 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d902      	bls.n	8006688 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	73fb      	strb	r3, [r7, #15]
        break;
 8006686:	e004      	b.n	8006692 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006688:	f7ff fdd0 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 800668c:	4603      	mov	r3, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d1f0      	bne.n	8006674 <RCCEx_PLLSAI1_ConfigNQ+0x76>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }

    if (status == HAL_OK)
<<<<<<< HEAD
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d108      	bne.n	8006046 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006042:	4313      	orrs	r3, r2
 8006044:	610b      	str	r3, [r1, #16]
=======
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d108      	bne.n	80066aa <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066a6:	4313      	orrs	r3, r2
 80066a8:	610b      	str	r3, [r1, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  return status;
<<<<<<< HEAD
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <RCCEx_PLLSAI1_ConfigNR>:
=======
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <RCCEx_PLLSAI1_ConfigNR>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< HEAD
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	73fb      	strb	r3, [r7, #15]
=======
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	73fb      	strb	r3, [r7, #15]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< HEAD
 800605c:	f7ff fda5 	bl	8005baa <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006060:	f7fb fd38 	bl	8001ad4 <HAL_GetTick>
 8006064:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006066:	e009      	b.n	800607c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006068:	f7fb fd34 	bl	8001ad4 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d902      	bls.n	800607c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	73fb      	strb	r3, [r7, #15]
      break;
 800607a:	e004      	b.n	8006086 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800607c:	f7ff fda4 	bl	8005bc8 <LL_RCC_PLLSAI1_IsReady>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f0      	bne.n	8006068 <RCCEx_PLLSAI1_ConfigNR+0x18>
=======
 80066c0:	f7ff fda5 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066c4:	f7fb f9b6 	bl	8001a34 <HAL_GetTick>
 80066c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066ca:	e009      	b.n	80066e0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066cc:	f7fb f9b2 	bl	8001a34 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d902      	bls.n	80066e0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	73fb      	strb	r3, [r7, #15]
      break;
 80066de:	e004      	b.n	80066ea <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066e0:	f7ff fda4 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <RCCEx_PLLSAI1_ConfigNR+0x18>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  if (status == HAL_OK)
<<<<<<< HEAD
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d137      	bne.n	80060fc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800608c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060a0:	4313      	orrs	r3, r2
 80060a2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80060a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060b6:	4313      	orrs	r3, r2
 80060b8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80060ba:	f7ff fd67 	bl	8005b8c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060be:	f7fb fd09 	bl	8001ad4 <HAL_GetTick>
 80060c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060c4:	e009      	b.n	80060da <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060c6:	f7fb fd05 	bl	8001ad4 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d902      	bls.n	80060da <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	73fb      	strb	r3, [r7, #15]
        break;
 80060d8:	e004      	b.n	80060e4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060da:	f7ff fd75 	bl	8005bc8 <LL_RCC_PLLSAI1_IsReady>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d1f0      	bne.n	80060c6 <RCCEx_PLLSAI1_ConfigNR+0x76>
=======
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d137      	bne.n	8006760 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006704:	4313      	orrs	r3, r2
 8006706:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800671a:	4313      	orrs	r3, r2
 800671c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800671e:	f7ff fd67 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006722:	f7fb f987 	bl	8001a34 <HAL_GetTick>
 8006726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006728:	e009      	b.n	800673e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800672a:	f7fb f983 	bl	8001a34 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d902      	bls.n	800673e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	73fb      	strb	r3, [r7, #15]
        break;
 800673c:	e004      	b.n	8006748 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800673e:	f7ff fd75 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 8006742:	4603      	mov	r3, r0
 8006744:	2b01      	cmp	r3, #1
 8006746:	d1f0      	bne.n	800672a <RCCEx_PLLSAI1_ConfigNR+0x76>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }

    if (status == HAL_OK)
<<<<<<< HEAD
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d108      	bne.n	80060fc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80060ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060f8:	4313      	orrs	r3, r2
 80060fa:	610b      	str	r3, [r1, #16]
=======
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d108      	bne.n	8006760 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800674e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800675c:	4313      	orrs	r3, r2
 800675e:	610b      	str	r3, [r1, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  return status;
<<<<<<< HEAD
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_TIM_Base_Init>:
=======
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_Base_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e049      	b.n	80061ac <HAL_TIM_Base_Init+0xa6>
=======
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e049      	b.n	8006810 <HAL_TIM_Base_Init+0xa6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f841 	bl	80061b4 <HAL_TIM_Base_MspInit>
=======
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f841 	bl	8006818 <HAL_TIM_Base_MspInit>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3304      	adds	r3, #4
 8006142:	4619      	mov	r1, r3
 8006144:	4610      	mov	r0, r2
 8006146:	f000 f9b7 	bl	80064b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_Base_MspInit>:
=======
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3304      	adds	r3, #4
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f000 f9b7 	bl	8006b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_TIM_Base_MspInit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
=======
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_TIM_Base_Start_IT>:
=======
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIM_Base_Start_IT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
=======
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d001      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e036      	b.n	800624e <HAL_TIM_Base_Start_IT+0x86>
=======
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b01      	cmp	r3, #1
 800683e:	d001      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e036      	b.n	80068b2 <HAL_TIM_Base_Start_IT+0x86>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a17      	ldr	r2, [pc, #92]	; (800625c <HAL_TIM_Base_Start_IT+0x94>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x44>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620a:	d115      	bne.n	8006238 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689a      	ldr	r2, [r3, #8]
 8006212:	4b13      	ldr	r3, [pc, #76]	; (8006260 <HAL_TIM_Base_Start_IT+0x98>)
 8006214:	4013      	ands	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b06      	cmp	r3, #6
 800621c:	d015      	beq.n	800624a <HAL_TIM_Base_Start_IT+0x82>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006224:	d011      	beq.n	800624a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006236:	e008      	b.n	800624a <HAL_TIM_Base_Start_IT+0x82>
=======
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0201 	orr.w	r2, r2, #1
 800685a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a17      	ldr	r2, [pc, #92]	; (80068c0 <HAL_TIM_Base_Start_IT+0x94>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x44>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686e:	d115      	bne.n	800689c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	4b13      	ldr	r3, [pc, #76]	; (80068c4 <HAL_TIM_Base_Start_IT+0x98>)
 8006878:	4013      	ands	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b06      	cmp	r3, #6
 8006880:	d015      	beq.n	80068ae <HAL_TIM_Base_Start_IT+0x82>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006888:	d011      	beq.n	80068ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689a:	e008      	b.n	80068ae <HAL_TIM_Base_Start_IT+0x82>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	e000      	b.n	800624c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624a:	bf00      	nop
=======
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e000      	b.n	80068b0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ae:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40012c00 	.word	0x40012c00
 8006260:	00010007 	.word	0x00010007

08006264 <HAL_TIM_IRQHandler>:
=======
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	00010007 	.word	0x00010007

080068c8 <HAL_TIM_IRQHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d020      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0202 	mvn.w	r2, #2
 8006298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x52>
=======
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d020      	beq.n	800692c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01b      	beq.n	800692c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0202 	mvn.w	r2, #2
 80068fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_IRQHandler+0x52>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f8e4 	bl	800647c <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0x5e>
=======
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f8e4 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 8006918:	e005      	b.n	8006926 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f8d6 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f8e7 	bl	8006490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
=======
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f8d6 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8e7 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< HEAD
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d020      	beq.n	8006314 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01b      	beq.n	8006314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0204 	mvn.w	r2, #4
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0x9e>
=======
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	d020      	beq.n	8006978 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0204 	mvn.w	r2, #4
 8006948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f8be 	bl	800647c <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0xaa>
=======
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f8be 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f8b0 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f8c1 	bl	8006490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
=======
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8b0 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f8c1 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< HEAD
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d020      	beq.n	8006360 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01b      	beq.n	8006360 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0208 	mvn.w	r2, #8
 8006330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2204      	movs	r2, #4
 8006336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_TIM_IRQHandler+0xea>
=======
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d020      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0208 	mvn.w	r2, #8
 8006994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2204      	movs	r2, #4
 800699a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_TIM_IRQHandler+0xea>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f898 	bl	800647c <HAL_TIM_IC_CaptureCallback>
 800634c:	e005      	b.n	800635a <HAL_TIM_IRQHandler+0xf6>
=======
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f898 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 80069b0:	e005      	b.n	80069be <HAL_TIM_IRQHandler+0xf6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f88a 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f89b 	bl	8006490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	771a      	strb	r2, [r3, #28]
=======
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f88a 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f89b 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< HEAD
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b00      	cmp	r3, #0
 8006368:	d020      	beq.n	80063ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0310 	and.w	r3, r3, #16
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01b      	beq.n	80063ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0210 	mvn.w	r2, #16
 800637c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2208      	movs	r2, #8
 8006382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_TIM_IRQHandler+0x136>
=======
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d020      	beq.n	8006a10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01b      	beq.n	8006a10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0210 	mvn.w	r2, #16
 80069e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2208      	movs	r2, #8
 80069e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_TIM_IRQHandler+0x136>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f872 	bl	800647c <HAL_TIM_IC_CaptureCallback>
 8006398:	e005      	b.n	80063a6 <HAL_TIM_IRQHandler+0x142>
=======
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f872 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 80069fc:	e005      	b.n	8006a0a <HAL_TIM_IRQHandler+0x142>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f864 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f875 	bl	8006490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	771a      	strb	r2, [r3, #28]
=======
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f864 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f875 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< HEAD
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00c      	beq.n	80063d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0201 	mvn.w	r2, #1
 80063c8:	611a      	str	r2, [r3, #16]
=======
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00c      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0201 	mvn.w	r2, #1
 8006a2c:	611a      	str	r2, [r3, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fb f81c 	bl	8001408 <HAL_TIM_PeriodElapsedCallback>
=======
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fa fc9a 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
<<<<<<< HEAD
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00c      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063ec:	611a      	str	r2, [r3, #16]
=======
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00c      	beq.n	8006a58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a50:	611a      	str	r2, [r3, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f8d0 	bl	8006594 <HAL_TIMEx_BreakCallback>
=======
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f8d0 	bl	8006bf8 <HAL_TIMEx_BreakCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< HEAD
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006410:	611a      	str	r2, [r3, #16]
=======
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00c      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d007      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a74:	611a      	str	r2, [r3, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f8c8 	bl	80065a8 <HAL_TIMEx_Break2Callback>
=======
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f8c8 	bl	8006c0c <HAL_TIMEx_Break2Callback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< HEAD
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006434:	611a      	str	r2, [r3, #16]
=======
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00c      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a98:	611a      	str	r2, [r3, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f834 	bl	80064a4 <HAL_TIM_TriggerCallback>
=======
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f834 	bl	8006b08 <HAL_TIM_TriggerCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< HEAD
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00c      	beq.n	8006460 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0220 	mvn.w	r2, #32
 8006458:	611a      	str	r2, [r3, #16]
=======
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00c      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0220 	mvn.w	r2, #32
 8006abc:	611a      	str	r2, [r3, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f890 	bl	8006580 <HAL_TIMEx_CommutCallback>
=======
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f890 	bl	8006be4 <HAL_TIMEx_CommutCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
=======
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIM_IC_CaptureCallback>:
=======
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
=======
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
=======
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIM_TriggerCallback>:
=======
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIM_TriggerCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
=======
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <TIM_Base_SetConfig>:
=======
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <TIM_Base_SetConfig>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a2a      	ldr	r2, [pc, #168]	; (8006574 <TIM_Base_SetConfig+0xbc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d003      	beq.n	80064d8 <TIM_Base_SetConfig+0x20>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d6:	d108      	bne.n	80064ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a21      	ldr	r2, [pc, #132]	; (8006574 <TIM_Base_SetConfig+0xbc>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00b      	beq.n	800650a <TIM_Base_SetConfig+0x52>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f8:	d007      	beq.n	800650a <TIM_Base_SetConfig+0x52>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a1e      	ldr	r2, [pc, #120]	; (8006578 <TIM_Base_SetConfig+0xc0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_Base_SetConfig+0x52>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1d      	ldr	r2, [pc, #116]	; (800657c <TIM_Base_SetConfig+0xc4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d108      	bne.n	800651c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
=======
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <TIM_Base_SetConfig+0xbc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_Base_SetConfig+0x20>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3a:	d108      	bne.n	8006b4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <TIM_Base_SetConfig+0xbc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <TIM_Base_SetConfig+0x52>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5c:	d007      	beq.n	8006b6e <TIM_Base_SetConfig+0x52>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1e      	ldr	r2, [pc, #120]	; (8006bdc <TIM_Base_SetConfig+0xc0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_Base_SetConfig+0x52>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a1d      	ldr	r2, [pc, #116]	; (8006be0 <TIM_Base_SetConfig+0xc4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a0c      	ldr	r2, [pc, #48]	; (8006574 <TIM_Base_SetConfig+0xbc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d007      	beq.n	8006558 <TIM_Base_SetConfig+0xa0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a0b      	ldr	r2, [pc, #44]	; (8006578 <TIM_Base_SetConfig+0xc0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d003      	beq.n	8006558 <TIM_Base_SetConfig+0xa0>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a0a      	ldr	r2, [pc, #40]	; (800657c <TIM_Base_SetConfig+0xc4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d103      	bne.n	8006560 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <TIM_Base_SetConfig+0xbc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d007      	beq.n	8006bbc <TIM_Base_SetConfig+0xa0>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a0b      	ldr	r2, [pc, #44]	; (8006bdc <TIM_Base_SetConfig+0xc0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_Base_SetConfig+0xa0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a0a      	ldr	r2, [pc, #40]	; (8006be0 <TIM_Base_SetConfig+0xc4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d103      	bne.n	8006bc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	615a      	str	r2, [r3, #20]
}
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40012c00 	.word	0x40012c00
 8006578:	40014400 	.word	0x40014400
 800657c:	40014800 	.word	0x40014800

08006580 <HAL_TIMEx_CommutCallback>:
=======
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	615a      	str	r2, [r3, #20]
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40012c00 	.word	0x40012c00
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800

08006be4 <HAL_TIMEx_CommutCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
=======
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_TIMEx_BreakCallback>:
=======
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIMEx_BreakCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
=======
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_TIMEx_Break2Callback>:
=======
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIMEx_Break2Callback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
=======
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <LL_RCC_GetUSARTClockSource>:
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80065c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4013      	ands	r3, r2
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_RCC_GetLPUARTClockSource>:
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80065e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4013      	ands	r3, r2
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_UART_Init>:
=======
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <LL_RCC_GetUSARTClockSource>:
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4013      	ands	r3, r2
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <LL_RCC_GetLPUARTClockSource>:
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4013      	ands	r3, r2
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_UART_Init>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e042      	b.n	8006694 <HAL_UART_Init+0x98>
=======
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e042      	b.n	8006cf8 <HAL_UART_Init+0x98>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
=======
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d106      	bne.n	8006c8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7fb f807 	bl	8001634 <HAL_UART_MspInit>
=======
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7fa fc85 	bl	8001594 <HAL_UART_MspInit>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2224      	movs	r2, #36	; 0x24
 800662a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
=======
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2224      	movs	r2, #36	; 0x24
 8006c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< HEAD
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 f914 	bl	8007874 <UART_AdvFeatureConfig>
=======
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 f914 	bl	8007ed8 <UART_AdvFeatureConfig>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< HEAD
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fee9 	bl	8007424 <UART_SetConfig>
 8006652:	4603      	mov	r3, r0
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e01b      	b.n	8006694 <HAL_UART_Init+0x98>
=======
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fee9 	bl	8007a88 <UART_SetConfig>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e01b      	b.n	8006cf8 <HAL_UART_Init+0x98>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800666a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800667a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 f993 	bl	80079b8 <UART_CheckIdleState>
 8006692:	4603      	mov	r3, r0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_UART_Transmit_IT>:
=======
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 f993 	bl	800801c <UART_CheckIdleState>
 8006cf6:	4603      	mov	r3, r0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_UART_Transmit_IT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800669c:	b480      	push	{r7}
 800669e:	b091      	sub	sp, #68	; 0x44
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	4613      	mov	r3, r2
 80066a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d178      	bne.n	80067a6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_UART_Transmit_IT+0x24>
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e071      	b.n	80067a8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	88fa      	ldrh	r2, [r7, #6]
 80066d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2221      	movs	r2, #33	; 0x21
 80066ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f8:	d12a      	bne.n	8006750 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006702:	d107      	bne.n	8006714 <HAL_UART_Transmit_IT+0x78>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4a29      	ldr	r2, [pc, #164]	; (80067b4 <HAL_UART_Transmit_IT+0x118>)
 8006710:	679a      	str	r2, [r3, #120]	; 0x78
 8006712:	e002      	b.n	800671a <HAL_UART_Transmit_IT+0x7e>
=======
 8006d00:	b480      	push	{r7}
 8006d02:	b091      	sub	sp, #68	; 0x44
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d178      	bne.n	8006e0a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <HAL_UART_Transmit_IT+0x24>
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e071      	b.n	8006e0c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	88fa      	ldrh	r2, [r7, #6]
 8006d32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	88fa      	ldrh	r2, [r7, #6]
 8006d3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2221      	movs	r2, #33	; 0x21
 8006d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d5c:	d12a      	bne.n	8006db4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d107      	bne.n	8006d78 <HAL_UART_Transmit_IT+0x78>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a29      	ldr	r2, [pc, #164]	; (8006e18 <HAL_UART_Transmit_IT+0x118>)
 8006d74:	679a      	str	r2, [r3, #120]	; 0x78
 8006d76:	e002      	b.n	8006d7e <HAL_UART_Transmit_IT+0x7e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
<<<<<<< HEAD
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4a28      	ldr	r2, [pc, #160]	; (80067b8 <HAL_UART_Transmit_IT+0x11c>)
 8006718:	679a      	str	r2, [r3, #120]	; 0x78
=======
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4a28      	ldr	r2, [pc, #160]	; (8006e1c <HAL_UART_Transmit_IT+0x11c>)
 8006d7c:	679a      	str	r2, [r3, #120]	; 0x78
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
<<<<<<< HEAD
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3308      	adds	r3, #8
 8006720:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3308      	adds	r3, #8
 8006d84:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006730:	63bb      	str	r3, [r7, #56]	; 0x38
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3308      	adds	r3, #8
 8006738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800673a:	637a      	str	r2, [r7, #52]	; 0x34
 800673c:	633b      	str	r3, [r7, #48]	; 0x30
=======
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d9e:	637a      	str	r2, [r7, #52]	; 0x34
 8006da0:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 800673e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e5      	bne.n	800671a <HAL_UART_Transmit_IT+0x7e>
 800674e:	e028      	b.n	80067a2 <HAL_UART_Transmit_IT+0x106>
=======
 8006da2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006da4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e5      	bne.n	8006d7e <HAL_UART_Transmit_IT+0x7e>
 8006db2:	e028      	b.n	8006e06 <HAL_UART_Transmit_IT+0x106>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006758:	d107      	bne.n	800676a <HAL_UART_Transmit_IT+0xce>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d103      	bne.n	800676a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4a15      	ldr	r2, [pc, #84]	; (80067bc <HAL_UART_Transmit_IT+0x120>)
 8006766:	679a      	str	r2, [r3, #120]	; 0x78
 8006768:	e002      	b.n	8006770 <HAL_UART_Transmit_IT+0xd4>
=======
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbc:	d107      	bne.n	8006dce <HAL_UART_Transmit_IT+0xce>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a15      	ldr	r2, [pc, #84]	; (8006e20 <HAL_UART_Transmit_IT+0x120>)
 8006dca:	679a      	str	r2, [r3, #120]	; 0x78
 8006dcc:	e002      	b.n	8006dd4 <HAL_UART_Transmit_IT+0xd4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
<<<<<<< HEAD
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4a14      	ldr	r2, [pc, #80]	; (80067c0 <HAL_UART_Transmit_IT+0x124>)
 800676e:	679a      	str	r2, [r3, #120]	; 0x78
=======
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a14      	ldr	r2, [pc, #80]	; (8006e24 <HAL_UART_Transmit_IT+0x124>)
 8006dd2:	679a      	str	r2, [r3, #120]	; 0x78
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
<<<<<<< HEAD
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	613b      	str	r3, [r7, #16]
   return(result);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678e:	623b      	str	r3, [r7, #32]
 8006790:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	69f9      	ldr	r1, [r7, #28]
 8006794:	6a3a      	ldr	r2, [r7, #32]
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	61bb      	str	r3, [r7, #24]
   return(result);
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e6      	bne.n	8006770 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e000      	b.n	80067a8 <HAL_UART_Transmit_IT+0x10c>
=======
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	613b      	str	r3, [r7, #16]
   return(result);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df2:	623b      	str	r3, [r7, #32]
 8006df4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	69f9      	ldr	r1, [r7, #28]
 8006df8:	6a3a      	ldr	r2, [r7, #32]
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e6      	bne.n	8006dd4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	e000      	b.n	8006e0c <HAL_UART_Transmit_IT+0x10c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80067a6:	2302      	movs	r3, #2
  }
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3744      	adds	r7, #68	; 0x44
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	0800862b 	.word	0x0800862b
 80067b8:	0800854b 	.word	0x0800854b
 80067bc:	08008489 	.word	0x08008489
 80067c0:	080083d1 	.word	0x080083d1

080067c4 <HAL_UART_Receive_IT>:
=======
 8006e0a:	2302      	movs	r3, #2
  }
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3744      	adds	r7, #68	; 0x44
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	08008c8f 	.word	0x08008c8f
 8006e1c:	08008baf 	.word	0x08008baf
 8006e20:	08008aed 	.word	0x08008aed
 8006e24:	08008a35 	.word	0x08008a35

08006e28 <HAL_UART_Receive_IT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d137      	bne.n	800684c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_UART_Receive_IT+0x24>
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e030      	b.n	800684e <HAL_UART_Receive_IT+0x8a>
=======
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08a      	sub	sp, #40	; 0x28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	4613      	mov	r3, r2
 8006e34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	d137      	bne.n	8006eb0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_UART_Receive_IT+0x24>
 8006e46:	88fb      	ldrh	r3, [r7, #6]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e030      	b.n	8006eb2 <HAL_UART_Receive_IT+0x8a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a18      	ldr	r2, [pc, #96]	; (8006858 <HAL_UART_Receive_IT+0x94>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d01f      	beq.n	800683c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d018      	beq.n	800683c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	613b      	str	r3, [r7, #16]
   return(result);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	69f9      	ldr	r1, [r7, #28]
 800682e:	6a3a      	ldr	r2, [r7, #32]
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	61bb      	str	r3, [r7, #24]
   return(result);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e6      	bne.n	800680a <HAL_UART_Receive_IT+0x46>
=======
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a18      	ldr	r2, [pc, #96]	; (8006ebc <HAL_UART_Receive_IT+0x94>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d01f      	beq.n	8006ea0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d018      	beq.n	8006ea0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e90:	69f9      	ldr	r1, [r7, #28]
 8006e92:	6a3a      	ldr	r2, [r7, #32]
 8006e94:	e841 2300 	strex	r3, r2, [r1]
 8006e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e6      	bne.n	8006e6e <HAL_UART_Receive_IT+0x46>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
<<<<<<< HEAD
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	461a      	mov	r2, r3
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f001 f9ca 	bl	8007bdc <UART_Start_Receive_IT>
 8006848:	4603      	mov	r3, r0
 800684a:	e000      	b.n	800684e <HAL_UART_Receive_IT+0x8a>
=======
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f001 f9ca 	bl	8008240 <UART_Start_Receive_IT>
 8006eac:	4603      	mov	r3, r0
 8006eae:	e000      	b.n	8006eb2 <HAL_UART_Receive_IT+0x8a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800684c:	2302      	movs	r3, #2
  }
}
 800684e:	4618      	mov	r0, r3
 8006850:	3728      	adds	r7, #40	; 0x28
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	40008000 	.word	0x40008000

0800685c <HAL_UART_Transmit_DMA>:
=======
 8006eb0:	2302      	movs	r3, #2
  }
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3728      	adds	r7, #40	; 0x28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40008000 	.word	0x40008000

08006ec0 <HAL_UART_Transmit_DMA>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	4613      	mov	r3, r2
 8006868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006870:	2b20      	cmp	r3, #32
 8006872:	d167      	bne.n	8006944 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_UART_Transmit_DMA+0x24>
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e060      	b.n	8006946 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	88fa      	ldrh	r2, [r7, #6]
 800688e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	88fa      	ldrh	r2, [r7, #6]
 8006896:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2221      	movs	r2, #33	; 0x21
 80068a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d028      	beq.n	8006904 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068b6:	4a26      	ldr	r2, [pc, #152]	; (8006950 <HAL_UART_Transmit_DMA+0xf4>)
 80068b8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068be:	4a25      	ldr	r2, [pc, #148]	; (8006954 <HAL_UART_Transmit_DMA+0xf8>)
 80068c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068c6:	4a24      	ldr	r2, [pc, #144]	; (8006958 <HAL_UART_Transmit_DMA+0xfc>)
 80068c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ce:	2200      	movs	r2, #0
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068da:	4619      	mov	r1, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3328      	adds	r3, #40	; 0x28
 80068e2:	461a      	mov	r2, r3
 80068e4:	88fb      	ldrh	r3, [r7, #6]
 80068e6:	f7fc ff81 	bl	80037ec <HAL_DMA_Start_IT>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d009      	beq.n	8006904 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2210      	movs	r2, #16
 80068f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e020      	b.n	8006946 <HAL_UART_Transmit_DMA+0xea>
=======
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	; 0x28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d167      	bne.n	8006fa8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_UART_Transmit_DMA+0x24>
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e060      	b.n	8006faa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	88fa      	ldrh	r2, [r7, #6]
 8006ef2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	88fa      	ldrh	r2, [r7, #6]
 8006efa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2221      	movs	r2, #33	; 0x21
 8006f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d028      	beq.n	8006f68 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f1a:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <HAL_UART_Transmit_DMA+0xf4>)
 8006f1c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f22:	4a25      	ldr	r2, [pc, #148]	; (8006fb8 <HAL_UART_Transmit_DMA+0xf8>)
 8006f24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f2a:	4a24      	ldr	r2, [pc, #144]	; (8006fbc <HAL_UART_Transmit_DMA+0xfc>)
 8006f2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f32:	2200      	movs	r2, #0
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3e:	4619      	mov	r1, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3328      	adds	r3, #40	; 0x28
 8006f46:	461a      	mov	r2, r3
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	f7fc fc23 	bl	8003794 <HAL_DMA_Start_IT>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d009      	beq.n	8006f68 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2210      	movs	r2, #16
 8006f58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e020      	b.n	8006faa <HAL_UART_Transmit_DMA+0xea>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
<<<<<<< HEAD
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2240      	movs	r2, #64	; 0x40
 800690a:	621a      	str	r2, [r3, #32]
=======
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2240      	movs	r2, #64	; 0x40
 8006f6e:	621a      	str	r2, [r3, #32]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
<<<<<<< HEAD
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3308      	adds	r3, #8
 8006912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	613b      	str	r3, [r7, #16]
   return(result);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3308      	adds	r3, #8
 800692a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692c:	623a      	str	r2, [r7, #32]
 800692e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	69f9      	ldr	r1, [r7, #28]
 8006932:	6a3a      	ldr	r2, [r7, #32]
 8006934:	e841 2300 	strex	r3, r2, [r1]
 8006938:	61bb      	str	r3, [r7, #24]
   return(result);
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e5      	bne.n	800690c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	e000      	b.n	8006946 <HAL_UART_Transmit_DMA+0xea>
=======
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3308      	adds	r3, #8
 8006f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	e853 3f00 	ldrex	r3, [r3]
 8006f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f90:	623a      	str	r2, [r7, #32]
 8006f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	69f9      	ldr	r1, [r7, #28]
 8006f96:	6a3a      	ldr	r2, [r7, #32]
 8006f98:	e841 2300 	strex	r3, r2, [r1]
 8006f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e5      	bne.n	8006f70 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e000      	b.n	8006faa <HAL_UART_Transmit_DMA+0xea>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8006944:	2302      	movs	r3, #2
  }
}
 8006946:	4618      	mov	r0, r3
 8006948:	3728      	adds	r7, #40	; 0x28
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	080080bb 	.word	0x080080bb
 8006954:	08008155 	.word	0x08008155
 8006958:	080082db 	.word	0x080082db

0800695c <HAL_UART_DMAStop>:
=======
 8006fa8:	2302      	movs	r3, #2
  }
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3728      	adds	r7, #40	; 0x28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	0800871f 	.word	0x0800871f
 8006fb8:	080087b9 	.word	0x080087b9
 8006fbc:	0800893f 	.word	0x0800893f

08006fc0 <HAL_UART_DMAStop>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800695c:	b580      	push	{r7, lr}
 800695e:	b090      	sub	sp, #64	; 0x40
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
=======
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b090      	sub	sp, #64	; 0x40
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
<<<<<<< HEAD
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006972:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697e:	2b80      	cmp	r3, #128	; 0x80
 8006980:	d139      	bne.n	80069f6 <HAL_UART_DMAStop+0x9a>
 8006982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006984:	2b21      	cmp	r3, #33	; 0x21
 8006986:	d136      	bne.n	80069f6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3308      	adds	r3, #8
 800698e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	61fb      	str	r3, [r7, #28]
   return(result);
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800699e:	637b      	str	r3, [r7, #52]	; 0x34
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3308      	adds	r3, #8
 80069a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e5      	bne.n	8006988 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d015      	beq.n	80069f0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fc ff8a 	bl	80038e2 <HAL_DMA_Abort>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00d      	beq.n	80069f0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fd f8ef 	bl	8003bbc <HAL_DMA_GetError>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	d105      	bne.n	80069f0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2210      	movs	r2, #16
 80069e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e047      	b.n	8006a80 <HAL_UART_DMAStop+0x124>
=======
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d139      	bne.n	800705a <HAL_UART_DMAStop+0x9a>
 8006fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe8:	2b21      	cmp	r3, #33	; 0x21
 8006fea:	d136      	bne.n	800705a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800700c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e5      	bne.n	8006fec <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d015      	beq.n	8007054 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702c:	4618      	mov	r0, r3
 800702e:	f7fc fc2c 	bl	800388a <HAL_DMA_Abort>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00d      	beq.n	8007054 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703c:	4618      	mov	r0, r3
 800703e:	f7fc fd91 	bl	8003b64 <HAL_DMA_GetError>
 8007042:	4603      	mov	r3, r0
 8007044:	2b20      	cmp	r3, #32
 8007046:	d105      	bne.n	8007054 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2210      	movs	r2, #16
 800704c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e047      	b.n	80070e4 <HAL_UART_DMAStop+0x124>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }

    UART_EndTxTransfer(huart);
<<<<<<< HEAD
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fabb 	bl	8007f6c <UART_EndTxTransfer>
=======
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 fabb 	bl	80085d0 <UART_EndTxTransfer>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
<<<<<<< HEAD
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a00:	2b40      	cmp	r3, #64	; 0x40
 8006a02:	d13c      	bne.n	8006a7e <HAL_UART_DMAStop+0x122>
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	2b22      	cmp	r3, #34	; 0x22
 8006a08:	d139      	bne.n	8006a7e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a20:	633b      	str	r3, [r7, #48]	; 0x30
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2a:	61ba      	str	r2, [r7, #24]
 8006a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6979      	ldr	r1, [r7, #20]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	613b      	str	r3, [r7, #16]
   return(result);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e5      	bne.n	8006a0a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d017      	beq.n	8006a78 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fc ff47 	bl	80038e2 <HAL_DMA_Abort>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00e      	beq.n	8006a78 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fd f8ab 	bl	8003bbc <HAL_DMA_GetError>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d105      	bne.n	8006a78 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2210      	movs	r2, #16
 8006a70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e003      	b.n	8006a80 <HAL_UART_DMAStop+0x124>
=======
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d13c      	bne.n	80070e2 <HAL_UART_DMAStop+0x122>
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	2b22      	cmp	r3, #34	; 0x22
 800706c:	d139      	bne.n	80070e2 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	60bb      	str	r3, [r7, #8]
   return(result);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007084:	633b      	str	r3, [r7, #48]	; 0x30
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708e:	61ba      	str	r2, [r7, #24]
 8007090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6979      	ldr	r1, [r7, #20]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	613b      	str	r3, [r7, #16]
   return(result);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d017      	beq.n	80070dc <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fc fbe9 	bl	800388a <HAL_DMA_Abort>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00e      	beq.n	80070dc <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fc fd4d 	bl	8003b64 <HAL_DMA_GetError>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d105      	bne.n	80070dc <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2210      	movs	r2, #16
 80070d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e003      	b.n	80070e4 <HAL_UART_DMAStop+0x124>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }

    UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 fab8 	bl	8007fee <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3740      	adds	r7, #64	; 0x40
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_UART_AbortReceive_IT>:
=======
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 fab8 	bl	8008652 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3740      	adds	r7, #64	; 0x40
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_UART_AbortReceive_IT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b09a      	sub	sp, #104	; 0x68
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aa4:	667b      	str	r3, [r7, #100]	; 0x64
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aae:	657b      	str	r3, [r7, #84]	; 0x54
 8006ab0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ab4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e6      	bne.n	8006a90 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	f023 0301 	bic.w	r3, r3, #1
 8006adc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ae6:	643a      	str	r2, [r7, #64]	; 0x40
 8006ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e3      	bne.n	8006ac2 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d118      	bne.n	8006b34 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f023 0310 	bic.w	r3, r3, #16
 8006b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b22:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e6      	bne.n	8006b02 <HAL_UART_AbortReceive_IT+0x7a>
=======
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b09a      	sub	sp, #104	; 0x68
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007108:	667b      	str	r3, [r7, #100]	; 0x64
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007112:	657b      	str	r3, [r7, #84]	; 0x54
 8007114:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e6      	bne.n	80070f4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	663b      	str	r3, [r7, #96]	; 0x60
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3308      	adds	r3, #8
 8007148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800714a:	643a      	str	r2, [r7, #64]	; 0x40
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e3      	bne.n	8007126 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007162:	2b01      	cmp	r3, #1
 8007164:	d118      	bne.n	8007198 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	61fb      	str	r3, [r7, #28]
   return(result);
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	f023 0310 	bic.w	r3, r3, #16
 800717a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007186:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800718a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e6      	bne.n	8007166 <HAL_UART_AbortReceive_IT+0x7a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d154      	bne.n	8006bec <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b58:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b62:	61ba      	str	r2, [r7, #24]
 8006b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6979      	ldr	r1, [r7, #20]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e5      	bne.n	8006b42 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d017      	beq.n	8006bb0 <HAL_UART_AbortReceive_IT+0x128>
=======
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b40      	cmp	r3, #64	; 0x40
 80071a4:	d154      	bne.n	8007250 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071c6:	61ba      	str	r2, [r7, #24]
 80071c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6979      	ldr	r1, [r7, #20]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	613b      	str	r3, [r7, #16]
   return(result);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e5      	bne.n	80071a6 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d017      	beq.n	8007214 <HAL_UART_AbortReceive_IT+0x128>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
<<<<<<< HEAD
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b86:	4a26      	ldr	r2, [pc, #152]	; (8006c20 <HAL_UART_AbortReceive_IT+0x198>)
 8006b88:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fc ff05 	bl	80039a0 <HAL_DMA_Abort_IT>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d03c      	beq.n	8006c16 <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006baa:	4610      	mov	r0, r2
 8006bac:	4798      	blx	r3
 8006bae:	e032      	b.n	8006c16 <HAL_UART_AbortReceive_IT+0x18e>
=======
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ea:	4a26      	ldr	r2, [pc, #152]	; (8007284 <HAL_UART_AbortReceive_IT+0x198>)
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fc fba7 	bl	8003948 <HAL_DMA_Abort_IT>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d03c      	beq.n	800727a <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800720e:	4610      	mov	r0, r2
 8007210:	4798      	blx	r3
 8007212:	e032      	b.n	800727a <HAL_UART_AbortReceive_IT+0x18e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
<<<<<<< HEAD
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	220f      	movs	r2, #15
 8006bc4:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f042 0208 	orr.w	r2, r2, #8
 8006bd4:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	220f      	movs	r2, #15
 8007228:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	699a      	ldr	r2, [r3, #24]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0208 	orr.w	r2, r2, #8
 8007238:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
<<<<<<< HEAD
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fb55 	bl	8007294 <HAL_UART_AbortReceiveCpltCallback>
 8006bea:	e014      	b.n	8006c16 <HAL_UART_AbortReceive_IT+0x18e>
=======
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fb55 	bl	80078f8 <HAL_UART_AbortReceiveCpltCallback>
 800724e:	e014      	b.n	800727a <HAL_UART_AbortReceive_IT+0x18e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
<<<<<<< HEAD
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	220f      	movs	r2, #15
 8006c00:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	220f      	movs	r2, #15
 8007264:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
<<<<<<< HEAD
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fb3f 	bl	8007294 <HAL_UART_AbortReceiveCpltCallback>
=======
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb3f 	bl	80078f8 <HAL_UART_AbortReceiveCpltCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
<<<<<<< HEAD
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3768      	adds	r7, #104	; 0x68
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	08008387 	.word	0x08008387

08006c24 <HAL_UART_IRQHandler>:
=======
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3768      	adds	r7, #104	; 0x68
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	080089eb 	.word	0x080089eb

08007288 <HAL_UART_IRQHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b0ba      	sub	sp, #232	; 0xe8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
=======
 8007288:	b580      	push	{r7, lr}
 800728a:	b0ba      	sub	sp, #232	; 0xe8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< HEAD
 8006c4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c52:	4013      	ands	r3, r2
 8006c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d11b      	bne.n	8006c98 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d015      	beq.n	8006c98 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c70:	f003 0320 	and.w	r3, r3, #32
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d105      	bne.n	8006c84 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d009      	beq.n	8006c98 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 82e3 	beq.w	8007254 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
      }
      return;
 8006c96:	e2dd      	b.n	8007254 <HAL_UART_IRQHandler+0x630>
=======
 80072ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80072b6:	4013      	ands	r3, r2
 80072b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80072bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11b      	bne.n	80072fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d015      	beq.n	80072fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d105      	bne.n	80072e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d009      	beq.n	80072fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 82e3 	beq.w	80078b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	4798      	blx	r3
      }
      return;
 80072fa:	e2dd      	b.n	80078b8 <HAL_UART_IRQHandler+0x630>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< HEAD
 8006c98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 8123 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ca2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006ca6:	4b8d      	ldr	r3, [pc, #564]	; (8006edc <HAL_UART_IRQHandler+0x2b8>)
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d106      	bne.n	8006cbc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cb2:	4b8b      	ldr	r3, [pc, #556]	; (8006ee0 <HAL_UART_IRQHandler+0x2bc>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 8116 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d011      	beq.n	8006cec <HAL_UART_IRQHandler+0xc8>
 8006cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce2:	f043 0201 	orr.w	r2, r3, #1
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 80072fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 8123 	beq.w	800754c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007306:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800730a:	4b8d      	ldr	r3, [pc, #564]	; (8007540 <HAL_UART_IRQHandler+0x2b8>)
 800730c:	4013      	ands	r3, r2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007312:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007316:	4b8b      	ldr	r3, [pc, #556]	; (8007544 <HAL_UART_IRQHandler+0x2bc>)
 8007318:	4013      	ands	r3, r2
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8116 	beq.w	800754c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d011      	beq.n	8007350 <HAL_UART_IRQHandler+0xc8>
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2201      	movs	r2, #1
 800733e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	f043 0201 	orr.w	r2, r3, #1
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8006cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d011      	beq.n	8006d1c <HAL_UART_IRQHandler+0xf8>
 8006cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d12:	f043 0204 	orr.w	r2, r3, #4
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 8007350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d011      	beq.n	8007380 <HAL_UART_IRQHandler+0xf8>
 800735c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2202      	movs	r2, #2
 800736e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	f043 0204 	orr.w	r2, r3, #4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8006d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d011      	beq.n	8006d4c <HAL_UART_IRQHandler+0x128>
 8006d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2204      	movs	r2, #4
 8006d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	f043 0202 	orr.w	r2, r3, #2
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d011      	beq.n	80073b0 <HAL_UART_IRQHandler+0x128>
 800738c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2204      	movs	r2, #4
 800739e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a6:	f043 0202 	orr.w	r2, r3, #2
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< HEAD
 8006d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d50:	f003 0308 	and.w	r3, r3, #8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d017      	beq.n	8006d88 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d5c:	f003 0320 	and.w	r3, r3, #32
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d105      	bne.n	8006d70 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d68:	4b5c      	ldr	r3, [pc, #368]	; (8006edc <HAL_UART_IRQHandler+0x2b8>)
 8006d6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2208      	movs	r2, #8
 8006d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7e:	f043 0208 	orr.w	r2, r3, #8
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d017      	beq.n	80073ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d105      	bne.n	80073d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80073c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80073cc:	4b5c      	ldr	r3, [pc, #368]	; (8007540 <HAL_UART_IRQHandler+0x2b8>)
 80073ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2208      	movs	r2, #8
 80073da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e2:	f043 0208 	orr.w	r2, r3, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< HEAD
 8006d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d012      	beq.n	8006dba <HAL_UART_IRQHandler+0x196>
 8006d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00c      	beq.n	8006dba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006da8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db0:	f043 0220 	orr.w	r2, r3, #32
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 80073ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d012      	beq.n	800741e <HAL_UART_IRQHandler+0x196>
 80073f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00c      	beq.n	800741e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800740c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007414:	f043 0220 	orr.w	r2, r3, #32
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 8249 	beq.w	8007258 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d013      	beq.n	8006dfa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d105      	bne.n	8006dea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d007      	beq.n	8006dfa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
=======
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8249 	beq.w	80078bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800742a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d013      	beq.n	800745e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b00      	cmp	r3, #0
 8007440:	d105      	bne.n	800744e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< HEAD
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d005      	beq.n	8006e1e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d054      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x2a4>
=======
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007464:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	d005      	beq.n	8007482 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800747a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800747e:	2b00      	cmp	r3, #0
 8007480:	d054      	beq.n	800752c <HAL_UART_IRQHandler+0x2a4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 f8e5 	bl	8007fee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2e:	2b40      	cmp	r3, #64	; 0x40
 8006e30:	d146      	bne.n	8006ec0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3308      	adds	r3, #8
 8006e5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1d9      	bne.n	8006e32 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d017      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x294>
=======
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 f8e5 	bl	8008652 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d146      	bne.n	8007524 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3308      	adds	r3, #8
 800749c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1d9      	bne.n	8007496 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d017      	beq.n	800751c <HAL_UART_IRQHandler+0x294>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e8e:	4a15      	ldr	r2, [pc, #84]	; (8006ee4 <HAL_UART_IRQHandler+0x2c0>)
 8006e90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fc fd81 	bl	80039a0 <HAL_DMA_Abort_IT>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d019      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb6:	e00f      	b.n	8006ed8 <HAL_UART_IRQHandler+0x2b4>
=======
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f2:	4a15      	ldr	r2, [pc, #84]	; (8007548 <HAL_UART_IRQHandler+0x2c0>)
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fc fa23 	bl	8003948 <HAL_DMA_Abort_IT>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d019      	beq.n	800753c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007516:	4610      	mov	r0, r2
 8007518:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800751a:	e00f      	b.n	800753c <HAL_UART_IRQHandler+0x2b4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f007 fe93 	bl	800ebe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ebe:	e00b      	b.n	8006ed8 <HAL_UART_IRQHandler+0x2b4>
=======
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f007 fd71 	bl	800f004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007522:	e00b      	b.n	800753c <HAL_UART_IRQHandler+0x2b4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f007 fe8f 	bl	800ebe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec6:	e007      	b.n	8006ed8 <HAL_UART_IRQHandler+0x2b4>
=======
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f007 fd6d 	bl	800f004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752a:	e007      	b.n	800753c <HAL_UART_IRQHandler+0x2b4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f007 fe8b 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006ed6:	e1bf      	b.n	8007258 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed8:	bf00      	nop
    return;
 8006eda:	e1bd      	b.n	8007258 <HAL_UART_IRQHandler+0x634>
 8006edc:	10000001 	.word	0x10000001
 8006ee0:	04000120 	.word	0x04000120
 8006ee4:	0800835b 	.word	0x0800835b
=======
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f007 fd69 	bl	800f004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800753a:	e1bf      	b.n	80078bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753c:	bf00      	nop
    return;
 800753e:	e1bd      	b.n	80078bc <HAL_UART_IRQHandler+0x634>
 8007540:	10000001 	.word	0x10000001
 8007544:	04000120 	.word	0x04000120
 8007548:	080089bf 	.word	0x080089bf
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	f040 8153 	bne.w	8007198 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef6:	f003 0310 	and.w	r3, r3, #16
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 814c 	beq.w	8007198 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f04:	f003 0310 	and.w	r3, r3, #16
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 8145 	beq.w	8007198 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2210      	movs	r2, #16
 8006f14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	f040 80bb 	bne.w	800709c <HAL_UART_IRQHandler+0x478>
=======
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007550:	2b01      	cmp	r3, #1
 8007552:	f040 8153 	bne.w	80077fc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 814c 	beq.w	80077fc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 8145 	beq.w	80077fc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2210      	movs	r2, #16
 8007578:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007584:	2b40      	cmp	r3, #64	; 0x40
 8007586:	f040 80bb 	bne.w	8007700 <HAL_UART_IRQHandler+0x478>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 818f 	beq.w	800725c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	f080 8187 	bcs.w	800725c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f040 8087 	bne.w	800707a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1da      	bne.n	8006f6c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3308      	adds	r3, #8
 8006fbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fc8:	f023 0301 	bic.w	r3, r3, #1
 8006fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fe2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e1      	bne.n	8006fb6 <HAL_UART_IRQHandler+0x392>
=======
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 818f 	beq.w	80078c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ac:	429a      	cmp	r2, r3
 80075ae:	f080 8187 	bcs.w	80078c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 8087 	bne.w	80076de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007606:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1da      	bne.n	80075d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3308      	adds	r3, #8
 8007620:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800762a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800762c:	f023 0301 	bic.w	r3, r3, #1
 8007630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800763e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007642:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007646:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e1      	bne.n	800761a <HAL_UART_IRQHandler+0x392>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3308      	adds	r3, #8
 8007012:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007016:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007018:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800701c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e3      	bne.n	8006ff2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007048:	f023 0310 	bic.w	r3, r3, #16
 800704c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800705a:	65bb      	str	r3, [r7, #88]	; 0x58
 800705c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007060:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e4      	bne.n	8007038 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007074:	4618      	mov	r0, r3
 8007076:	f7fc fc34 	bl	80038e2 <HAL_DMA_Abort>
=======
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3308      	adds	r3, #8
 800765c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800766c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3308      	adds	r3, #8
 8007676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800767a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800767c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e3      	bne.n	8007656 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ac:	f023 0310 	bic.w	r3, r3, #16
 80076b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076be:	65bb      	str	r3, [r7, #88]	; 0x58
 80076c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e4      	bne.n	800769c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fc f8d6 	bl	800388a <HAL_DMA_Abort>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2202      	movs	r2, #2
 800707e:	671a      	str	r2, [r3, #112]	; 0x70
=======
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800708c:	b29b      	uxth	r3, r3
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	b29b      	uxth	r3, r3
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f007 fdff 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800709a:	e0df      	b.n	800725c <HAL_UART_IRQHandler+0x638>
=======
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f007 fcdd 	bl	800f0b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076fe:	e0df      	b.n	80078c0 <HAL_UART_IRQHandler+0x638>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 80d1 	beq.w	8007260 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80070be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80cc 	beq.w	8007260 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ea:	647b      	str	r3, [r7, #68]	; 0x44
 80070ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e4      	bne.n	80070c8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	623b      	str	r3, [r7, #32]
   return(result);
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3308      	adds	r3, #8
 8007122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007126:	633a      	str	r2, [r7, #48]	; 0x30
 8007128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800712c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e1      	bne.n	80070fe <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	60fb      	str	r3, [r7, #12]
   return(result);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 0310 	bic.w	r3, r3, #16
 8007162:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007170:	61fb      	str	r3, [r7, #28]
 8007172:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	69b9      	ldr	r1, [r7, #24]
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	617b      	str	r3, [r7, #20]
   return(result);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e4      	bne.n	800714e <HAL_UART_IRQHandler+0x52a>
=======
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800770c:	b29b      	uxth	r3, r3
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80d1 	beq.w	80078c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 80cc 	beq.w	80078c4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800774e:	647b      	str	r3, [r7, #68]	; 0x44
 8007750:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800775c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e4      	bne.n	800772c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3308      	adds	r3, #8
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	623b      	str	r3, [r7, #32]
   return(result);
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007778:	f023 0301 	bic.w	r3, r3, #1
 800777c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3308      	adds	r3, #8
 8007786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800778a:	633a      	str	r2, [r7, #48]	; 0x30
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e1      	bne.n	8007762 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0310 	bic.w	r3, r3, #16
 80077c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077d4:	61fb      	str	r3, [r7, #28]
 80077d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	69b9      	ldr	r1, [r7, #24]
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	617b      	str	r3, [r7, #20]
   return(result);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e4      	bne.n	80077b2 <HAL_UART_IRQHandler+0x52a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	671a      	str	r2, [r3, #112]	; 0x70
=======
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 800718a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f007 fd81 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007196:	e063      	b.n	8007260 <HAL_UART_IRQHandler+0x63c>
=======
 80077ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f007 fc5f 	bl	800f0b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077fa:	e063      	b.n	80078c4 <HAL_UART_IRQHandler+0x63c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< HEAD
 8007198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00e      	beq.n	80071c2 <HAL_UART_IRQHandler+0x59e>
 80071a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d008      	beq.n	80071c2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071b8:	621a      	str	r2, [r3, #32]
=======
 80077fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00e      	beq.n	8007826 <HAL_UART_IRQHandler+0x59e>
 8007808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800780c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d008      	beq.n	8007826 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800781c:	621a      	str	r2, [r3, #32]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< HEAD
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 fff2 	bl	80091a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071c0:	e051      	b.n	8007266 <HAL_UART_IRQHandler+0x642>
=======
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 fff2 	bl	8009808 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007824:	e051      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
<<<<<<< HEAD
 80071c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d014      	beq.n	80071f8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d105      	bne.n	80071e6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80071da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d008      	beq.n	80071f8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d03a      	beq.n	8007264 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
    }
    return;
 80071f6:	e035      	b.n	8007264 <HAL_UART_IRQHandler+0x640>
=======
 8007826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782e:	2b00      	cmp	r3, #0
 8007830:	d014      	beq.n	800785c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b00      	cmp	r3, #0
 800783c:	d105      	bne.n	800784a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800783e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d008      	beq.n	800785c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800784e:	2b00      	cmp	r3, #0
 8007850:	d03a      	beq.n	80078c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
    }
    return;
 800785a:	e035      	b.n	80078c8 <HAL_UART_IRQHandler+0x640>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< HEAD
 80071f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d009      	beq.n	8007218 <HAL_UART_IRQHandler+0x5f4>
 8007204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 fa7f 	bl	8008714 <UART_EndTransmit_IT>
    return;
 8007216:	e026      	b.n	8007266 <HAL_UART_IRQHandler+0x642>
=======
 800785c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	d009      	beq.n	800787c <HAL_UART_IRQHandler+0x5f4>
 8007868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 fa7f 	bl	8008d78 <UART_EndTransmit_IT>
    return;
 800787a:	e026      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
<<<<<<< HEAD
 8007218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800721c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d009      	beq.n	8007238 <HAL_UART_IRQHandler+0x614>
 8007224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007228:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_UART_IRQHandler+0x614>
=======
 800787c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d009      	beq.n	800789c <HAL_UART_IRQHandler+0x614>
 8007888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_UART_IRQHandler+0x614>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
<<<<<<< HEAD
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 ffcb 	bl	80091cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007236:	e016      	b.n	8007266 <HAL_UART_IRQHandler+0x642>
=======
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 ffcb 	bl	8009830 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800789a:	e016      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
<<<<<<< HEAD
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d010      	beq.n	8007266 <HAL_UART_IRQHandler+0x642>
 8007244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007248:	2b00      	cmp	r3, #0
 800724a:	da0c      	bge.n	8007266 <HAL_UART_IRQHandler+0x642>
=======
 800789c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d010      	beq.n	80078ca <HAL_UART_IRQHandler+0x642>
 80078a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	da0c      	bge.n	80078ca <HAL_UART_IRQHandler+0x642>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
<<<<<<< HEAD
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 ffb3 	bl	80091b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007252:	e008      	b.n	8007266 <HAL_UART_IRQHandler+0x642>
      return;
 8007254:	bf00      	nop
 8007256:	e006      	b.n	8007266 <HAL_UART_IRQHandler+0x642>
    return;
 8007258:	bf00      	nop
 800725a:	e004      	b.n	8007266 <HAL_UART_IRQHandler+0x642>
      return;
 800725c:	bf00      	nop
 800725e:	e002      	b.n	8007266 <HAL_UART_IRQHandler+0x642>
      return;
 8007260:	bf00      	nop
 8007262:	e000      	b.n	8007266 <HAL_UART_IRQHandler+0x642>
    return;
 8007264:	bf00      	nop
  }
}
 8007266:	37e8      	adds	r7, #232	; 0xe8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_UART_TxHalfCpltCallback>:
=======
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 ffb3 	bl	800981c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078b6:	e008      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
      return;
 80078b8:	bf00      	nop
 80078ba:	e006      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
    return;
 80078bc:	bf00      	nop
 80078be:	e004      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
      return;
 80078c0:	bf00      	nop
 80078c2:	e002      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
      return;
 80078c4:	bf00      	nop
 80078c6:	e000      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
    return;
 80078c8:	bf00      	nop
  }
}
 80078ca:	37e8      	adds	r7, #232	; 0xe8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_UART_TxHalfCpltCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
=======
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_UART_RxHalfCpltCallback>:
=======
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_UART_RxHalfCpltCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
=======
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_UART_AbortReceiveCpltCallback>:
=======
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_UART_AbortReceiveCpltCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
=======
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_HalfDuplex_EnableTransmitter>:
=======
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_HalfDuplex_EnableTransmitter>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80072a8:	b480      	push	{r7}
 80072aa:	b08f      	sub	sp, #60	; 0x3c
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d101      	bne.n	80072be <HAL_HalfDuplex_EnableTransmitter+0x16>
 80072ba:	2302      	movs	r3, #2
 80072bc:	e042      	b.n	8007344 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2224      	movs	r2, #36	; 0x24
 80072ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	61fb      	str	r3, [r7, #28]
   return(result);
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f023 030c 	bic.w	r3, r3, #12
 80072e2:	637b      	str	r3, [r7, #52]	; 0x34
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e6      	bne.n	80072ce <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	60bb      	str	r3, [r7, #8]
   return(result);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f043 0308 	orr.w	r3, r3, #8
 8007314:	633b      	str	r3, [r7, #48]	; 0x30
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	6979      	ldr	r1, [r7, #20]
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	e841 2300 	strex	r3, r2, [r1]
 800732a:	613b      	str	r3, [r7, #16]
   return(result);
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e6      	bne.n	8007300 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	373c      	adds	r7, #60	; 0x3c
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_HalfDuplex_EnableReceiver>:
=======
 800790c:	b480      	push	{r7}
 800790e:	b08f      	sub	sp, #60	; 0x3c
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800791e:	2302      	movs	r3, #2
 8007920:	e042      	b.n	80079a8 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2224      	movs	r2, #36	; 0x24
 800792e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f023 030c 	bic.w	r3, r3, #12
 8007946:	637b      	str	r3, [r7, #52]	; 0x34
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007952:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e6      	bne.n	8007932 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	60bb      	str	r3, [r7, #8]
   return(result);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f043 0308 	orr.w	r3, r3, #8
 8007978:	633b      	str	r3, [r7, #48]	; 0x30
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	61bb      	str	r3, [r7, #24]
 8007984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6979      	ldr	r1, [r7, #20]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	613b      	str	r3, [r7, #16]
   return(result);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	373c      	adds	r7, #60	; 0x3c
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_HalfDuplex_EnableReceiver>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007350:	b480      	push	{r7}
 8007352:	b08f      	sub	sp, #60	; 0x3c
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800735e:	2b01      	cmp	r3, #1
 8007360:	d101      	bne.n	8007366 <HAL_HalfDuplex_EnableReceiver+0x16>
 8007362:	2302      	movs	r3, #2
 8007364:	e042      	b.n	80073ec <HAL_HalfDuplex_EnableReceiver+0x9c>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2224      	movs	r2, #36	; 0x24
 8007372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	61fb      	str	r3, [r7, #28]
   return(result);
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f023 030c 	bic.w	r3, r3, #12
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007396:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800739a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e6      	bne.n	8007376 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f043 0304 	orr.w	r3, r3, #4
 80073bc:	633b      	str	r3, [r7, #48]	; 0x30
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6979      	ldr	r1, [r7, #20]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	613b      	str	r3, [r7, #16]
   return(result);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e6      	bne.n	80073a8 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	373c      	adds	r7, #60	; 0x3c
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_UART_GetState>:
=======
 80079b4:	b480      	push	{r7}
 80079b6:	b08f      	sub	sp, #60	; 0x3c
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_HalfDuplex_EnableReceiver+0x16>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e042      	b.n	8007a50 <HAL_HalfDuplex_EnableReceiver+0x9c>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2224      	movs	r2, #36	; 0x24
 80079d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f023 030c 	bic.w	r3, r3, #12
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e6      	bne.n	80079da <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f043 0304 	orr.w	r3, r3, #4
 8007a20:	633b      	str	r3, [r7, #48]	; 0x30
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	61bb      	str	r3, [r7, #24]
 8007a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	6979      	ldr	r1, [r7, #20]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	613b      	str	r3, [r7, #16]
   return(result);
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e6      	bne.n	8007a0c <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	373c      	adds	r7, #60	; 0x3c
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_UART_GetState>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007406:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800740e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	4313      	orrs	r3, r2
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <UART_SetConfig>:
=======
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a6a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a72:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	4313      	orrs	r3, r2
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <UART_SetConfig>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007428:	b08c      	sub	sp, #48	; 0x30
 800742a:	af00      	add	r7, sp, #0
 800742c:	6178      	str	r0, [r7, #20]
=======
 8007a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a8c:	b08c      	sub	sp, #48	; 0x30
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6178      	str	r0, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 800742e:	2300      	movs	r3, #0
 8007430:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
=======
 8007a92:	2300      	movs	r3, #0
 8007a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	431a      	orrs	r2, r3
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	431a      	orrs	r2, r3
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	4313      	orrs	r3, r2
 800744a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	4baf      	ldr	r3, [pc, #700]	; (8007710 <UART_SetConfig+0x2ec>)
 8007454:	4013      	ands	r3, r2
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800745c:	430b      	orrs	r3, r1
 800745e:	6013      	str	r3, [r2, #0]
=======
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4baf      	ldr	r3, [pc, #700]	; (8007d74 <UART_SetConfig+0x2ec>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
=======
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4aa4      	ldr	r2, [pc, #656]	; (8007714 <UART_SetConfig+0x2f0>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d004      	beq.n	8007490 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800748c:	4313      	orrs	r3, r2
 800748e:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4aa4      	ldr	r2, [pc, #656]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af0:	4313      	orrs	r3, r2
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
<<<<<<< HEAD
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800749a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074a4:	430b      	orrs	r3, r1
 80074a6:	6093      	str	r3, [r2, #8]
=======
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007afe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	6093      	str	r3, [r2, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< HEAD
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	f023 010f 	bic.w	r1, r3, #15
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a95      	ldr	r2, [pc, #596]	; (8007718 <UART_SetConfig+0x2f4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d125      	bne.n	8007514 <UART_SetConfig+0xf0>
 80074c8:	2003      	movs	r0, #3
 80074ca:	f7ff f877 	bl	80065bc <LL_RCC_GetUSARTClockSource>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d81b      	bhi.n	800750c <UART_SetConfig+0xe8>
 80074d4:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <UART_SetConfig+0xb8>)
 80074d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074da:	bf00      	nop
 80074dc:	080074ed 	.word	0x080074ed
 80074e0:	080074fd 	.word	0x080074fd
 80074e4:	080074f5 	.word	0x080074f5
 80074e8:	08007505 	.word	0x08007505
 80074ec:	2301      	movs	r3, #1
 80074ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074f2:	e042      	b.n	800757a <UART_SetConfig+0x156>
 80074f4:	2302      	movs	r3, #2
 80074f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074fa:	e03e      	b.n	800757a <UART_SetConfig+0x156>
 80074fc:	2304      	movs	r3, #4
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007502:	e03a      	b.n	800757a <UART_SetConfig+0x156>
 8007504:	2308      	movs	r3, #8
 8007506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800750a:	e036      	b.n	800757a <UART_SetConfig+0x156>
 800750c:	2310      	movs	r3, #16
 800750e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007512:	e032      	b.n	800757a <UART_SetConfig+0x156>
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a7e      	ldr	r2, [pc, #504]	; (8007714 <UART_SetConfig+0x2f0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d12a      	bne.n	8007574 <UART_SetConfig+0x150>
 800751e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007522:	f7ff f85b 	bl	80065dc <LL_RCC_GetLPUARTClockSource>
 8007526:	4603      	mov	r3, r0
 8007528:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800752c:	d01a      	beq.n	8007564 <UART_SetConfig+0x140>
 800752e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007532:	d81b      	bhi.n	800756c <UART_SetConfig+0x148>
 8007534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007538:	d00c      	beq.n	8007554 <UART_SetConfig+0x130>
 800753a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800753e:	d815      	bhi.n	800756c <UART_SetConfig+0x148>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <UART_SetConfig+0x128>
 8007544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007548:	d008      	beq.n	800755c <UART_SetConfig+0x138>
 800754a:	e00f      	b.n	800756c <UART_SetConfig+0x148>
 800754c:	2300      	movs	r3, #0
 800754e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007552:	e012      	b.n	800757a <UART_SetConfig+0x156>
 8007554:	2302      	movs	r3, #2
 8007556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800755a:	e00e      	b.n	800757a <UART_SetConfig+0x156>
 800755c:	2304      	movs	r3, #4
 800755e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007562:	e00a      	b.n	800757a <UART_SetConfig+0x156>
 8007564:	2308      	movs	r3, #8
 8007566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800756a:	e006      	b.n	800757a <UART_SetConfig+0x156>
 800756c:	2310      	movs	r3, #16
 800756e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007572:	e002      	b.n	800757a <UART_SetConfig+0x156>
 8007574:	2310      	movs	r3, #16
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	f023 010f 	bic.w	r1, r3, #15
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a95      	ldr	r2, [pc, #596]	; (8007d7c <UART_SetConfig+0x2f4>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d125      	bne.n	8007b78 <UART_SetConfig+0xf0>
 8007b2c:	2003      	movs	r0, #3
 8007b2e:	f7ff f877 	bl	8006c20 <LL_RCC_GetUSARTClockSource>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d81b      	bhi.n	8007b70 <UART_SetConfig+0xe8>
 8007b38:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <UART_SetConfig+0xb8>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b61 	.word	0x08007b61
 8007b48:	08007b59 	.word	0x08007b59
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b56:	e042      	b.n	8007bde <UART_SetConfig+0x156>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5e:	e03e      	b.n	8007bde <UART_SetConfig+0x156>
 8007b60:	2304      	movs	r3, #4
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b66:	e03a      	b.n	8007bde <UART_SetConfig+0x156>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6e:	e036      	b.n	8007bde <UART_SetConfig+0x156>
 8007b70:	2310      	movs	r3, #16
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b76:	e032      	b.n	8007bde <UART_SetConfig+0x156>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a7e      	ldr	r2, [pc, #504]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d12a      	bne.n	8007bd8 <UART_SetConfig+0x150>
 8007b82:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007b86:	f7ff f85b 	bl	8006c40 <LL_RCC_GetLPUARTClockSource>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b90:	d01a      	beq.n	8007bc8 <UART_SetConfig+0x140>
 8007b92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b96:	d81b      	bhi.n	8007bd0 <UART_SetConfig+0x148>
 8007b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b9c:	d00c      	beq.n	8007bb8 <UART_SetConfig+0x130>
 8007b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ba2:	d815      	bhi.n	8007bd0 <UART_SetConfig+0x148>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <UART_SetConfig+0x128>
 8007ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bac:	d008      	beq.n	8007bc0 <UART_SetConfig+0x138>
 8007bae:	e00f      	b.n	8007bd0 <UART_SetConfig+0x148>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb6:	e012      	b.n	8007bde <UART_SetConfig+0x156>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bbe:	e00e      	b.n	8007bde <UART_SetConfig+0x156>
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc6:	e00a      	b.n	8007bde <UART_SetConfig+0x156>
 8007bc8:	2308      	movs	r3, #8
 8007bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bce:	e006      	b.n	8007bde <UART_SetConfig+0x156>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd6:	e002      	b.n	8007bde <UART_SetConfig+0x156>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
<<<<<<< HEAD
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a65      	ldr	r2, [pc, #404]	; (8007714 <UART_SetConfig+0x2f0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	f040 8097 	bne.w	80076b4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800758a:	2b08      	cmp	r3, #8
 800758c:	d823      	bhi.n	80075d6 <UART_SetConfig+0x1b2>
 800758e:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <UART_SetConfig+0x170>)
 8007590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007594:	080075b9 	.word	0x080075b9
 8007598:	080075d7 	.word	0x080075d7
 800759c:	080075c1 	.word	0x080075c1
 80075a0:	080075d7 	.word	0x080075d7
 80075a4:	080075c7 	.word	0x080075c7
 80075a8:	080075d7 	.word	0x080075d7
 80075ac:	080075d7 	.word	0x080075d7
 80075b0:	080075d7 	.word	0x080075d7
 80075b4:	080075cf 	.word	0x080075cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b8:	f7fe f85a 	bl	8005670 <HAL_RCC_GetPCLK1Freq>
 80075bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075be:	e010      	b.n	80075e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075c0:	4b56      	ldr	r3, [pc, #344]	; (800771c <UART_SetConfig+0x2f8>)
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075c4:	e00d      	b.n	80075e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075c6:	f7fd ffd3 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 80075ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075cc:	e009      	b.n	80075e2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075d4:	e005      	b.n	80075e2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075e0:	bf00      	nop
=======
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a65      	ldr	r2, [pc, #404]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	f040 8097 	bne.w	8007d18 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d823      	bhi.n	8007c3a <UART_SetConfig+0x1b2>
 8007bf2:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <UART_SetConfig+0x170>)
 8007bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf8:	08007c1d 	.word	0x08007c1d
 8007bfc:	08007c3b 	.word	0x08007c3b
 8007c00:	08007c25 	.word	0x08007c25
 8007c04:	08007c3b 	.word	0x08007c3b
 8007c08:	08007c2b 	.word	0x08007c2b
 8007c0c:	08007c3b 	.word	0x08007c3b
 8007c10:	08007c3b 	.word	0x08007c3b
 8007c14:	08007c3b 	.word	0x08007c3b
 8007c18:	08007c33 	.word	0x08007c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c1c:	f7fe f85a 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 8007c20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c22:	e010      	b.n	8007c46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c24:	4b56      	ldr	r3, [pc, #344]	; (8007d80 <UART_SetConfig+0x2f8>)
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c28:	e00d      	b.n	8007c46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2a:	f7fd ffd3 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007c2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c30:	e009      	b.n	8007c46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c38:	e005      	b.n	8007c46 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007c44:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< HEAD
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 812b 	beq.w	8007840 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	4a4c      	ldr	r2, [pc, #304]	; (8007720 <UART_SetConfig+0x2fc>)
 80075f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f4:	461a      	mov	r2, r3
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	4613      	mov	r3, r2
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	4413      	add	r3, r2
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	429a      	cmp	r2, r3
 800760c:	d305      	bcc.n	800761a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	429a      	cmp	r2, r3
 8007618:	d903      	bls.n	8007622 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007620:	e10e      	b.n	8007840 <UART_SetConfig+0x41c>
=======
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 812b 	beq.w	8007ea4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	4a4c      	ldr	r2, [pc, #304]	; (8007d84 <UART_SetConfig+0x2fc>)
 8007c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	4413      	add	r3, r2
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d305      	bcc.n	8007c7e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d903      	bls.n	8007c86 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c84:	e10e      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< HEAD
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	2200      	movs	r2, #0
 8007626:	60bb      	str	r3, [r7, #8]
 8007628:	60fa      	str	r2, [r7, #12]
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	4a3c      	ldr	r2, [pc, #240]	; (8007720 <UART_SetConfig+0x2fc>)
 8007630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007634:	b29b      	uxth	r3, r3
 8007636:	2200      	movs	r2, #0
 8007638:	603b      	str	r3, [r7, #0]
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007640:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007644:	f7f9 f96a 	bl	800091c <__aeabi_uldivmod>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4610      	mov	r0, r2
 800764e:	4619      	mov	r1, r3
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	020b      	lsls	r3, r1, #8
 800765a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800765e:	0202      	lsls	r2, r0, #8
 8007660:	6979      	ldr	r1, [r7, #20]
 8007662:	6849      	ldr	r1, [r1, #4]
 8007664:	0849      	lsrs	r1, r1, #1
 8007666:	2000      	movs	r0, #0
 8007668:	460c      	mov	r4, r1
 800766a:	4605      	mov	r5, r0
 800766c:	eb12 0804 	adds.w	r8, r2, r4
 8007670:	eb43 0905 	adc.w	r9, r3, r5
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	469a      	mov	sl, r3
 800767c:	4693      	mov	fp, r2
 800767e:	4652      	mov	r2, sl
 8007680:	465b      	mov	r3, fp
 8007682:	4640      	mov	r0, r8
 8007684:	4649      	mov	r1, r9
 8007686:	f7f9 f949 	bl	800091c <__aeabi_uldivmod>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4613      	mov	r3, r2
 8007690:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007698:	d308      	bcc.n	80076ac <UART_SetConfig+0x288>
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076a0:	d204      	bcs.n	80076ac <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6a3a      	ldr	r2, [r7, #32]
 80076a8:	60da      	str	r2, [r3, #12]
 80076aa:	e0c9      	b.n	8007840 <UART_SetConfig+0x41c>
=======
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	2200      	movs	r2, #0
 8007c8a:	60bb      	str	r3, [r7, #8]
 8007c8c:	60fa      	str	r2, [r7, #12]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	4a3c      	ldr	r2, [pc, #240]	; (8007d84 <UART_SetConfig+0x2fc>)
 8007c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	603b      	str	r3, [r7, #0]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ca8:	f7f8 fe38 	bl	800091c <__aeabi_uldivmod>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	020b      	lsls	r3, r1, #8
 8007cbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cc2:	0202      	lsls	r2, r0, #8
 8007cc4:	6979      	ldr	r1, [r7, #20]
 8007cc6:	6849      	ldr	r1, [r1, #4]
 8007cc8:	0849      	lsrs	r1, r1, #1
 8007cca:	2000      	movs	r0, #0
 8007ccc:	460c      	mov	r4, r1
 8007cce:	4605      	mov	r5, r0
 8007cd0:	eb12 0804 	adds.w	r8, r2, r4
 8007cd4:	eb43 0905 	adc.w	r9, r3, r5
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	469a      	mov	sl, r3
 8007ce0:	4693      	mov	fp, r2
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	465b      	mov	r3, fp
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	4649      	mov	r1, r9
 8007cea:	f7f8 fe17 	bl	800091c <__aeabi_uldivmod>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cfc:	d308      	bcc.n	8007d10 <UART_SetConfig+0x288>
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d04:	d204      	bcs.n	8007d10 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a3a      	ldr	r2, [r7, #32]
 8007d0c:	60da      	str	r2, [r3, #12]
 8007d0e:	e0c9      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< HEAD
 80076ac:	2301      	movs	r3, #1
 80076ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076b2:	e0c5      	b.n	8007840 <UART_SetConfig+0x41c>
=======
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d16:	e0c5      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076bc:	d16d      	bne.n	800779a <UART_SetConfig+0x376>
=======
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d20:	d16d      	bne.n	8007dfe <UART_SetConfig+0x376>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
<<<<<<< HEAD
 80076be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076c2:	3b01      	subs	r3, #1
 80076c4:	2b07      	cmp	r3, #7
 80076c6:	d82d      	bhi.n	8007724 <UART_SetConfig+0x300>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <UART_SetConfig+0x2ac>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076f1 	.word	0x080076f1
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	08007725 	.word	0x08007725
 80076dc:	080076ff 	.word	0x080076ff
 80076e0:	08007725 	.word	0x08007725
 80076e4:	08007725 	.word	0x08007725
 80076e8:	08007725 	.word	0x08007725
 80076ec:	08007707 	.word	0x08007707
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076f0:	f7fd ffd4 	bl	800569c <HAL_RCC_GetPCLK2Freq>
 80076f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076f6:	e01b      	b.n	8007730 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076f8:	4b08      	ldr	r3, [pc, #32]	; (800771c <UART_SetConfig+0x2f8>)
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076fc:	e018      	b.n	8007730 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076fe:	f7fd ff37 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8007702:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007704:	e014      	b.n	8007730 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800770c:	e010      	b.n	8007730 <UART_SetConfig+0x30c>
 800770e:	bf00      	nop
 8007710:	cfff69f3 	.word	0xcfff69f3
 8007714:	40008000 	.word	0x40008000
 8007718:	40013800 	.word	0x40013800
 800771c:	00f42400 	.word	0x00f42400
 8007720:	0800f044 	.word	0x0800f044
      default:
        pclk = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800772e:	bf00      	nop
=======
 8007d22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d26:	3b01      	subs	r3, #1
 8007d28:	2b07      	cmp	r3, #7
 8007d2a:	d82d      	bhi.n	8007d88 <UART_SetConfig+0x300>
 8007d2c:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <UART_SetConfig+0x2ac>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d55 	.word	0x08007d55
 8007d38:	08007d5d 	.word	0x08007d5d
 8007d3c:	08007d89 	.word	0x08007d89
 8007d40:	08007d63 	.word	0x08007d63
 8007d44:	08007d89 	.word	0x08007d89
 8007d48:	08007d89 	.word	0x08007d89
 8007d4c:	08007d89 	.word	0x08007d89
 8007d50:	08007d6b 	.word	0x08007d6b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d54:	f7fd ffd4 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007d58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d5a:	e01b      	b.n	8007d94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d5c:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <UART_SetConfig+0x2f8>)
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d60:	e018      	b.n	8007d94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d62:	f7fd ff37 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d68:	e014      	b.n	8007d94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d70:	e010      	b.n	8007d94 <UART_SetConfig+0x30c>
 8007d72:	bf00      	nop
 8007d74:	cfff69f3 	.word	0xcfff69f3
 8007d78:	40008000 	.word	0x40008000
 8007d7c:	40013800 	.word	0x40013800
 8007d80:	00f42400 	.word	0x00f42400
 8007d84:	0800f66c 	.word	0x0800f66c
      default:
        pclk = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d92:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 8084 	beq.w	8007840 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	4a4b      	ldr	r2, [pc, #300]	; (800786c <UART_SetConfig+0x448>)
 800773e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007742:	461a      	mov	r2, r3
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	fbb3 f3f2 	udiv	r3, r3, r2
 800774a:	005a      	lsls	r2, r3, #1
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	085b      	lsrs	r3, r3, #1
 8007752:	441a      	add	r2, r3
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	fbb2 f3f3 	udiv	r3, r2, r3
 800775c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	2b0f      	cmp	r3, #15
 8007762:	d916      	bls.n	8007792 <UART_SetConfig+0x36e>
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800776a:	d212      	bcs.n	8007792 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	b29b      	uxth	r3, r3
 8007770:	f023 030f 	bic.w	r3, r3, #15
 8007774:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	085b      	lsrs	r3, r3, #1
 800777a:	b29b      	uxth	r3, r3
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	b29a      	uxth	r2, r3
 8007782:	8bfb      	ldrh	r3, [r7, #30]
 8007784:	4313      	orrs	r3, r2
 8007786:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	8bfa      	ldrh	r2, [r7, #30]
 800778e:	60da      	str	r2, [r3, #12]
 8007790:	e056      	b.n	8007840 <UART_SetConfig+0x41c>
=======
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 8084 	beq.w	8007ea4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	4a4b      	ldr	r2, [pc, #300]	; (8007ed0 <UART_SetConfig+0x448>)
 8007da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007da6:	461a      	mov	r2, r3
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dae:	005a      	lsls	r2, r3, #1
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	441a      	add	r2, r3
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	2b0f      	cmp	r3, #15
 8007dc6:	d916      	bls.n	8007df6 <UART_SetConfig+0x36e>
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dce:	d212      	bcs.n	8007df6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f023 030f 	bic.w	r3, r3, #15
 8007dd8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	085b      	lsrs	r3, r3, #1
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	8bfb      	ldrh	r3, [r7, #30]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	8bfa      	ldrh	r2, [r7, #30]
 8007df2:	60da      	str	r2, [r3, #12]
 8007df4:	e056      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8007792:	2301      	movs	r3, #1
 8007794:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007798:	e052      	b.n	8007840 <UART_SetConfig+0x41c>
=======
 8007df6:	2301      	movs	r3, #1
 8007df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007dfc:	e052      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 800779a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800779e:	3b01      	subs	r3, #1
 80077a0:	2b07      	cmp	r3, #7
 80077a2:	d822      	bhi.n	80077ea <UART_SetConfig+0x3c6>
 80077a4:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <UART_SetConfig+0x388>)
 80077a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077aa:	bf00      	nop
 80077ac:	080077cd 	.word	0x080077cd
 80077b0:	080077d5 	.word	0x080077d5
 80077b4:	080077eb 	.word	0x080077eb
 80077b8:	080077db 	.word	0x080077db
 80077bc:	080077eb 	.word	0x080077eb
 80077c0:	080077eb 	.word	0x080077eb
 80077c4:	080077eb 	.word	0x080077eb
 80077c8:	080077e3 	.word	0x080077e3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077cc:	f7fd ff66 	bl	800569c <HAL_RCC_GetPCLK2Freq>
 80077d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077d2:	e010      	b.n	80077f6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d4:	4b26      	ldr	r3, [pc, #152]	; (8007870 <UART_SetConfig+0x44c>)
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077d8:	e00d      	b.n	80077f6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077da:	f7fd fec9 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 80077de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077e0:	e009      	b.n	80077f6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077e8:	e005      	b.n	80077f6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80077f4:	bf00      	nop
    }

    if (pclk != 0U)
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d021      	beq.n	8007840 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	4a1a      	ldr	r2, [pc, #104]	; (800786c <UART_SetConfig+0x448>)
 8007802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007806:	461a      	mov	r2, r3
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	fbb3 f2f2 	udiv	r2, r3, r2
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	085b      	lsrs	r3, r3, #1
 8007814:	441a      	add	r2, r3
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	fbb2 f3f3 	udiv	r3, r2, r3
 800781e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	2b0f      	cmp	r3, #15
 8007824:	d909      	bls.n	800783a <UART_SetConfig+0x416>
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782c:	d205      	bcs.n	800783a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	b29a      	uxth	r2, r3
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60da      	str	r2, [r3, #12]
 8007838:	e002      	b.n	8007840 <UART_SetConfig+0x41c>
=======
 8007dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e02:	3b01      	subs	r3, #1
 8007e04:	2b07      	cmp	r3, #7
 8007e06:	d822      	bhi.n	8007e4e <UART_SetConfig+0x3c6>
 8007e08:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <UART_SetConfig+0x388>)
 8007e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0e:	bf00      	nop
 8007e10:	08007e31 	.word	0x08007e31
 8007e14:	08007e39 	.word	0x08007e39
 8007e18:	08007e4f 	.word	0x08007e4f
 8007e1c:	08007e3f 	.word	0x08007e3f
 8007e20:	08007e4f 	.word	0x08007e4f
 8007e24:	08007e4f 	.word	0x08007e4f
 8007e28:	08007e4f 	.word	0x08007e4f
 8007e2c:	08007e47 	.word	0x08007e47
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e30:	f7fd ff66 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007e34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e36:	e010      	b.n	8007e5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e38:	4b26      	ldr	r3, [pc, #152]	; (8007ed4 <UART_SetConfig+0x44c>)
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e3c:	e00d      	b.n	8007e5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e3e:	f7fd fec9 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007e42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e44:	e009      	b.n	8007e5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e4c:	e005      	b.n	8007e5a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e58:	bf00      	nop
    }

    if (pclk != 0U)
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d021      	beq.n	8007ea4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	4a1a      	ldr	r2, [pc, #104]	; (8007ed0 <UART_SetConfig+0x448>)
 8007e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	085b      	lsrs	r3, r3, #1
 8007e78:	441a      	add	r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	2b0f      	cmp	r3, #15
 8007e88:	d909      	bls.n	8007e9e <UART_SetConfig+0x416>
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e90:	d205      	bcs.n	8007e9e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60da      	str	r2, [r3, #12]
 8007e9c:	e002      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 800783a:	2301      	movs	r3, #1
 800783c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
=======
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< HEAD
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	2201      	movs	r2, #1
 8007844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2201      	movs	r2, #1
 800784c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2200      	movs	r2, #0
 8007854:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2200      	movs	r2, #0
 800785a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800785c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007860:	4618      	mov	r0, r3
 8007862:	3730      	adds	r7, #48	; 0x30
 8007864:	46bd      	mov	sp, r7
 8007866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800786a:	bf00      	nop
 800786c:	0800f044 	.word	0x0800f044
 8007870:	00f42400 	.word	0x00f42400

08007874 <UART_AdvFeatureConfig>:
=======
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007ec0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3730      	adds	r7, #48	; 0x30
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ece:	bf00      	nop
 8007ed0:	0800f66c 	.word	0x0800f66c
 8007ed4:	00f42400 	.word	0x00f42400

08007ed8 <UART_AdvFeatureConfig>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
=======
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00a      	beq.n	800789e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	605a      	str	r2, [r3, #4]
=======
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	605a      	str	r2, [r3, #4]
=======
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00a      	beq.n	80078e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
=======
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00a      	beq.n	8007f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e6:	f003 0304 	and.w	r3, r3, #4
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	430a      	orrs	r2, r1
 8007902:	605a      	str	r2, [r3, #4]
=======
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4a:	f003 0304 	and.w	r3, r3, #4
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	609a      	str	r2, [r3, #8]
=======
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	609a      	str	r2, [r3, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	609a      	str	r2, [r3, #8]
=======
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	609a      	str	r2, [r3, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007950:	2b00      	cmp	r3, #0
 8007952:	d01a      	beq.n	800798a <UART_AdvFeatureConfig+0x116>
=======
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01a      	beq.n	8007fee <UART_AdvFeatureConfig+0x116>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007972:	d10a      	bne.n	800798a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
=======
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd6:	d10a      	bne.n	8007fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	605a      	str	r2, [r3, #4]
  }
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <UART_CheckIdleState>:
=======
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	605a      	str	r2, [r3, #4]
  }
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <UART_CheckIdleState>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b098      	sub	sp, #96	; 0x60
 80079bc:	af02      	add	r7, sp, #8
 80079be:	6078      	str	r0, [r7, #4]
=======
 800801c:	b580      	push	{r7, lr}
 800801e:	b098      	sub	sp, #96	; 0x60
 8008020:	af02      	add	r7, sp, #8
 8008022:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079c8:	f7fa f884 	bl	8001ad4 <HAL_GetTick>
 80079cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0308 	and.w	r3, r3, #8
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d12f      	bne.n	8007a3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e4:	2200      	movs	r2, #0
 80079e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f88e 	bl	8007b0c <UART_WaitOnFlagUntilTimeout>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d022      	beq.n	8007a3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a14:	647b      	str	r3, [r7, #68]	; 0x44
 8007a16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e6      	bne.n	80079f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e063      	b.n	8007b04 <UART_CheckIdleState+0x14c>
=======
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800802c:	f7f9 fd02 	bl	8001a34 <HAL_GetTick>
 8008030:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b08      	cmp	r3, #8
 800803e:	d12f      	bne.n	80080a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008048:	2200      	movs	r2, #0
 800804a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f88e 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d022      	beq.n	80080a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800806e:	653b      	str	r3, [r7, #80]	; 0x50
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008078:	647b      	str	r3, [r7, #68]	; 0x44
 800807a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800807e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2220      	movs	r2, #32
 8008090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e063      	b.n	8008168 <UART_CheckIdleState+0x14c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d149      	bne.n	8007ade <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a52:	2200      	movs	r2, #0
 8007a54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f857 	bl	8007b0c <UART_WaitOnFlagUntilTimeout>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d03c      	beq.n	8007ade <UART_CheckIdleState+0x126>
=======
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d149      	bne.n	8008142 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b6:	2200      	movs	r2, #0
 80080b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f857 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d03c      	beq.n	8008142 <UART_CheckIdleState+0x126>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	623b      	str	r3, [r7, #32]
   return(result);
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a82:	633b      	str	r3, [r7, #48]	; 0x30
 8007a84:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e6      	bne.n	8007a64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f023 0301 	bic.w	r3, r3, #1
 8007aac:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab6:	61fa      	str	r2, [r7, #28]
 8007ab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	69b9      	ldr	r1, [r7, #24]
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	617b      	str	r3, [r7, #20]
   return(result);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e5      	bne.n	8007a96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e012      	b.n	8007b04 <UART_CheckIdleState+0x14c>
=======
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	623b      	str	r3, [r7, #32]
   return(result);
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e6:	633b      	str	r3, [r7, #48]	; 0x30
 80080e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e6      	bne.n	80080c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3308      	adds	r3, #8
 8008100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	60fb      	str	r3, [r7, #12]
   return(result);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f023 0301 	bic.w	r3, r3, #1
 8008110:	64bb      	str	r3, [r7, #72]	; 0x48
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3308      	adds	r3, #8
 8008118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800811a:	61fa      	str	r2, [r7, #28]
 800811c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	69b9      	ldr	r1, [r7, #24]
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	617b      	str	r3, [r7, #20]
   return(result);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e5      	bne.n	80080fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e012      	b.n	8008168 <UART_CheckIdleState+0x14c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2220      	movs	r2, #32
 8007aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3758      	adds	r7, #88	; 0x58
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <UART_WaitOnFlagUntilTimeout>:
=======
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3758      	adds	r7, #88	; 0x58
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b1c:	e049      	b.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d045      	beq.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b26:	f7f9 ffd5 	bl	8001ad4 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d302      	bcc.n	8007b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e048      	b.n	8007bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d031      	beq.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d110      	bne.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2208      	movs	r2, #8
 8007b62:	621a      	str	r2, [r3, #32]
=======
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008180:	e049      	b.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d045      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800818a:	f7f9 fc53 	bl	8001a34 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	429a      	cmp	r2, r3
 8008198:	d302      	bcc.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e048      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d031      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d110      	bne.n	80081e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2208      	movs	r2, #8
 80081c6:	621a      	str	r2, [r3, #32]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fa42 	bl	8007fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2208      	movs	r2, #8
 8007b6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e029      	b.n	8007bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b8c:	d111      	bne.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b96:	621a      	str	r2, [r3, #32]
=======
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 fa42 	bl	8008652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2208      	movs	r2, #8
 80081d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e029      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f0:	d111      	bne.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081fa:	621a      	str	r2, [r3, #32]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fa28 	bl	8007fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e00f      	b.n	8007bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69da      	ldr	r2, [r3, #28]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	bf0c      	ite	eq
 8007bc2:	2301      	moveq	r3, #1
 8007bc4:	2300      	movne	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d0a6      	beq.n	8007b1e <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fa28 	bl	8008652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e00f      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69da      	ldr	r2, [r3, #28]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4013      	ands	r3, r2
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	429a      	cmp	r2, r3
 8008224:	bf0c      	ite	eq
 8008226:	2301      	moveq	r3, #1
 8008228:	2300      	movne	r3, #0
 800822a:	b2db      	uxtb	r3, r3
 800822c:	461a      	mov	r2, r3
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	429a      	cmp	r2, r3
 8008232:	d0a6      	beq.n	8008182 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <UART_Start_Receive_IT>:
=======
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <UART_Start_Receive_IT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8007bdc:	b480      	push	{r7}
 8007bde:	b0a3      	sub	sp, #140	; 0x8c
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	88fa      	ldrh	r2, [r7, #6]
 8007bf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	88fa      	ldrh	r2, [r7, #6]
 8007bfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c0e:	d10e      	bne.n	8007c2e <UART_Start_Receive_IT+0x52>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d105      	bne.n	8007c24 <UART_Start_Receive_IT+0x48>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c22:	e02d      	b.n	8007c80 <UART_Start_Receive_IT+0xa4>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	22ff      	movs	r2, #255	; 0xff
 8007c28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c2c:	e028      	b.n	8007c80 <UART_Start_Receive_IT+0xa4>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10d      	bne.n	8007c52 <UART_Start_Receive_IT+0x76>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d104      	bne.n	8007c48 <UART_Start_Receive_IT+0x6c>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	22ff      	movs	r2, #255	; 0xff
 8007c42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c46:	e01b      	b.n	8007c80 <UART_Start_Receive_IT+0xa4>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	227f      	movs	r2, #127	; 0x7f
 8007c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c50:	e016      	b.n	8007c80 <UART_Start_Receive_IT+0xa4>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c5a:	d10d      	bne.n	8007c78 <UART_Start_Receive_IT+0x9c>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d104      	bne.n	8007c6e <UART_Start_Receive_IT+0x92>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	227f      	movs	r2, #127	; 0x7f
 8007c68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c6c:	e008      	b.n	8007c80 <UART_Start_Receive_IT+0xa4>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	223f      	movs	r2, #63	; 0x3f
 8007c72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c76:	e003      	b.n	8007c80 <UART_Start_Receive_IT+0xa4>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2222      	movs	r2, #34	; 0x22
 8007c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3308      	adds	r3, #8
 8007c96:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3308      	adds	r3, #8
 8007cb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007cb4:	673a      	str	r2, [r7, #112]	; 0x70
 8007cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007cba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007cc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e3      	bne.n	8007c90 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd0:	d14f      	bne.n	8007d72 <UART_Start_Receive_IT+0x196>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007cd8:	88fa      	ldrh	r2, [r7, #6]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d349      	bcc.n	8007d72 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce6:	d107      	bne.n	8007cf8 <UART_Start_Receive_IT+0x11c>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4a47      	ldr	r2, [pc, #284]	; (8007e10 <UART_Start_Receive_IT+0x234>)
 8007cf4:	675a      	str	r2, [r3, #116]	; 0x74
 8007cf6:	e002      	b.n	8007cfe <UART_Start_Receive_IT+0x122>
=======
 8008240:	b480      	push	{r7}
 8008242:	b0a3      	sub	sp, #140	; 0x8c
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	88fa      	ldrh	r2, [r7, #6]
 8008258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	88fa      	ldrh	r2, [r7, #6]
 8008260:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008272:	d10e      	bne.n	8008292 <UART_Start_Receive_IT+0x52>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d105      	bne.n	8008288 <UART_Start_Receive_IT+0x48>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008282:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008286:	e02d      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	22ff      	movs	r2, #255	; 0xff
 800828c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008290:	e028      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10d      	bne.n	80082b6 <UART_Start_Receive_IT+0x76>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d104      	bne.n	80082ac <UART_Start_Receive_IT+0x6c>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	22ff      	movs	r2, #255	; 0xff
 80082a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082aa:	e01b      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	227f      	movs	r2, #127	; 0x7f
 80082b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082b4:	e016      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082be:	d10d      	bne.n	80082dc <UART_Start_Receive_IT+0x9c>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <UART_Start_Receive_IT+0x92>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	227f      	movs	r2, #127	; 0x7f
 80082cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082d0:	e008      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	223f      	movs	r2, #63	; 0x3f
 80082d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082da:	e003      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2222      	movs	r2, #34	; 0x22
 80082f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3308      	adds	r3, #8
 80082fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fe:	e853 3f00 	ldrex	r3, [r3]
 8008302:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3308      	adds	r3, #8
 8008314:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008318:	673a      	str	r2, [r7, #112]	; 0x70
 800831a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800831e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e3      	bne.n	80082f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008334:	d14f      	bne.n	80083d6 <UART_Start_Receive_IT+0x196>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800833c:	88fa      	ldrh	r2, [r7, #6]
 800833e:	429a      	cmp	r2, r3
 8008340:	d349      	bcc.n	80083d6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834a:	d107      	bne.n	800835c <UART_Start_Receive_IT+0x11c>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d103      	bne.n	800835c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4a47      	ldr	r2, [pc, #284]	; (8008474 <UART_Start_Receive_IT+0x234>)
 8008358:	675a      	str	r2, [r3, #116]	; 0x74
 800835a:	e002      	b.n	8008362 <UART_Start_Receive_IT+0x122>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
<<<<<<< HEAD
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4a46      	ldr	r2, [pc, #280]	; (8007e14 <UART_Start_Receive_IT+0x238>)
 8007cfc:	675a      	str	r2, [r3, #116]	; 0x74
=======
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4a46      	ldr	r2, [pc, #280]	; (8008478 <UART_Start_Receive_IT+0x238>)
 8008360:	675a      	str	r2, [r3, #116]	; 0x74
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< HEAD
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01a      	beq.n	8007d3c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d0e:	e853 3f00 	ldrex	r3, [r3]
 8007d12:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d2a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d30:	e841 2300 	strex	r3, r2, [r1]
 8007d34:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e4      	bne.n	8007d06 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3308      	adds	r3, #8
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3308      	adds	r3, #8
 8007d5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d5c:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d5e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e5      	bne.n	8007d3c <UART_Start_Receive_IT+0x160>
 8007d70:	e046      	b.n	8007e00 <UART_Start_Receive_IT+0x224>
=======
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d01a      	beq.n	80083a0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800837a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800837e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800838c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800838e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008392:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800839a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e4      	bne.n	800836a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3308      	adds	r3, #8
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80083c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80083c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e5      	bne.n	80083a0 <UART_Start_Receive_IT+0x160>
 80083d4:	e046      	b.n	8008464 <UART_Start_Receive_IT+0x224>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7a:	d107      	bne.n	8007d8c <UART_Start_Receive_IT+0x1b0>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d103      	bne.n	8007d8c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4a24      	ldr	r2, [pc, #144]	; (8007e18 <UART_Start_Receive_IT+0x23c>)
 8007d88:	675a      	str	r2, [r3, #116]	; 0x74
 8007d8a:	e002      	b.n	8007d92 <UART_Start_Receive_IT+0x1b6>
=======
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083de:	d107      	bne.n	80083f0 <UART_Start_Receive_IT+0x1b0>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d103      	bne.n	80083f0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4a24      	ldr	r2, [pc, #144]	; (800847c <UART_Start_Receive_IT+0x23c>)
 80083ec:	675a      	str	r2, [r3, #116]	; 0x74
 80083ee:	e002      	b.n	80083f6 <UART_Start_Receive_IT+0x1b6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
<<<<<<< HEAD
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a23      	ldr	r2, [pc, #140]	; (8007e1c <UART_Start_Receive_IT+0x240>)
 8007d90:	675a      	str	r2, [r3, #116]	; 0x74
=======
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4a23      	ldr	r2, [pc, #140]	; (8008480 <UART_Start_Receive_IT+0x240>)
 80083f4:	675a      	str	r2, [r3, #116]	; 0x74
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< HEAD
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d019      	beq.n	8007dce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007dae:	677b      	str	r3, [r7, #116]	; 0x74
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007db8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e6      	bne.n	8007d9a <UART_Start_Receive_IT+0x1be>
 8007dcc:	e018      	b.n	8007e00 <UART_Start_Receive_IT+0x224>
=======
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d019      	beq.n	8008432 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008412:	677b      	str	r3, [r7, #116]	; 0x74
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	461a      	mov	r2, r3
 800841a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800841c:	637b      	str	r3, [r7, #52]	; 0x34
 800841e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008424:	e841 2300 	strex	r3, r2, [r1]
 8008428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1e6      	bne.n	80083fe <UART_Start_Receive_IT+0x1be>
 8008430:	e018      	b.n	8008464 <UART_Start_Receive_IT+0x224>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
<<<<<<< HEAD
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	613b      	str	r3, [r7, #16]
   return(result);
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f043 0320 	orr.w	r3, r3, #32
 8007de2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dec:	623b      	str	r3, [r7, #32]
 8007dee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	69f9      	ldr	r1, [r7, #28]
 8007df2:	6a3a      	ldr	r2, [r7, #32]
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e6      	bne.n	8007dce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	378c      	adds	r7, #140	; 0x8c
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	08008e3d 	.word	0x08008e3d
 8007e14:	08008add 	.word	0x08008add
 8007e18:	08008925 	.word	0x08008925
 8007e1c:	0800876d 	.word	0x0800876d

08007e20 <UART_Start_Receive_DMA>:
=======
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	613b      	str	r3, [r7, #16]
   return(result);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f043 0320 	orr.w	r3, r3, #32
 8008446:	67bb      	str	r3, [r7, #120]	; 0x78
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008450:	623b      	str	r3, [r7, #32]
 8008452:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	69f9      	ldr	r1, [r7, #28]
 8008456:	6a3a      	ldr	r2, [r7, #32]
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	61bb      	str	r3, [r7, #24]
   return(result);
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e6      	bne.n	8008432 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	378c      	adds	r7, #140	; 0x8c
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	080094a1 	.word	0x080094a1
 8008478:	08009141 	.word	0x08009141
 800847c:	08008f89 	.word	0x08008f89
 8008480:	08008dd1 	.word	0x08008dd1

08008484 <UART_Start_Receive_DMA>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b096      	sub	sp, #88	; 0x58
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2222      	movs	r2, #34	; 0x22
 8007e48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d02d      	beq.n	8007eb2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e5c:	4a40      	ldr	r2, [pc, #256]	; (8007f60 <UART_Start_Receive_DMA+0x140>)
 8007e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e66:	4a3f      	ldr	r2, [pc, #252]	; (8007f64 <UART_Start_Receive_DMA+0x144>)
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e70:	4a3d      	ldr	r2, [pc, #244]	; (8007f68 <UART_Start_Receive_DMA+0x148>)
 8007e72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3324      	adds	r3, #36	; 0x24
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e90:	461a      	mov	r2, r3
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	f7fb fcaa 	bl	80037ec <HAL_DMA_Start_IT>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e051      	b.n	8007f56 <UART_Start_Receive_DMA+0x136>
=======
 8008484:	b580      	push	{r7, lr}
 8008486:	b096      	sub	sp, #88	; 0x58
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	88fa      	ldrh	r2, [r7, #6]
 800849c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2222      	movs	r2, #34	; 0x22
 80084ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d02d      	beq.n	8008516 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c0:	4a40      	ldr	r2, [pc, #256]	; (80085c4 <UART_Start_Receive_DMA+0x140>)
 80084c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084ca:	4a3f      	ldr	r2, [pc, #252]	; (80085c8 <UART_Start_Receive_DMA+0x144>)
 80084cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d4:	4a3d      	ldr	r2, [pc, #244]	; (80085cc <UART_Start_Receive_DMA+0x148>)
 80084d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084de:	2200      	movs	r2, #0
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3324      	adds	r3, #36	; 0x24
 80084ee:	4619      	mov	r1, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f4:	461a      	mov	r2, r3
 80084f6:	88fb      	ldrh	r3, [r7, #6]
 80084f8:	f7fb f94c 	bl	8003794 <HAL_DMA_Start_IT>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2210      	movs	r2, #16
 8008506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2220      	movs	r2, #32
 800850e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e051      	b.n	80085ba <UART_Start_Receive_DMA+0x136>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< HEAD
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d018      	beq.n	8007eec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ece:	657b      	str	r3, [r7, #84]	; 0x54
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eda:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e6      	bne.n	8007eba <UART_Start_Receive_DMA+0x9a>
=======
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d018      	beq.n	8008550 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008532:	657b      	str	r3, [r7, #84]	; 0x54
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	461a      	mov	r2, r3
 800853a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800853c:	64bb      	str	r3, [r7, #72]	; 0x48
 800853e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800854a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e6      	bne.n	800851e <UART_Start_Receive_DMA+0x9a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	f043 0301 	orr.w	r3, r3, #1
 8007f02:	653b      	str	r3, [r7, #80]	; 0x50
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3308      	adds	r3, #8
 8007f0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f0c:	637a      	str	r2, [r7, #52]	; 0x34
 8007f0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e5      	bne.n	8007eec <UART_Start_Receive_DMA+0xcc>
=======
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3308      	adds	r3, #8
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	f043 0301 	orr.w	r3, r3, #1
 8008566:	653b      	str	r3, [r7, #80]	; 0x50
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3308      	adds	r3, #8
 800856e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008570:	637a      	str	r2, [r7, #52]	; 0x34
 8008572:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e5      	bne.n	8008550 <UART_Start_Receive_DMA+0xcc>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f40:	623a      	str	r2, [r7, #32]
 8007f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	69f9      	ldr	r1, [r7, #28]
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e5      	bne.n	8007f20 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3758      	adds	r7, #88	; 0x58
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	08008171 	.word	0x08008171
 8007f64:	0800829d 	.word	0x0800829d
 8007f68:	080082db 	.word	0x080082db

08007f6c <UART_EndTxTransfer>:
=======
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	613b      	str	r3, [r7, #16]
   return(result);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800859a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085a4:	623a      	str	r2, [r7, #32]
 80085a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	69f9      	ldr	r1, [r7, #28]
 80085aa:	6a3a      	ldr	r2, [r7, #32]
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e5      	bne.n	8008584 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3758      	adds	r7, #88	; 0x58
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	080087d5 	.word	0x080087d5
 80085c8:	08008901 	.word	0x08008901
 80085cc:	0800893f 	.word	0x0800893f

080085d0 <UART_EndTxTransfer>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007f6c:	b480      	push	{r7}
 8007f6e:	b08f      	sub	sp, #60	; 0x3c
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f94:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e6      	bne.n	8007f74 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3308      	adds	r3, #8
 8007fac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc6:	61ba      	str	r2, [r7, #24]
 8007fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6979      	ldr	r1, [r7, #20]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e5      	bne.n	8007fa6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007fe2:	bf00      	nop
 8007fe4:	373c      	adds	r7, #60	; 0x3c
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <UART_EndRxTransfer>:
=======
 80085d0:	b480      	push	{r7}
 80085d2:	b08f      	sub	sp, #60	; 0x3c
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085ec:	637b      	str	r3, [r7, #52]	; 0x34
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e6      	bne.n	80085d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3308      	adds	r3, #8
 8008610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	60bb      	str	r3, [r7, #8]
   return(result);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008620:	633b      	str	r3, [r7, #48]	; 0x30
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3308      	adds	r3, #8
 8008628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800862a:	61ba      	str	r2, [r7, #24]
 800862c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6979      	ldr	r1, [r7, #20]
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	613b      	str	r3, [r7, #16]
   return(result);
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e5      	bne.n	800860a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008646:	bf00      	nop
 8008648:	373c      	adds	r7, #60	; 0x3c
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <UART_EndRxTransfer>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007fee:	b480      	push	{r7}
 8007ff0:	b095      	sub	sp, #84	; 0x54
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008006:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800800a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008014:	643b      	str	r3, [r7, #64]	; 0x40
 8008016:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800801a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e6      	bne.n	8007ff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3308      	adds	r3, #8
 800802e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	61fb      	str	r3, [r7, #28]
   return(result);
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800803e:	f023 0301 	bic.w	r3, r3, #1
 8008042:	64bb      	str	r3, [r7, #72]	; 0x48
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3308      	adds	r3, #8
 800804a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800804c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800804e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e3      	bne.n	8008028 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008064:	2b01      	cmp	r3, #1
 8008066:	d118      	bne.n	800809a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	60bb      	str	r3, [r7, #8]
   return(result);
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f023 0310 	bic.w	r3, r3, #16
 800807c:	647b      	str	r3, [r7, #68]	; 0x44
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6979      	ldr	r1, [r7, #20]
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	613b      	str	r3, [r7, #16]
   return(result);
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e6      	bne.n	8008068 <UART_EndRxTransfer+0x7a>
=======
 8008652:	b480      	push	{r7}
 8008654:	b095      	sub	sp, #84	; 0x54
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800866e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008678:	643b      	str	r3, [r7, #64]	; 0x40
 800867a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800867e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e6      	bne.n	800865a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3308      	adds	r3, #8
 8008692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	e853 3f00 	ldrex	r3, [r3]
 800869a:	61fb      	str	r3, [r7, #28]
   return(result);
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086a2:	f023 0301 	bic.w	r3, r3, #1
 80086a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e3      	bne.n	800868c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d118      	bne.n	80086fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f023 0310 	bic.w	r3, r3, #16
 80086e0:	647b      	str	r3, [r7, #68]	; 0x44
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ea:	61bb      	str	r3, [r7, #24]
 80086ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6979      	ldr	r1, [r7, #20]
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	613b      	str	r3, [r7, #16]
   return(result);
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e6      	bne.n	80086cc <UART_EndRxTransfer+0x7a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 80080ae:	bf00      	nop
 80080b0:	3754      	adds	r7, #84	; 0x54
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <UART_DMATransmitCplt>:
=======
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008712:	bf00      	nop
 8008714:	3754      	adds	r7, #84	; 0x54
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <UART_DMATransmitCplt>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b090      	sub	sp, #64	; 0x40
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d137      	bne.n	8008146 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80080d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d8:	2200      	movs	r2, #0
 80080da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
=======
 800871e:	b580      	push	{r7, lr}
 8008720:	b090      	sub	sp, #64	; 0x40
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d137      	bne.n	80087aa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800873a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873c:	2200      	movs	r2, #0
 800873e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
<<<<<<< HEAD
 80080de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3308      	adds	r3, #8
 80080e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	623b      	str	r3, [r7, #32]
   return(result);
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80080f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3308      	adds	r3, #8
 80080fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080fe:	633a      	str	r2, [r7, #48]	; 0x30
 8008100:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800810c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e5      	bne.n	80080de <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	e853 3f00 	ldrex	r3, [r3]
 800811e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008126:	637b      	str	r3, [r7, #52]	; 0x34
 8008128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008130:	61fb      	str	r3, [r7, #28]
 8008132:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008134:	69b9      	ldr	r1, [r7, #24]
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	e841 2300 	strex	r3, r2, [r1]
 800813c:	617b      	str	r3, [r7, #20]
   return(result);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1e6      	bne.n	8008112 <UART_DMATransmitCplt+0x58>
=======
 8008742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	623b      	str	r3, [r7, #32]
   return(result);
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008758:	63bb      	str	r3, [r7, #56]	; 0x38
 800875a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008762:	633a      	str	r2, [r7, #48]	; 0x30
 8008764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e5      	bne.n	8008742 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	60fb      	str	r3, [r7, #12]
   return(result);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800878a:	637b      	str	r3, [r7, #52]	; 0x34
 800878c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	69b9      	ldr	r1, [r7, #24]
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	617b      	str	r3, [r7, #20]
   return(result);
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_DMATransmitCplt+0x58>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 8008144:	e002      	b.n	800814c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008146:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008148:	f006 fca4 	bl	800ea94 <HAL_UART_TxCpltCallback>
}
 800814c:	bf00      	nop
 800814e:	3740      	adds	r7, #64	; 0x40
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <UART_DMATxHalfCplt>:
=======
 80087a8:	e002      	b.n	80087b0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80087aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80087ac:	f006 fb82 	bl	800eeb4 <HAL_UART_TxCpltCallback>
}
 80087b0:	bf00      	nop
 80087b2:	3740      	adds	r7, #64	; 0x40
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <UART_DMATxHalfCplt>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	60fb      	str	r3, [r7, #12]
=======
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
<<<<<<< HEAD
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff f882 	bl	800726c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008168:	bf00      	nop
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <UART_DMAReceiveCplt>:
=======
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f7ff f882 	bl	80078d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087cc:	bf00      	nop
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <UART_DMAReceiveCplt>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8008170:	b580      	push	{r7, lr}
 8008172:	b09c      	sub	sp, #112	; 0x70
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b00      	cmp	r3, #0
 800818a:	d171      	bne.n	8008270 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800818c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800818e:	2200      	movs	r2, #0
 8008190:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800819c:	e853 3f00 	ldrex	r3, [r3]
 80081a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80081aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80081b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1e6      	bne.n	8008194 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3308      	adds	r3, #8
 80081cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d8:	f023 0301 	bic.w	r3, r3, #1
 80081dc:	667b      	str	r3, [r7, #100]	; 0x64
 80081de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3308      	adds	r3, #8
 80081e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081e6:	647a      	str	r2, [r7, #68]	; 0x44
 80081e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e5      	bne.n	80081c6 <UART_DMAReceiveCplt+0x56>
=======
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b09c      	sub	sp, #112	; 0x70
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d171      	bne.n	80088d4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80087f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800880c:	66bb      	str	r3, [r7, #104]	; 0x68
 800880e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008816:	65bb      	str	r3, [r7, #88]	; 0x58
 8008818:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800881c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e6      	bne.n	80087f8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800883a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883c:	f023 0301 	bic.w	r3, r3, #1
 8008840:	667b      	str	r3, [r7, #100]	; 0x64
 8008842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800884a:	647a      	str	r2, [r7, #68]	; 0x44
 800884c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e5      	bne.n	800882a <UART_DMAReceiveCplt+0x56>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 80081fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3308      	adds	r3, #8
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	623b      	str	r3, [r7, #32]
   return(result);
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008210:	663b      	str	r3, [r7, #96]	; 0x60
 8008212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800821a:	633a      	str	r2, [r7, #48]	; 0x30
 800821c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e5      	bne.n	80081fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800822e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008230:	2220      	movs	r2, #32
 8008232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800823a:	2b01      	cmp	r3, #1
 800823c:	d118      	bne.n	8008270 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800823e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	e853 3f00 	ldrex	r3, [r3]
 800824a:	60fb      	str	r3, [r7, #12]
   return(result);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0310 	bic.w	r3, r3, #16
 8008252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	461a      	mov	r2, r3
 800825a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	69b9      	ldr	r1, [r7, #24]
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	e841 2300 	strex	r3, r2, [r1]
 8008268:	617b      	str	r3, [r7, #20]
   return(result);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e6      	bne.n	800823e <UART_DMAReceiveCplt+0xce>
=======
 800885e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3308      	adds	r3, #8
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	623b      	str	r3, [r7, #32]
   return(result);
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008874:	663b      	str	r3, [r7, #96]	; 0x60
 8008876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3308      	adds	r3, #8
 800887c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800887e:	633a      	str	r2, [r7, #48]	; 0x30
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e5      	bne.n	800885e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008894:	2220      	movs	r2, #32
 8008896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800889a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800889c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d118      	bne.n	80088d4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f023 0310 	bic.w	r3, r3, #16
 80088b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c0:	61fb      	str	r3, [r7, #28]
 80088c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	69b9      	ldr	r1, [r7, #24]
 80088c6:	69fa      	ldr	r2, [r7, #28]
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	617b      	str	r3, [r7, #20]
   return(result);
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e6      	bne.n	80088a2 <UART_DMAReceiveCplt+0xce>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
<<<<<<< HEAD
 8008270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008272:	2200      	movs	r2, #0
 8008274:	671a      	str	r2, [r3, #112]	; 0x70
=======
 80088d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d6:	2200      	movs	r2, #0
 80088d8:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827a:	2b01      	cmp	r3, #1
 800827c:	d107      	bne.n	800828e <UART_DMAReceiveCplt+0x11e>
=======
 80088da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d107      	bne.n	80088f2 <UART_DMAReceiveCplt+0x11e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800827e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008280:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008284:	4619      	mov	r1, r3
 8008286:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008288:	f006 fd06 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
=======
 80088e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088e8:	4619      	mov	r1, r3
 80088ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088ec:	f006 fbe4 	bl	800f0b8 <HAL_UARTEx_RxEventCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 800828c:	e002      	b.n	8008294 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800828e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008290:	f006 fc3e 	bl	800eb10 <HAL_UART_RxCpltCallback>
}
 8008294:	bf00      	nop
 8008296:	3770      	adds	r7, #112	; 0x70
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <UART_DMARxHalfCplt>:
=======
 80088f0:	e002      	b.n	80088f8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80088f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088f4:	f006 fb1c 	bl	800ef30 <HAL_UART_RxCpltCallback>
}
 80088f8:	bf00      	nop
 80088fa:	3770      	adds	r7, #112	; 0x70
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <UART_DMARxHalfCplt>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a8:	60fb      	str	r3, [r7, #12]
=======
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
<<<<<<< HEAD
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	671a      	str	r2, [r3, #112]	; 0x70
=======
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d109      	bne.n	80082cc <UART_DMARxHalfCplt+0x30>
=======
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008918:	2b01      	cmp	r3, #1
 800891a:	d109      	bne.n	8008930 <UART_DMARxHalfCplt+0x30>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
<<<<<<< HEAD
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	4619      	mov	r1, r3
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f006 fce7 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
=======
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008922:	085b      	lsrs	r3, r3, #1
 8008924:	b29b      	uxth	r3, r3
 8008926:	4619      	mov	r1, r3
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f006 fbc5 	bl	800f0b8 <HAL_UARTEx_RxEventCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 80082ca:	e002      	b.n	80082d2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7fe ffd7 	bl	8007280 <HAL_UART_RxHalfCpltCallback>
}
 80082d2:	bf00      	nop
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <UART_DMAError>:
=======
 800892e:	e002      	b.n	8008936 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f7fe ffd7 	bl	80078e4 <HAL_UART_RxHalfCpltCallback>
}
 8008936:	bf00      	nop
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <UART_DMAError>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80082da:	b580      	push	{r7, lr}
 80082dc:	b086      	sub	sp, #24
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008302:	2b80      	cmp	r3, #128	; 0x80
 8008304:	d109      	bne.n	800831a <UART_DMAError+0x40>
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	2b21      	cmp	r3, #33	; 0x21
 800830a:	d106      	bne.n	800831a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2200      	movs	r2, #0
 8008310:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008314:	6978      	ldr	r0, [r7, #20]
 8008316:	f7ff fe29 	bl	8007f6c <UART_EndTxTransfer>
=======
 800893e:	b580      	push	{r7, lr}
 8008940:	b086      	sub	sp, #24
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008952:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800895a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008966:	2b80      	cmp	r3, #128	; 0x80
 8008968:	d109      	bne.n	800897e <UART_DMAError+0x40>
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2b21      	cmp	r3, #33	; 0x21
 800896e:	d106      	bne.n	800897e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2200      	movs	r2, #0
 8008974:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008978:	6978      	ldr	r0, [r7, #20]
 800897a:	f7ff fe29 	bl	80085d0 <UART_EndTxTransfer>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
<<<<<<< HEAD
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b40      	cmp	r3, #64	; 0x40
 8008326:	d109      	bne.n	800833c <UART_DMAError+0x62>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b22      	cmp	r3, #34	; 0x22
 800832c:	d106      	bne.n	800833c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2200      	movs	r2, #0
 8008332:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008336:	6978      	ldr	r0, [r7, #20]
 8008338:	f7ff fe59 	bl	8007fee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008342:	f043 0210 	orr.w	r2, r3, #16
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008988:	2b40      	cmp	r3, #64	; 0x40
 800898a:	d109      	bne.n	80089a0 <UART_DMAError+0x62>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b22      	cmp	r3, #34	; 0x22
 8008990:	d106      	bne.n	80089a0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800899a:	6978      	ldr	r0, [r7, #20]
 800899c:	f7ff fe59 	bl	8008652 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a6:	f043 0210 	orr.w	r2, r3, #16
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800834c:	6978      	ldr	r0, [r7, #20]
 800834e:	f006 fc49 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008352:	bf00      	nop
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <UART_DMAAbortOnError>:
=======
 80089b0:	6978      	ldr	r0, [r7, #20]
 80089b2:	f006 fb27 	bl	800f004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b6:	bf00      	nop
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <UART_DMAAbortOnError>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008366:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
=======
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f006 fc33 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800837e:	bf00      	nop
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <UART_DMARxOnlyAbortCallback>:
=======
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f006 fb11 	bl	800f004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e2:	bf00      	nop
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <UART_DMARxOnlyAbortCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008392:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	220f      	movs	r2, #15
 80083a2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	699a      	ldr	r2, [r3, #24]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0208 	orr.w	r2, r2, #8
 80083b2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	220f      	movs	r2, #15
 8008a06:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0208 	orr.w	r2, r2, #8
 8008a16:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
<<<<<<< HEAD
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7fe ff66 	bl	8007294 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083c8:	bf00      	nop
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <UART_TxISR_8BIT>:
=======
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f7fe ff66 	bl	80078f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <UART_TxISR_8BIT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80083d0:	b480      	push	{r7}
 80083d2:	b08f      	sub	sp, #60	; 0x3c
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083de:	2b21      	cmp	r3, #33	; 0x21
 80083e0:	d14c      	bne.n	800847c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d132      	bne.n	8008454 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008402:	637b      	str	r3, [r7, #52]	; 0x34
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800840e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e6      	bne.n	80083ee <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	60bb      	str	r3, [r7, #8]
   return(result);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008434:	633b      	str	r3, [r7, #48]	; 0x30
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	61bb      	str	r3, [r7, #24]
 8008440:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	6979      	ldr	r1, [r7, #20]
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	613b      	str	r3, [r7, #16]
   return(result);
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e6      	bne.n	8008420 <UART_TxISR_8BIT+0x50>
=======
 8008a34:	b480      	push	{r7}
 8008a36:	b08f      	sub	sp, #60	; 0x3c
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a42:	2b21      	cmp	r3, #33	; 0x21
 8008a44:	d14c      	bne.n	8008ae0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d132      	bne.n	8008ab8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a66:	637b      	str	r3, [r7, #52]	; 0x34
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a72:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e6      	bne.n	8008a52 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a98:	633b      	str	r3, [r7, #48]	; 0x30
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	61bb      	str	r3, [r7, #24]
 8008aa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6979      	ldr	r1, [r7, #20]
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e6      	bne.n	8008a84 <UART_TxISR_8BIT+0x50>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< HEAD
 8008452:	e013      	b.n	800847c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008458:	781a      	ldrb	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29a      	uxth	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800847c:	bf00      	nop
 800847e:	373c      	adds	r7, #60	; 0x3c
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <UART_TxISR_16BIT>:
=======
 8008ab6:	e013      	b.n	8008ae0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008abc:	781a      	ldrb	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008ae0:	bf00      	nop
 8008ae2:	373c      	adds	r7, #60	; 0x3c
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <UART_TxISR_16BIT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008488:	b480      	push	{r7}
 800848a:	b091      	sub	sp, #68	; 0x44
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
=======
 8008aec:	b480      	push	{r7}
 8008aee:	b091      	sub	sp, #68	; 0x44
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008496:	2b21      	cmp	r3, #33	; 0x21
 8008498:	d151      	bne.n	800853e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d132      	bne.n	800850c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	623b      	str	r3, [r7, #32]
   return(result);
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	633b      	str	r3, [r7, #48]	; 0x30
 80084c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e6      	bne.n	80084a6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f6:	61fb      	str	r3, [r7, #28]
 80084f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	69b9      	ldr	r1, [r7, #24]
 80084fc:	69fa      	ldr	r2, [r7, #28]
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	617b      	str	r3, [r7, #20]
   return(result);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e6      	bne.n	80084d8 <UART_TxISR_16BIT+0x50>
=======
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afa:	2b21      	cmp	r3, #33	; 0x21
 8008afc:	d151      	bne.n	8008ba2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d132      	bne.n	8008b70 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	e853 3f00 	ldrex	r3, [r3]
 8008b16:	623b      	str	r3, [r7, #32]
   return(result);
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	633b      	str	r3, [r7, #48]	; 0x30
 8008b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b30:	e841 2300 	strex	r3, r2, [r1]
 8008b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e6      	bne.n	8008b0a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b50:	637b      	str	r3, [r7, #52]	; 0x34
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	69b9      	ldr	r1, [r7, #24]
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	617b      	str	r3, [r7, #20]
   return(result);
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e6      	bne.n	8008b3c <UART_TxISR_16BIT+0x50>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< HEAD
 800850a:	e018      	b.n	800853e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008510:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008520:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008526:	1c9a      	adds	r2, r3, #2
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008532:	b29b      	uxth	r3, r3
 8008534:	3b01      	subs	r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800853e:	bf00      	nop
 8008540:	3744      	adds	r7, #68	; 0x44
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <UART_TxISR_8BIT_FIFOEN>:
=======
 8008b6e:	e018      	b.n	8008ba2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b84:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8a:	1c9a      	adds	r2, r3, #2
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008ba2:	bf00      	nop
 8008ba4:	3744      	adds	r7, #68	; 0x44
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <UART_TxISR_8BIT_FIFOEN>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800854a:	b480      	push	{r7}
 800854c:	b091      	sub	sp, #68	; 0x44
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
=======
 8008bae:	b480      	push	{r7}
 8008bb0:	b091      	sub	sp, #68	; 0x44
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008558:	2b21      	cmp	r3, #33	; 0x21
 800855a:	d160      	bne.n	800861e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008562:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008564:	e057      	b.n	8008616 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800856c:	b29b      	uxth	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d133      	bne.n	80085da <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3308      	adds	r3, #8
 8008578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	623b      	str	r3, [r7, #32]
   return(result);
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008588:	63bb      	str	r3, [r7, #56]	; 0x38
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3308      	adds	r3, #8
 8008590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008592:	633a      	str	r2, [r7, #48]	; 0x30
 8008594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e5      	bne.n	8008572 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ba:	637b      	str	r3, [r7, #52]	; 0x34
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	461a      	mov	r2, r3
 80085c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c4:	61fb      	str	r3, [r7, #28]
 80085c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	69b9      	ldr	r1, [r7, #24]
 80085ca:	69fa      	ldr	r2, [r7, #28]
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	617b      	str	r3, [r7, #20]
   return(result);
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e6      	bne.n	80085a6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80085d8:	e021      	b.n	800861e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d013      	beq.n	8008610 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ec:	781a      	ldrb	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008604:	b29b      	uxth	r3, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	b29a      	uxth	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008610:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008612:	3b01      	subs	r3, #1
 8008614:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008616:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1a4      	bne.n	8008566 <UART_TxISR_8BIT_FIFOEN+0x1c>
=======
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bbc:	2b21      	cmp	r3, #33	; 0x21
 8008bbe:	d160      	bne.n	8008c82 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008bc8:	e057      	b.n	8008c7a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d133      	bne.n	8008c3e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	623b      	str	r3, [r7, #32]
   return(result);
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008bec:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8008bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e5      	bne.n	8008bd6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c28:	61fb      	str	r3, [r7, #28]
 8008c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	69b9      	ldr	r1, [r7, #24]
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	617b      	str	r3, [r7, #20]
   return(result);
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e6      	bne.n	8008c0a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008c3c:	e021      	b.n	8008c82 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d013      	beq.n	8008c74 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c50:	781a      	ldrb	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008c74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c76:	3b01      	subs	r3, #1
 8008c78:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008c7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1a4      	bne.n	8008bca <UART_TxISR_8BIT_FIFOEN+0x1c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
        /* Nothing to do */
      }
    }
  }
}
<<<<<<< HEAD
 800861c:	e7ff      	b.n	800861e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800861e:	bf00      	nop
 8008620:	3744      	adds	r7, #68	; 0x44
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <UART_TxISR_16BIT_FIFOEN>:
=======
 8008c80:	e7ff      	b.n	8008c82 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008c82:	bf00      	nop
 8008c84:	3744      	adds	r7, #68	; 0x44
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <UART_TxISR_16BIT_FIFOEN>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800862a:	b480      	push	{r7}
 800862c:	b091      	sub	sp, #68	; 0x44
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
=======
 8008c8e:	b480      	push	{r7}
 8008c90:	b091      	sub	sp, #68	; 0x44
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008638:	2b21      	cmp	r3, #33	; 0x21
 800863a:	d165      	bne.n	8008708 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008642:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008644:	e05c      	b.n	8008700 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800864c:	b29b      	uxth	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d133      	bne.n	80086ba <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3308      	adds	r3, #8
 8008658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	6a3b      	ldr	r3, [r7, #32]
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	61fb      	str	r3, [r7, #28]
   return(result);
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3308      	adds	r3, #8
 8008670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008674:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e5      	bne.n	8008652 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	60bb      	str	r3, [r7, #8]
   return(result);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869a:	633b      	str	r3, [r7, #48]	; 0x30
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	61bb      	str	r3, [r7, #24]
 80086a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	6979      	ldr	r1, [r7, #20]
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	613b      	str	r3, [r7, #16]
   return(result);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e6      	bne.n	8008686 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80086b8:	e026      	b.n	8008708 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d018      	beq.n	80086fa <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086cc:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80086ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086dc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e2:	1c9a      	adds	r2, r3, #2
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80086fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80086fc:	3b01      	subs	r3, #1
 80086fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008702:	2b00      	cmp	r3, #0
 8008704:	d19f      	bne.n	8008646 <UART_TxISR_16BIT_FIFOEN+0x1c>
=======
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9c:	2b21      	cmp	r3, #33	; 0x21
 8008c9e:	d165      	bne.n	8008d6c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ca6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008ca8:	e05c      	b.n	8008d64 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d133      	bne.n	8008d1e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	e853 3f00 	ldrex	r3, [r3]
 8008cc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e5      	bne.n	8008cb6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	61bb      	str	r3, [r7, #24]
 8008d0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	6979      	ldr	r1, [r7, #20]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	613b      	str	r3, [r7, #16]
   return(result);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e6      	bne.n	8008cea <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008d1c:	e026      	b.n	8008d6c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d018      	beq.n	8008d5e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d30:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d40:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d46:	1c9a      	adds	r2, r3, #2
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d60:	3b01      	subs	r3, #1
 8008d62:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d19f      	bne.n	8008caa <UART_TxISR_16BIT_FIFOEN+0x1c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
        /* Nothing to do */
      }
    }
  }
}
<<<<<<< HEAD
 8008706:	e7ff      	b.n	8008708 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008708:	bf00      	nop
 800870a:	3744      	adds	r7, #68	; 0x44
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <UART_EndTransmit_IT>:
=======
 8008d6a:	e7ff      	b.n	8008d6c <UART_TxISR_16BIT_FIFOEN+0xde>
 8008d6c:	bf00      	nop
 8008d6e:	3744      	adds	r7, #68	; 0x44
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <UART_EndTransmit_IT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	60bb      	str	r3, [r7, #8]
   return(result);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008730:	61fb      	str	r3, [r7, #28]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	61bb      	str	r3, [r7, #24]
 800873c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	6979      	ldr	r1, [r7, #20]
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	613b      	str	r3, [r7, #16]
   return(result);
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e6      	bne.n	800871c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2220      	movs	r2, #32
 8008752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	679a      	str	r2, [r3, #120]	; 0x78
=======
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d94:	61fb      	str	r3, [r7, #28]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	61bb      	str	r3, [r7, #24]
 8008da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6979      	ldr	r1, [r7, #20]
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	613b      	str	r3, [r7, #16]
   return(result);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e6      	bne.n	8008d80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	679a      	str	r2, [r3, #120]	; 0x78
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f006 f999 	bl	800ea94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008762:	bf00      	nop
 8008764:	3720      	adds	r7, #32
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <UART_RxISR_8BIT>:
=======
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f006 f877 	bl	800eeb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc6:	bf00      	nop
 8008dc8:	3720      	adds	r7, #32
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <UART_RxISR_8BIT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800876c:	b580      	push	{r7, lr}
 800876e:	b09c      	sub	sp, #112	; 0x70
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800877a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
=======
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b09c      	sub	sp, #112	; 0x70
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008784:	2b22      	cmp	r3, #34	; 0x22
 8008786:	f040 80be 	bne.w	8008906 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008794:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008798:	b2d9      	uxtb	r1, r3
 800879a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a4:	400a      	ands	r2, r1
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	3b01      	subs	r3, #1
 80087be:	b29a      	uxth	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f040 80a1 	bne.w	8008916 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80087f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e6      	bne.n	80087d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3308      	adds	r3, #8
 800880c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008818:	f023 0301 	bic.w	r3, r3, #1
 800881c:	667b      	str	r3, [r7, #100]	; 0x64
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3308      	adds	r3, #8
 8008824:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008826:	647a      	str	r2, [r7, #68]	; 0x44
 8008828:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800882c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e5      	bne.n	8008806 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a33      	ldr	r2, [pc, #204]	; (8008920 <UART_RxISR_8BIT+0x1b4>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d01f      	beq.n	8008898 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d018      	beq.n	8008898 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	e853 3f00 	ldrex	r3, [r3]
 8008872:	623b      	str	r3, [r7, #32]
   return(result);
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800887a:	663b      	str	r3, [r7, #96]	; 0x60
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	461a      	mov	r2, r3
 8008882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008884:	633b      	str	r3, [r7, #48]	; 0x30
 8008886:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800888a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e6      	bne.n	8008866 <UART_RxISR_8BIT+0xfa>
=======
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008de8:	2b22      	cmp	r3, #34	; 0x22
 8008dea:	f040 80be 	bne.w	8008f6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008df8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008dfc:	b2d9      	uxtb	r1, r3
 8008dfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e08:	400a      	ands	r2, r1
 8008e0a:	b2d2      	uxtb	r2, r2
 8008e0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	3b01      	subs	r3, #1
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f040 80a1 	bne.w	8008f7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e56:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e6      	bne.n	8008e38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	667b      	str	r3, [r7, #100]	; 0x64
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3308      	adds	r3, #8
 8008e88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e8a:	647a      	str	r2, [r7, #68]	; 0x44
 8008e8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e5      	bne.n	8008e6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a33      	ldr	r2, [pc, #204]	; (8008f84 <UART_RxISR_8BIT+0x1b4>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d01f      	beq.n	8008efc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d018      	beq.n	8008efc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	e853 3f00 	ldrex	r3, [r3]
 8008ed6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ede:	663b      	str	r3, [r7, #96]	; 0x60
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e6      	bne.n	8008eca <UART_RxISR_8BIT+0xfa>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889c:	2b01      	cmp	r3, #1
 800889e:	d12e      	bne.n	80088fe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	e853 3f00 	ldrex	r3, [r3]
 80088b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0310 	bic.w	r3, r3, #16
 80088ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	461a      	mov	r2, r3
 80088c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c4:	61fb      	str	r3, [r7, #28]
 80088c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	69b9      	ldr	r1, [r7, #24]
 80088ca:	69fa      	ldr	r2, [r7, #28]
 80088cc:	e841 2300 	strex	r3, r2, [r1]
 80088d0:	617b      	str	r3, [r7, #20]
   return(result);
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e6      	bne.n	80088a6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b10      	cmp	r3, #16
 80088e4:	d103      	bne.n	80088ee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2210      	movs	r2, #16
 80088ec:	621a      	str	r2, [r3, #32]
=======
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d12e      	bne.n	8008f62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0310 	bic.w	r3, r3, #16
 8008f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f28:	61fb      	str	r3, [r7, #28]
 8008f2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	69b9      	ldr	r1, [r7, #24]
 8008f2e:	69fa      	ldr	r2, [r7, #28]
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	617b      	str	r3, [r7, #20]
   return(result);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e6      	bne.n	8008f0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	f003 0310 	and.w	r3, r3, #16
 8008f46:	2b10      	cmp	r3, #16
 8008f48:	d103      	bne.n	8008f52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2210      	movs	r2, #16
 8008f50:	621a      	str	r2, [r3, #32]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f006 f9ce 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
=======
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f006 f8ac 	bl	800f0b8 <HAL_UARTEx_RxEventCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 80088fc:	e00b      	b.n	8008916 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f006 f906 	bl	800eb10 <HAL_UART_RxCpltCallback>
}
 8008904:	e007      	b.n	8008916 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	699a      	ldr	r2, [r3, #24]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f042 0208 	orr.w	r2, r2, #8
 8008914:	619a      	str	r2, [r3, #24]
}
 8008916:	bf00      	nop
 8008918:	3770      	adds	r7, #112	; 0x70
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	40008000 	.word	0x40008000

08008924 <UART_RxISR_16BIT>:
=======
 8008f60:	e00b      	b.n	8008f7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f005 ffe4 	bl	800ef30 <HAL_UART_RxCpltCallback>
}
 8008f68:	e007      	b.n	8008f7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	699a      	ldr	r2, [r3, #24]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f042 0208 	orr.w	r2, r2, #8
 8008f78:	619a      	str	r2, [r3, #24]
}
 8008f7a:	bf00      	nop
 8008f7c:	3770      	adds	r7, #112	; 0x70
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	40008000 	.word	0x40008000

08008f88 <UART_RxISR_16BIT>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008924:	b580      	push	{r7, lr}
 8008926:	b09c      	sub	sp, #112	; 0x70
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008932:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
=======
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b09c      	sub	sp, #112	; 0x70
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800893c:	2b22      	cmp	r3, #34	; 0x22
 800893e:	f040 80be 	bne.w	8008abe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008950:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008952:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008956:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800895a:	4013      	ands	r3, r2
 800895c:	b29a      	uxth	r2, r3
 800895e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008960:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008966:	1c9a      	adds	r2, r3, #2
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008984:	b29b      	uxth	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	f040 80a1 	bne.w	8008ace <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800899a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089a0:	667b      	str	r3, [r7, #100]	; 0x64
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089aa:	657b      	str	r3, [r7, #84]	; 0x54
 80089ac:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089b2:	e841 2300 	strex	r3, r2, [r1]
 80089b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e6      	bne.n	800898c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3308      	adds	r3, #8
 80089c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	f023 0301 	bic.w	r3, r3, #1
 80089d4:	663b      	str	r3, [r7, #96]	; 0x60
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3308      	adds	r3, #8
 80089dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80089de:	643a      	str	r2, [r7, #64]	; 0x40
 80089e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e5      	bne.n	80089be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a33      	ldr	r2, [pc, #204]	; (8008ad8 <UART_RxISR_16BIT+0x1b4>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d01f      	beq.n	8008a50 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d018      	beq.n	8008a50 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a3e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e6      	bne.n	8008a1e <UART_RxISR_16BIT+0xfa>
=======
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa0:	2b22      	cmp	r3, #34	; 0x22
 8008fa2:	f040 80be 	bne.w	8009122 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fb6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008fba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fca:	1c9a      	adds	r2, r3, #2
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f040 80a1 	bne.w	8009132 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009004:	667b      	str	r3, [r7, #100]	; 0x64
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800900e:	657b      	str	r3, [r7, #84]	; 0x54
 8009010:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009014:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800901c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e6      	bne.n	8008ff0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3308      	adds	r3, #8
 8009028:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	f023 0301 	bic.w	r3, r3, #1
 8009038:	663b      	str	r3, [r7, #96]	; 0x60
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3308      	adds	r3, #8
 8009040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009042:	643a      	str	r2, [r7, #64]	; 0x40
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800904a:	e841 2300 	strex	r3, r2, [r1]
 800904e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e5      	bne.n	8009022 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2220      	movs	r2, #32
 800905a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a33      	ldr	r2, [pc, #204]	; (800913c <UART_RxISR_16BIT+0x1b4>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d01f      	beq.n	80090b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d018      	beq.n	80090b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e6      	bne.n	8009082 <UART_RxISR_16BIT+0xfa>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d12e      	bne.n	8008ab6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f023 0310 	bic.w	r3, r3, #16
 8008a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a7c:	61bb      	str	r3, [r7, #24]
 8008a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	6979      	ldr	r1, [r7, #20]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	613b      	str	r3, [r7, #16]
   return(result);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e6      	bne.n	8008a5e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	f003 0310 	and.w	r3, r3, #16
 8008a9a:	2b10      	cmp	r3, #16
 8008a9c:	d103      	bne.n	8008aa6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2210      	movs	r2, #16
 8008aa4:	621a      	str	r2, [r3, #32]
=======
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d12e      	bne.n	800911a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f023 0310 	bic.w	r3, r3, #16
 80090d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090e0:	61bb      	str	r3, [r7, #24]
 80090e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	6979      	ldr	r1, [r7, #20]
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	613b      	str	r3, [r7, #16]
   return(result);
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e6      	bne.n	80090c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	69db      	ldr	r3, [r3, #28]
 80090fa:	f003 0310 	and.w	r3, r3, #16
 80090fe:	2b10      	cmp	r3, #16
 8009100:	d103      	bne.n	800910a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2210      	movs	r2, #16
 8009108:	621a      	str	r2, [r3, #32]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f006 f8f2 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
=======
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f005 ffd0 	bl	800f0b8 <HAL_UARTEx_RxEventCallback>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8008ab4:	e00b      	b.n	8008ace <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f006 f82a 	bl	800eb10 <HAL_UART_RxCpltCallback>
}
 8008abc:	e007      	b.n	8008ace <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	699a      	ldr	r2, [r3, #24]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f042 0208 	orr.w	r2, r2, #8
 8008acc:	619a      	str	r2, [r3, #24]
}
 8008ace:	bf00      	nop
 8008ad0:	3770      	adds	r7, #112	; 0x70
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	40008000 	.word	0x40008000

08008adc <UART_RxISR_8BIT_FIFOEN>:
=======
 8009118:	e00b      	b.n	8009132 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f005 ff08 	bl	800ef30 <HAL_UART_RxCpltCallback>
}
 8009120:	e007      	b.n	8009132 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	699a      	ldr	r2, [r3, #24]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0208 	orr.w	r2, r2, #8
 8009130:	619a      	str	r2, [r3, #24]
}
 8009132:	bf00      	nop
 8009134:	3770      	adds	r7, #112	; 0x70
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	40008000 	.word	0x40008000

08009140 <UART_RxISR_8BIT_FIFOEN>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b0ac      	sub	sp, #176	; 0xb0
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008aea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
=======
 8009140:	b580      	push	{r7, lr}
 8009142:	b0ac      	sub	sp, #176	; 0xb0
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800914e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
<<<<<<< HEAD
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b12:	2b22      	cmp	r3, #34	; 0x22
 8008b14:	f040 8182 	bne.w	8008e1c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b1e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b22:	e125      	b.n	8008d70 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b2e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008b32:	b2d9      	uxtb	r1, r3
 8008b34:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b3e:	400a      	ands	r2, r1
 8008b40:	b2d2      	uxtb	r2, r2
 8008b42:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	3b01      	subs	r3, #1
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d053      	beq.n	8008c1e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d011      	beq.n	8008ba6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008b82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00b      	beq.n	8008ba6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2201      	movs	r2, #1
 8008b94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b9c:	f043 0201 	orr.w	r2, r3, #1
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009176:	2b22      	cmp	r3, #34	; 0x22
 8009178:	f040 8182 	bne.w	8009480 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009182:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009186:	e125      	b.n	80093d4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009192:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009196:	b2d9      	uxtb	r1, r3
 8009198:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800919c:	b2da      	uxtb	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a2:	400a      	ands	r2, r1
 80091a4:	b2d2      	uxtb	r2, r2
 80091a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ac:	1c5a      	adds	r2, r3, #1
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091d2:	f003 0307 	and.w	r3, r3, #7
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d053      	beq.n	8009282 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d011      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0xca>
 80091e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2201      	movs	r2, #1
 80091f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009200:	f043 0201 	orr.w	r2, r3, #1
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d011      	beq.n	8008bd6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00b      	beq.n	8008bd6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bcc:	f043 0204 	orr.w	r2, r3, #4
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 800920a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d011      	beq.n	800923a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2202      	movs	r2, #2
 8009228:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009230:	f043 0204 	orr.w	r2, r3, #4
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d011      	beq.n	8008c06 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00b      	beq.n	8008c06 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2204      	movs	r2, #4
 8008bf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bfc:	f043 0202 	orr.w	r2, r3, #2
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 800923a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b00      	cmp	r3, #0
 8009244:	d011      	beq.n	800926a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2204      	movs	r2, #4
 8009258:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009260:	f043 0202 	orr.w	r2, r3, #2
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d006      	beq.n	8008c1e <UART_RxISR_8BIT_FIFOEN+0x142>
=======
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009270:	2b00      	cmp	r3, #0
 8009272:	d006      	beq.n	8009282 <UART_RxISR_8BIT_FIFOEN+0x142>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f005 ffe7 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f005 fec5 	bl	800f004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }

      if (huart->RxXferCount == 0U)
<<<<<<< HEAD
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f040 80a2 	bne.w	8008d70 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c34:	e853 3f00 	ldrex	r3, [r3]
 8008c38:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c50:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c52:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008c54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008c56:	e841 2300 	strex	r3, r2, [r1]
 8008c5a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1e4      	bne.n	8008c2c <UART_RxISR_8BIT_FIFOEN+0x150>
=======
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	f040 80a2 	bne.w	80093d4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800929e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80092b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80092c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e4      	bne.n	8009290 <UART_RxISR_8BIT_FIFOEN+0x150>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
<<<<<<< HEAD
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3308      	adds	r3, #8
 8008c68:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c78:	f023 0301 	bic.w	r3, r3, #1
 8008c7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3308      	adds	r3, #8
 8008c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c8a:	66ba      	str	r2, [r7, #104]	; 0x68
 8008c8c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008c90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e1      	bne.n	8008c62 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a5f      	ldr	r2, [pc, #380]	; (8008e34 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d021      	beq.n	8008d00 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d01a      	beq.n	8008d00 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cd2:	e853 3f00 	ldrex	r3, [r3]
 8008cd6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cec:	657b      	str	r3, [r7, #84]	; 0x54
 8008cee:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008cf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cf4:	e841 2300 	strex	r3, r2, [r1]
 8008cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e4      	bne.n	8008cca <UART_RxISR_8BIT_FIFOEN+0x1ee>
=======
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3308      	adds	r3, #8
 80092cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80092d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092dc:	f023 0301 	bic.w	r3, r3, #1
 80092e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3308      	adds	r3, #8
 80092ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80092f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80092f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80092fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e1      	bne.n	80092c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2220      	movs	r2, #32
 8009306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a5f      	ldr	r2, [pc, #380]	; (8009498 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d021      	beq.n	8009364 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d01a      	beq.n	8009364 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800933c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800933e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009350:	657b      	str	r3, [r7, #84]	; 0x54
 8009352:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800935e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e4      	bne.n	800932e <UART_RxISR_8BIT_FIFOEN+0x1ee>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d130      	bne.n	8008d6a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d16:	e853 3f00 	ldrex	r3, [r3]
 8008d1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1e:	f023 0310 	bic.w	r3, r3, #16
 8008d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d30:	643b      	str	r3, [r7, #64]	; 0x40
 8008d32:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e4      	bne.n	8008d0e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	f003 0310 	and.w	r3, r3, #16
 8008d4e:	2b10      	cmp	r3, #16
 8008d50:	d103      	bne.n	8008d5a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2210      	movs	r2, #16
 8008d58:	621a      	str	r2, [r3, #32]
=======
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009368:	2b01      	cmp	r3, #1
 800936a:	d130      	bne.n	80093ce <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	f023 0310 	bic.w	r3, r3, #16
 8009386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009394:	643b      	str	r3, [r7, #64]	; 0x40
 8009396:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800939a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e4      	bne.n	8009372 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	f003 0310 	and.w	r3, r3, #16
 80093b2:	2b10      	cmp	r3, #16
 80093b4:	d103      	bne.n	80093be <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2210      	movs	r2, #16
 80093bc:	621a      	str	r2, [r3, #32]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f005 ff98 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
 8008d68:	e002      	b.n	8008d70 <UART_RxISR_8BIT_FIFOEN+0x294>
=======
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f005 fe76 	bl	800f0b8 <HAL_UARTEx_RxEventCallback>
 80093cc:	e002      	b.n	80093d4 <UART_RxISR_8BIT_FIFOEN+0x294>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f005 fed0 	bl	800eb10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d70:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d006      	beq.n	8008d86 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d7c:	f003 0320 	and.w	r3, r3, #32
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f47f aecf 	bne.w	8008b24 <UART_RxISR_8BIT_FIFOEN+0x48>
=======
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f005 fdae 	bl	800ef30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093d4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d006      	beq.n	80093ea <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80093dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093e0:	f003 0320 	and.w	r3, r3, #32
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f47f aecf 	bne.w	8009188 <UART_RxISR_8BIT_FIFOEN+0x48>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
<<<<<<< HEAD
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d8c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d049      	beq.n	8008e2c <UART_RxISR_8BIT_FIFOEN+0x350>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d9e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d242      	bcs.n	8008e2c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3308      	adds	r3, #8
 8008dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3308      	adds	r3, #8
 8008dc6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e3      	bne.n	8008da6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a15      	ldr	r2, [pc, #84]	; (8008e38 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008de2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f043 0320 	orr.w	r3, r3, #32
 8008df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e06:	61bb      	str	r3, [r7, #24]
 8008e08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	6979      	ldr	r1, [r7, #20]
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	613b      	str	r3, [r7, #16]
   return(result);
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e4      	bne.n	8008de4 <UART_RxISR_8BIT_FIFOEN+0x308>
=======
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d049      	beq.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x350>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009402:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009406:	429a      	cmp	r2, r3
 8009408:	d242      	bcs.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3308      	adds	r3, #8
 8009410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	e853 3f00 	ldrex	r3, [r3]
 8009418:	61fb      	str	r3, [r7, #28]
   return(result);
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3308      	adds	r3, #8
 800942a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800942e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e3      	bne.n	800940a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a15      	ldr	r2, [pc, #84]	; (800949c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009446:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	60bb      	str	r3, [r7, #8]
   return(result);
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	f043 0320 	orr.w	r3, r3, #32
 800945c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	461a      	mov	r2, r3
 8009466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800946a:	61bb      	str	r3, [r7, #24]
 800946c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6979      	ldr	r1, [r7, #20]
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	613b      	str	r3, [r7, #16]
   return(result);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e4      	bne.n	8009448 <UART_RxISR_8BIT_FIFOEN+0x308>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8008e1a:	e007      	b.n	8008e2c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	699a      	ldr	r2, [r3, #24]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f042 0208 	orr.w	r2, r2, #8
 8008e2a:	619a      	str	r2, [r3, #24]
}
 8008e2c:	bf00      	nop
 8008e2e:	37b0      	adds	r7, #176	; 0xb0
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	40008000 	.word	0x40008000
 8008e38:	0800876d 	.word	0x0800876d

08008e3c <UART_RxISR_16BIT_FIFOEN>:
=======
 800947e:	e007      	b.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	699a      	ldr	r2, [r3, #24]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0208 	orr.w	r2, r2, #8
 800948e:	619a      	str	r2, [r3, #24]
}
 8009490:	bf00      	nop
 8009492:	37b0      	adds	r7, #176	; 0xb0
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	40008000 	.word	0x40008000
 800949c:	08008dd1 	.word	0x08008dd1

080094a0 <UART_RxISR_16BIT_FIFOEN>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b0ae      	sub	sp, #184	; 0xb8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e4a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
=======
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b0ae      	sub	sp, #184	; 0xb8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
<<<<<<< HEAD
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e72:	2b22      	cmp	r3, #34	; 0x22
 8008e74:	f040 8186 	bne.w	8009184 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e7e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e82:	e129      	b.n	80090d8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008e96:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008e9a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ea6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eac:	1c9a      	adds	r2, r3, #2
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ece:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d053      	beq.n	8008f82 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008eda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d011      	beq.n	8008f0a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f00:	f043 0201 	orr.w	r2, r3, #1
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d6:	2b22      	cmp	r3, #34	; 0x22
 80094d8:	f040 8186 	bne.w	80097e8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094e6:	e129      	b.n	800973c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80094fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80094fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009502:	4013      	ands	r3, r2
 8009504:	b29a      	uxth	r2, r3
 8009506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800950a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009510:	1c9a      	adds	r2, r3, #2
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800951c:	b29b      	uxth	r3, r3
 800951e:	3b01      	subs	r3, #1
 8009520:	b29a      	uxth	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	2b00      	cmp	r3, #0
 800953c:	d053      	beq.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800953e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d011      	beq.n	800956e <UART_RxISR_16BIT_FIFOEN+0xce>
 800954a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800954e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00b      	beq.n	800956e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2201      	movs	r2, #1
 800955c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009564:	f043 0201 	orr.w	r2, r3, #1
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008f0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f0e:	f003 0302 	and.w	r3, r3, #2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d011      	beq.n	8008f3a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008f16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00b      	beq.n	8008f3a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2202      	movs	r2, #2
 8008f28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f30:	f043 0204 	orr.w	r2, r3, #4
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 800956e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d011      	beq.n	800959e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800957a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00b      	beq.n	800959e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2202      	movs	r2, #2
 800958c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009594:	f043 0204 	orr.w	r2, r3, #4
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008f3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f3e:	f003 0304 	and.w	r3, r3, #4
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d011      	beq.n	8008f6a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2204      	movs	r2, #4
 8008f58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f60:	f043 0202 	orr.w	r2, r3, #2
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 800959e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d011      	beq.n	80095ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80095aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00b      	beq.n	80095ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2204      	movs	r2, #4
 80095bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c4:	f043 0202 	orr.w	r2, r3, #2
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d006      	beq.n	8008f82 <UART_RxISR_16BIT_FIFOEN+0x146>
=======
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d006      	beq.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x146>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f005 fe35 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f005 fd13 	bl	800f004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }

      if (huart->RxXferCount == 0U)
<<<<<<< HEAD
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f040 80a4 	bne.w	80090d8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	461a      	mov	r2, r3
 8008fae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fb6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e2      	bne.n	8008f90 <UART_RxISR_16BIT_FIFOEN+0x154>
=======
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f040 80a4 	bne.w	800973c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800961a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800961e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009622:	e841 2300 	strex	r3, r2, [r1]
 8009626:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1e2      	bne.n	80095f4 <UART_RxISR_16BIT_FIFOEN+0x154>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
<<<<<<< HEAD
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3308      	adds	r3, #8
 8008fd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fe0:	f023 0301 	bic.w	r3, r3, #1
 8008fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3308      	adds	r3, #8
 8008fee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008ff2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ff4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ff8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e1      	bne.n	8008fca <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2220      	movs	r2, #32
 800900a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a5f      	ldr	r2, [pc, #380]	; (800919c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d021      	beq.n	8009068 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01a      	beq.n	8009068 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009054:	65bb      	str	r3, [r7, #88]	; 0x58
 8009056:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800905a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e4      	bne.n	8009032 <UART_RxISR_16BIT_FIFOEN+0x1f6>
=======
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3308      	adds	r3, #8
 8009634:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800963e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009644:	f023 0301 	bic.w	r3, r3, #1
 8009648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3308      	adds	r3, #8
 8009652:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009656:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009658:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800965c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e1      	bne.n	800962e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2220      	movs	r2, #32
 800966e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a5f      	ldr	r2, [pc, #380]	; (8009800 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d021      	beq.n	80096cc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01a      	beq.n	80096cc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800969e:	e853 3f00 	ldrex	r3, [r3]
 80096a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80096ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e4      	bne.n	8009696 <UART_RxISR_16BIT_FIFOEN+0x1f6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800906c:	2b01      	cmp	r3, #1
 800906e:	d130      	bne.n	80090d2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	e853 3f00 	ldrex	r3, [r3]
 8009082:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009086:	f023 0310 	bic.w	r3, r3, #16
 800908a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009098:	647b      	str	r3, [r7, #68]	; 0x44
 800909a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800909e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090a0:	e841 2300 	strex	r3, r2, [r1]
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1e4      	bne.n	8009076 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	f003 0310 	and.w	r3, r3, #16
 80090b6:	2b10      	cmp	r3, #16
 80090b8:	d103      	bne.n	80090c2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2210      	movs	r2, #16
 80090c0:	621a      	str	r2, [r3, #32]
=======
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d130      	bne.n	8009736 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ea:	f023 0310 	bic.w	r3, r3, #16
 80096ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096fc:	647b      	str	r3, [r7, #68]	; 0x44
 80096fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800970a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e4      	bne.n	80096da <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	f003 0310 	and.w	r3, r3, #16
 800971a:	2b10      	cmp	r3, #16
 800971c:	d103      	bne.n	8009726 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2210      	movs	r2, #16
 8009724:	621a      	str	r2, [r3, #32]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f005 fde4 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
 80090d0:	e002      	b.n	80090d8 <UART_RxISR_16BIT_FIFOEN+0x29c>
=======
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f005 fcc2 	bl	800f0b8 <HAL_UARTEx_RxEventCallback>
 8009734:	e002      	b.n	800973c <UART_RxISR_16BIT_FIFOEN+0x29c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f005 fd1c 	bl	800eb10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090d8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d006      	beq.n	80090ee <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80090e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090e4:	f003 0320 	and.w	r3, r3, #32
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f47f aecb 	bne.w	8008e84 <UART_RxISR_16BIT_FIFOEN+0x48>
=======
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f005 fbfa 	bl	800ef30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800973c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009740:	2b00      	cmp	r3, #0
 8009742:	d006      	beq.n	8009752 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009748:	f003 0320 	and.w	r3, r3, #32
 800974c:	2b00      	cmp	r3, #0
 800974e:	f47f aecb 	bne.w	80094e8 <UART_RxISR_16BIT_FIFOEN+0x48>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
<<<<<<< HEAD
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80090f8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d049      	beq.n	8009194 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009106:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800910a:	429a      	cmp	r2, r3
 800910c:	d242      	bcs.n	8009194 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3308      	adds	r3, #8
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	e853 3f00 	ldrex	r3, [r3]
 800911c:	623b      	str	r3, [r7, #32]
   return(result);
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3308      	adds	r3, #8
 800912e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009132:	633a      	str	r2, [r7, #48]	; 0x30
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800913a:	e841 2300 	strex	r3, r2, [r1]
 800913e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1e3      	bne.n	800910e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a15      	ldr	r2, [pc, #84]	; (80091a0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800914a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	60fb      	str	r3, [r7, #12]
   return(result);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f043 0320 	orr.w	r3, r3, #32
 8009160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800916e:	61fb      	str	r3, [r7, #28]
 8009170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	69b9      	ldr	r1, [r7, #24]
 8009174:	69fa      	ldr	r2, [r7, #28]
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	617b      	str	r3, [r7, #20]
   return(result);
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e4      	bne.n	800914c <UART_RxISR_16BIT_FIFOEN+0x310>
=======
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009758:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800975c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009760:	2b00      	cmp	r3, #0
 8009762:	d049      	beq.n	80097f8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800976a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800976e:	429a      	cmp	r2, r3
 8009770:	d242      	bcs.n	80097f8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3308      	adds	r3, #8
 8009778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	e853 3f00 	ldrex	r3, [r3]
 8009780:	623b      	str	r3, [r7, #32]
   return(result);
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3308      	adds	r3, #8
 8009792:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009796:	633a      	str	r2, [r7, #48]	; 0x30
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800979c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e3      	bne.n	8009772 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a15      	ldr	r2, [pc, #84]	; (8009804 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80097ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f043 0320 	orr.w	r3, r3, #32
 80097c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	461a      	mov	r2, r3
 80097ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097d2:	61fb      	str	r3, [r7, #28]
 80097d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	69b9      	ldr	r1, [r7, #24]
 80097d8:	69fa      	ldr	r2, [r7, #28]
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	617b      	str	r3, [r7, #20]
   return(result);
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e4      	bne.n	80097b0 <UART_RxISR_16BIT_FIFOEN+0x310>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8009182:	e007      	b.n	8009194 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	699a      	ldr	r2, [r3, #24]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0208 	orr.w	r2, r2, #8
 8009192:	619a      	str	r2, [r3, #24]
}
 8009194:	bf00      	nop
 8009196:	37b8      	adds	r7, #184	; 0xb8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	40008000 	.word	0x40008000
 80091a0:	08008925 	.word	0x08008925

080091a4 <HAL_UARTEx_WakeupCallback>:
=======
 80097e6:	e007      	b.n	80097f8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699a      	ldr	r2, [r3, #24]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0208 	orr.w	r2, r2, #8
 80097f6:	619a      	str	r2, [r3, #24]
}
 80097f8:	bf00      	nop
 80097fa:	37b8      	adds	r7, #184	; 0xb8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	40008000 	.word	0x40008000
 8009804:	08008f89 	.word	0x08008f89

08009808 <HAL_UARTEx_WakeupCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
=======
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_UARTEx_RxFifoFullCallback>:
=======
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_UARTEx_RxFifoFullCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
=======
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_UARTEx_TxFifoEmptyCallback>:
=======
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_UARTEx_TxFifoEmptyCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
=======
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_UARTEx_DisableFifoMode>:
=======
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_UARTEx_DisableFifoMode>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
=======
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e027      	b.n	8009246 <HAL_UARTEx_DisableFifoMode+0x66>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2224      	movs	r2, #36	; 0x24
 8009202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f022 0201 	bic.w	r2, r2, #1
 800921c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009224:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2220      	movs	r2, #32
 8009238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <HAL_UARTEx_SetTxFifoThreshold>:
=======
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009852:	2b01      	cmp	r3, #1
 8009854:	d101      	bne.n	800985a <HAL_UARTEx_DisableFifoMode+0x16>
 8009856:	2302      	movs	r3, #2
 8009858:	e027      	b.n	80098aa <HAL_UARTEx_DisableFifoMode+0x66>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2224      	movs	r2, #36	; 0x24
 8009866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f022 0201 	bic.w	r2, r2, #1
 8009880:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009888:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2220      	movs	r2, #32
 800989c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 8009252:	b580      	push	{r7, lr}
 8009254:	b084      	sub	sp, #16
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
=======
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009262:	2b01      	cmp	r3, #1
 8009264:	d101      	bne.n	800926a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009266:	2302      	movs	r3, #2
 8009268:	e02d      	b.n	80092c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2224      	movs	r2, #36	; 0x24
 8009276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 0201 	bic.w	r2, r2, #1
 8009290:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8a4 	bl	80093f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2220      	movs	r2, #32
 80092b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_UARTEx_SetRxFifoThreshold>:
=======
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d101      	bne.n	80098ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098ca:	2302      	movs	r3, #2
 80098cc:	e02d      	b.n	800992a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2224      	movs	r2, #36	; 0x24
 80098da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0201 	bic.w	r2, r2, #1
 80098f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f8a4 	bl	8009a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2220      	movs	r2, #32
 800991c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <HAL_UARTEx_SetRxFifoThreshold>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
=======
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	6039      	str	r1, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d101      	bne.n	80092e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092e2:	2302      	movs	r3, #2
 80092e4:	e02d      	b.n	8009342 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2224      	movs	r2, #36	; 0x24
 80092f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0201 	bic.w	r2, r2, #1
 800930c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f866 	bl	80093f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2220      	movs	r2, #32
 8009334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <HAL_UARTEx_ReceiveToIdle_DMA>:
=======
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009942:	2b01      	cmp	r3, #1
 8009944:	d101      	bne.n	800994a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009946:	2302      	movs	r3, #2
 8009948:	e02d      	b.n	80099a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2224      	movs	r2, #36	; 0x24
 8009956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0201 	bic.w	r2, r2, #1
 8009970:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f866 	bl	8009a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2220      	movs	r2, #32
 8009998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <HAL_UARTEx_ReceiveToIdle_DMA>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800934a:	b580      	push	{r7, lr}
 800934c:	b08c      	sub	sp, #48	; 0x30
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	4613      	mov	r3, r2
 8009356:	80fb      	strh	r3, [r7, #6]
=======
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b08c      	sub	sp, #48	; 0x30
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	4613      	mov	r3, r2
 80099ba:	80fb      	strh	r3, [r7, #6]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800935e:	2b20      	cmp	r3, #32
 8009360:	d142      	bne.n	80093e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009368:	88fb      	ldrh	r3, [r7, #6]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e03b      	b.n	80093ea <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
=======
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d142      	bne.n	8009a4c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80099cc:	88fb      	ldrh	r3, [r7, #6]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e03b      	b.n	8009a4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
<<<<<<< HEAD
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2201      	movs	r2, #1
 8009376:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	461a      	mov	r2, r3
 8009382:	68b9      	ldr	r1, [r7, #8]
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f7fe fd4b 	bl	8007e20 <UART_Start_Receive_DMA>
 800938a:	4603      	mov	r3, r0
 800938c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009394:	2b00      	cmp	r3, #0
 8009396:	d124      	bne.n	80093e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d11d      	bne.n	80093dc <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2210      	movs	r2, #16
 80093a6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	617b      	str	r3, [r7, #20]
   return(result);
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f043 0310 	orr.w	r3, r3, #16
 80093bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
 80093c8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ca:	6a39      	ldr	r1, [r7, #32]
 80093cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ce:	e841 2300 	strex	r3, r2, [r1]
 80093d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e6      	bne.n	80093a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80093da:	e002      	b.n	80093e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
=======
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2201      	movs	r2, #1
 80099da:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80099e2:	88fb      	ldrh	r3, [r7, #6]
 80099e4:	461a      	mov	r2, r3
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7fe fd4b 	bl	8008484 <UART_Start_Receive_DMA>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80099f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d124      	bne.n	8009a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d11d      	bne.n	8009a40 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2210      	movs	r2, #16
 8009a0a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	e853 3f00 	ldrex	r3, [r3]
 8009a18:	617b      	str	r3, [r7, #20]
   return(result);
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f043 0310 	orr.w	r3, r3, #16
 8009a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a2c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2e:	6a39      	ldr	r1, [r7, #32]
 8009a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a32:	e841 2300 	strex	r3, r2, [r1]
 8009a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1e6      	bne.n	8009a0c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009a3e:	e002      	b.n	8009a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
<<<<<<< HEAD
 80093dc:	2301      	movs	r3, #1
 80093de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 8009a40:	2301      	movs	r3, #1
 8009a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
    }

    return status;
<<<<<<< HEAD
 80093e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093e6:	e000      	b.n	80093ea <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
=======
 8009a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a4a:	e000      	b.n	8009a4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80093e8:	2302      	movs	r3, #2
  }
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3730      	adds	r7, #48	; 0x30
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <UARTEx_SetNbDataToProcess>:
=======
 8009a4c:	2302      	movs	r3, #2
  }
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3730      	adds	r7, #48	; 0x30
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <UARTEx_SetNbDataToProcess>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
=======
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< HEAD
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009400:	2b00      	cmp	r3, #0
 8009402:	d108      	bne.n	8009416 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d108      	bne.n	8009a7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< HEAD
 8009414:	e031      	b.n	800947a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009416:	2308      	movs	r3, #8
 8009418:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800941a:	2308      	movs	r3, #8
 800941c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	0e5b      	lsrs	r3, r3, #25
 8009426:	b2db      	uxtb	r3, r3
 8009428:	f003 0307 	and.w	r3, r3, #7
 800942c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	0f5b      	lsrs	r3, r3, #29
 8009436:	b2db      	uxtb	r3, r3
 8009438:	f003 0307 	and.w	r3, r3, #7
 800943c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	7b3a      	ldrb	r2, [r7, #12]
 8009442:	4911      	ldr	r1, [pc, #68]	; (8009488 <UARTEx_SetNbDataToProcess+0x94>)
 8009444:	5c8a      	ldrb	r2, [r1, r2]
 8009446:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800944a:	7b3a      	ldrb	r2, [r7, #12]
 800944c:	490f      	ldr	r1, [pc, #60]	; (800948c <UARTEx_SetNbDataToProcess+0x98>)
 800944e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009450:	fb93 f3f2 	sdiv	r3, r3, r2
 8009454:	b29a      	uxth	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	7b7a      	ldrb	r2, [r7, #13]
 8009460:	4909      	ldr	r1, [pc, #36]	; (8009488 <UARTEx_SetNbDataToProcess+0x94>)
 8009462:	5c8a      	ldrb	r2, [r1, r2]
 8009464:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009468:	7b7a      	ldrb	r2, [r7, #13]
 800946a:	4908      	ldr	r1, [pc, #32]	; (800948c <UARTEx_SetNbDataToProcess+0x98>)
 800946c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800946e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800947a:	bf00      	nop
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	0800f05c 	.word	0x0800f05c
 800948c:	0800f064 	.word	0x0800f064

08009490 <USB_DisableGlobalInt>:
=======
 8009a78:	e031      	b.n	8009ade <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a7e:	2308      	movs	r3, #8
 8009a80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	0e5b      	lsrs	r3, r3, #25
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f003 0307 	and.w	r3, r3, #7
 8009a90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	0f5b      	lsrs	r3, r3, #29
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 0307 	and.w	r3, r3, #7
 8009aa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	7b3a      	ldrb	r2, [r7, #12]
 8009aa6:	4911      	ldr	r1, [pc, #68]	; (8009aec <UARTEx_SetNbDataToProcess+0x94>)
 8009aa8:	5c8a      	ldrb	r2, [r1, r2]
 8009aaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009aae:	7b3a      	ldrb	r2, [r7, #12]
 8009ab0:	490f      	ldr	r1, [pc, #60]	; (8009af0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ab2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ab4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	7b7a      	ldrb	r2, [r7, #13]
 8009ac4:	4909      	ldr	r1, [pc, #36]	; (8009aec <UARTEx_SetNbDataToProcess+0x94>)
 8009ac6:	5c8a      	ldrb	r2, [r1, r2]
 8009ac8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009acc:	7b7a      	ldrb	r2, [r7, #13]
 8009ace:	4908      	ldr	r1, [pc, #32]	; (8009af0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ad0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ad2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ade:	bf00      	nop
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	0800f684 	.word	0x0800f684
 8009af0:	0800f68c 	.word	0x0800f68c

08009af4 <USB_DisableGlobalInt>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
=======
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
<<<<<<< HEAD
 8009498:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800949c:	60fb      	str	r3, [r7, #12]
=======
 8009afc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009b00:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
<<<<<<< HEAD
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	43db      	mvns	r3, r3
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	4013      	ands	r3, r2
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <USB_DevInit>:
=======
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	43db      	mvns	r3, r3
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	4013      	ands	r3, r2
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <USB_DevInit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< HEAD
 80094c6:	b084      	sub	sp, #16
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	f107 0014 	add.w	r0, r7, #20
 80094d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	f107 0014 	add.w	r0, r7, #20
 8009b38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
<<<<<<< HEAD
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	b004      	add	sp, #16
 8009506:	4770      	bx	lr

08009508 <__NVIC_SetPriority>:
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	6039      	str	r1, [r7, #0]
 8009512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009518:	2b00      	cmp	r3, #0
 800951a:	db0a      	blt.n	8009532 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	b2da      	uxtb	r2, r3
 8009520:	490c      	ldr	r1, [pc, #48]	; (8009554 <__NVIC_SetPriority+0x4c>)
 8009522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009526:	0112      	lsls	r2, r2, #4
 8009528:	b2d2      	uxtb	r2, r2
 800952a:	440b      	add	r3, r1
 800952c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009530:	e00a      	b.n	8009548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	b2da      	uxtb	r2, r3
 8009536:	4908      	ldr	r1, [pc, #32]	; (8009558 <__NVIC_SetPriority+0x50>)
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	f003 030f 	and.w	r3, r3, #15
 800953e:	3b04      	subs	r3, #4
 8009540:	0112      	lsls	r2, r2, #4
 8009542:	b2d2      	uxtb	r2, r2
 8009544:	440b      	add	r3, r1
 8009546:	761a      	strb	r2, [r3, #24]
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	e000e100 	.word	0xe000e100
 8009558:	e000ed00 	.word	0xe000ed00

0800955c <SysTick_Handler>:
=======
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	b004      	add	sp, #16
 8009b6a:	4770      	bx	lr

08009b6c <__NVIC_SetPriority>:
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	6039      	str	r1, [r7, #0]
 8009b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	db0a      	blt.n	8009b96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	490c      	ldr	r1, [pc, #48]	; (8009bb8 <__NVIC_SetPriority+0x4c>)
 8009b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b8a:	0112      	lsls	r2, r2, #4
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	440b      	add	r3, r1
 8009b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009b94:	e00a      	b.n	8009bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	4908      	ldr	r1, [pc, #32]	; (8009bbc <__NVIC_SetPriority+0x50>)
 8009b9c:	79fb      	ldrb	r3, [r7, #7]
 8009b9e:	f003 030f 	and.w	r3, r3, #15
 8009ba2:	3b04      	subs	r3, #4
 8009ba4:	0112      	lsls	r2, r2, #4
 8009ba6:	b2d2      	uxtb	r2, r2
 8009ba8:	440b      	add	r3, r1
 8009baa:	761a      	strb	r2, [r3, #24]
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	e000e100 	.word	0xe000e100
 8009bbc:	e000ed00 	.word	0xe000ed00

08009bc0 <SysTick_Handler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
<<<<<<< HEAD
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009560:	4b05      	ldr	r3, [pc, #20]	; (8009578 <SysTick_Handler+0x1c>)
 8009562:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009564:	f002 fa42 	bl	800b9ec <xTaskGetSchedulerState>
 8009568:	4603      	mov	r3, r0
 800956a:	2b01      	cmp	r3, #1
 800956c:	d001      	beq.n	8009572 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800956e:	f003 fc1b 	bl	800cda8 <xPortSysTickHandler>
  }
}
 8009572:	bf00      	nop
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	e000e010 	.word	0xe000e010

0800957c <SVC_Setup>:
=======
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009bc4:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <SysTick_Handler+0x1c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009bc8:	f002 f982 	bl	800bed0 <xTaskGetSchedulerState>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d001      	beq.n	8009bd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009bd2:	f003 faf9 	bl	800d1c8 <xPortSysTickHandler>
  }
}
 8009bd6:	bf00      	nop
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	e000e010 	.word	0xe000e010

08009be0 <SVC_Setup>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
<<<<<<< HEAD
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
=======
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
<<<<<<< HEAD
 8009580:	2100      	movs	r1, #0
 8009582:	f06f 0004 	mvn.w	r0, #4
 8009586:	f7ff ffbf 	bl	8009508 <__NVIC_SetPriority>
#endif
}
 800958a:	bf00      	nop
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <osKernelInitialize>:
=======
 8009be4:	2100      	movs	r1, #0
 8009be6:	f06f 0004 	mvn.w	r0, #4
 8009bea:	f7ff ffbf 	bl	8009b6c <__NVIC_SetPriority>
#endif
}
 8009bee:	bf00      	nop
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <osKernelInitialize>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< HEAD
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009596:	f3ef 8305 	mrs	r3, IPSR
 800959a:	603b      	str	r3, [r7, #0]
  return(result);
 800959c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d003      	beq.n	80095aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80095a2:	f06f 0305 	mvn.w	r3, #5
 80095a6:	607b      	str	r3, [r7, #4]
 80095a8:	e00c      	b.n	80095c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80095aa:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <osKernelInitialize+0x44>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d105      	bne.n	80095be <osKernelInitialize+0x2e>
=======
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bfa:	f3ef 8305 	mrs	r3, IPSR
 8009bfe:	603b      	str	r3, [r7, #0]
  return(result);
 8009c00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c06:	f06f 0305 	mvn.w	r3, #5
 8009c0a:	607b      	str	r3, [r7, #4]
 8009c0c:	e00c      	b.n	8009c28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c0e:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <osKernelInitialize+0x44>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d105      	bne.n	8009c22 <osKernelInitialize+0x2e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
<<<<<<< HEAD
 80095b2:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <osKernelInitialize+0x44>)
 80095b4:	2201      	movs	r2, #1
 80095b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	607b      	str	r3, [r7, #4]
 80095bc:	e002      	b.n	80095c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80095be:	f04f 33ff 	mov.w	r3, #4294967295
 80095c2:	607b      	str	r3, [r7, #4]
=======
 8009c16:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <osKernelInitialize+0x44>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	607b      	str	r3, [r7, #4]
 8009c20:	e002      	b.n	8009c28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c22:	f04f 33ff 	mov.w	r3, #4294967295
 8009c26:	607b      	str	r3, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  return (stat);
<<<<<<< HEAD
 80095c4:	687b      	ldr	r3, [r7, #4]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	200007cc 	.word	0x200007cc

080095d8 <osKernelStart>:
=======
 8009c28:	687b      	ldr	r3, [r7, #4]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	200007b4 	.word	0x200007b4

08009c3c <osKernelStart>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< HEAD
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095de:	f3ef 8305 	mrs	r3, IPSR
 80095e2:	603b      	str	r3, [r7, #0]
  return(result);
 80095e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d003      	beq.n	80095f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80095ea:	f06f 0305 	mvn.w	r3, #5
 80095ee:	607b      	str	r3, [r7, #4]
 80095f0:	e010      	b.n	8009614 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80095f2:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <osKernelStart+0x48>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d109      	bne.n	800960e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80095fa:	f7ff ffbf 	bl	800957c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80095fe:	4b08      	ldr	r3, [pc, #32]	; (8009620 <osKernelStart+0x48>)
 8009600:	2202      	movs	r2, #2
 8009602:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009604:	f001 fd98 	bl	800b138 <vTaskStartScheduler>
      stat = osOK;
 8009608:	2300      	movs	r3, #0
 800960a:	607b      	str	r3, [r7, #4]
 800960c:	e002      	b.n	8009614 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800960e:	f04f 33ff 	mov.w	r3, #4294967295
 8009612:	607b      	str	r3, [r7, #4]
=======
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c42:	f3ef 8305 	mrs	r3, IPSR
 8009c46:	603b      	str	r3, [r7, #0]
  return(result);
 8009c48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c4e:	f06f 0305 	mvn.w	r3, #5
 8009c52:	607b      	str	r3, [r7, #4]
 8009c54:	e010      	b.n	8009c78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c56:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <osKernelStart+0x48>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d109      	bne.n	8009c72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c5e:	f7ff ffbf 	bl	8009be0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c62:	4b08      	ldr	r3, [pc, #32]	; (8009c84 <osKernelStart+0x48>)
 8009c64:	2202      	movs	r2, #2
 8009c66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c68:	f001 fcd8 	bl	800b61c <vTaskStartScheduler>
      stat = osOK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	607b      	str	r3, [r7, #4]
 8009c70:	e002      	b.n	8009c78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c72:	f04f 33ff 	mov.w	r3, #4294967295
 8009c76:	607b      	str	r3, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  return (stat);
<<<<<<< HEAD
 8009614:	687b      	ldr	r3, [r7, #4]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	200007cc 	.word	0x200007cc

08009624 <osThreadNew>:
=======
 8009c78:	687b      	ldr	r3, [r7, #4]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200007b4 	.word	0x200007b4

08009c88 <osThreadNew>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< HEAD
 8009624:	b580      	push	{r7, lr}
 8009626:	b08e      	sub	sp, #56	; 0x38
 8009628:	af04      	add	r7, sp, #16
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
=======
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08e      	sub	sp, #56	; 0x38
 8009c8c:	af04      	add	r7, sp, #16
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< HEAD
 8009630:	2300      	movs	r3, #0
 8009632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009634:	f3ef 8305 	mrs	r3, IPSR
 8009638:	617b      	str	r3, [r7, #20]
  return(result);
 800963a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800963c:	2b00      	cmp	r3, #0
 800963e:	d17e      	bne.n	800973e <osThreadNew+0x11a>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d07b      	beq.n	800973e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009646:	2380      	movs	r3, #128	; 0x80
 8009648:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800964a:	2318      	movs	r3, #24
 800964c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009652:	f04f 33ff 	mov.w	r3, #4294967295
 8009656:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d045      	beq.n	80096ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d002      	beq.n	800966c <osThreadNew+0x48>
        name = attr->name;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d008      	beq.n	8009692 <osThreadNew+0x6e>
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	2b38      	cmp	r3, #56	; 0x38
 8009684:	d805      	bhi.n	8009692 <osThreadNew+0x6e>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <osThreadNew+0x72>
        return (NULL);
 8009692:	2300      	movs	r3, #0
 8009694:	e054      	b.n	8009740 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	089b      	lsrs	r3, r3, #2
 80096a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00e      	beq.n	80096cc <osThreadNew+0xa8>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	2b5b      	cmp	r3, #91	; 0x5b
 80096b4:	d90a      	bls.n	80096cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d006      	beq.n	80096cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <osThreadNew+0xa8>
        mem = 1;
 80096c6:	2301      	movs	r3, #1
 80096c8:	61bb      	str	r3, [r7, #24]
 80096ca:	e010      	b.n	80096ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10c      	bne.n	80096ee <osThreadNew+0xca>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d108      	bne.n	80096ee <osThreadNew+0xca>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d104      	bne.n	80096ee <osThreadNew+0xca>
          mem = 0;
 80096e4:	2300      	movs	r3, #0
 80096e6:	61bb      	str	r3, [r7, #24]
 80096e8:	e001      	b.n	80096ee <osThreadNew+0xca>
=======
 8009c94:	2300      	movs	r3, #0
 8009c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c98:	f3ef 8305 	mrs	r3, IPSR
 8009c9c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d17e      	bne.n	8009da2 <osThreadNew+0x11a>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d07b      	beq.n	8009da2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009caa:	2380      	movs	r3, #128	; 0x80
 8009cac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009cae:	2318      	movs	r3, #24
 8009cb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d045      	beq.n	8009d4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <osThreadNew+0x48>
        name = attr->name;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d008      	beq.n	8009cf6 <osThreadNew+0x6e>
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	2b38      	cmp	r3, #56	; 0x38
 8009ce8:	d805      	bhi.n	8009cf6 <osThreadNew+0x6e>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <osThreadNew+0x72>
        return (NULL);
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e054      	b.n	8009da4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	089b      	lsrs	r3, r3, #2
 8009d08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00e      	beq.n	8009d30 <osThreadNew+0xa8>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	2b5b      	cmp	r3, #91	; 0x5b
 8009d18:	d90a      	bls.n	8009d30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d006      	beq.n	8009d30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <osThreadNew+0xa8>
        mem = 1;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	61bb      	str	r3, [r7, #24]
 8009d2e:	e010      	b.n	8009d52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10c      	bne.n	8009d52 <osThreadNew+0xca>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d108      	bne.n	8009d52 <osThreadNew+0xca>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d104      	bne.n	8009d52 <osThreadNew+0xca>
          mem = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	61bb      	str	r3, [r7, #24]
 8009d4c:	e001      	b.n	8009d52 <osThreadNew+0xca>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 80096ea:	2300      	movs	r3, #0
 80096ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d110      	bne.n	8009716 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096fc:	9202      	str	r2, [sp, #8]
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	6a3a      	ldr	r2, [r7, #32]
 8009708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f001 fb3e 	bl	800ad8c <xTaskCreateStatic>
 8009710:	4603      	mov	r3, r0
 8009712:	613b      	str	r3, [r7, #16]
 8009714:	e013      	b.n	800973e <osThreadNew+0x11a>
=======
 8009d4e:	2300      	movs	r3, #0
 8009d50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d110      	bne.n	8009d7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d60:	9202      	str	r2, [sp, #8]
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	6a3a      	ldr	r2, [r7, #32]
 8009d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f001 fa7e 	bl	800b270 <xTaskCreateStatic>
 8009d74:	4603      	mov	r3, r0
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	e013      	b.n	8009da2 <osThreadNew+0x11a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< HEAD
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d110      	bne.n	800973e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	b29a      	uxth	r2, r3
 8009720:	f107 0310 	add.w	r3, r7, #16
 8009724:	9301      	str	r3, [sp, #4]
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f001 fb89 	bl	800ae46 <xTaskCreate>
 8009734:	4603      	mov	r3, r0
 8009736:	2b01      	cmp	r3, #1
 8009738:	d001      	beq.n	800973e <osThreadNew+0x11a>
            hTask = NULL;
 800973a:	2300      	movs	r3, #0
 800973c:	613b      	str	r3, [r7, #16]
=======
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d110      	bne.n	8009da2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	f107 0310 	add.w	r3, r7, #16
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f001 fac9 	bl	800b32a <xTaskCreate>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d001      	beq.n	8009da2 <osThreadNew+0x11a>
            hTask = NULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	613b      	str	r3, [r7, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< HEAD
 800973e:	693b      	ldr	r3, [r7, #16]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3728      	adds	r7, #40	; 0x28
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <osThreadFlagsSet>:
=======
 8009da2:	693b      	ldr	r3, [r7, #16]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3728      	adds	r7, #40	; 0x28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <osThreadFlagsSet>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
<<<<<<< HEAD
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af02      	add	r7, sp, #8
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	617b      	str	r3, [r7, #20]
=======
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af02      	add	r7, sp, #8
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
<<<<<<< HEAD
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <osThreadFlagsSet+0x1a>
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	da03      	bge.n	800976a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8009762:	f06f 0303 	mvn.w	r3, #3
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	e035      	b.n	80097d6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800976a:	f04f 33ff 	mov.w	r3, #4294967295
 800976e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009770:	f3ef 8305 	mrs	r3, IPSR
 8009774:	613b      	str	r3, [r7, #16]
  return(result);
 8009776:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01f      	beq.n	80097bc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800977c:	2300      	movs	r3, #0
 800977e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009780:	f107 0308 	add.w	r3, r7, #8
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	2300      	movs	r3, #0
 8009788:	2201      	movs	r2, #1
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6978      	ldr	r0, [r7, #20]
 800978e:	f002 fc11 	bl	800bfb4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009792:	f107 030c 	add.w	r3, r7, #12
 8009796:	2200      	movs	r2, #0
 8009798:	9200      	str	r2, [sp, #0]
 800979a:	2200      	movs	r2, #0
 800979c:	2100      	movs	r1, #0
 800979e:	6978      	ldr	r0, [r7, #20]
 80097a0:	f002 fc08 	bl	800bfb4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d015      	beq.n	80097d6 <osThreadFlagsSet+0x8e>
 80097aa:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <osThreadFlagsSet+0x98>)
 80097ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	e00c      	b.n	80097d6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80097bc:	2300      	movs	r3, #0
 80097be:	2201      	movs	r2, #1
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6978      	ldr	r0, [r7, #20]
 80097c4:	f002 fb3e 	bl	800be44 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80097c8:	f107 030c 	add.w	r3, r7, #12
 80097cc:	2200      	movs	r2, #0
 80097ce:	2100      	movs	r1, #0
 80097d0:	6978      	ldr	r0, [r7, #20]
 80097d2:	f002 fb37 	bl	800be44 <xTaskGenericNotify>
=======
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <osThreadFlagsSet+0x1a>
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	da03      	bge.n	8009dce <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8009dc6:	f06f 0303 	mvn.w	r3, #3
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	e035      	b.n	8009e3a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8009dce:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dd4:	f3ef 8305 	mrs	r3, IPSR
 8009dd8:	613b      	str	r3, [r7, #16]
  return(result);
 8009dda:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d01f      	beq.n	8009e20 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009de4:	f107 0308 	add.w	r3, r7, #8
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	2300      	movs	r3, #0
 8009dec:	2201      	movs	r2, #1
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6978      	ldr	r0, [r7, #20]
 8009df2:	f002 fb51 	bl	800c498 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009df6:	f107 030c 	add.w	r3, r7, #12
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	9200      	str	r2, [sp, #0]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2100      	movs	r1, #0
 8009e02:	6978      	ldr	r0, [r7, #20]
 8009e04:	f002 fb48 	bl	800c498 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d015      	beq.n	8009e3a <osThreadFlagsSet+0x8e>
 8009e0e:	4b0d      	ldr	r3, [pc, #52]	; (8009e44 <osThreadFlagsSet+0x98>)
 8009e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	e00c      	b.n	8009e3a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009e20:	2300      	movs	r3, #0
 8009e22:	2201      	movs	r2, #1
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6978      	ldr	r0, [r7, #20]
 8009e28:	f002 fa7e 	bl	800c328 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009e2c:	f107 030c 	add.w	r3, r7, #12
 8009e30:	2200      	movs	r2, #0
 8009e32:	2100      	movs	r1, #0
 8009e34:	6978      	ldr	r0, [r7, #20]
 8009e36:	f002 fa77 	bl	800c328 <xTaskGenericNotify>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }
  /* Return flags after setting */
  return (rflags);
<<<<<<< HEAD
 80097d6:	68fb      	ldr	r3, [r7, #12]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3718      	adds	r7, #24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	e000ed04 	.word	0xe000ed04

080097e4 <osThreadFlagsWait>:
=======
 8009e3a:	68fb      	ldr	r3, [r7, #12]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3718      	adds	r7, #24
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	e000ed04 	.word	0xe000ed04

08009e48 <osThreadFlagsWait>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
<<<<<<< HEAD
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08c      	sub	sp, #48	; 0x30
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097f0:	f3ef 8305 	mrs	r3, IPSR
 80097f4:	617b      	str	r3, [r7, #20]
  return(result);
 80097f6:	697b      	ldr	r3, [r7, #20]
=======
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08c      	sub	sp, #48	; 0x30
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e54:	f3ef 8305 	mrs	r3, IPSR
 8009e58:	617b      	str	r3, [r7, #20]
  return(result);
 8009e5a:	697b      	ldr	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
<<<<<<< HEAD
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80097fc:	f06f 0305 	mvn.w	r3, #5
 8009800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009802:	e06b      	b.n	80098dc <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	da03      	bge.n	8009812 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800980a:	f06f 0303 	mvn.w	r3, #3
 800980e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009810:	e064      	b.n	80098dc <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009820:	e001      	b.n	8009826 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8009826:	2300      	movs	r3, #0
 8009828:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800982e:	f001 fd95 	bl	800b35c <xTaskGetTickCount>
 8009832:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009834:	f107 0210 	add.w	r2, r7, #16
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800983c:	2000      	movs	r0, #0
 800983e:	f002 faa7 	bl	800bd90 <xTaskNotifyWait>
 8009842:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d137      	bne.n	80098ba <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800984a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4013      	ands	r3, r2
 8009850:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009856:	4313      	orrs	r3, r2
 8009858:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00c      	beq.n	800987e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009868:	4013      	ands	r3, r2
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	429a      	cmp	r2, r3
 800986e:	d032      	beq.n	80098d6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10f      	bne.n	8009896 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009876:	f06f 0302 	mvn.w	r3, #2
 800987a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800987c:	e02e      	b.n	80098dc <osThreadFlagsWait+0xf8>
=======
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d003      	beq.n	8009e68 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009e60:	f06f 0305 	mvn.w	r3, #5
 8009e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e66:	e06b      	b.n	8009f40 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	da03      	bge.n	8009e76 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8009e6e:	f06f 0303 	mvn.w	r3, #3
 8009e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e74:	e064      	b.n	8009f40 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e84:	e001      	b.n	8009e8a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8009e92:	f001 fcd5 	bl	800b840 <xTaskGetTickCount>
 8009e96:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009e98:	f107 0210 	add.w	r2, r7, #16
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	f002 f9e7 	bl	800c274 <xTaskNotifyWait>
 8009ea6:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d137      	bne.n	8009f1e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8009eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00c      	beq.n	8009ee2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ecc:	4013      	ands	r3, r2
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d032      	beq.n	8009f3a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10f      	bne.n	8009efa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009eda:	f06f 0302 	mvn.w	r3, #2
 8009ede:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009ee0:	e02e      	b.n	8009f40 <osThreadFlagsWait+0xf8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
<<<<<<< HEAD
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009882:	4013      	ands	r3, r2
 8009884:	2b00      	cmp	r3, #0
 8009886:	d128      	bne.n	80098da <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d103      	bne.n	8009896 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800988e:	f06f 0302 	mvn.w	r3, #2
 8009892:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009894:	e022      	b.n	80098dc <osThreadFlagsWait+0xf8>
=======
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d128      	bne.n	8009f3e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d103      	bne.n	8009efa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009ef2:	f06f 0302 	mvn.w	r3, #2
 8009ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009ef8:	e022      	b.n	8009f40 <osThreadFlagsWait+0xf8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
<<<<<<< HEAD
 8009896:	f001 fd61 	bl	800b35c <xTaskGetTickCount>
 800989a:	4602      	mov	r2, r0
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d902      	bls.n	80098b0 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	627b      	str	r3, [r7, #36]	; 0x24
 80098ae:	e00e      	b.n	80098ce <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80098b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	627b      	str	r3, [r7, #36]	; 0x24
 80098b8:	e009      	b.n	80098ce <osThreadFlagsWait+0xea>
=======
 8009efa:	f001 fca1 	bl	800b840 <xTaskGetTickCount>
 8009efe:	4602      	mov	r2, r0
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8009f06:	69ba      	ldr	r2, [r7, #24]
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d902      	bls.n	8009f14 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	627b      	str	r3, [r7, #36]	; 0x24
 8009f12:	e00e      	b.n	8009f32 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8009f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f1c:	e009      	b.n	8009f32 <osThreadFlagsWait+0xea>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
      else {
        if (timeout == 0) {
<<<<<<< HEAD
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d103      	bne.n	80098c8 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80098c0:	f06f 0302 	mvn.w	r3, #2
 80098c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098c6:	e002      	b.n	80098ce <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80098c8:	f06f 0301 	mvn.w	r3, #1
 80098cc:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d103      	bne.n	8009f2c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8009f24:	f06f 0302 	mvn.w	r3, #2
 8009f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f2a:	e002      	b.n	8009f32 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009f2c:	f06f 0301 	mvn.w	r3, #1
 8009f30:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }
    while (rval != pdFAIL);
<<<<<<< HEAD
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1af      	bne.n	8009834 <osThreadFlagsWait+0x50>
 80098d4:	e002      	b.n	80098dc <osThreadFlagsWait+0xf8>
            break;
 80098d6:	bf00      	nop
 80098d8:	e000      	b.n	80098dc <osThreadFlagsWait+0xf8>
            break;
 80098da:	bf00      	nop
=======
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1af      	bne.n	8009e98 <osThreadFlagsWait+0x50>
 8009f38:	e002      	b.n	8009f40 <osThreadFlagsWait+0xf8>
            break;
 8009f3a:	bf00      	nop
 8009f3c:	e000      	b.n	8009f40 <osThreadFlagsWait+0xf8>
            break;
 8009f3e:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  }

  /* Return flags before clearing */
  return (rflags);
<<<<<<< HEAD
 80098dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3730      	adds	r7, #48	; 0x30
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098ee:	f3ef 8305 	mrs	r3, IPSR
 80098f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80098f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <osDelay+0x1c>
    stat = osErrorISR;
 80098fa:	f06f 0305 	mvn.w	r3, #5
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	e007      	b.n	8009912 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <osDelay+0x2c>
      vTaskDelay(ticks);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f001 fbdf 	bl	800b0d0 <vTaskDelay>
=======
 8009f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3730      	adds	r7, #48	; 0x30
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f52:	f3ef 8305 	mrs	r3, IPSR
 8009f56:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <osDelay+0x1c>
    stat = osErrorISR;
 8009f5e:	f06f 0305 	mvn.w	r3, #5
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	e007      	b.n	8009f76 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d002      	beq.n	8009f76 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 fb1f 	bl	800b5b4 <vTaskDelay>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
  }

  return (stat);
<<<<<<< HEAD
 8009912:	68fb      	ldr	r3, [r7, #12]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f003 f85d 	bl	800c9e4 <pvTimerGetTimerID>
 800992a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d005      	beq.n	800993e <TimerCallback+0x22>
    callb->func (callb->arg);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	6852      	ldr	r2, [r2, #4]
 800993a:	4610      	mov	r0, r2
 800993c:	4798      	blx	r3
  }
}
 800993e:	bf00      	nop
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009948:	b580      	push	{r7, lr}
 800994a:	b08c      	sub	sp, #48	; 0x30
 800994c:	af02      	add	r7, sp, #8
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	607a      	str	r2, [r7, #4]
 8009952:	603b      	str	r3, [r7, #0]
 8009954:	460b      	mov	r3, r1
 8009956:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009958:	2300      	movs	r3, #0
 800995a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800995c:	f3ef 8305 	mrs	r3, IPSR
 8009960:	613b      	str	r3, [r7, #16]
  return(result);
 8009962:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009964:	2b00      	cmp	r3, #0
 8009966:	d163      	bne.n	8009a30 <osTimerNew+0xe8>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d060      	beq.n	8009a30 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800996e:	2008      	movs	r0, #8
 8009970:	f003 faaa 	bl	800cec8 <pvPortMalloc>
 8009974:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d059      	beq.n	8009a30 <osTimerNew+0xe8>
      callb->func = func;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d102      	bne.n	8009994 <osTimerNew+0x4c>
        reload = pdFALSE;
 800998e:	2300      	movs	r3, #0
 8009990:	61fb      	str	r3, [r7, #28]
 8009992:	e001      	b.n	8009998 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009994:	2301      	movs	r3, #1
 8009996:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009998:	f04f 33ff 	mov.w	r3, #4294967295
 800999c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800999e:	2300      	movs	r3, #0
 80099a0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d01c      	beq.n	80099e2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <osTimerNew+0x6e>
          name = attr->name;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d006      	beq.n	80099cc <osTimerNew+0x84>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	2b2b      	cmp	r3, #43	; 0x2b
 80099c4:	d902      	bls.n	80099cc <osTimerNew+0x84>
          mem = 1;
 80099c6:	2301      	movs	r3, #1
 80099c8:	61bb      	str	r3, [r7, #24]
 80099ca:	e00c      	b.n	80099e6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d108      	bne.n	80099e6 <osTimerNew+0x9e>
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d104      	bne.n	80099e6 <osTimerNew+0x9e>
            mem = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	61bb      	str	r3, [r7, #24]
 80099e0:	e001      	b.n	80099e6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d10c      	bne.n	8009a06 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	4b12      	ldr	r3, [pc, #72]	; (8009a3c <osTimerNew+0xf4>)
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	2101      	movs	r1, #1
 80099fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099fe:	f002 fc72 	bl	800c2e6 <xTimerCreateStatic>
 8009a02:	6238      	str	r0, [r7, #32]
 8009a04:	e00b      	b.n	8009a1e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d108      	bne.n	8009a1e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009a0c:	4b0b      	ldr	r3, [pc, #44]	; (8009a3c <osTimerNew+0xf4>)
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	69fa      	ldr	r2, [r7, #28]
 8009a14:	2101      	movs	r1, #1
 8009a16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a18:	f002 fc44 	bl	800c2a4 <xTimerCreate>
 8009a1c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d105      	bne.n	8009a30 <osTimerNew+0xe8>
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <osTimerNew+0xe8>
        vPortFree (callb);
 8009a2a:	6978      	ldr	r0, [r7, #20]
 8009a2c:	f003 fb18 	bl	800d060 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009a30:	6a3b      	ldr	r3, [r7, #32]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3728      	adds	r7, #40	; 0x28
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	0800991d 	.word	0x0800991d

08009a40 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af02      	add	r7, sp, #8
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a4e:	f3ef 8305 	mrs	r3, IPSR
 8009a52:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a54:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <osTimerStart+0x22>
    stat = osErrorISR;
 8009a5a:	f06f 0305 	mvn.w	r3, #5
 8009a5e:	617b      	str	r3, [r7, #20]
 8009a60:	e017      	b.n	8009a92 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d103      	bne.n	8009a70 <osTimerStart+0x30>
    stat = osErrorParameter;
 8009a68:	f06f 0303 	mvn.w	r3, #3
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	e010      	b.n	8009a92 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009a70:	2300      	movs	r3, #0
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	2300      	movs	r3, #0
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	2104      	movs	r1, #4
 8009a7a:	6938      	ldr	r0, [r7, #16]
 8009a7c:	f002 fcac 	bl	800c3d8 <xTimerGenericCommand>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d102      	bne.n	8009a8c <osTimerStart+0x4c>
      stat = osOK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	e002      	b.n	8009a92 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009a8c:	f06f 0302 	mvn.w	r3, #2
 8009a90:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009a92:	697b      	ldr	r3, [r7, #20]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <osEventFlagsNew>:
=======
 8009f76:	68fb      	ldr	r3, [r7, #12]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <osEventFlagsNew>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
<<<<<<< HEAD
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
=======
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
<<<<<<< HEAD
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aa8:	f3ef 8305 	mrs	r3, IPSR
 8009aac:	60fb      	str	r3, [r7, #12]
  return(result);
 8009aae:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d12d      	bne.n	8009b10 <osEventFlagsNew+0x74>
    mem = -1;
 8009ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d015      	beq.n	8009aec <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d006      	beq.n	8009ad6 <osEventFlagsNew+0x3a>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	2b1f      	cmp	r3, #31
 8009ace:	d902      	bls.n	8009ad6 <osEventFlagsNew+0x3a>
        mem = 1;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	613b      	str	r3, [r7, #16]
 8009ad4:	e00c      	b.n	8009af0 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d108      	bne.n	8009af0 <osEventFlagsNew+0x54>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d104      	bne.n	8009af0 <osEventFlagsNew+0x54>
          mem = 0;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	613b      	str	r3, [r7, #16]
 8009aea:	e001      	b.n	8009af0 <osEventFlagsNew+0x54>
=======
 8009f88:	2300      	movs	r3, #0
 8009f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f8c:	f3ef 8305 	mrs	r3, IPSR
 8009f90:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f92:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d12d      	bne.n	8009ff4 <osEventFlagsNew+0x74>
    mem = -1;
 8009f98:	f04f 33ff 	mov.w	r3, #4294967295
 8009f9c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d015      	beq.n	8009fd0 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d006      	beq.n	8009fba <osEventFlagsNew+0x3a>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	2b1f      	cmp	r3, #31
 8009fb2:	d902      	bls.n	8009fba <osEventFlagsNew+0x3a>
        mem = 1;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	613b      	str	r3, [r7, #16]
 8009fb8:	e00c      	b.n	8009fd4 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d108      	bne.n	8009fd4 <osEventFlagsNew+0x54>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d104      	bne.n	8009fd4 <osEventFlagsNew+0x54>
          mem = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	613b      	str	r3, [r7, #16]
 8009fce:	e001      	b.n	8009fd4 <osEventFlagsNew+0x54>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8009aec:	2300      	movs	r3, #0
 8009aee:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d106      	bne.n	8009b04 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 f93e 	bl	8009d7c <xEventGroupCreateStatic>
 8009b00:	6178      	str	r0, [r7, #20]
 8009b02:	e005      	b.n	8009b10 <osEventFlagsNew+0x74>
=======
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d106      	bne.n	8009fe8 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 f93e 	bl	800a260 <xEventGroupCreateStatic>
 8009fe4:	6178      	str	r0, [r7, #20]
 8009fe6:	e005      	b.n	8009ff4 <osEventFlagsNew+0x74>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< HEAD
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d102      	bne.n	8009b10 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009b0a:	f000 f96e 	bl	8009dea <xEventGroupCreate>
 8009b0e:	6178      	str	r0, [r7, #20]
=======
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d102      	bne.n	8009ff4 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009fee:	f000 f96e 	bl	800a2ce <xEventGroupCreate>
 8009ff2:	6178      	str	r0, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
<<<<<<< HEAD
 8009b10:	697b      	ldr	r3, [r7, #20]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <osSemaphoreNew>:
=======
 8009ff4:	697b      	ldr	r3, [r7, #20]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <osSemaphoreNew>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
<<<<<<< HEAD
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b08a      	sub	sp, #40	; 0x28
 8009b1e:	af02      	add	r7, sp, #8
 8009b20:	60f8      	str	r0, [r7, #12]
 8009b22:	60b9      	str	r1, [r7, #8]
 8009b24:	607a      	str	r2, [r7, #4]
=======
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b08a      	sub	sp, #40	; 0x28
 800a002:	af02      	add	r7, sp, #8
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	607a      	str	r2, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
<<<<<<< HEAD
 8009b26:	2300      	movs	r3, #0
 8009b28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b2a:	f3ef 8305 	mrs	r3, IPSR
 8009b2e:	613b      	str	r3, [r7, #16]
  return(result);
 8009b30:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d175      	bne.n	8009c22 <osSemaphoreNew+0x108>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d072      	beq.n	8009c22 <osSemaphoreNew+0x108>
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d86e      	bhi.n	8009c22 <osSemaphoreNew+0x108>
    mem = -1;
 8009b44:	f04f 33ff 	mov.w	r3, #4294967295
 8009b48:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d015      	beq.n	8009b7c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d006      	beq.n	8009b66 <osSemaphoreNew+0x4c>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	2b4f      	cmp	r3, #79	; 0x4f
 8009b5e:	d902      	bls.n	8009b66 <osSemaphoreNew+0x4c>
        mem = 1;
 8009b60:	2301      	movs	r3, #1
 8009b62:	61bb      	str	r3, [r7, #24]
 8009b64:	e00c      	b.n	8009b80 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d108      	bne.n	8009b80 <osSemaphoreNew+0x66>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d104      	bne.n	8009b80 <osSemaphoreNew+0x66>
          mem = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	e001      	b.n	8009b80 <osSemaphoreNew+0x66>
=======
 800a00a:	2300      	movs	r3, #0
 800a00c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a00e:	f3ef 8305 	mrs	r3, IPSR
 800a012:	613b      	str	r3, [r7, #16]
  return(result);
 800a014:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a016:	2b00      	cmp	r3, #0
 800a018:	d175      	bne.n	800a106 <osSemaphoreNew+0x108>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d072      	beq.n	800a106 <osSemaphoreNew+0x108>
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	429a      	cmp	r2, r3
 800a026:	d86e      	bhi.n	800a106 <osSemaphoreNew+0x108>
    mem = -1;
 800a028:	f04f 33ff 	mov.w	r3, #4294967295
 800a02c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d015      	beq.n	800a060 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d006      	beq.n	800a04a <osSemaphoreNew+0x4c>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	2b4f      	cmp	r3, #79	; 0x4f
 800a042:	d902      	bls.n	800a04a <osSemaphoreNew+0x4c>
        mem = 1;
 800a044:	2301      	movs	r3, #1
 800a046:	61bb      	str	r3, [r7, #24]
 800a048:	e00c      	b.n	800a064 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d108      	bne.n	800a064 <osSemaphoreNew+0x66>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d104      	bne.n	800a064 <osSemaphoreNew+0x66>
          mem = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	61bb      	str	r3, [r7, #24]
 800a05e:	e001      	b.n	800a064 <osSemaphoreNew+0x66>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b86:	d04c      	beq.n	8009c22 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d128      	bne.n	8009be0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d10a      	bne.n	8009baa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	2203      	movs	r2, #3
 8009b9a:	9200      	str	r2, [sp, #0]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	2001      	movs	r0, #1
 8009ba2:	f000 fa59 	bl	800a058 <xQueueGenericCreateStatic>
 8009ba6:	61f8      	str	r0, [r7, #28]
 8009ba8:	e005      	b.n	8009bb6 <osSemaphoreNew+0x9c>
=======
 800a060:	2300      	movs	r3, #0
 800a062:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a06a:	d04c      	beq.n	800a106 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d128      	bne.n	800a0c4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d10a      	bne.n	800a08e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	2203      	movs	r2, #3
 800a07e:	9200      	str	r2, [sp, #0]
 800a080:	2200      	movs	r2, #0
 800a082:	2100      	movs	r1, #0
 800a084:	2001      	movs	r0, #1
 800a086:	f000 fa59 	bl	800a53c <xQueueGenericCreateStatic>
 800a08a:	61f8      	str	r0, [r7, #28]
 800a08c:	e005      	b.n	800a09a <osSemaphoreNew+0x9c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
<<<<<<< HEAD
 8009baa:	2203      	movs	r2, #3
 8009bac:	2100      	movs	r1, #0
 8009bae:	2001      	movs	r0, #1
 8009bb0:	f000 faca 	bl	800a148 <xQueueGenericCreate>
 8009bb4:	61f8      	str	r0, [r7, #28]
=======
 800a08e:	2203      	movs	r2, #3
 800a090:	2100      	movs	r1, #0
 800a092:	2001      	movs	r0, #1
 800a094:	f000 faca 	bl	800a62c <xQueueGenericCreate>
 800a098:	61f8      	str	r0, [r7, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
<<<<<<< HEAD
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d022      	beq.n	8009c02 <osSemaphoreNew+0xe8>
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d01f      	beq.n	8009c02 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	69f8      	ldr	r0, [r7, #28]
 8009bca:	f000 fb85 	bl	800a2d8 <xQueueGenericSend>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d016      	beq.n	8009c02 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009bd4:	69f8      	ldr	r0, [r7, #28]
 8009bd6:	f000 ff05 	bl	800a9e4 <vQueueDelete>
            hSemaphore = NULL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61fb      	str	r3, [r7, #28]
 8009bde:	e010      	b.n	8009c02 <osSemaphoreNew+0xe8>
=======
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d022      	beq.n	800a0e6 <osSemaphoreNew+0xe8>
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d01f      	beq.n	800a0e6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	69f8      	ldr	r0, [r7, #28]
 800a0ae:	f000 fb85 	bl	800a7bc <xQueueGenericSend>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d016      	beq.n	800a0e6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a0b8:	69f8      	ldr	r0, [r7, #28]
 800a0ba:	f000 ff05 	bl	800aec8 <vQueueDelete>
            hSemaphore = NULL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	61fb      	str	r3, [r7, #28]
 800a0c2:	e010      	b.n	800a0e6 <osSemaphoreNew+0xe8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }
        }
      }
      else {
        if (mem == 1) {
<<<<<<< HEAD
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d108      	bne.n	8009bf8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	461a      	mov	r2, r3
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 fb07 	bl	800a202 <xQueueCreateCountingSemaphoreStatic>
 8009bf4:	61f8      	str	r0, [r7, #28]
 8009bf6:	e004      	b.n	8009c02 <osSemaphoreNew+0xe8>
=======
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d108      	bne.n	800a0dc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	68b9      	ldr	r1, [r7, #8]
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f000 fb07 	bl	800a6e6 <xQueueCreateCountingSemaphoreStatic>
 800a0d8:	61f8      	str	r0, [r7, #28]
 800a0da:	e004      	b.n	800a0e6 <osSemaphoreNew+0xe8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
<<<<<<< HEAD
 8009bf8:	68b9      	ldr	r1, [r7, #8]
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f000 fb38 	bl	800a270 <xQueueCreateCountingSemaphore>
 8009c00:	61f8      	str	r0, [r7, #28]
=======
 800a0dc:	68b9      	ldr	r1, [r7, #8]
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 fb38 	bl	800a754 <xQueueCreateCountingSemaphore>
 800a0e4:	61f8      	str	r0, [r7, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
<<<<<<< HEAD
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00c      	beq.n	8009c22 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	617b      	str	r3, [r7, #20]
 8009c14:	e001      	b.n	8009c1a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009c1a:	6979      	ldr	r1, [r7, #20]
 8009c1c:	69f8      	ldr	r0, [r7, #28]
 8009c1e:	f001 f82d 	bl	800ac7c <vQueueAddToRegistry>
=======
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00c      	beq.n	800a106 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d003      	beq.n	800a0fa <osSemaphoreNew+0xfc>
          name = attr->name;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	617b      	str	r3, [r7, #20]
 800a0f8:	e001      	b.n	800a0fe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a0fe:	6979      	ldr	r1, [r7, #20]
 800a100:	69f8      	ldr	r0, [r7, #28]
 800a102:	f001 f82d 	bl	800b160 <vQueueAddToRegistry>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
<<<<<<< HEAD
 8009c22:	69fb      	ldr	r3, [r7, #28]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3720      	adds	r7, #32
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <osMessageQueueNew>:
=======
 800a106:	69fb      	ldr	r3, [r7, #28]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3720      	adds	r7, #32
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <osMessageQueueNew>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
<<<<<<< HEAD
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08a      	sub	sp, #40	; 0x28
 8009c30:	af02      	add	r7, sp, #8
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
=======
 800a110:	b580      	push	{r7, lr}
 800a112:	b08a      	sub	sp, #40	; 0x28
 800a114:	af02      	add	r7, sp, #8
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
<<<<<<< HEAD
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c3c:	f3ef 8305 	mrs	r3, IPSR
 8009c40:	613b      	str	r3, [r7, #16]
  return(result);
 8009c42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d15f      	bne.n	8009d08 <osMessageQueueNew+0xdc>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d05c      	beq.n	8009d08 <osMessageQueueNew+0xdc>
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d059      	beq.n	8009d08 <osMessageQueueNew+0xdc>
    mem = -1;
 8009c54:	f04f 33ff 	mov.w	r3, #4294967295
 8009c58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d029      	beq.n	8009cb4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d012      	beq.n	8009c8e <osMessageQueueNew+0x62>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	2b4f      	cmp	r3, #79	; 0x4f
 8009c6e:	d90e      	bls.n	8009c8e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00a      	beq.n	8009c8e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	695a      	ldr	r2, [r3, #20]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	68b9      	ldr	r1, [r7, #8]
 8009c80:	fb01 f303 	mul.w	r3, r1, r3
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d302      	bcc.n	8009c8e <osMessageQueueNew+0x62>
        mem = 1;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	61bb      	str	r3, [r7, #24]
 8009c8c:	e014      	b.n	8009cb8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d110      	bne.n	8009cb8 <osMessageQueueNew+0x8c>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10c      	bne.n	8009cb8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d108      	bne.n	8009cb8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d104      	bne.n	8009cb8 <osMessageQueueNew+0x8c>
          mem = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	61bb      	str	r3, [r7, #24]
 8009cb2:	e001      	b.n	8009cb8 <osMessageQueueNew+0x8c>
=======
 800a11c:	2300      	movs	r3, #0
 800a11e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a120:	f3ef 8305 	mrs	r3, IPSR
 800a124:	613b      	str	r3, [r7, #16]
  return(result);
 800a126:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d15f      	bne.n	800a1ec <osMessageQueueNew+0xdc>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d05c      	beq.n	800a1ec <osMessageQueueNew+0xdc>
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d059      	beq.n	800a1ec <osMessageQueueNew+0xdc>
    mem = -1;
 800a138:	f04f 33ff 	mov.w	r3, #4294967295
 800a13c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d029      	beq.n	800a198 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d012      	beq.n	800a172 <osMessageQueueNew+0x62>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	2b4f      	cmp	r3, #79	; 0x4f
 800a152:	d90e      	bls.n	800a172 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00a      	beq.n	800a172 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	695a      	ldr	r2, [r3, #20]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	fb01 f303 	mul.w	r3, r1, r3
 800a168:	429a      	cmp	r2, r3
 800a16a:	d302      	bcc.n	800a172 <osMessageQueueNew+0x62>
        mem = 1;
 800a16c:	2301      	movs	r3, #1
 800a16e:	61bb      	str	r3, [r7, #24]
 800a170:	e014      	b.n	800a19c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d110      	bne.n	800a19c <osMessageQueueNew+0x8c>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10c      	bne.n	800a19c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a186:	2b00      	cmp	r3, #0
 800a188:	d108      	bne.n	800a19c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d104      	bne.n	800a19c <osMessageQueueNew+0x8c>
          mem = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	61bb      	str	r3, [r7, #24]
 800a196:	e001      	b.n	800a19c <osMessageQueueNew+0x8c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d10b      	bne.n	8009cd6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	691a      	ldr	r2, [r3, #16]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	9100      	str	r1, [sp, #0]
 8009cca:	68b9      	ldr	r1, [r7, #8]
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f000 f9c3 	bl	800a058 <xQueueGenericCreateStatic>
 8009cd2:	61f8      	str	r0, [r7, #28]
 8009cd4:	e008      	b.n	8009ce8 <osMessageQueueNew+0xbc>
=======
 800a198:	2300      	movs	r3, #0
 800a19a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d10b      	bne.n	800a1ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	691a      	ldr	r2, [r3, #16]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	9100      	str	r1, [sp, #0]
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 f9c3 	bl	800a53c <xQueueGenericCreateStatic>
 800a1b6:	61f8      	str	r0, [r7, #28]
 800a1b8:	e008      	b.n	800a1cc <osMessageQueueNew+0xbc>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< HEAD
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d105      	bne.n	8009ce8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009cdc:	2200      	movs	r2, #0
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 fa31 	bl	800a148 <xQueueGenericCreate>
 8009ce6:	61f8      	str	r0, [r7, #28]
=======
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d105      	bne.n	800a1cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	68b9      	ldr	r1, [r7, #8]
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f000 fa31 	bl	800a62c <xQueueGenericCreate>
 800a1ca:	61f8      	str	r0, [r7, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
<<<<<<< HEAD
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00c      	beq.n	8009d08 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d003      	beq.n	8009cfc <osMessageQueueNew+0xd0>
        name = attr->name;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	e001      	b.n	8009d00 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009d00:	6979      	ldr	r1, [r7, #20]
 8009d02:	69f8      	ldr	r0, [r7, #28]
 8009d04:	f000 ffba 	bl	800ac7c <vQueueAddToRegistry>
=======
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00c      	beq.n	800a1ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d003      	beq.n	800a1e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	617b      	str	r3, [r7, #20]
 800a1de:	e001      	b.n	800a1e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a1e4:	6979      	ldr	r1, [r7, #20]
 800a1e6:	69f8      	ldr	r0, [r7, #28]
 800a1e8:	f000 ffba 	bl	800b160 <vQueueAddToRegistry>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
<<<<<<< HEAD
 8009d08:	69fb      	ldr	r3, [r7, #28]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3720      	adds	r7, #32
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <vApplicationGetIdleTaskMemory>:
=======
 800a1ec:	69fb      	ldr	r3, [r7, #28]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3720      	adds	r7, #32
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <vApplicationGetIdleTaskMemory>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< HEAD
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
=======
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
<<<<<<< HEAD
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4a07      	ldr	r2, [pc, #28]	; (8009d40 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	4a06      	ldr	r2, [pc, #24]	; (8009d44 <vApplicationGetIdleTaskMemory+0x30>)
 8009d2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2280      	movs	r2, #128	; 0x80
 8009d30:	601a      	str	r2, [r3, #0]
}
 8009d32:	bf00      	nop
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	200007d0 	.word	0x200007d0
 8009d44:	2000082c 	.word	0x2000082c

08009d48 <vApplicationGetTimerTaskMemory>:
=======
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4a07      	ldr	r2, [pc, #28]	; (800a224 <vApplicationGetIdleTaskMemory+0x2c>)
 800a208:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	4a06      	ldr	r2, [pc, #24]	; (800a228 <vApplicationGetIdleTaskMemory+0x30>)
 800a20e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2280      	movs	r2, #128	; 0x80
 800a214:	601a      	str	r2, [r3, #0]
}
 800a216:	bf00      	nop
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	200007b8 	.word	0x200007b8
 800a228:	20000814 	.word	0x20000814

0800a22c <vApplicationGetTimerTaskMemory>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< HEAD
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
=======
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
<<<<<<< HEAD
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4a07      	ldr	r2, [pc, #28]	; (8009d74 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	4a06      	ldr	r2, [pc, #24]	; (8009d78 <vApplicationGetTimerTaskMemory+0x30>)
 8009d5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d66:	601a      	str	r2, [r3, #0]
}
 8009d68:	bf00      	nop
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	20000a2c 	.word	0x20000a2c
 8009d78:	20000a88 	.word	0x20000a88

08009d7c <xEventGroupCreateStatic>:
=======
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4a07      	ldr	r2, [pc, #28]	; (800a258 <vApplicationGetTimerTaskMemory+0x2c>)
 800a23c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	4a06      	ldr	r2, [pc, #24]	; (800a25c <vApplicationGetTimerTaskMemory+0x30>)
 800a242:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a24a:	601a      	str	r2, [r3, #0]
}
 800a24c:	bf00      	nop
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	20000a14 	.word	0x20000a14
 800a25c:	20000a70 	.word	0x20000a70

0800a260 <xEventGroupCreateStatic>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
<<<<<<< HEAD
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
=======
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
<<<<<<< HEAD
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <xEventGroupCreateStatic+0x24>
=======
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10a      	bne.n	800a284 <xEventGroupCreateStatic+0x24>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	613b      	str	r3, [r7, #16]
=======
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	613b      	str	r3, [r7, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< HEAD
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <xEventGroupCreateStatic+0x22>
=======
 800a280:	bf00      	nop
 800a282:	e7fe      	b.n	800a282 <xEventGroupCreateStatic+0x22>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
<<<<<<< HEAD
 8009da0:	2320      	movs	r3, #32
 8009da2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	d00a      	beq.n	8009dc0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	60fb      	str	r3, [r7, #12]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <xEventGroupCreateStatic+0x42>
=======
 800a284:	2320      	movs	r3, #32
 800a286:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	2b20      	cmp	r3, #32
 800a28c:	d00a      	beq.n	800a2a4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	60fb      	str	r3, [r7, #12]
}
 800a2a0:	bf00      	nop
 800a2a2:	e7fe      	b.n	800a2a2 <xEventGroupCreateStatic+0x42>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
<<<<<<< HEAD
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00a      	beq.n	8009de0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 f822 	bl	8009e1e <vListInitialise>
=======
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00a      	beq.n	800a2c4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 f822 	bl	800a302 <vListInitialise>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	771a      	strb	r2, [r3, #28]
=======
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
<<<<<<< HEAD
 8009de0:	697b      	ldr	r3, [r7, #20]
	}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <xEventGroupCreate>:
=======
 800a2c4:	697b      	ldr	r3, [r7, #20]
	}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <xEventGroupCreate>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
<<<<<<< HEAD
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b082      	sub	sp, #8
 8009dee:	af00      	add	r7, sp, #0
=======
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b082      	sub	sp, #8
 800a2d2:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< HEAD
 8009df0:	2020      	movs	r0, #32
 8009df2:	f003 f869 	bl	800cec8 <pvPortMalloc>
 8009df6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3304      	adds	r3, #4
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 f808 	bl	8009e1e <vListInitialise>
=======
 800a2d4:	2020      	movs	r0, #32
 800a2d6:	f003 f807 	bl	800d2e8 <pvPortMalloc>
 800a2da:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00a      	beq.n	800a2f8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f000 f808 	bl	800a302 <vListInitialise>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
<<<<<<< HEAD
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	771a      	strb	r2, [r3, #28]
=======
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
<<<<<<< HEAD
 8009e14:	687b      	ldr	r3, [r7, #4]
	}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <vListInitialise>:
=======
 800a2f8:	687b      	ldr	r3, [r7, #4]
	}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <vListInitialise>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
=======
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f103 0208 	add.w	r2, r3, #8
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	605a      	str	r2, [r3, #4]
=======
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f103 0208 	add.w	r2, r3, #8
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f04f 32ff 	mov.w	r2, #4294967295
 8009e36:	609a      	str	r2, [r3, #8]
=======
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f04f 32ff 	mov.w	r2, #4294967295
 800a31a:	609a      	str	r2, [r3, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f103 0208 	add.w	r2, r3, #8
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f103 0208 	add.w	r2, r3, #8
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
=======
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f103 0208 	add.w	r2, r3, #8
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f103 0208 	add.w	r2, r3, #8
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 8009e52:	bf00      	nop
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <vListInitialiseItem>:
=======
 800a336:	bf00      	nop
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <vListInitialiseItem>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	611a      	str	r2, [r3, #16]
=======
 800a342:	b480      	push	{r7}
 800a344:	b083      	sub	sp, #12
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	611a      	str	r2, [r3, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <vListInsertEnd>:
=======
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <vListInsertEnd>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	60fb      	str	r3, [r7, #12]
=======
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	689a      	ldr	r2, [r3, #8]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	609a      	str	r2, [r3, #8]
=======
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	609a      	str	r2, [r3, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	601a      	str	r2, [r3, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <vListInsert>:
=======
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	683a      	ldr	r2, [r7, #0]
 800a386:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	601a      	str	r2, [r3, #0]
}
 800a398:	bf00      	nop
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <vListInsert>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	60bb      	str	r3, [r7, #8]
=======
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed6:	d103      	bne.n	8009ee0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	60fb      	str	r3, [r7, #12]
 8009ede:	e00c      	b.n	8009efa <vListInsert+0x3a>
=======
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ba:	d103      	bne.n	800a3c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	60fb      	str	r3, [r7, #12]
 800a3c2:	e00c      	b.n	800a3de <vListInsert+0x3a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	e002      	b.n	8009eee <vListInsert+0x2e>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	60fb      	str	r3, [r7, #12]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d2f6      	bcs.n	8009ee8 <vListInsert+0x28>
=======
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	e002      	b.n	800a3d2 <vListInsert+0x2e>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	60fb      	str	r3, [r7, #12]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d2f6      	bcs.n	800a3cc <vListInsert+0x28>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	605a      	str	r2, [r3, #4]
=======
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	601a      	str	r2, [r3, #0]
}
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <uxListRemove>:
=======
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	1c5a      	adds	r2, r3, #1
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	601a      	str	r2, [r3, #0]
}
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <uxListRemove>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 8009f32:	b480      	push	{r7}
 8009f34:	b085      	sub	sp, #20
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	6892      	ldr	r2, [r2, #8]
 8009f48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	6852      	ldr	r2, [r2, #4]
 8009f52:	605a      	str	r2, [r3, #4]
=======
 800a416:	b480      	push	{r7}
 800a418:	b085      	sub	sp, #20
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	6892      	ldr	r2, [r2, #8]
 800a42c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6852      	ldr	r2, [r2, #4]
 800a436:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d103      	bne.n	8009f66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	689a      	ldr	r2, [r3, #8]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	605a      	str	r2, [r3, #4]
=======
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d103      	bne.n	800a44a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	1e5a      	subs	r2, r3, #1
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
	...

08009f88 <xQueueGenericReset>:
=======
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	1e5a      	subs	r2, r3, #1
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
	...

0800a46c <xQueueGenericReset>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xQueueGenericReset+0x2a>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	60bb      	str	r3, [r7, #8]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fb2:	f002 fe67 	bl	800cc84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fbe:	68f9      	ldr	r1, [r7, #12]
 8009fc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fc2:	fb01 f303 	mul.w	r3, r1, r3
 8009fc6:	441a      	add	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	68f9      	ldr	r1, [r7, #12]
 8009fe6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fe8:	fb01 f303 	mul.w	r3, r1, r3
 8009fec:	441a      	add	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	22ff      	movs	r2, #255	; 0xff
 8009ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	22ff      	movs	r2, #255	; 0xff
 8009ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d114      	bne.n	800a032 <xQueueGenericReset+0xaa>
=======
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <xQueueGenericReset+0x2a>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60bb      	str	r3, [r7, #8]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a496:	f002 fe05 	bl	800d0a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a2:	68f9      	ldr	r1, [r7, #12]
 800a4a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4a6:	fb01 f303 	mul.w	r3, r1, r3
 800a4aa:	441a      	add	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	68f9      	ldr	r1, [r7, #12]
 800a4ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4cc:	fb01 f303 	mul.w	r3, r1, r3
 800a4d0:	441a      	add	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	22ff      	movs	r2, #255	; 0xff
 800a4da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	22ff      	movs	r2, #255	; 0xff
 800a4e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d114      	bne.n	800a516 <xQueueGenericReset+0xaa>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01a      	beq.n	800a046 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3310      	adds	r3, #16
 800a014:	4618      	mov	r0, r3
 800a016:	f001 fb2b 	bl	800b670 <xTaskRemoveFromEventList>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d012      	beq.n	800a046 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a020:	4b0c      	ldr	r3, [pc, #48]	; (800a054 <xQueueGenericReset+0xcc>)
 800a022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	e009      	b.n	800a046 <xQueueGenericReset+0xbe>
=======
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d01a      	beq.n	800a52a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	3310      	adds	r3, #16
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f001 fb2b 	bl	800bb54 <xTaskRemoveFromEventList>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d012      	beq.n	800a52a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a504:	4b0c      	ldr	r3, [pc, #48]	; (800a538 <xQueueGenericReset+0xcc>)
 800a506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	e009      	b.n	800a52a <xQueueGenericReset+0xbe>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3310      	adds	r3, #16
 800a036:	4618      	mov	r0, r3
 800a038:	f7ff fef1 	bl	8009e1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3324      	adds	r3, #36	; 0x24
 800a040:	4618      	mov	r0, r3
 800a042:	f7ff feec 	bl	8009e1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a046:	f002 fe4d 	bl	800cce4 <vPortExitCritical>
=======
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3310      	adds	r3, #16
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7ff fef1 	bl	800a302 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	3324      	adds	r3, #36	; 0x24
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff feec 	bl	800a302 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a52a:	f002 fdeb 	bl	800d104 <vPortExitCritical>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 800a04a:	2301      	movs	r3, #1
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	e000ed04 	.word	0xe000ed04

0800a058 <xQueueGenericCreateStatic>:
=======
 800a52e:	2301      	movs	r3, #1
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	e000ed04 	.word	0xe000ed04

0800a53c <xQueueGenericCreateStatic>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08e      	sub	sp, #56	; 0x38
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a07e:	bf00      	nop
 800a080:	e7fe      	b.n	800a080 <xQueueGenericCreateStatic+0x28>
=======
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08e      	sub	sp, #56	; 0x38
 800a540:	af02      	add	r7, sp, #8
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10a      	bne.n	800a566 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a562:	bf00      	nop
 800a564:	e7fe      	b.n	800a564 <xQueueGenericCreateStatic+0x28>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10a      	bne.n	800a09e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <xQueueGenericCreateStatic+0x44>
=======
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <xQueueGenericCreateStatic+0x44>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <xQueueGenericCreateStatic+0x52>
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <xQueueGenericCreateStatic+0x56>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <xQueueGenericCreateStatic+0x58>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	623b      	str	r3, [r7, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d102      	bne.n	800a0d6 <xQueueGenericCreateStatic+0x7e>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <xQueueGenericCreateStatic+0x82>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e000      	b.n	800a0dc <xQueueGenericCreateStatic+0x84>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	61fb      	str	r3, [r7, #28]
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xQueueGenericCreateStatic+0x9c>
=======
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <xQueueGenericCreateStatic+0x52>
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <xQueueGenericCreateStatic+0x56>
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <xQueueGenericCreateStatic+0x58>
 800a592:	2300      	movs	r3, #0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10a      	bne.n	800a5ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59c:	f383 8811 	msr	BASEPRI, r3
 800a5a0:	f3bf 8f6f 	isb	sy
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	623b      	str	r3, [r7, #32]
}
 800a5aa:	bf00      	nop
 800a5ac:	e7fe      	b.n	800a5ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d102      	bne.n	800a5ba <xQueueGenericCreateStatic+0x7e>
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d101      	bne.n	800a5be <xQueueGenericCreateStatic+0x82>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e000      	b.n	800a5c0 <xQueueGenericCreateStatic+0x84>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10a      	bne.n	800a5da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	61fb      	str	r3, [r7, #28]
}
 800a5d6:	bf00      	nop
 800a5d8:	e7fe      	b.n	800a5d8 <xQueueGenericCreateStatic+0x9c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 800a0f6:	2350      	movs	r3, #80	; 0x50
 800a0f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b50      	cmp	r3, #80	; 0x50
 800a0fe:	d00a      	beq.n	800a116 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	61bb      	str	r3, [r7, #24]
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a116:	697b      	ldr	r3, [r7, #20]
=======
 800a5da:	2350      	movs	r3, #80	; 0x50
 800a5dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2b50      	cmp	r3, #80	; 0x50
 800a5e2:	d00a      	beq.n	800a5fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	61bb      	str	r3, [r7, #24]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a5fa:	697b      	ldr	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00d      	beq.n	800a13e <xQueueGenericCreateStatic+0xe6>
=======
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00d      	beq.n	800a622 <xQueueGenericCreateStatic+0xe6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 800a122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	2201      	movs	r2, #1
 800a60a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 800a12a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	4613      	mov	r3, r2
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	68b9      	ldr	r1, [r7, #8]
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 f83f 	bl	800a1bc <prvInitialiseNewQueue>
=======
 800a60e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	4613      	mov	r3, r2
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	68b9      	ldr	r1, [r7, #8]
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f000 f83f 	bl	800a6a0 <prvInitialiseNewQueue>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a140:	4618      	mov	r0, r3
 800a142:	3730      	adds	r7, #48	; 0x30
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <xQueueGenericCreate>:
=======
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a624:	4618      	mov	r0, r3
 800a626:	3730      	adds	r7, #48	; 0x30
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <xQueueGenericCreate>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 800a148:	b580      	push	{r7, lr}
 800a14a:	b08a      	sub	sp, #40	; 0x28
 800a14c:	af02      	add	r7, sp, #8
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	4613      	mov	r3, r2
 800a154:	71fb      	strb	r3, [r7, #7]
=======
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b08a      	sub	sp, #40	; 0x28
 800a630:	af02      	add	r7, sp, #8
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	4613      	mov	r3, r2
 800a638:	71fb      	strb	r3, [r7, #7]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< HEAD
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10a      	bne.n	800a172 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	613b      	str	r3, [r7, #16]
}
 800a16e:	bf00      	nop
 800a170:	e7fe      	b.n	800a170 <xQueueGenericCreate+0x28>
=======
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10a      	bne.n	800a656 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	613b      	str	r3, [r7, #16]
}
 800a652:	bf00      	nop
 800a654:	e7fe      	b.n	800a654 <xQueueGenericCreate+0x28>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	fb02 f303 	mul.w	r3, r2, r3
 800a17a:	61fb      	str	r3, [r7, #28]
=======
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	fb02 f303 	mul.w	r3, r2, r3
 800a65e:	61fb      	str	r3, [r7, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< HEAD
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	3350      	adds	r3, #80	; 0x50
 800a180:	4618      	mov	r0, r3
 800a182:	f002 fea1 	bl	800cec8 <pvPortMalloc>
 800a186:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d011      	beq.n	800a1b2 <xQueueGenericCreate+0x6a>
=======
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	3350      	adds	r3, #80	; 0x50
 800a664:	4618      	mov	r0, r3
 800a666:	f002 fe3f 	bl	800d2e8 <pvPortMalloc>
 800a66a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d011      	beq.n	800a696 <xQueueGenericCreate+0x6a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
<<<<<<< HEAD
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	3350      	adds	r3, #80	; 0x50
 800a196:	617b      	str	r3, [r7, #20]
=======
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	3350      	adds	r3, #80	; 0x50
 800a67a:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< HEAD
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 800a1a0:	79fa      	ldrb	r2, [r7, #7]
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	68b9      	ldr	r1, [r7, #8]
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f805 	bl	800a1bc <prvInitialiseNewQueue>
=======
 800a684:	79fa      	ldrb	r2, [r7, #7]
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	4613      	mov	r3, r2
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	68b9      	ldr	r1, [r7, #8]
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 f805 	bl	800a6a0 <prvInitialiseNewQueue>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 800a1b2:	69bb      	ldr	r3, [r7, #24]
	}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3720      	adds	r7, #32
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <prvInitialiseNewQueue>:
=======
 800a696:	69bb      	ldr	r3, [r7, #24]
	}
 800a698:	4618      	mov	r0, r3
 800a69a:	3720      	adds	r7, #32
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <prvInitialiseNewQueue>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	70fb      	strb	r3, [r7, #3]
=======
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	70fb      	strb	r3, [r7, #3]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <prvInitialiseNewQueue+0x1c>
=======
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d103      	bne.n	800a6bc <prvInitialiseNewQueue+0x1c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	601a      	str	r2, [r3, #0]
 800a1d6:	e002      	b.n	800a1de <prvInitialiseNewQueue+0x22>
=======
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	e002      	b.n	800a6c2 <prvInitialiseNewQueue+0x22>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	601a      	str	r2, [r3, #0]
=======
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	69b8      	ldr	r0, [r7, #24]
 800a1ee:	f7ff fecb 	bl	8009f88 <xQueueGenericReset>
=======
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	69b8      	ldr	r0, [r7, #24]
 800a6d2:	f7ff fecb 	bl	800a46c <xQueueGenericReset>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< HEAD
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	78fa      	ldrb	r2, [r7, #3]
 800a1f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
=======
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	78fa      	ldrb	r2, [r7, #3]
 800a6da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 800a1fa:	bf00      	nop
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <xQueueCreateCountingSemaphoreStatic>:
=======
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <xQueueCreateCountingSemaphoreStatic>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
<<<<<<< HEAD
 800a202:	b580      	push	{r7, lr}
 800a204:	b08a      	sub	sp, #40	; 0x28
 800a206:	af02      	add	r7, sp, #8
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	61bb      	str	r3, [r7, #24]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d90a      	bls.n	800a248 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	617b      	str	r3, [r7, #20]
}
 800a244:	bf00      	nop
 800a246:	e7fe      	b.n	800a246 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a248:	2302      	movs	r3, #2
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	2100      	movs	r1, #0
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f7ff ff00 	bl	800a058 <xQueueGenericCreateStatic>
 800a258:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b08a      	sub	sp, #40	; 0x28
 800a6ea:	af02      	add	r7, sp, #8
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	60b9      	str	r1, [r7, #8]
 800a6f0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10a      	bne.n	800a70e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	61bb      	str	r3, [r7, #24]
}
 800a70a:	bf00      	nop
 800a70c:	e7fe      	b.n	800a70c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	429a      	cmp	r2, r3
 800a714:	d90a      	bls.n	800a72c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	617b      	str	r3, [r7, #20]
}
 800a728:	bf00      	nop
 800a72a:	e7fe      	b.n	800a72a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a72c:	2302      	movs	r3, #2
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	2100      	movs	r1, #0
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7ff ff00 	bl	800a53c <xQueueGenericCreateStatic>
 800a73c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
<<<<<<< HEAD
 800a266:	69fb      	ldr	r3, [r7, #28]
	}
 800a268:	4618      	mov	r0, r3
 800a26a:	3720      	adds	r7, #32
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <xQueueCreateCountingSemaphore>:
=======
 800a74a:	69fb      	ldr	r3, [r7, #28]
	}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3720      	adds	r7, #32
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <xQueueCreateCountingSemaphore>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
<<<<<<< HEAD
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10a      	bne.n	800a296 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	613b      	str	r3, [r7, #16]
}
 800a292:	bf00      	nop
 800a294:	e7fe      	b.n	800a294 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d90a      	bls.n	800a2b4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	60fb      	str	r3, [r7, #12]
}
 800a2b0:	bf00      	nop
 800a2b2:	e7fe      	b.n	800a2b2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7ff ff45 	bl	800a148 <xQueueGenericCreate>
 800a2be:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d002      	beq.n	800a2cc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	613b      	str	r3, [r7, #16]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d90a      	bls.n	800a798 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	60fb      	str	r3, [r7, #12]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a798:	2202      	movs	r2, #2
 800a79a:	2100      	movs	r1, #0
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7ff ff45 	bl	800a62c <xQueueGenericCreate>
 800a7a2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d002      	beq.n	800a7b0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
<<<<<<< HEAD
 800a2cc:	697b      	ldr	r3, [r7, #20]
	}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <xQueueGenericSend>:
=======
 800a7b0:	697b      	ldr	r3, [r7, #20]
	}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <xQueueGenericSend>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08e      	sub	sp, #56	; 0x38
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10a      	bne.n	800a30a <xQueueGenericSend+0x32>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a306:	bf00      	nop
 800a308:	e7fe      	b.n	800a308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d103      	bne.n	800a318 <xQueueGenericSend+0x40>
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <xQueueGenericSend+0x44>
 800a318:	2301      	movs	r3, #1
 800a31a:	e000      	b.n	800a31e <xQueueGenericSend+0x46>
 800a31c:	2300      	movs	r3, #0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10a      	bne.n	800a338 <xQueueGenericSend+0x60>
	__asm volatile
 800a322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a334:	bf00      	nop
 800a336:	e7fe      	b.n	800a336 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d103      	bne.n	800a346 <xQueueGenericSend+0x6e>
 800a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a342:	2b01      	cmp	r3, #1
 800a344:	d101      	bne.n	800a34a <xQueueGenericSend+0x72>
 800a346:	2301      	movs	r3, #1
 800a348:	e000      	b.n	800a34c <xQueueGenericSend+0x74>
 800a34a:	2300      	movs	r3, #0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10a      	bne.n	800a366 <xQueueGenericSend+0x8e>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	623b      	str	r3, [r7, #32]
}
 800a362:	bf00      	nop
 800a364:	e7fe      	b.n	800a364 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a366:	f001 fb41 	bl	800b9ec <xTaskGetSchedulerState>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d102      	bne.n	800a376 <xQueueGenericSend+0x9e>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <xQueueGenericSend+0xa2>
 800a376:	2301      	movs	r3, #1
 800a378:	e000      	b.n	800a37c <xQueueGenericSend+0xa4>
 800a37a:	2300      	movs	r3, #0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10a      	bne.n	800a396 <xQueueGenericSend+0xbe>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	61fb      	str	r3, [r7, #28]
}
 800a392:	bf00      	nop
 800a394:	e7fe      	b.n	800a394 <xQueueGenericSend+0xbc>
=======
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08e      	sub	sp, #56	; 0x38
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
 800a7c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <xQueueGenericSend+0x32>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7ea:	bf00      	nop
 800a7ec:	e7fe      	b.n	800a7ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d103      	bne.n	800a7fc <xQueueGenericSend+0x40>
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <xQueueGenericSend+0x44>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e000      	b.n	800a802 <xQueueGenericSend+0x46>
 800a800:	2300      	movs	r3, #0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10a      	bne.n	800a81c <xQueueGenericSend+0x60>
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a818:	bf00      	nop
 800a81a:	e7fe      	b.n	800a81a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d103      	bne.n	800a82a <xQueueGenericSend+0x6e>
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a826:	2b01      	cmp	r3, #1
 800a828:	d101      	bne.n	800a82e <xQueueGenericSend+0x72>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e000      	b.n	800a830 <xQueueGenericSend+0x74>
 800a82e:	2300      	movs	r3, #0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10a      	bne.n	800a84a <xQueueGenericSend+0x8e>
	__asm volatile
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	623b      	str	r3, [r7, #32]
}
 800a846:	bf00      	nop
 800a848:	e7fe      	b.n	800a848 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a84a:	f001 fb41 	bl	800bed0 <xTaskGetSchedulerState>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d102      	bne.n	800a85a <xQueueGenericSend+0x9e>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d101      	bne.n	800a85e <xQueueGenericSend+0xa2>
 800a85a:	2301      	movs	r3, #1
 800a85c:	e000      	b.n	800a860 <xQueueGenericSend+0xa4>
 800a85e:	2300      	movs	r3, #0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10a      	bne.n	800a87a <xQueueGenericSend+0xbe>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	61fb      	str	r3, [r7, #28]
}
 800a876:	bf00      	nop
 800a878:	e7fe      	b.n	800a878 <xQueueGenericSend+0xbc>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 800a396:	f002 fc75 	bl	800cc84 <vPortEnterCritical>
=======
 800a87a:	f002 fc13 	bl	800d0a4 <vPortEnterCritical>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 800a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d302      	bcc.n	800a3ac <xQueueGenericSend+0xd4>
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d129      	bne.n	800a400 <xQueueGenericSend+0x128>
=======
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a886:	429a      	cmp	r2, r3
 800a888:	d302      	bcc.n	800a890 <xQueueGenericSend+0xd4>
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d129      	bne.n	800a8e4 <xQueueGenericSend+0x128>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	68b9      	ldr	r1, [r7, #8]
 800a3b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3b2:	f000 fb52 	bl	800aa5a <prvCopyDataToQueue>
 800a3b6:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	68b9      	ldr	r1, [r7, #8]
 800a894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a896:	f000 fb52 	bl	800af3e <prvCopyDataToQueue>
 800a89a:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d010      	beq.n	800a3e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c2:	3324      	adds	r3, #36	; 0x24
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f001 f953 	bl	800b670 <xTaskRemoveFromEventList>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d013      	beq.n	800a3f8 <xQueueGenericSend+0x120>
=======
 800a89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d010      	beq.n	800a8c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	3324      	adds	r3, #36	; 0x24
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f001 f953 	bl	800bb54 <xTaskRemoveFromEventList>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d013      	beq.n	800a8dc <xQueueGenericSend+0x120>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 800a3d0:	4b3f      	ldr	r3, [pc, #252]	; (800a4d0 <xQueueGenericSend+0x1f8>)
 800a3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	e00a      	b.n	800a3f8 <xQueueGenericSend+0x120>
=======
 800a8b4:	4b3f      	ldr	r3, [pc, #252]	; (800a9b4 <xQueueGenericSend+0x1f8>)
 800a8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	e00a      	b.n	800a8dc <xQueueGenericSend+0x120>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 800a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d007      	beq.n	800a3f8 <xQueueGenericSend+0x120>
=======
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d007      	beq.n	800a8dc <xQueueGenericSend+0x120>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 800a3e8:	4b39      	ldr	r3, [pc, #228]	; (800a4d0 <xQueueGenericSend+0x1f8>)
 800a3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	f3bf 8f6f 	isb	sy
=======
 800a8cc:	4b39      	ldr	r3, [pc, #228]	; (800a9b4 <xQueueGenericSend+0x1f8>)
 800a8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	f3bf 8f6f 	isb	sy
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a3f8:	f002 fc74 	bl	800cce4 <vPortExitCritical>
				return pdPASS;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e063      	b.n	800a4c8 <xQueueGenericSend+0x1f0>
=======
 800a8dc:	f002 fc12 	bl	800d104 <vPortExitCritical>
				return pdPASS;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e063      	b.n	800a9ac <xQueueGenericSend+0x1f0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d103      	bne.n	800a40e <xQueueGenericSend+0x136>
=======
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d103      	bne.n	800a8f2 <xQueueGenericSend+0x136>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a406:	f002 fc6d 	bl	800cce4 <vPortExitCritical>
=======
 800a8ea:	f002 fc0b 	bl	800d104 <vPortExitCritical>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 800a40a:	2300      	movs	r3, #0
 800a40c:	e05c      	b.n	800a4c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a410:	2b00      	cmp	r3, #0
 800a412:	d106      	bne.n	800a422 <xQueueGenericSend+0x14a>
=======
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e05c      	b.n	800a9ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d106      	bne.n	800a906 <xQueueGenericSend+0x14a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 800a414:	f107 0314 	add.w	r3, r7, #20
 800a418:	4618      	mov	r0, r3
 800a41a:	f001 f98d 	bl	800b738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a41e:	2301      	movs	r3, #1
 800a420:	637b      	str	r3, [r7, #52]	; 0x34
=======
 800a8f8:	f107 0314 	add.w	r3, r7, #20
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f001 f98d 	bl	800bc1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a902:	2301      	movs	r3, #1
 800a904:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a422:	f002 fc5f 	bl	800cce4 <vPortExitCritical>
=======
 800a906:	f002 fbfd 	bl	800d104 <vPortExitCritical>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800a426:	f000 feed 	bl	800b204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a42a:	f002 fc2b 	bl	800cc84 <vPortEnterCritical>
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a434:	b25b      	sxtb	r3, r3
 800a436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43a:	d103      	bne.n	800a444 <xQueueGenericSend+0x16c>
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a44a:	b25b      	sxtb	r3, r3
 800a44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a450:	d103      	bne.n	800a45a <xQueueGenericSend+0x182>
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	2200      	movs	r2, #0
 800a456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a45a:	f002 fc43 	bl	800cce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a45e:	1d3a      	adds	r2, r7, #4
 800a460:	f107 0314 	add.w	r3, r7, #20
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f001 f97c 	bl	800b764 <xTaskCheckForTimeOut>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d124      	bne.n	800a4bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a474:	f000 fbe9 	bl	800ac4a <prvIsQueueFull>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d018      	beq.n	800a4b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	3310      	adds	r3, #16
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	4611      	mov	r1, r2
 800a486:	4618      	mov	r0, r3
 800a488:	f001 f8a2 	bl	800b5d0 <vTaskPlaceOnEventList>
=======
 800a90a:	f000 feed 	bl	800b6e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a90e:	f002 fbc9 	bl	800d0a4 <vPortEnterCritical>
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a918:	b25b      	sxtb	r3, r3
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d103      	bne.n	800a928 <xQueueGenericSend+0x16c>
 800a920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a92e:	b25b      	sxtb	r3, r3
 800a930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a934:	d103      	bne.n	800a93e <xQueueGenericSend+0x182>
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a93e:	f002 fbe1 	bl	800d104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a942:	1d3a      	adds	r2, r7, #4
 800a944:	f107 0314 	add.w	r3, r7, #20
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f001 f97c 	bl	800bc48 <xTaskCheckForTimeOut>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d124      	bne.n	800a9a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a958:	f000 fbe9 	bl	800b12e <prvIsQueueFull>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d018      	beq.n	800a994 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	3310      	adds	r3, #16
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	4611      	mov	r1, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f001 f8a2 	bl	800bab4 <vTaskPlaceOnEventList>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a48e:	f000 fb74 	bl	800ab7a <prvUnlockQueue>
=======
 800a970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a972:	f000 fb74 	bl	800b05e <prvUnlockQueue>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 800a492:	f000 fec5 	bl	800b220 <xTaskResumeAll>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f47f af7c 	bne.w	800a396 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a49e:	4b0c      	ldr	r3, [pc, #48]	; (800a4d0 <xQueueGenericSend+0x1f8>)
 800a4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	e772      	b.n	800a396 <xQueueGenericSend+0xbe>
=======
 800a976:	f000 fec5 	bl	800b704 <xTaskResumeAll>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f47f af7c 	bne.w	800a87a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a982:	4b0c      	ldr	r3, [pc, #48]	; (800a9b4 <xQueueGenericSend+0x1f8>)
 800a984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	e772      	b.n	800a87a <xQueueGenericSend+0xbe>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4b2:	f000 fb62 	bl	800ab7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4b6:	f000 feb3 	bl	800b220 <xTaskResumeAll>
 800a4ba:	e76c      	b.n	800a396 <xQueueGenericSend+0xbe>
=======
 800a994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a996:	f000 fb62 	bl	800b05e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a99a:	f000 feb3 	bl	800b704 <xTaskResumeAll>
 800a99e:	e76c      	b.n	800a87a <xQueueGenericSend+0xbe>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4be:	f000 fb5c 	bl	800ab7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4c2:	f000 fead 	bl	800b220 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3738      	adds	r7, #56	; 0x38
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	e000ed04 	.word	0xe000ed04

0800a4d4 <xQueueGenericSendFromISR>:
=======
 800a9a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9a2:	f000 fb5c 	bl	800b05e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9a6:	f000 fead 	bl	800b704 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3738      	adds	r7, #56	; 0x38
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	e000ed04 	.word	0xe000ed04

0800a9b8 <xQueueGenericSendFromISR>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b090      	sub	sp, #64	; 0x40
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10a      	bne.n	800a502 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d103      	bne.n	800a510 <xQueueGenericSendFromISR+0x3c>
 800a508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <xQueueGenericSendFromISR+0x40>
 800a510:	2301      	movs	r3, #1
 800a512:	e000      	b.n	800a516 <xQueueGenericSendFromISR+0x42>
 800a514:	2300      	movs	r3, #0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10a      	bne.n	800a530 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51e:	f383 8811 	msr	BASEPRI, r3
 800a522:	f3bf 8f6f 	isb	sy
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a52c:	bf00      	nop
 800a52e:	e7fe      	b.n	800a52e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b02      	cmp	r3, #2
 800a534:	d103      	bne.n	800a53e <xQueueGenericSendFromISR+0x6a>
 800a536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d101      	bne.n	800a542 <xQueueGenericSendFromISR+0x6e>
 800a53e:	2301      	movs	r3, #1
 800a540:	e000      	b.n	800a544 <xQueueGenericSendFromISR+0x70>
 800a542:	2300      	movs	r3, #0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10a      	bne.n	800a55e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	f3bf 8f6f 	isb	sy
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	623b      	str	r3, [r7, #32]
}
 800a55a:	bf00      	nop
 800a55c:	e7fe      	b.n	800a55c <xQueueGenericSendFromISR+0x88>
=======
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b090      	sub	sp, #64	; 0x40
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
 800a9c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10a      	bne.n	800a9e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9e2:	bf00      	nop
 800a9e4:	e7fe      	b.n	800a9e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d103      	bne.n	800a9f4 <xQueueGenericSendFromISR+0x3c>
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <xQueueGenericSendFromISR+0x40>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e000      	b.n	800a9fa <xQueueGenericSendFromISR+0x42>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10a      	bne.n	800aa14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa10:	bf00      	nop
 800aa12:	e7fe      	b.n	800aa12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d103      	bne.n	800aa22 <xQueueGenericSendFromISR+0x6a>
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d101      	bne.n	800aa26 <xQueueGenericSendFromISR+0x6e>
 800aa22:	2301      	movs	r3, #1
 800aa24:	e000      	b.n	800aa28 <xQueueGenericSendFromISR+0x70>
 800aa26:	2300      	movs	r3, #0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10a      	bne.n	800aa42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	623b      	str	r3, [r7, #32]
}
 800aa3e:	bf00      	nop
 800aa40:	e7fe      	b.n	800aa40 <xQueueGenericSendFromISR+0x88>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 800a55e:	f002 fc73 	bl	800ce48 <vPortValidateInterruptPriority>
=======
 800aa42:	f002 fc11 	bl	800d268 <vPortValidateInterruptPriority>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 800a562:	f3ef 8211 	mrs	r2, BASEPRI
 800a566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	61fa      	str	r2, [r7, #28]
 800a578:	61bb      	str	r3, [r7, #24]
=======
 800aa46:	f3ef 8211 	mrs	r2, BASEPRI
 800aa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	61fa      	str	r2, [r7, #28]
 800aa5c:	61bb      	str	r3, [r7, #24]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 800a57a:	69fb      	ldr	r3, [r7, #28]
=======
 800aa5e:	69fb      	ldr	r3, [r7, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 800a57c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a586:	429a      	cmp	r2, r3
 800a588:	d302      	bcc.n	800a590 <xQueueGenericSendFromISR+0xbc>
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d12f      	bne.n	800a5f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800aa60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d302      	bcc.n	800aa74 <xQueueGenericSendFromISR+0xbc>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d12f      	bne.n	800aad4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa82:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	68b9      	ldr	r1, [r7, #8]
 800a5a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5a6:	f000 fa58 	bl	800aa5a <prvCopyDataToQueue>
=======
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	68b9      	ldr	r1, [r7, #8]
 800aa88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa8a:	f000 fa58 	bl	800af3e <prvCopyDataToQueue>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 800a5aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b2:	d112      	bne.n	800a5da <xQueueGenericSendFromISR+0x106>
=======
 800aa8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aa92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa96:	d112      	bne.n	800aabe <xQueueGenericSendFromISR+0x106>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d016      	beq.n	800a5ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5be:	3324      	adds	r3, #36	; 0x24
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f001 f855 	bl	800b670 <xTaskRemoveFromEventList>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00e      	beq.n	800a5ea <xQueueGenericSendFromISR+0x116>
=======
 800aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d016      	beq.n	800aace <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	3324      	adds	r3, #36	; 0x24
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f001 f855 	bl	800bb54 <xTaskRemoveFromEventList>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00e      	beq.n	800aace <xQueueGenericSendFromISR+0x116>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00b      	beq.n	800a5ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	e007      	b.n	800a5ea <xQueueGenericSendFromISR+0x116>
=======
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00b      	beq.n	800aace <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	e007      	b.n	800aace <xQueueGenericSendFromISR+0x116>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 800a5da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5de:	3301      	adds	r3, #1
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	b25a      	sxtb	r2, r3
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a5ee:	e001      	b.n	800a5f4 <xQueueGenericSendFromISR+0x120>
=======
 800aabe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aac2:	3301      	adds	r3, #1
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	b25a      	sxtb	r2, r3
 800aac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aace:	2301      	movs	r3, #1
 800aad0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aad2:	e001      	b.n	800aad8 <xQueueGenericSendFromISR+0x120>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f6:	617b      	str	r3, [r7, #20]
=======
 800aad4:	2300      	movs	r3, #0
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aada:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f383 8811 	msr	BASEPRI, r3
=======
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f383 8811 	msr	BASEPRI, r3
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< HEAD
 800a5fe:	bf00      	nop
=======
 800aae2:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 800a600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a602:	4618      	mov	r0, r3
 800a604:	3740      	adds	r7, #64	; 0x40
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <xQueueReceive>:
=======
 800aae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3740      	adds	r7, #64	; 0x40
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <xQueueReceive>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08c      	sub	sp, #48	; 0x30
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a618:	2300      	movs	r3, #0
 800a61a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10a      	bne.n	800a63c <xQueueReceive+0x30>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	623b      	str	r3, [r7, #32]
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <xQueueReceive+0x2e>
=======
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b08c      	sub	sp, #48	; 0x30
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aafc:	2300      	movs	r3, #0
 800aafe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10a      	bne.n	800ab20 <xQueueReceive+0x30>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	623b      	str	r3, [r7, #32]
}
 800ab1c:	bf00      	nop
 800ab1e:	e7fe      	b.n	800ab1e <xQueueReceive+0x2e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d103      	bne.n	800a64a <xQueueReceive+0x3e>
 800a642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <xQueueReceive+0x42>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <xQueueReceive+0x44>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10a      	bne.n	800a66a <xQueueReceive+0x5e>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	61fb      	str	r3, [r7, #28]
}
 800a666:	bf00      	nop
 800a668:	e7fe      	b.n	800a668 <xQueueReceive+0x5c>
=======
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d103      	bne.n	800ab2e <xQueueReceive+0x3e>
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <xQueueReceive+0x42>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e000      	b.n	800ab34 <xQueueReceive+0x44>
 800ab32:	2300      	movs	r3, #0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10a      	bne.n	800ab4e <xQueueReceive+0x5e>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	61fb      	str	r3, [r7, #28]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <xQueueReceive+0x5c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 800a66a:	f001 f9bf 	bl	800b9ec <xTaskGetSchedulerState>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <xQueueReceive+0x6e>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <xQueueReceive+0x72>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <xQueueReceive+0x74>
 800a67e:	2300      	movs	r3, #0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10a      	bne.n	800a69a <xQueueReceive+0x8e>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	61bb      	str	r3, [r7, #24]
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <xQueueReceive+0x8c>
=======
 800ab4e:	f001 f9bf 	bl	800bed0 <xTaskGetSchedulerState>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d102      	bne.n	800ab5e <xQueueReceive+0x6e>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <xQueueReceive+0x72>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e000      	b.n	800ab64 <xQueueReceive+0x74>
 800ab62:	2300      	movs	r3, #0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10a      	bne.n	800ab7e <xQueueReceive+0x8e>
	__asm volatile
 800ab68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	61bb      	str	r3, [r7, #24]
}
 800ab7a:	bf00      	nop
 800ab7c:	e7fe      	b.n	800ab7c <xQueueReceive+0x8c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 800a69a:	f002 faf3 	bl	800cc84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a2:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800ab7e:	f002 fa91 	bl	800d0a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab86:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d01f      	beq.n	800a6ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6aa:	68b9      	ldr	r1, [r7, #8]
 800a6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ae:	f000 fa3e 	bl	800ab2e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	1e5a      	subs	r2, r3, #1
 800a6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b8:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d01f      	beq.n	800abce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab8e:	68b9      	ldr	r1, [r7, #8]
 800ab90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab92:	f000 fa3e 	bl	800b012 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	1e5a      	subs	r2, r3, #1
 800ab9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9c:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00f      	beq.n	800a6e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c4:	3310      	adds	r3, #16
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 ffd2 	bl	800b670 <xTaskRemoveFromEventList>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d007      	beq.n	800a6e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6d2:	4b3d      	ldr	r3, [pc, #244]	; (800a7c8 <xQueueReceive+0x1bc>)
 800a6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d8:	601a      	str	r2, [r3, #0]
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	f3bf 8f6f 	isb	sy
=======
 800ab9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00f      	beq.n	800abc6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	3310      	adds	r3, #16
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 ffd2 	bl	800bb54 <xTaskRemoveFromEventList>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d007      	beq.n	800abc6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800abb6:	4b3d      	ldr	r3, [pc, #244]	; (800acac <xQueueReceive+0x1bc>)
 800abb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abbc:	601a      	str	r2, [r3, #0]
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	f3bf 8f6f 	isb	sy
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a6e2:	f002 faff 	bl	800cce4 <vPortExitCritical>
				return pdPASS;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e069      	b.n	800a7be <xQueueReceive+0x1b2>
=======
 800abc6:	f002 fa9d 	bl	800d104 <vPortExitCritical>
				return pdPASS;
 800abca:	2301      	movs	r3, #1
 800abcc:	e069      	b.n	800aca2 <xQueueReceive+0x1b2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d103      	bne.n	800a6f8 <xQueueReceive+0xec>
=======
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d103      	bne.n	800abdc <xQueueReceive+0xec>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a6f0:	f002 faf8 	bl	800cce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	e062      	b.n	800a7be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d106      	bne.n	800a70c <xQueueReceive+0x100>
=======
 800abd4:	f002 fa96 	bl	800d104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800abd8:	2300      	movs	r3, #0
 800abda:	e062      	b.n	800aca2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d106      	bne.n	800abf0 <xQueueReceive+0x100>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 800a6fe:	f107 0310 	add.w	r3, r7, #16
 800a702:	4618      	mov	r0, r3
 800a704:	f001 f818 	bl	800b738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a708:	2301      	movs	r3, #1
 800a70a:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800abe2:	f107 0310 	add.w	r3, r7, #16
 800abe6:	4618      	mov	r0, r3
 800abe8:	f001 f818 	bl	800bc1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abec:	2301      	movs	r3, #1
 800abee:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a70c:	f002 faea 	bl	800cce4 <vPortExitCritical>
=======
 800abf0:	f002 fa88 	bl	800d104 <vPortExitCritical>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800a710:	f000 fd78 	bl	800b204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a714:	f002 fab6 	bl	800cc84 <vPortEnterCritical>
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a71e:	b25b      	sxtb	r3, r3
 800a720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a724:	d103      	bne.n	800a72e <xQueueReceive+0x122>
 800a726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a734:	b25b      	sxtb	r3, r3
 800a736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73a:	d103      	bne.n	800a744 <xQueueReceive+0x138>
 800a73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a744:	f002 face 	bl	800cce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a748:	1d3a      	adds	r2, r7, #4
 800a74a:	f107 0310 	add.w	r3, r7, #16
 800a74e:	4611      	mov	r1, r2
 800a750:	4618      	mov	r0, r3
 800a752:	f001 f807 	bl	800b764 <xTaskCheckForTimeOut>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d123      	bne.n	800a7a4 <xQueueReceive+0x198>
=======
 800abf4:	f000 fd78 	bl	800b6e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abf8:	f002 fa54 	bl	800d0a4 <vPortEnterCritical>
 800abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac02:	b25b      	sxtb	r3, r3
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac08:	d103      	bne.n	800ac12 <xQueueReceive+0x122>
 800ac0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac18:	b25b      	sxtb	r3, r3
 800ac1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1e:	d103      	bne.n	800ac28 <xQueueReceive+0x138>
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac28:	f002 fa6c 	bl	800d104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac2c:	1d3a      	adds	r2, r7, #4
 800ac2e:	f107 0310 	add.w	r3, r7, #16
 800ac32:	4611      	mov	r1, r2
 800ac34:	4618      	mov	r0, r3
 800ac36:	f001 f807 	bl	800bc48 <xTaskCheckForTimeOut>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d123      	bne.n	800ac88 <xQueueReceive+0x198>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 800a75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a75e:	f000 fa5e 	bl	800ac1e <prvIsQueueEmpty>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d017      	beq.n	800a798 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	3324      	adds	r3, #36	; 0x24
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	4611      	mov	r1, r2
 800a770:	4618      	mov	r0, r3
 800a772:	f000 ff2d 	bl	800b5d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a778:	f000 f9ff 	bl	800ab7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a77c:	f000 fd50 	bl	800b220 <xTaskResumeAll>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d189      	bne.n	800a69a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a786:	4b10      	ldr	r3, [pc, #64]	; (800a7c8 <xQueueReceive+0x1bc>)
 800a788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	e780      	b.n	800a69a <xQueueReceive+0x8e>
=======
 800ac40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac42:	f000 fa5e 	bl	800b102 <prvIsQueueEmpty>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d017      	beq.n	800ac7c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4e:	3324      	adds	r3, #36	; 0x24
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	4611      	mov	r1, r2
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 ff2d 	bl	800bab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac5c:	f000 f9ff 	bl	800b05e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac60:	f000 fd50 	bl	800b704 <xTaskResumeAll>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d189      	bne.n	800ab7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ac6a:	4b10      	ldr	r3, [pc, #64]	; (800acac <xQueueReceive+0x1bc>)
 800ac6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	e780      	b.n	800ab7e <xQueueReceive+0x8e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a79a:	f000 f9ee 	bl	800ab7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a79e:	f000 fd3f 	bl	800b220 <xTaskResumeAll>
 800a7a2:	e77a      	b.n	800a69a <xQueueReceive+0x8e>
=======
 800ac7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac7e:	f000 f9ee 	bl	800b05e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac82:	f000 fd3f 	bl	800b704 <xTaskResumeAll>
 800ac86:	e77a      	b.n	800ab7e <xQueueReceive+0x8e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a6:	f000 f9e8 	bl	800ab7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7aa:	f000 fd39 	bl	800b220 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b0:	f000 fa35 	bl	800ac1e <prvIsQueueEmpty>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f43f af6f 	beq.w	800a69a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7bc:	2300      	movs	r3, #0
=======
 800ac88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac8a:	f000 f9e8 	bl	800b05e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac8e:	f000 fd39 	bl	800b704 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac94:	f000 fa35 	bl	800b102 <prvIsQueueEmpty>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f43f af6f 	beq.w	800ab7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aca0:	2300      	movs	r3, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3730      	adds	r7, #48	; 0x30
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	e000ed04 	.word	0xe000ed04

0800a7cc <xQueueSemaphoreTake>:
=======
 800aca2:	4618      	mov	r0, r3
 800aca4:	3730      	adds	r7, #48	; 0x30
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	e000ed04 	.word	0xe000ed04

0800acb0 <xQueueSemaphoreTake>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b08e      	sub	sp, #56	; 0x38
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	633b      	str	r3, [r7, #48]	; 0x30
=======
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08e      	sub	sp, #56	; 0x38
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800acba:	2300      	movs	r3, #0
 800acbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800acc2:	2300      	movs	r3, #0
 800acc4:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
<<<<<<< HEAD
 800a7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10a      	bne.n	800a7fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	623b      	str	r3, [r7, #32]
}
 800a7fa:	bf00      	nop
 800a7fc:	e7fe      	b.n	800a7fc <xQueueSemaphoreTake+0x30>
=======
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	623b      	str	r3, [r7, #32]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <xQueueSemaphoreTake+0x30>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< HEAD
 800a7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00a      	beq.n	800a81c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	61fb      	str	r3, [r7, #28]
}
 800a818:	bf00      	nop
 800a81a:	e7fe      	b.n	800a81a <xQueueSemaphoreTake+0x4e>
=======
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00a      	beq.n	800ad00 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	61fb      	str	r3, [r7, #28]
}
 800acfc:	bf00      	nop
 800acfe:	e7fe      	b.n	800acfe <xQueueSemaphoreTake+0x4e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 800a81c:	f001 f8e6 	bl	800b9ec <xTaskGetSchedulerState>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d102      	bne.n	800a82c <xQueueSemaphoreTake+0x60>
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <xQueueSemaphoreTake+0x64>
 800a82c:	2301      	movs	r3, #1
 800a82e:	e000      	b.n	800a832 <xQueueSemaphoreTake+0x66>
 800a830:	2300      	movs	r3, #0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10a      	bne.n	800a84c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	61bb      	str	r3, [r7, #24]
}
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <xQueueSemaphoreTake+0x7e>
=======
 800ad00:	f001 f8e6 	bl	800bed0 <xTaskGetSchedulerState>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d102      	bne.n	800ad10 <xQueueSemaphoreTake+0x60>
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <xQueueSemaphoreTake+0x64>
 800ad10:	2301      	movs	r3, #1
 800ad12:	e000      	b.n	800ad16 <xQueueSemaphoreTake+0x66>
 800ad14:	2300      	movs	r3, #0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10a      	bne.n	800ad30 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	61bb      	str	r3, [r7, #24]
}
 800ad2c:	bf00      	nop
 800ad2e:	e7fe      	b.n	800ad2e <xQueueSemaphoreTake+0x7e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 800a84c:	f002 fa1a 	bl	800cc84 <vPortEnterCritical>
=======
 800ad30:	f002 f9b8 	bl	800d0a4 <vPortEnterCritical>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 800a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a854:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad38:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800a856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d024      	beq.n	800a8a6 <xQueueSemaphoreTake+0xda>
=======
 800ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d024      	beq.n	800ad8a <xQueueSemaphoreTake+0xda>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
<<<<<<< HEAD
 800a85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85e:	1e5a      	subs	r2, r3, #1
 800a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a862:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800ad40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad42:	1e5a      	subs	r2, r3, #1
 800ad44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad46:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 800a864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d104      	bne.n	800a876 <xQueueSemaphoreTake+0xaa>
=======
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d104      	bne.n	800ad5a <xQueueSemaphoreTake+0xaa>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
<<<<<<< HEAD
 800a86c:	f001 fa34 	bl	800bcd8 <pvTaskIncrementMutexHeldCount>
 800a870:	4602      	mov	r2, r0
 800a872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a874:	609a      	str	r2, [r3, #8]
=======
 800ad50:	f001 fa34 	bl	800c1bc <pvTaskIncrementMutexHeldCount>
 800ad54:	4602      	mov	r2, r0
 800ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad58:	609a      	str	r2, [r3, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 800a876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00f      	beq.n	800a89e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a880:	3310      	adds	r3, #16
 800a882:	4618      	mov	r0, r3
 800a884:	f000 fef4 	bl	800b670 <xTaskRemoveFromEventList>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d007      	beq.n	800a89e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a88e:	4b54      	ldr	r3, [pc, #336]	; (800a9e0 <xQueueSemaphoreTake+0x214>)
 800a890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	f3bf 8f6f 	isb	sy
=======
 800ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00f      	beq.n	800ad82 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad64:	3310      	adds	r3, #16
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 fef4 	bl	800bb54 <xTaskRemoveFromEventList>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d007      	beq.n	800ad82 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad72:	4b54      	ldr	r3, [pc, #336]	; (800aec4 <xQueueSemaphoreTake+0x214>)
 800ad74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	f3bf 8f6f 	isb	sy
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a89e:	f002 fa21 	bl	800cce4 <vPortExitCritical>
				return pdPASS;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e097      	b.n	800a9d6 <xQueueSemaphoreTake+0x20a>
=======
 800ad82:	f002 f9bf 	bl	800d104 <vPortExitCritical>
				return pdPASS;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e097      	b.n	800aeba <xQueueSemaphoreTake+0x20a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d111      	bne.n	800a8d0 <xQueueSemaphoreTake+0x104>
=======
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d111      	bne.n	800adb4 <xQueueSemaphoreTake+0x104>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
<<<<<<< HEAD
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00a      	beq.n	800a8c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	617b      	str	r3, [r7, #20]
}
 800a8c4:	bf00      	nop
 800a8c6:	e7fe      	b.n	800a8c6 <xQueueSemaphoreTake+0xfa>
=======
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00a      	beq.n	800adac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	617b      	str	r3, [r7, #20]
}
 800ada8:	bf00      	nop
 800adaa:	e7fe      	b.n	800adaa <xQueueSemaphoreTake+0xfa>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a8c8:	f002 fa0c 	bl	800cce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	e082      	b.n	800a9d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d106      	bne.n	800a8e4 <xQueueSemaphoreTake+0x118>
=======
 800adac:	f002 f9aa 	bl	800d104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adb0:	2300      	movs	r3, #0
 800adb2:	e082      	b.n	800aeba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d106      	bne.n	800adc8 <xQueueSemaphoreTake+0x118>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 800a8d6:	f107 030c 	add.w	r3, r7, #12
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 ff2c 	bl	800b738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	637b      	str	r3, [r7, #52]	; 0x34
=======
 800adba:	f107 030c 	add.w	r3, r7, #12
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 ff2c 	bl	800bc1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adc4:	2301      	movs	r3, #1
 800adc6:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a8e4:	f002 f9fe 	bl	800cce4 <vPortExitCritical>
=======
 800adc8:	f002 f99c 	bl	800d104 <vPortExitCritical>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800a8e8:	f000 fc8c 	bl	800b204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8ec:	f002 f9ca 	bl	800cc84 <vPortEnterCritical>
 800a8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8f6:	b25b      	sxtb	r3, r3
 800a8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fc:	d103      	bne.n	800a906 <xQueueSemaphoreTake+0x13a>
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a90c:	b25b      	sxtb	r3, r3
 800a90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a912:	d103      	bne.n	800a91c <xQueueSemaphoreTake+0x150>
 800a914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a91c:	f002 f9e2 	bl	800cce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a920:	463a      	mov	r2, r7
 800a922:	f107 030c 	add.w	r3, r7, #12
 800a926:	4611      	mov	r1, r2
 800a928:	4618      	mov	r0, r3
 800a92a:	f000 ff1b 	bl	800b764 <xTaskCheckForTimeOut>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d132      	bne.n	800a99a <xQueueSemaphoreTake+0x1ce>
=======
 800adcc:	f000 fc8c 	bl	800b6e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800add0:	f002 f968 	bl	800d0a4 <vPortEnterCritical>
 800add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adda:	b25b      	sxtb	r3, r3
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade0:	d103      	bne.n	800adea <xQueueSemaphoreTake+0x13a>
 800ade2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adf0:	b25b      	sxtb	r3, r3
 800adf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf6:	d103      	bne.n	800ae00 <xQueueSemaphoreTake+0x150>
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae00:	f002 f980 	bl	800d104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae04:	463a      	mov	r2, r7
 800ae06:	f107 030c 	add.w	r3, r7, #12
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 ff1b 	bl	800bc48 <xTaskCheckForTimeOut>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d132      	bne.n	800ae7e <xQueueSemaphoreTake+0x1ce>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 800a934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a936:	f000 f972 	bl	800ac1e <prvIsQueueEmpty>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d026      	beq.n	800a98e <xQueueSemaphoreTake+0x1c2>
=======
 800ae18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae1a:	f000 f972 	bl	800b102 <prvIsQueueEmpty>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d026      	beq.n	800ae72 <xQueueSemaphoreTake+0x1c2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 800a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d109      	bne.n	800a95c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a948:	f002 f99c 	bl	800cc84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	4618      	mov	r0, r3
 800a952:	f001 f869 	bl	800ba28 <xTaskPriorityInherit>
 800a956:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a958:	f002 f9c4 	bl	800cce4 <vPortExitCritical>
=======
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d109      	bne.n	800ae40 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ae2c:	f002 f93a 	bl	800d0a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f001 f869 	bl	800bf0c <xTaskPriorityInherit>
 800ae3a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ae3c:	f002 f962 	bl	800d104 <vPortExitCritical>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
<<<<<<< HEAD
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	3324      	adds	r3, #36	; 0x24
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	4611      	mov	r1, r2
 800a964:	4618      	mov	r0, r3
 800a966:	f000 fe33 	bl	800b5d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a96a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a96c:	f000 f905 	bl	800ab7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a970:	f000 fc56 	bl	800b220 <xTaskResumeAll>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	f47f af68 	bne.w	800a84c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a97c:	4b18      	ldr	r3, [pc, #96]	; (800a9e0 <xQueueSemaphoreTake+0x214>)
 800a97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	e75e      	b.n	800a84c <xQueueSemaphoreTake+0x80>
=======
 800ae40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae42:	3324      	adds	r3, #36	; 0x24
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	4611      	mov	r1, r2
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f000 fe33 	bl	800bab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae50:	f000 f905 	bl	800b05e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae54:	f000 fc56 	bl	800b704 <xTaskResumeAll>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f47f af68 	bne.w	800ad30 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ae60:	4b18      	ldr	r3, [pc, #96]	; (800aec4 <xQueueSemaphoreTake+0x214>)
 800ae62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	e75e      	b.n	800ad30 <xQueueSemaphoreTake+0x80>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a98e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a990:	f000 f8f3 	bl	800ab7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a994:	f000 fc44 	bl	800b220 <xTaskResumeAll>
 800a998:	e758      	b.n	800a84c <xQueueSemaphoreTake+0x80>
=======
 800ae72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae74:	f000 f8f3 	bl	800b05e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae78:	f000 fc44 	bl	800b704 <xTaskResumeAll>
 800ae7c:	e758      	b.n	800ad30 <xQueueSemaphoreTake+0x80>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a99a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a99c:	f000 f8ed 	bl	800ab7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9a0:	f000 fc3e 	bl	800b220 <xTaskResumeAll>
=======
 800ae7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae80:	f000 f8ed 	bl	800b05e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae84:	f000 fc3e 	bl	800b704 <xTaskResumeAll>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 800a9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9a6:	f000 f93a 	bl	800ac1e <prvIsQueueEmpty>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f43f af4d 	beq.w	800a84c <xQueueSemaphoreTake+0x80>
=======
 800ae88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae8a:	f000 f93a 	bl	800b102 <prvIsQueueEmpty>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f43f af4d 	beq.w	800ad30 <xQueueSemaphoreTake+0x80>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
<<<<<<< HEAD
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00d      	beq.n	800a9d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a9b8:	f002 f964 	bl	800cc84 <vPortEnterCritical>
=======
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00d      	beq.n	800aeb8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ae9c:	f002 f902 	bl	800d0a4 <vPortEnterCritical>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
<<<<<<< HEAD
 800a9bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9be:	f000 f834 	bl	800aa2a <prvGetDisinheritPriorityAfterTimeout>
 800a9c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f001 f902 	bl	800bbd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a9d0:	f002 f988 	bl	800cce4 <vPortExitCritical>
=======
 800aea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aea2:	f000 f834 	bl	800af0e <prvGetDisinheritPriorityAfterTimeout>
 800aea6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f001 f902 	bl	800c0b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aeb4:	f002 f926 	bl	800d104 <vPortExitCritical>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
<<<<<<< HEAD
 800a9d4:	2300      	movs	r3, #0
=======
 800aeb8:	2300      	movs	r3, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3738      	adds	r7, #56	; 0x38
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	e000ed04 	.word	0xe000ed04

0800a9e4 <vQueueDelete>:
=======
 800aeba:	4618      	mov	r0, r3
 800aebc:	3738      	adds	r7, #56	; 0x38
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	e000ed04 	.word	0xe000ed04

0800aec8 <vQueueDelete>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
<<<<<<< HEAD
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10a      	bne.n	800aa0c <vQueueDelete+0x28>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	60bb      	str	r3, [r7, #8]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <vQueueDelete+0x26>
=======
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10a      	bne.n	800aef0 <vQueueDelete+0x28>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	60bb      	str	r3, [r7, #8]
}
 800aeec:	bf00      	nop
 800aeee:	e7fe      	b.n	800aeee <vQueueDelete+0x26>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
<<<<<<< HEAD
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 f95f 	bl	800acd0 <vQueueUnregisterQueue>
=======
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 f95f 	bl	800b1b4 <vQueueUnregisterQueue>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
<<<<<<< HEAD
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d102      	bne.n	800aa22 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f002 fb1f 	bl	800d060 <vPortFree>
=======
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d102      	bne.n	800af06 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f002 fabd 	bl	800d480 <vPortFree>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
<<<<<<< HEAD
 800aa22:	bf00      	nop
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <prvGetDisinheritPriorityAfterTimeout>:
=======
 800af06:	bf00      	nop
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <prvGetDisinheritPriorityAfterTimeout>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
<<<<<<< HEAD
 800aa2a:	b480      	push	{r7}
 800aa2c:	b085      	sub	sp, #20
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
=======
 800af0e:	b480      	push	{r7}
 800af10:	b085      	sub	sp, #20
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
<<<<<<< HEAD
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d006      	beq.n	800aa48 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aa44:	60fb      	str	r3, [r7, #12]
 800aa46:	e001      	b.n	800aa4c <prvGetDisinheritPriorityAfterTimeout+0x22>
=======
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d006      	beq.n	800af2c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800af28:	60fb      	str	r3, [r7, #12]
 800af2a:	e001      	b.n	800af30 <prvGetDisinheritPriorityAfterTimeout+0x22>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
<<<<<<< HEAD
 800aa48:	2300      	movs	r3, #0
 800aa4a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
	}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <prvCopyDataToQueue>:
=======
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af30:	68fb      	ldr	r3, [r7, #12]
	}
 800af32:	4618      	mov	r0, r3
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr

0800af3e <prvCopyDataToQueue>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b086      	sub	sp, #24
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa66:	2300      	movs	r3, #0
 800aa68:	617b      	str	r3, [r7, #20]
=======
 800af3e:	b580      	push	{r7, lr}
 800af40:	b086      	sub	sp, #24
 800af42:	af00      	add	r7, sp, #0
 800af44:	60f8      	str	r0, [r7, #12]
 800af46:	60b9      	str	r1, [r7, #8]
 800af48:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10d      	bne.n	800aa94 <prvCopyDataToQueue+0x3a>
=======
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af52:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10d      	bne.n	800af78 <prvCopyDataToQueue+0x3a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d14d      	bne.n	800ab1c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f001 f837 	bl	800baf8 <xTaskPriorityDisinherit>
 800aa8a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	609a      	str	r2, [r3, #8]
 800aa92:	e043      	b.n	800ab1c <prvCopyDataToQueue+0xc2>
=======
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d14d      	bne.n	800b000 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	4618      	mov	r0, r3
 800af6a:	f001 f837 	bl	800bfdc <xTaskPriorityDisinherit>
 800af6e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	609a      	str	r2, [r3, #8]
 800af76:	e043      	b.n	800b000 <prvCopyDataToQueue+0xc2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d119      	bne.n	800aace <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6858      	ldr	r0, [r3, #4]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	68b9      	ldr	r1, [r7, #8]
 800aaa6:	f004 f9ad 	bl	800ee04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	441a      	add	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d32b      	bcc.n	800ab1c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	605a      	str	r2, [r3, #4]
 800aacc:	e026      	b.n	800ab1c <prvCopyDataToQueue+0xc2>
=======
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d119      	bne.n	800afb2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6858      	ldr	r0, [r3, #4]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af86:	461a      	mov	r2, r3
 800af88:	68b9      	ldr	r1, [r7, #8]
 800af8a:	f004 fa6d 	bl	800f468 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af96:	441a      	add	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	685a      	ldr	r2, [r3, #4]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d32b      	bcc.n	800b000 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	605a      	str	r2, [r3, #4]
 800afb0:	e026      	b.n	800b000 <prvCopyDataToQueue+0xc2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< HEAD
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	68d8      	ldr	r0, [r3, #12]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	461a      	mov	r2, r3
 800aad8:	68b9      	ldr	r1, [r7, #8]
 800aada:	f004 f993 	bl	800ee04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68da      	ldr	r2, [r3, #12]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	425b      	negs	r3, r3
 800aae8:	441a      	add	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	68da      	ldr	r2, [r3, #12]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d207      	bcs.n	800ab0a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	689a      	ldr	r2, [r3, #8]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	425b      	negs	r3, r3
 800ab04:	441a      	add	r2, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	60da      	str	r2, [r3, #12]
=======
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	68d8      	ldr	r0, [r3, #12]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afba:	461a      	mov	r2, r3
 800afbc:	68b9      	ldr	r1, [r7, #8]
 800afbe:	f004 fa53 	bl	800f468 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	68da      	ldr	r2, [r3, #12]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afca:	425b      	negs	r3, r3
 800afcc:	441a      	add	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	68da      	ldr	r2, [r3, #12]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d207      	bcs.n	800afee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	689a      	ldr	r2, [r3, #8]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe6:	425b      	negs	r3, r3
 800afe8:	441a      	add	r2, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	60da      	str	r2, [r3, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d105      	bne.n	800ab1c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d002      	beq.n	800ab1c <prvCopyDataToQueue+0xc2>
=======
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d105      	bne.n	800b000 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <prvCopyDataToQueue+0xc2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	613b      	str	r3, [r7, #16]
=======
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	3b01      	subs	r3, #1
 800affe:	613b      	str	r3, [r7, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	1c5a      	adds	r2, r3, #1
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab24:	697b      	ldr	r3, [r7, #20]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3718      	adds	r7, #24
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <prvCopyDataFromQueue>:
=======
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b008:	697b      	ldr	r3, [r7, #20]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3718      	adds	r7, #24
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <prvCopyDataFromQueue>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b082      	sub	sp, #8
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d018      	beq.n	800ab72 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	68da      	ldr	r2, [r3, #12]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab48:	441a      	add	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68da      	ldr	r2, [r3, #12]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d303      	bcc.n	800ab62 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	60da      	str	r2, [r3, #12]
=======
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b020:	2b00      	cmp	r3, #0
 800b022:	d018      	beq.n	800b056 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02c:	441a      	add	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68da      	ldr	r2, [r3, #12]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d303      	bcc.n	800b046 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	60da      	str	r2, [r3, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	68d9      	ldr	r1, [r3, #12]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	6838      	ldr	r0, [r7, #0]
 800ab6e:	f004 f949 	bl	800ee04 <memcpy>
	}
}
 800ab72:	bf00      	nop
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <prvUnlockQueue>:
=======
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68d9      	ldr	r1, [r3, #12]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04e:	461a      	mov	r2, r3
 800b050:	6838      	ldr	r0, [r7, #0]
 800b052:	f004 fa09 	bl	800f468 <memcpy>
	}
}
 800b056:	bf00      	nop
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <prvUnlockQueue>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b084      	sub	sp, #16
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
=======
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800ab82:	f002 f87f 	bl	800cc84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab8c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab8e:	e011      	b.n	800abb4 <prvUnlockQueue+0x3a>
=======
 800b066:	f002 f81d 	bl	800d0a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b070:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b072:	e011      	b.n	800b098 <prvUnlockQueue+0x3a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d012      	beq.n	800abbe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	3324      	adds	r3, #36	; 0x24
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fd67 	bl	800b670 <xTaskRemoveFromEventList>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <prvUnlockQueue+0x32>
=======
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d012      	beq.n	800b0a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	3324      	adds	r3, #36	; 0x24
 800b080:	4618      	mov	r0, r3
 800b082:	f000 fd67 	bl	800bb54 <xTaskRemoveFromEventList>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <prvUnlockQueue+0x32>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 800aba8:	f000 fe3e 	bl	800b828 <vTaskMissedYield>
=======
 800b08c:	f000 fe3e 	bl	800bd0c <vTaskMissedYield>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	3b01      	subs	r3, #1
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dce9      	bgt.n	800ab90 <prvUnlockQueue+0x16>
 800abbc:	e000      	b.n	800abc0 <prvUnlockQueue+0x46>
					break;
 800abbe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	22ff      	movs	r2, #255	; 0xff
 800abc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abc8:	f002 f88c 	bl	800cce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abcc:	f002 f85a 	bl	800cc84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abd6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abd8:	e011      	b.n	800abfe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d012      	beq.n	800ac08 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	3310      	adds	r3, #16
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 fd42 	bl	800b670 <xTaskRemoveFromEventList>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800abf2:	f000 fe19 	bl	800b828 <vTaskMissedYield>
=======
 800b090:	7bfb      	ldrb	r3, [r7, #15]
 800b092:	3b01      	subs	r3, #1
 800b094:	b2db      	uxtb	r3, r3
 800b096:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dce9      	bgt.n	800b074 <prvUnlockQueue+0x16>
 800b0a0:	e000      	b.n	800b0a4 <prvUnlockQueue+0x46>
					break;
 800b0a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	22ff      	movs	r2, #255	; 0xff
 800b0a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b0ac:	f002 f82a 	bl	800d104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0b0:	f001 fff8 	bl	800d0a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0bc:	e011      	b.n	800b0e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d012      	beq.n	800b0ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3310      	adds	r3, #16
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 fd42 	bl	800bb54 <xTaskRemoveFromEventList>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b0d6:	f000 fe19 	bl	800bd0c <vTaskMissedYield>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 800abf6:	7bbb      	ldrb	r3, [r7, #14]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	dce9      	bgt.n	800abda <prvUnlockQueue+0x60>
 800ac06:	e000      	b.n	800ac0a <prvUnlockQueue+0x90>
=======
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	dce9      	bgt.n	800b0be <prvUnlockQueue+0x60>
 800b0ea:	e000      	b.n	800b0ee <prvUnlockQueue+0x90>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				break;
<<<<<<< HEAD
 800ac08:	bf00      	nop
=======
 800b0ec:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	22ff      	movs	r2, #255	; 0xff
 800ac0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac12:	f002 f867 	bl	800cce4 <vPortExitCritical>
}
 800ac16:	bf00      	nop
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <prvIsQueueEmpty>:
=======
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	22ff      	movs	r2, #255	; 0xff
 800b0f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b0f6:	f002 f805 	bl	800d104 <vPortExitCritical>
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <prvIsQueueEmpty>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac26:	f002 f82d 	bl	800cc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d102      	bne.n	800ac38 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac32:	2301      	movs	r3, #1
 800ac34:	60fb      	str	r3, [r7, #12]
 800ac36:	e001      	b.n	800ac3c <prvIsQueueEmpty+0x1e>
=======
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b10a:	f001 ffcb 	bl	800d0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b112:	2b00      	cmp	r3, #0
 800b114:	d102      	bne.n	800b11c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b116:	2301      	movs	r3, #1
 800b118:	60fb      	str	r3, [r7, #12]
 800b11a:	e001      	b.n	800b120 <prvIsQueueEmpty+0x1e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 800ac38:	2300      	movs	r3, #0
 800ac3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac3c:	f002 f852 	bl	800cce4 <vPortExitCritical>

	return xReturn;
 800ac40:	68fb      	ldr	r3, [r7, #12]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <prvIsQueueFull>:
=======
 800b11c:	2300      	movs	r3, #0
 800b11e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b120:	f001 fff0 	bl	800d104 <vPortExitCritical>

	return xReturn;
 800b124:	68fb      	ldr	r3, [r7, #12]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <prvIsQueueFull>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac52:	f002 f817 	bl	800cc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d102      	bne.n	800ac68 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac62:	2301      	movs	r3, #1
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	e001      	b.n	800ac6c <prvIsQueueFull+0x22>
=======
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b136:	f001 ffb5 	bl	800d0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b142:	429a      	cmp	r2, r3
 800b144:	d102      	bne.n	800b14c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b146:	2301      	movs	r3, #1
 800b148:	60fb      	str	r3, [r7, #12]
 800b14a:	e001      	b.n	800b150 <prvIsQueueFull+0x22>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 800ac68:	2300      	movs	r3, #0
 800ac6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac6c:	f002 f83a 	bl	800cce4 <vPortExitCritical>

	return xReturn;
 800ac70:	68fb      	ldr	r3, [r7, #12]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
	...

0800ac7c <vQueueAddToRegistry>:
=======
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b150:	f001 ffd8 	bl	800d104 <vPortExitCritical>

	return xReturn;
 800b154:	68fb      	ldr	r3, [r7, #12]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
	...

0800b160 <vQueueAddToRegistry>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< HEAD
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
=======
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 800ac86:	2300      	movs	r3, #0
 800ac88:	60fb      	str	r3, [r7, #12]
 800ac8a:	e014      	b.n	800acb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac8c:	4a0f      	ldr	r2, [pc, #60]	; (800accc <vQueueAddToRegistry+0x50>)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10b      	bne.n	800acb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac98:	490c      	ldr	r1, [pc, #48]	; (800accc <vQueueAddToRegistry+0x50>)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aca2:	4a0a      	ldr	r2, [pc, #40]	; (800accc <vQueueAddToRegistry+0x50>)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	4413      	add	r3, r2
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acae:	e006      	b.n	800acbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	3301      	adds	r3, #1
 800acb4:	60fb      	str	r3, [r7, #12]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b07      	cmp	r3, #7
 800acba:	d9e7      	bls.n	800ac8c <vQueueAddToRegistry+0x10>
=======
 800b16a:	2300      	movs	r3, #0
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	e014      	b.n	800b19a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b170:	4a0f      	ldr	r2, [pc, #60]	; (800b1b0 <vQueueAddToRegistry+0x50>)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10b      	bne.n	800b194 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b17c:	490c      	ldr	r1, [pc, #48]	; (800b1b0 <vQueueAddToRegistry+0x50>)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b186:	4a0a      	ldr	r2, [pc, #40]	; (800b1b0 <vQueueAddToRegistry+0x50>)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	00db      	lsls	r3, r3, #3
 800b18c:	4413      	add	r3, r2
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b192:	e006      	b.n	800b1a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3301      	adds	r3, #1
 800b198:	60fb      	str	r3, [r7, #12]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2b07      	cmp	r3, #7
 800b19e:	d9e7      	bls.n	800b170 <vQueueAddToRegistry+0x10>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< HEAD
 800acbc:	bf00      	nop
 800acbe:	bf00      	nop
 800acc0:	3714      	adds	r7, #20
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	20000e88 	.word	0x20000e88

0800acd0 <vQueueUnregisterQueue>:
=======
 800b1a0:	bf00      	nop
 800b1a2:	bf00      	nop
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	20000e70 	.word	0x20000e70

0800b1b4 <vQueueUnregisterQueue>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
<<<<<<< HEAD
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
=======
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 800acd8:	2300      	movs	r3, #0
 800acda:	60fb      	str	r3, [r7, #12]
 800acdc:	e016      	b.n	800ad0c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800acde:	4a10      	ldr	r2, [pc, #64]	; (800ad20 <vQueueUnregisterQueue+0x50>)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	4413      	add	r3, r2
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	429a      	cmp	r2, r3
 800acec:	d10b      	bne.n	800ad06 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800acee:	4a0c      	ldr	r2, [pc, #48]	; (800ad20 <vQueueUnregisterQueue+0x50>)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2100      	movs	r1, #0
 800acf4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
=======
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]
 800b1c0:	e016      	b.n	800b1f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b1c2:	4a10      	ldr	r2, [pc, #64]	; (800b204 <vQueueUnregisterQueue+0x50>)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	4413      	add	r3, r2
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d10b      	bne.n	800b1ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b1d2:	4a0c      	ldr	r2, [pc, #48]	; (800b204 <vQueueUnregisterQueue+0x50>)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
<<<<<<< HEAD
 800acf8:	4a09      	ldr	r2, [pc, #36]	; (800ad20 <vQueueUnregisterQueue+0x50>)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	00db      	lsls	r3, r3, #3
 800acfe:	4413      	add	r3, r2
 800ad00:	2200      	movs	r2, #0
 800ad02:	605a      	str	r2, [r3, #4]
				break;
 800ad04:	e006      	b.n	800ad14 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2b07      	cmp	r3, #7
 800ad10:	d9e5      	bls.n	800acde <vQueueUnregisterQueue+0xe>
=======
 800b1dc:	4a09      	ldr	r2, [pc, #36]	; (800b204 <vQueueUnregisterQueue+0x50>)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	4413      	add	r3, r2
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	605a      	str	r2, [r3, #4]
				break;
 800b1e8:	e006      	b.n	800b1f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b07      	cmp	r3, #7
 800b1f4:	d9e5      	bls.n	800b1c2 <vQueueUnregisterQueue+0xe>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
<<<<<<< HEAD
 800ad12:	bf00      	nop
 800ad14:	bf00      	nop
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	20000e88 	.word	0x20000e88

0800ad24 <vQueueWaitForMessageRestricted>:
=======
 800b1f6:	bf00      	nop
 800b1f8:	bf00      	nop
 800b1fa:	3714      	adds	r7, #20
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	20000e70 	.word	0x20000e70

0800b208 <vQueueWaitForMessageRestricted>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	617b      	str	r3, [r7, #20]
=======
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 800ad34:	f001 ffa6 	bl	800cc84 <vPortEnterCritical>
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad3e:	b25b      	sxtb	r3, r3
 800ad40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad44:	d103      	bne.n	800ad4e <vQueueWaitForMessageRestricted+0x2a>
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad54:	b25b      	sxtb	r3, r3
 800ad56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5a:	d103      	bne.n	800ad64 <vQueueWaitForMessageRestricted+0x40>
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad64:	f001 ffbe 	bl	800cce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d106      	bne.n	800ad7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	3324      	adds	r3, #36	; 0x24
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	68b9      	ldr	r1, [r7, #8]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fc4d 	bl	800b618 <vTaskPlaceOnEventListRestricted>
=======
 800b218:	f001 ff44 	bl	800d0a4 <vPortEnterCritical>
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b222:	b25b      	sxtb	r3, r3
 800b224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b228:	d103      	bne.n	800b232 <vQueueWaitForMessageRestricted+0x2a>
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b238:	b25b      	sxtb	r3, r3
 800b23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23e:	d103      	bne.n	800b248 <vQueueWaitForMessageRestricted+0x40>
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b248:	f001 ff5c 	bl	800d104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b250:	2b00      	cmp	r3, #0
 800b252:	d106      	bne.n	800b262 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	3324      	adds	r3, #36	; 0x24
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	68b9      	ldr	r1, [r7, #8]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 fc4d 	bl	800bafc <vTaskPlaceOnEventListRestricted>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800ad7e:	6978      	ldr	r0, [r7, #20]
 800ad80:	f7ff fefb 	bl	800ab7a <prvUnlockQueue>
	}
 800ad84:	bf00      	nop
 800ad86:	3718      	adds	r7, #24
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <xTaskCreateStatic>:
=======
 800b262:	6978      	ldr	r0, [r7, #20]
 800b264:	f7ff fefb 	bl	800b05e <prvUnlockQueue>
	}
 800b268:	bf00      	nop
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <xTaskCreateStatic>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b08e      	sub	sp, #56	; 0x38
 800ad90:	af04      	add	r7, sp, #16
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	603b      	str	r3, [r7, #0]
=======
 800b270:	b580      	push	{r7, lr}
 800b272:	b08e      	sub	sp, #56	; 0x38
 800b274:	af04      	add	r7, sp, #16
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	603b      	str	r3, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 800ad9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	623b      	str	r3, [r7, #32]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10a      	bne.n	800add2 <xTaskCreateStatic+0x46>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	61fb      	str	r3, [r7, #28]
}
 800adce:	bf00      	nop
 800add0:	e7fe      	b.n	800add0 <xTaskCreateStatic+0x44>
=======
 800b27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b280:	2b00      	cmp	r3, #0
 800b282:	d10a      	bne.n	800b29a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	623b      	str	r3, [r7, #32]
}
 800b296:	bf00      	nop
 800b298:	e7fe      	b.n	800b298 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10a      	bne.n	800b2b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	61fb      	str	r3, [r7, #28]
}
 800b2b2:	bf00      	nop
 800b2b4:	e7fe      	b.n	800b2b4 <xTaskCreateStatic+0x44>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 800add2:	235c      	movs	r3, #92	; 0x5c
 800add4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	2b5c      	cmp	r3, #92	; 0x5c
 800adda:	d00a      	beq.n	800adf2 <xTaskCreateStatic+0x66>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	61bb      	str	r3, [r7, #24]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800adf2:	693b      	ldr	r3, [r7, #16]
=======
 800b2b6:	235c      	movs	r3, #92	; 0x5c
 800b2b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	2b5c      	cmp	r3, #92	; 0x5c
 800b2be:	d00a      	beq.n	800b2d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	61bb      	str	r3, [r7, #24]
}
 800b2d2:	bf00      	nop
 800b2d4:	e7fe      	b.n	800b2d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2d6:	693b      	ldr	r3, [r7, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01e      	beq.n	800ae38 <xTaskCreateStatic+0xac>
 800adfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01b      	beq.n	800ae38 <xTaskCreateStatic+0xac>
=======
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d01e      	beq.n	800b31c <xTaskCreateStatic+0xac>
 800b2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d01b      	beq.n	800b31c <xTaskCreateStatic+0xac>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800ae00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae08:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2ec:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
=======
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f0:	2202      	movs	r2, #2
 800b2f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 800ae12:	2300      	movs	r3, #0
 800ae14:	9303      	str	r3, [sp, #12]
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	9302      	str	r3, [sp, #8]
 800ae1a:	f107 0314 	add.w	r3, r7, #20
 800ae1e:	9301      	str	r3, [sp, #4]
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	68b9      	ldr	r1, [r7, #8]
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f000 f850 	bl	800aed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae32:	f000 f8dd 	bl	800aff0 <prvAddNewTaskToReadyList>
 800ae36:	e001      	b.n	800ae3c <xTaskCreateStatic+0xb0>
=======
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	9303      	str	r3, [sp, #12]
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fc:	9302      	str	r3, [sp, #8]
 800b2fe:	f107 0314 	add.w	r3, r7, #20
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	68b9      	ldr	r1, [r7, #8]
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f000 f850 	bl	800b3b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b316:	f000 f8dd 	bl	800b4d4 <prvAddNewTaskToReadyList>
 800b31a:	e001      	b.n	800b320 <xTaskCreateStatic+0xb0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 800ae38:	2300      	movs	r3, #0
 800ae3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae3c:	697b      	ldr	r3, [r7, #20]
	}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3728      	adds	r7, #40	; 0x28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <xTaskCreate>:
=======
 800b31c:	2300      	movs	r3, #0
 800b31e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b320:	697b      	ldr	r3, [r7, #20]
	}
 800b322:	4618      	mov	r0, r3
 800b324:	3728      	adds	r7, #40	; 0x28
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <xTaskCreate>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b08c      	sub	sp, #48	; 0x30
 800ae4a:	af04      	add	r7, sp, #16
 800ae4c:	60f8      	str	r0, [r7, #12]
 800ae4e:	60b9      	str	r1, [r7, #8]
 800ae50:	603b      	str	r3, [r7, #0]
 800ae52:	4613      	mov	r3, r2
 800ae54:	80fb      	strh	r3, [r7, #6]
=======
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b08c      	sub	sp, #48	; 0x30
 800b32e:	af04      	add	r7, sp, #16
 800b330:	60f8      	str	r0, [r7, #12]
 800b332:	60b9      	str	r1, [r7, #8]
 800b334:	603b      	str	r3, [r7, #0]
 800b336:	4613      	mov	r3, r2
 800b338:	80fb      	strh	r3, [r7, #6]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 800ae56:	88fb      	ldrh	r3, [r7, #6]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f002 f834 	bl	800cec8 <pvPortMalloc>
 800ae60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00e      	beq.n	800ae86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae68:	205c      	movs	r0, #92	; 0x5c
 800ae6a:	f002 f82d 	bl	800cec8 <pvPortMalloc>
 800ae6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	631a      	str	r2, [r3, #48]	; 0x30
 800ae7c:	e005      	b.n	800ae8a <xTaskCreate+0x44>
=======
 800b33a:	88fb      	ldrh	r3, [r7, #6]
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4618      	mov	r0, r3
 800b340:	f001 ffd2 	bl	800d2e8 <pvPortMalloc>
 800b344:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00e      	beq.n	800b36a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b34c:	205c      	movs	r0, #92	; 0x5c
 800b34e:	f001 ffcb 	bl	800d2e8 <pvPortMalloc>
 800b352:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d003      	beq.n	800b362 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	631a      	str	r2, [r3, #48]	; 0x30
 800b360:	e005      	b.n	800b36e <xTaskCreate+0x44>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 800ae7e:	6978      	ldr	r0, [r7, #20]
 800ae80:	f002 f8ee 	bl	800d060 <vPortFree>
 800ae84:	e001      	b.n	800ae8a <xTaskCreate+0x44>
=======
 800b362:	6978      	ldr	r0, [r7, #20]
 800b364:	f002 f88c 	bl	800d480 <vPortFree>
 800b368:	e001      	b.n	800b36e <xTaskCreate+0x44>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 800ae86:	2300      	movs	r3, #0
 800ae88:	61fb      	str	r3, [r7, #28]
=======
 800b36a:	2300      	movs	r3, #0
 800b36c:	61fb      	str	r3, [r7, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d017      	beq.n	800aec0 <xTaskCreate+0x7a>
=======
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d017      	beq.n	800b3a4 <xTaskCreate+0x7a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
=======
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	2200      	movs	r2, #0
 800b378:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 800ae98:	88fa      	ldrh	r2, [r7, #6]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	9303      	str	r3, [sp, #12]
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	9302      	str	r3, [sp, #8]
 800aea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	68b9      	ldr	r1, [r7, #8]
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f000 f80e 	bl	800aed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aeb4:	69f8      	ldr	r0, [r7, #28]
 800aeb6:	f000 f89b 	bl	800aff0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aeba:	2301      	movs	r3, #1
 800aebc:	61bb      	str	r3, [r7, #24]
 800aebe:	e002      	b.n	800aec6 <xTaskCreate+0x80>
=======
 800b37c:	88fa      	ldrh	r2, [r7, #6]
 800b37e:	2300      	movs	r3, #0
 800b380:	9303      	str	r3, [sp, #12]
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	9302      	str	r3, [sp, #8]
 800b386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b388:	9301      	str	r3, [sp, #4]
 800b38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	68b9      	ldr	r1, [r7, #8]
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f000 f80e 	bl	800b3b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b398:	69f8      	ldr	r0, [r7, #28]
 800b39a:	f000 f89b 	bl	800b4d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	61bb      	str	r3, [r7, #24]
 800b3a2:	e002      	b.n	800b3aa <xTaskCreate+0x80>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 800aec0:	f04f 33ff 	mov.w	r3, #4294967295
 800aec4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aec6:	69bb      	ldr	r3, [r7, #24]
	}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3720      	adds	r7, #32
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <prvInitialiseNewTask>:
=======
 800b3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3aa:	69bb      	ldr	r3, [r7, #24]
	}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3720      	adds	r7, #32
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <prvInitialiseNewTask>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b088      	sub	sp, #32
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	603b      	str	r3, [r7, #0]
=======
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b088      	sub	sp, #32
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
 800b3c0:	603b      	str	r3, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< HEAD
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	461a      	mov	r2, r3
 800aee8:	21a5      	movs	r1, #165	; 0xa5
 800aeea:	f003 ff5f 	bl	800edac <memset>
=======
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	21a5      	movs	r1, #165	; 0xa5
 800b3ce:	f004 f81f 	bl	800f410 <memset>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aef8:	3b01      	subs	r3, #1
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	f023 0307 	bic.w	r3, r3, #7
 800af06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	f003 0307 	and.w	r3, r3, #7
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00a      	beq.n	800af28 <prvInitialiseNewTask+0x58>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	617b      	str	r3, [r7, #20]
}
 800af24:	bf00      	nop
 800af26:	e7fe      	b.n	800af26 <prvInitialiseNewTask+0x56>
=======
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	f023 0307 	bic.w	r3, r3, #7
 800b3ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	f003 0307 	and.w	r3, r3, #7
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00a      	beq.n	800b40c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fa:	f383 8811 	msr	BASEPRI, r3
 800b3fe:	f3bf 8f6f 	isb	sy
 800b402:	f3bf 8f4f 	dsb	sy
 800b406:	617b      	str	r3, [r7, #20]
}
 800b408:	bf00      	nop
 800b40a:	e7fe      	b.n	800b40a <prvInitialiseNewTask+0x56>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d01f      	beq.n	800af6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af2e:	2300      	movs	r3, #0
 800af30:	61fb      	str	r3, [r7, #28]
 800af32:	e012      	b.n	800af5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af34:	68ba      	ldr	r2, [r7, #8]
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	4413      	add	r3, r2
 800af3a:	7819      	ldrb	r1, [r3, #0]
 800af3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	4413      	add	r3, r2
 800af42:	3334      	adds	r3, #52	; 0x34
 800af44:	460a      	mov	r2, r1
 800af46:	701a      	strb	r2, [r3, #0]
=======
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d01f      	beq.n	800b452 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b412:	2300      	movs	r3, #0
 800b414:	61fb      	str	r3, [r7, #28]
 800b416:	e012      	b.n	800b43e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	4413      	add	r3, r2
 800b41e:	7819      	ldrb	r1, [r3, #0]
 800b420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	4413      	add	r3, r2
 800b426:	3334      	adds	r3, #52	; 0x34
 800b428:	460a      	mov	r2, r1
 800b42a:	701a      	strb	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	4413      	add	r3, r2
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d006      	beq.n	800af62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	3301      	adds	r3, #1
 800af58:	61fb      	str	r3, [r7, #28]
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	2b0f      	cmp	r3, #15
 800af5e:	d9e9      	bls.n	800af34 <prvInitialiseNewTask+0x64>
 800af60:	e000      	b.n	800af64 <prvInitialiseNewTask+0x94>
			{
				break;
 800af62:	bf00      	nop
=======
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	4413      	add	r3, r2
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d006      	beq.n	800b446 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	3301      	adds	r3, #1
 800b43c:	61fb      	str	r3, [r7, #28]
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	2b0f      	cmp	r3, #15
 800b442:	d9e9      	bls.n	800b418 <prvInitialiseNewTask+0x64>
 800b444:	e000      	b.n	800b448 <prvInitialiseNewTask+0x94>
			{
				break;
 800b446:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 800af64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af66:	2200      	movs	r2, #0
 800af68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af6c:	e003      	b.n	800af76 <prvInitialiseNewTask+0xa6>
=======
 800b448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b450:	e003      	b.n	800b45a <prvInitialiseNewTask+0xa6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	2200      	movs	r2, #0
 800af72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	2200      	movs	r2, #0
 800b456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 800af76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af78:	2b37      	cmp	r3, #55	; 0x37
 800af7a:	d901      	bls.n	800af80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af7c:	2337      	movs	r3, #55	; 0x37
 800af7e:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800b45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45c:	2b37      	cmp	r3, #55	; 0x37
 800b45e:	d901      	bls.n	800b464 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b460:	2337      	movs	r3, #55	; 0x37
 800b462:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 800af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	2200      	movs	r2, #0
 800af90:	651a      	str	r2, [r3, #80]	; 0x50
=======
 800b464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b468:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b46e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	2200      	movs	r2, #0
 800b474:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	3304      	adds	r3, #4
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe ff61 	bl	8009e5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	3318      	adds	r3, #24
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe ff5c 	bl	8009e5e <vListInitialiseItem>
=======
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	3304      	adds	r3, #4
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe ff61 	bl	800a342 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b482:	3318      	adds	r3, #24
 800b484:	4618      	mov	r0, r3
 800b486:	f7fe ff5c 	bl	800a342 <vListInitialiseItem>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afba:	625a      	str	r2, [r3, #36]	; 0x24
=======
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b48e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b492:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b49e:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 800afbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbe:	2200      	movs	r2, #0
 800afc0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
=======
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	68f9      	ldr	r1, [r7, #12]
 800afce:	69b8      	ldr	r0, [r7, #24]
 800afd0:	f001 fd28 	bl	800ca24 <pxPortInitialiseStack>
 800afd4:	4602      	mov	r2, r0
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	601a      	str	r2, [r3, #0]
=======
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	68f9      	ldr	r1, [r7, #12]
 800b4b2:	69b8      	ldr	r0, [r7, #24]
 800b4b4:	f001 fcca 	bl	800ce4c <pxPortInitialiseStack>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4bc:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 800afda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <prvInitialiseNewTask+0x116>
=======
 800b4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <prvInitialiseNewTask+0x116>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 800afe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe4:	601a      	str	r2, [r3, #0]
=======
 800b4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c8:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800afe6:	bf00      	nop
 800afe8:	3720      	adds	r7, #32
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
	...

0800aff0 <prvAddNewTaskToReadyList>:
=======
 800b4ca:	bf00      	nop
 800b4cc:	3720      	adds	r7, #32
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
	...

0800b4d4 <prvAddNewTaskToReadyList>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aff8:	f001 fe44 	bl	800cc84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800affc:	4b2d      	ldr	r3, [pc, #180]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3301      	adds	r3, #1
 800b002:	4a2c      	ldr	r2, [pc, #176]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b004:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b006:	4b2c      	ldr	r3, [pc, #176]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d109      	bne.n	800b022 <prvAddNewTaskToReadyList+0x32>
=======
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4dc:	f001 fde2 	bl	800d0a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4e0:	4b2d      	ldr	r3, [pc, #180]	; (800b598 <prvAddNewTaskToReadyList+0xc4>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	4a2c      	ldr	r2, [pc, #176]	; (800b598 <prvAddNewTaskToReadyList+0xc4>)
 800b4e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4ea:	4b2c      	ldr	r3, [pc, #176]	; (800b59c <prvAddNewTaskToReadyList+0xc8>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d109      	bne.n	800b506 <prvAddNewTaskToReadyList+0x32>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 800b00e:	4a2a      	ldr	r2, [pc, #168]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b014:	4b27      	ldr	r3, [pc, #156]	; (800b0b4 <prvAddNewTaskToReadyList+0xc4>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d110      	bne.n	800b03e <prvAddNewTaskToReadyList+0x4e>
=======
 800b4f2:	4a2a      	ldr	r2, [pc, #168]	; (800b59c <prvAddNewTaskToReadyList+0xc8>)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4f8:	4b27      	ldr	r3, [pc, #156]	; (800b598 <prvAddNewTaskToReadyList+0xc4>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d110      	bne.n	800b522 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 800b01c:	f000 fc28 	bl	800b870 <prvInitialiseTaskLists>
 800b020:	e00d      	b.n	800b03e <prvAddNewTaskToReadyList+0x4e>
=======
 800b500:	f000 fc28 	bl	800bd54 <prvInitialiseTaskLists>
 800b504:	e00d      	b.n	800b522 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 800b022:	4b26      	ldr	r3, [pc, #152]	; (800b0bc <prvAddNewTaskToReadyList+0xcc>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d109      	bne.n	800b03e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b02a:	4b23      	ldr	r3, [pc, #140]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b034:	429a      	cmp	r2, r3
 800b036:	d802      	bhi.n	800b03e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b038:	4a1f      	ldr	r2, [pc, #124]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6013      	str	r3, [r2, #0]
=======
 800b506:	4b26      	ldr	r3, [pc, #152]	; (800b5a0 <prvAddNewTaskToReadyList+0xcc>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d109      	bne.n	800b522 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b50e:	4b23      	ldr	r3, [pc, #140]	; (800b59c <prvAddNewTaskToReadyList+0xc8>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	429a      	cmp	r2, r3
 800b51a:	d802      	bhi.n	800b522 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b51c:	4a1f      	ldr	r2, [pc, #124]	; (800b59c <prvAddNewTaskToReadyList+0xc8>)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 800b03e:	4b20      	ldr	r3, [pc, #128]	; (800b0c0 <prvAddNewTaskToReadyList+0xd0>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3301      	adds	r3, #1
 800b044:	4a1e      	ldr	r2, [pc, #120]	; (800b0c0 <prvAddNewTaskToReadyList+0xd0>)
 800b046:	6013      	str	r3, [r2, #0]
=======
 800b522:	4b20      	ldr	r3, [pc, #128]	; (800b5a4 <prvAddNewTaskToReadyList+0xd0>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	3301      	adds	r3, #1
 800b528:	4a1e      	ldr	r2, [pc, #120]	; (800b5a4 <prvAddNewTaskToReadyList+0xd0>)
 800b52a:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< HEAD
 800b048:	4b1d      	ldr	r3, [pc, #116]	; (800b0c0 <prvAddNewTaskToReadyList+0xd0>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800b52c:	4b1d      	ldr	r3, [pc, #116]	; (800b5a4 <prvAddNewTaskToReadyList+0xd0>)
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b054:	4b1b      	ldr	r3, [pc, #108]	; (800b0c4 <prvAddNewTaskToReadyList+0xd4>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d903      	bls.n	800b064 <prvAddNewTaskToReadyList+0x74>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b060:	4a18      	ldr	r2, [pc, #96]	; (800b0c4 <prvAddNewTaskToReadyList+0xd4>)
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b068:	4613      	mov	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4a15      	ldr	r2, [pc, #84]	; (800b0c8 <prvAddNewTaskToReadyList+0xd8>)
 800b072:	441a      	add	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3304      	adds	r3, #4
 800b078:	4619      	mov	r1, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	f7fe fefc 	bl	8009e78 <vListInsertEnd>
=======
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b538:	4b1b      	ldr	r3, [pc, #108]	; (800b5a8 <prvAddNewTaskToReadyList+0xd4>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d903      	bls.n	800b548 <prvAddNewTaskToReadyList+0x74>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b544:	4a18      	ldr	r2, [pc, #96]	; (800b5a8 <prvAddNewTaskToReadyList+0xd4>)
 800b546:	6013      	str	r3, [r2, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54c:	4613      	mov	r3, r2
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	4413      	add	r3, r2
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	4a15      	ldr	r2, [pc, #84]	; (800b5ac <prvAddNewTaskToReadyList+0xd8>)
 800b556:	441a      	add	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	3304      	adds	r3, #4
 800b55c:	4619      	mov	r1, r3
 800b55e:	4610      	mov	r0, r2
 800b560:	f7fe fefc 	bl	800a35c <vListInsertEnd>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800b080:	f001 fe30 	bl	800cce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b084:	4b0d      	ldr	r3, [pc, #52]	; (800b0bc <prvAddNewTaskToReadyList+0xcc>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00e      	beq.n	800b0aa <prvAddNewTaskToReadyList+0xba>
=======
 800b564:	f001 fdce 	bl	800d104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b568:	4b0d      	ldr	r3, [pc, #52]	; (800b5a0 <prvAddNewTaskToReadyList+0xcc>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00e      	beq.n	800b58e <prvAddNewTaskToReadyList+0xba>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 800b08c:	4b0a      	ldr	r3, [pc, #40]	; (800b0b8 <prvAddNewTaskToReadyList+0xc8>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	429a      	cmp	r2, r3
 800b098:	d207      	bcs.n	800b0aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b09a:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <prvAddNewTaskToReadyList+0xdc>)
 800b09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0a0:	601a      	str	r2, [r3, #0]
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	f3bf 8f6f 	isb	sy
=======
 800b570:	4b0a      	ldr	r3, [pc, #40]	; (800b59c <prvAddNewTaskToReadyList+0xc8>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d207      	bcs.n	800b58e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b57e:	4b0c      	ldr	r3, [pc, #48]	; (800b5b0 <prvAddNewTaskToReadyList+0xdc>)
 800b580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	f3bf 8f6f 	isb	sy
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	2000139c 	.word	0x2000139c
 800b0b8:	20000ec8 	.word	0x20000ec8
 800b0bc:	200013a8 	.word	0x200013a8
 800b0c0:	200013b8 	.word	0x200013b8
 800b0c4:	200013a4 	.word	0x200013a4
 800b0c8:	20000ecc 	.word	0x20000ecc
 800b0cc:	e000ed04 	.word	0xe000ed04

0800b0d0 <vTaskDelay>:
=======
 800b58e:	bf00      	nop
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20001384 	.word	0x20001384
 800b59c:	20000eb0 	.word	0x20000eb0
 800b5a0:	20001390 	.word	0x20001390
 800b5a4:	200013a0 	.word	0x200013a0
 800b5a8:	2000138c 	.word	0x2000138c
 800b5ac:	20000eb4 	.word	0x20000eb4
 800b5b0:	e000ed04 	.word	0xe000ed04

0800b5b4 <vTaskDelay>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d017      	beq.n	800b112 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0e2:	4b13      	ldr	r3, [pc, #76]	; (800b130 <vTaskDelay+0x60>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00a      	beq.n	800b100 <vTaskDelay+0x30>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	60bb      	str	r3, [r7, #8]
}
 800b0fc:	bf00      	nop
 800b0fe:	e7fe      	b.n	800b0fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b100:	f000 f880 	bl	800b204 <vTaskSuspendAll>
=======
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d017      	beq.n	800b5f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5c6:	4b13      	ldr	r3, [pc, #76]	; (800b614 <vTaskDelay+0x60>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00a      	beq.n	800b5e4 <vTaskDelay+0x30>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	60bb      	str	r3, [r7, #8]
}
 800b5e0:	bf00      	nop
 800b5e2:	e7fe      	b.n	800b5e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5e4:	f000 f880 	bl	800b6e8 <vTaskSuspendAll>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 800b104:	2100      	movs	r1, #0
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f001 f830 	bl	800c16c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b10c:	f000 f888 	bl	800b220 <xTaskResumeAll>
 800b110:	60f8      	str	r0, [r7, #12]
=======
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 f830 	bl	800c650 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5f0:	f000 f888 	bl	800b704 <xTaskResumeAll>
 800b5f4:	60f8      	str	r0, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d107      	bne.n	800b128 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b118:	4b06      	ldr	r3, [pc, #24]	; (800b134 <vTaskDelay+0x64>)
 800b11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	f3bf 8f6f 	isb	sy
=======
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d107      	bne.n	800b60c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5fc:	4b06      	ldr	r3, [pc, #24]	; (800b618 <vTaskDelay+0x64>)
 800b5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	f3bf 8f6f 	isb	sy
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800b128:	bf00      	nop
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	200013c4 	.word	0x200013c4
 800b134:	e000ed04 	.word	0xe000ed04

0800b138 <vTaskStartScheduler>:
=======
 800b60c:	bf00      	nop
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	200013ac 	.word	0x200013ac
 800b618:	e000ed04 	.word	0xe000ed04

0800b61c <vTaskStartScheduler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08a      	sub	sp, #40	; 0x28
 800b13c:	af04      	add	r7, sp, #16
=======
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b08a      	sub	sp, #40	; 0x28
 800b620:	af04      	add	r7, sp, #16
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800b13e:	2300      	movs	r3, #0
 800b140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b142:	2300      	movs	r3, #0
 800b144:	607b      	str	r3, [r7, #4]
=======
 800b622:	2300      	movs	r3, #0
 800b624:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b626:	2300      	movs	r3, #0
 800b628:	607b      	str	r3, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 800b146:	463a      	mov	r2, r7
 800b148:	1d39      	adds	r1, r7, #4
 800b14a:	f107 0308 	add.w	r3, r7, #8
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe fde0 	bl	8009d14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68ba      	ldr	r2, [r7, #8]
 800b15a:	9202      	str	r2, [sp, #8]
 800b15c:	9301      	str	r3, [sp, #4]
 800b15e:	2300      	movs	r3, #0
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	2300      	movs	r3, #0
 800b164:	460a      	mov	r2, r1
 800b166:	4921      	ldr	r1, [pc, #132]	; (800b1ec <vTaskStartScheduler+0xb4>)
 800b168:	4821      	ldr	r0, [pc, #132]	; (800b1f0 <vTaskStartScheduler+0xb8>)
 800b16a:	f7ff fe0f 	bl	800ad8c <xTaskCreateStatic>
 800b16e:	4603      	mov	r3, r0
 800b170:	4a20      	ldr	r2, [pc, #128]	; (800b1f4 <vTaskStartScheduler+0xbc>)
 800b172:	6013      	str	r3, [r2, #0]
=======
 800b62a:	463a      	mov	r2, r7
 800b62c:	1d39      	adds	r1, r7, #4
 800b62e:	f107 0308 	add.w	r3, r7, #8
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe fde0 	bl	800a1f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	9202      	str	r2, [sp, #8]
 800b640:	9301      	str	r3, [sp, #4]
 800b642:	2300      	movs	r3, #0
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	2300      	movs	r3, #0
 800b648:	460a      	mov	r2, r1
 800b64a:	4921      	ldr	r1, [pc, #132]	; (800b6d0 <vTaskStartScheduler+0xb4>)
 800b64c:	4821      	ldr	r0, [pc, #132]	; (800b6d4 <vTaskStartScheduler+0xb8>)
 800b64e:	f7ff fe0f 	bl	800b270 <xTaskCreateStatic>
 800b652:	4603      	mov	r3, r0
 800b654:	4a20      	ldr	r2, [pc, #128]	; (800b6d8 <vTaskStartScheduler+0xbc>)
 800b656:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 800b174:	4b1f      	ldr	r3, [pc, #124]	; (800b1f4 <vTaskStartScheduler+0xbc>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b17c:	2301      	movs	r3, #1
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	e001      	b.n	800b186 <vTaskStartScheduler+0x4e>
=======
 800b658:	4b1f      	ldr	r3, [pc, #124]	; (800b6d8 <vTaskStartScheduler+0xbc>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b660:	2301      	movs	r3, #1
 800b662:	617b      	str	r3, [r7, #20]
 800b664:	e001      	b.n	800b66a <vTaskStartScheduler+0x4e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 800b182:	2300      	movs	r3, #0
 800b184:	617b      	str	r3, [r7, #20]
=======
 800b666:	2300      	movs	r3, #0
 800b668:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< HEAD
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d102      	bne.n	800b192 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b18c:	f001 f842 	bl	800c214 <xTimerCreateTimerTask>
 800b190:	6178      	str	r0, [r7, #20]
=======
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d102      	bne.n	800b676 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b670:	f001 f842 	bl	800c6f8 <xTimerCreateTimerTask>
 800b674:	6178      	str	r0, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d116      	bne.n	800b1c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	613b      	str	r3, [r7, #16]
}
 800b1aa:	bf00      	nop
=======
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d116      	bne.n	800b6aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	613b      	str	r3, [r7, #16]
}
 800b68e:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 800b1ac:	4b12      	ldr	r3, [pc, #72]	; (800b1f8 <vTaskStartScheduler+0xc0>)
 800b1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1b4:	4b11      	ldr	r3, [pc, #68]	; (800b1fc <vTaskStartScheduler+0xc4>)
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1ba:	4b11      	ldr	r3, [pc, #68]	; (800b200 <vTaskStartScheduler+0xc8>)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	601a      	str	r2, [r3, #0]
=======
 800b690:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <vTaskStartScheduler+0xc0>)
 800b692:	f04f 32ff 	mov.w	r2, #4294967295
 800b696:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b698:	4b11      	ldr	r3, [pc, #68]	; (800b6e0 <vTaskStartScheduler+0xc4>)
 800b69a:	2201      	movs	r2, #1
 800b69c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b69e:	4b11      	ldr	r3, [pc, #68]	; (800b6e4 <vTaskStartScheduler+0xc8>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 800b1c0:	f001 fcbe 	bl	800cb40 <xPortStartScheduler>
=======
 800b6a4:	f001 fc5c 	bl	800cf60 <xPortStartScheduler>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 800b1c4:	e00e      	b.n	800b1e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1cc:	d10a      	bne.n	800b1e4 <vTaskStartScheduler+0xac>
	__asm volatile
 800b1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	60fb      	str	r3, [r7, #12]
}
 800b1e0:	bf00      	nop
 800b1e2:	e7fe      	b.n	800b1e2 <vTaskStartScheduler+0xaa>
}
 800b1e4:	bf00      	nop
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	0800eea0 	.word	0x0800eea0
 800b1f0:	0800b841 	.word	0x0800b841
 800b1f4:	200013c0 	.word	0x200013c0
 800b1f8:	200013bc 	.word	0x200013bc
 800b1fc:	200013a8 	.word	0x200013a8
 800b200:	200013a0 	.word	0x200013a0

0800b204 <vTaskSuspendAll>:
=======
 800b6a8:	e00e      	b.n	800b6c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b0:	d10a      	bne.n	800b6c8 <vTaskStartScheduler+0xac>
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	60fb      	str	r3, [r7, #12]
}
 800b6c4:	bf00      	nop
 800b6c6:	e7fe      	b.n	800b6c6 <vTaskStartScheduler+0xaa>
}
 800b6c8:	bf00      	nop
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	0800f4fc 	.word	0x0800f4fc
 800b6d4:	0800bd25 	.word	0x0800bd25
 800b6d8:	200013a8 	.word	0x200013a8
 800b6dc:	200013a4 	.word	0x200013a4
 800b6e0:	20001390 	.word	0x20001390
 800b6e4:	20001388 	.word	0x20001388

0800b6e8 <vTaskSuspendAll>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 800b204:	b480      	push	{r7}
 800b206:	af00      	add	r7, sp, #0
=======
 800b6e8:	b480      	push	{r7}
 800b6ea:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 800b208:	4b04      	ldr	r3, [pc, #16]	; (800b21c <vTaskSuspendAll+0x18>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	3301      	adds	r3, #1
 800b20e:	4a03      	ldr	r2, [pc, #12]	; (800b21c <vTaskSuspendAll+0x18>)
 800b210:	6013      	str	r3, [r2, #0]
=======
 800b6ec:	4b04      	ldr	r3, [pc, #16]	; (800b700 <vTaskSuspendAll+0x18>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	4a03      	ldr	r2, [pc, #12]	; (800b700 <vTaskSuspendAll+0x18>)
 800b6f4:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< HEAD
 800b212:	bf00      	nop
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	200013c4 	.word	0x200013c4

0800b220 <xTaskResumeAll>:
=======
 800b6f6:	bf00      	nop
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	200013ac 	.word	0x200013ac

0800b704 <xTaskResumeAll>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60bb      	str	r3, [r7, #8]
=======
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b70e:	2300      	movs	r3, #0
 800b710:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 800b22e:	4b42      	ldr	r3, [pc, #264]	; (800b338 <xTaskResumeAll+0x118>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10a      	bne.n	800b24c <xTaskResumeAll+0x2c>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	603b      	str	r3, [r7, #0]
}
 800b248:	bf00      	nop
 800b24a:	e7fe      	b.n	800b24a <xTaskResumeAll+0x2a>
=======
 800b712:	4b42      	ldr	r3, [pc, #264]	; (800b81c <xTaskResumeAll+0x118>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10a      	bne.n	800b730 <xTaskResumeAll+0x2c>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	603b      	str	r3, [r7, #0]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <xTaskResumeAll+0x2a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800b24c:	f001 fd1a 	bl	800cc84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b250:	4b39      	ldr	r3, [pc, #228]	; (800b338 <xTaskResumeAll+0x118>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3b01      	subs	r3, #1
 800b256:	4a38      	ldr	r2, [pc, #224]	; (800b338 <xTaskResumeAll+0x118>)
 800b258:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b25a:	4b37      	ldr	r3, [pc, #220]	; (800b338 <xTaskResumeAll+0x118>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d162      	bne.n	800b328 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b262:	4b36      	ldr	r3, [pc, #216]	; (800b33c <xTaskResumeAll+0x11c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d05e      	beq.n	800b328 <xTaskResumeAll+0x108>
=======
 800b730:	f001 fcb8 	bl	800d0a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b734:	4b39      	ldr	r3, [pc, #228]	; (800b81c <xTaskResumeAll+0x118>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3b01      	subs	r3, #1
 800b73a:	4a38      	ldr	r2, [pc, #224]	; (800b81c <xTaskResumeAll+0x118>)
 800b73c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b73e:	4b37      	ldr	r3, [pc, #220]	; (800b81c <xTaskResumeAll+0x118>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d162      	bne.n	800b80c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b746:	4b36      	ldr	r3, [pc, #216]	; (800b820 <xTaskResumeAll+0x11c>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d05e      	beq.n	800b80c <xTaskResumeAll+0x108>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 800b26a:	e02f      	b.n	800b2cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b26c:	4b34      	ldr	r3, [pc, #208]	; (800b340 <xTaskResumeAll+0x120>)
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	3318      	adds	r3, #24
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fe fe5a 	bl	8009f32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	3304      	adds	r3, #4
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe fe55 	bl	8009f32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b28c:	4b2d      	ldr	r3, [pc, #180]	; (800b344 <xTaskResumeAll+0x124>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	429a      	cmp	r2, r3
 800b292:	d903      	bls.n	800b29c <xTaskResumeAll+0x7c>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b298:	4a2a      	ldr	r2, [pc, #168]	; (800b344 <xTaskResumeAll+0x124>)
 800b29a:	6013      	str	r3, [r2, #0]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4a27      	ldr	r2, [pc, #156]	; (800b348 <xTaskResumeAll+0x128>)
 800b2aa:	441a      	add	r2, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	f7fe fde0 	bl	8009e78 <vListInsertEnd>
=======
 800b74e:	e02f      	b.n	800b7b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b750:	4b34      	ldr	r3, [pc, #208]	; (800b824 <xTaskResumeAll+0x120>)
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	3318      	adds	r3, #24
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fe fe5a 	bl	800a416 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	3304      	adds	r3, #4
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe fe55 	bl	800a416 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b770:	4b2d      	ldr	r3, [pc, #180]	; (800b828 <xTaskResumeAll+0x124>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	429a      	cmp	r2, r3
 800b776:	d903      	bls.n	800b780 <xTaskResumeAll+0x7c>
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77c:	4a2a      	ldr	r2, [pc, #168]	; (800b828 <xTaskResumeAll+0x124>)
 800b77e:	6013      	str	r3, [r2, #0]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b784:	4613      	mov	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4a27      	ldr	r2, [pc, #156]	; (800b82c <xTaskResumeAll+0x128>)
 800b78e:	441a      	add	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	3304      	adds	r3, #4
 800b794:	4619      	mov	r1, r3
 800b796:	4610      	mov	r0, r2
 800b798:	f7fe fde0 	bl	800a35c <vListInsertEnd>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2bc:	4b23      	ldr	r3, [pc, #140]	; (800b34c <xTaskResumeAll+0x12c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d302      	bcc.n	800b2cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b2c6:	4b22      	ldr	r3, [pc, #136]	; (800b350 <xTaskResumeAll+0x130>)
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2cc:	4b1c      	ldr	r3, [pc, #112]	; (800b340 <xTaskResumeAll+0x120>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1cb      	bne.n	800b26c <xTaskResumeAll+0x4c>
=======
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a0:	4b23      	ldr	r3, [pc, #140]	; (800b830 <xTaskResumeAll+0x12c>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d302      	bcc.n	800b7b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b7aa:	4b22      	ldr	r3, [pc, #136]	; (800b834 <xTaskResumeAll+0x130>)
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7b0:	4b1c      	ldr	r3, [pc, #112]	; (800b824 <xTaskResumeAll+0x120>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1cb      	bne.n	800b750 <xTaskResumeAll+0x4c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <xTaskResumeAll+0xbe>
=======
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <xTaskResumeAll+0xbe>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 800b2da:	f000 fb67 	bl	800b9ac <prvResetNextTaskUnblockTime>
=======
 800b7be:	f000 fb67 	bl	800be90 <prvResetNextTaskUnblockTime>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 800b2de:	4b1d      	ldr	r3, [pc, #116]	; (800b354 <xTaskResumeAll+0x134>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d010      	beq.n	800b30c <xTaskResumeAll+0xec>
=======
 800b7c2:	4b1d      	ldr	r3, [pc, #116]	; (800b838 <xTaskResumeAll+0x134>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d010      	beq.n	800b7f0 <xTaskResumeAll+0xec>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800b2ea:	f000 f859 	bl	800b3a0 <xTaskIncrementTick>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b2f4:	4b16      	ldr	r3, [pc, #88]	; (800b350 <xTaskResumeAll+0x130>)
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]
=======
 800b7ce:	f000 f859 	bl	800b884 <xTaskIncrementTick>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b7d8:	4b16      	ldr	r3, [pc, #88]	; (800b834 <xTaskResumeAll+0x130>)
 800b7da:	2201      	movs	r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< HEAD
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1f1      	bne.n	800b2ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b306:	4b13      	ldr	r3, [pc, #76]	; (800b354 <xTaskResumeAll+0x134>)
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
=======
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1f1      	bne.n	800b7ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b7ea:	4b13      	ldr	r3, [pc, #76]	; (800b838 <xTaskResumeAll+0x134>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800b30c:	4b10      	ldr	r3, [pc, #64]	; (800b350 <xTaskResumeAll+0x130>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d009      	beq.n	800b328 <xTaskResumeAll+0x108>
=======
 800b7f0:	4b10      	ldr	r3, [pc, #64]	; (800b834 <xTaskResumeAll+0x130>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d009      	beq.n	800b80c <xTaskResumeAll+0x108>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 800b314:	2301      	movs	r3, #1
 800b316:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b318:	4b0f      	ldr	r3, [pc, #60]	; (800b358 <xTaskResumeAll+0x138>)
 800b31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b31e:	601a      	str	r2, [r3, #0]
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	f3bf 8f6f 	isb	sy
=======
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7fc:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <xTaskResumeAll+0x138>)
 800b7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	f3bf 8f6f 	isb	sy
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800b328:	f001 fcdc 	bl	800cce4 <vPortExitCritical>

	return xAlreadyYielded;
 800b32c:	68bb      	ldr	r3, [r7, #8]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	200013c4 	.word	0x200013c4
 800b33c:	2000139c 	.word	0x2000139c
 800b340:	2000135c 	.word	0x2000135c
 800b344:	200013a4 	.word	0x200013a4
 800b348:	20000ecc 	.word	0x20000ecc
 800b34c:	20000ec8 	.word	0x20000ec8
 800b350:	200013b0 	.word	0x200013b0
 800b354:	200013ac 	.word	0x200013ac
 800b358:	e000ed04 	.word	0xe000ed04

0800b35c <xTaskGetTickCount>:
=======
 800b80c:	f001 fc7a 	bl	800d104 <vPortExitCritical>

	return xAlreadyYielded;
 800b810:	68bb      	ldr	r3, [r7, #8]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	200013ac 	.word	0x200013ac
 800b820:	20001384 	.word	0x20001384
 800b824:	20001344 	.word	0x20001344
 800b828:	2000138c 	.word	0x2000138c
 800b82c:	20000eb4 	.word	0x20000eb4
 800b830:	20000eb0 	.word	0x20000eb0
 800b834:	20001398 	.word	0x20001398
 800b838:	20001394 	.word	0x20001394
 800b83c:	e000ed04 	.word	0xe000ed04

0800b840 <xTaskGetTickCount>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
=======
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< HEAD
 800b362:	4b05      	ldr	r3, [pc, #20]	; (800b378 <xTaskGetTickCount+0x1c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	607b      	str	r3, [r7, #4]
=======
 800b846:	4b05      	ldr	r3, [pc, #20]	; (800b85c <xTaskGetTickCount+0x1c>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	607b      	str	r3, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< HEAD
 800b368:	687b      	ldr	r3, [r7, #4]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	200013a0 	.word	0x200013a0

0800b37c <xTaskGetTickCountFromISR>:
=======
 800b84c:	687b      	ldr	r3, [r7, #4]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	20001388 	.word	0x20001388

0800b860 <xTaskGetTickCountFromISR>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
<<<<<<< HEAD
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
=======
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 800b382:	f001 fd61 	bl	800ce48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b386:	2300      	movs	r3, #0
 800b388:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b38a:	4b04      	ldr	r3, [pc, #16]	; (800b39c <xTaskGetTickCountFromISR+0x20>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	603b      	str	r3, [r7, #0]
=======
 800b866:	f001 fcff 	bl	800d268 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b86a:	2300      	movs	r3, #0
 800b86c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b86e:	4b04      	ldr	r3, [pc, #16]	; (800b880 <xTaskGetTickCountFromISR+0x20>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	603b      	str	r3, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 800b390:	683b      	ldr	r3, [r7, #0]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3708      	adds	r7, #8
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	200013a0 	.word	0x200013a0

0800b3a0 <xTaskIncrementTick>:
=======
 800b874:	683b      	ldr	r3, [r7, #0]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	20001388 	.word	0x20001388

0800b884 <xTaskIncrementTick>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	617b      	str	r3, [r7, #20]
=======
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b88a:	2300      	movs	r3, #0
 800b88c:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800b3aa:	4b4f      	ldr	r3, [pc, #316]	; (800b4e8 <xTaskIncrementTick+0x148>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f040 808f 	bne.w	800b4d2 <xTaskIncrementTick+0x132>
=======
 800b88e:	4b4f      	ldr	r3, [pc, #316]	; (800b9cc <xTaskIncrementTick+0x148>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f040 808f 	bne.w	800b9b6 <xTaskIncrementTick+0x132>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 800b3b4:	4b4d      	ldr	r3, [pc, #308]	; (800b4ec <xTaskIncrementTick+0x14c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	613b      	str	r3, [r7, #16]
=======
 800b898:	4b4d      	ldr	r3, [pc, #308]	; (800b9d0 <xTaskIncrementTick+0x14c>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3301      	adds	r3, #1
 800b89e:	613b      	str	r3, [r7, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 800b3bc:	4a4b      	ldr	r2, [pc, #300]	; (800b4ec <xTaskIncrementTick+0x14c>)
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d120      	bne.n	800b40a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3c8:	4b49      	ldr	r3, [pc, #292]	; (800b4f0 <xTaskIncrementTick+0x150>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00a      	beq.n	800b3e8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	603b      	str	r3, [r7, #0]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <xTaskIncrementTick+0x46>
 800b3e8:	4b41      	ldr	r3, [pc, #260]	; (800b4f0 <xTaskIncrementTick+0x150>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	60fb      	str	r3, [r7, #12]
 800b3ee:	4b41      	ldr	r3, [pc, #260]	; (800b4f4 <xTaskIncrementTick+0x154>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a3f      	ldr	r2, [pc, #252]	; (800b4f0 <xTaskIncrementTick+0x150>)
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	4a3f      	ldr	r2, [pc, #252]	; (800b4f4 <xTaskIncrementTick+0x154>)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6013      	str	r3, [r2, #0]
 800b3fc:	4b3e      	ldr	r3, [pc, #248]	; (800b4f8 <xTaskIncrementTick+0x158>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3301      	adds	r3, #1
 800b402:	4a3d      	ldr	r2, [pc, #244]	; (800b4f8 <xTaskIncrementTick+0x158>)
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	f000 fad1 	bl	800b9ac <prvResetNextTaskUnblockTime>
=======
 800b8a0:	4a4b      	ldr	r2, [pc, #300]	; (800b9d0 <xTaskIncrementTick+0x14c>)
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d120      	bne.n	800b8ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8ac:	4b49      	ldr	r3, [pc, #292]	; (800b9d4 <xTaskIncrementTick+0x150>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00a      	beq.n	800b8cc <xTaskIncrementTick+0x48>
	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	603b      	str	r3, [r7, #0]
}
 800b8c8:	bf00      	nop
 800b8ca:	e7fe      	b.n	800b8ca <xTaskIncrementTick+0x46>
 800b8cc:	4b41      	ldr	r3, [pc, #260]	; (800b9d4 <xTaskIncrementTick+0x150>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	60fb      	str	r3, [r7, #12]
 800b8d2:	4b41      	ldr	r3, [pc, #260]	; (800b9d8 <xTaskIncrementTick+0x154>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a3f      	ldr	r2, [pc, #252]	; (800b9d4 <xTaskIncrementTick+0x150>)
 800b8d8:	6013      	str	r3, [r2, #0]
 800b8da:	4a3f      	ldr	r2, [pc, #252]	; (800b9d8 <xTaskIncrementTick+0x154>)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	4b3e      	ldr	r3, [pc, #248]	; (800b9dc <xTaskIncrementTick+0x158>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	4a3d      	ldr	r2, [pc, #244]	; (800b9dc <xTaskIncrementTick+0x158>)
 800b8e8:	6013      	str	r3, [r2, #0]
 800b8ea:	f000 fad1 	bl	800be90 <prvResetNextTaskUnblockTime>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 800b40a:	4b3c      	ldr	r3, [pc, #240]	; (800b4fc <xTaskIncrementTick+0x15c>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	429a      	cmp	r2, r3
 800b412:	d349      	bcc.n	800b4a8 <xTaskIncrementTick+0x108>
=======
 800b8ee:	4b3c      	ldr	r3, [pc, #240]	; (800b9e0 <xTaskIncrementTick+0x15c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d349      	bcc.n	800b98c <xTaskIncrementTick+0x108>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 800b414:	4b36      	ldr	r3, [pc, #216]	; (800b4f0 <xTaskIncrementTick+0x150>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d104      	bne.n	800b428 <xTaskIncrementTick+0x88>
=======
 800b8f8:	4b36      	ldr	r3, [pc, #216]	; (800b9d4 <xTaskIncrementTick+0x150>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d104      	bne.n	800b90c <xTaskIncrementTick+0x88>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800b41e:	4b37      	ldr	r3, [pc, #220]	; (800b4fc <xTaskIncrementTick+0x15c>)
 800b420:	f04f 32ff 	mov.w	r2, #4294967295
 800b424:	601a      	str	r2, [r3, #0]
					break;
 800b426:	e03f      	b.n	800b4a8 <xTaskIncrementTick+0x108>
=======
 800b902:	4b37      	ldr	r3, [pc, #220]	; (800b9e0 <xTaskIncrementTick+0x15c>)
 800b904:	f04f 32ff 	mov.w	r2, #4294967295
 800b908:	601a      	str	r2, [r3, #0]
					break;
 800b90a:	e03f      	b.n	800b98c <xTaskIncrementTick+0x108>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800b428:	4b31      	ldr	r3, [pc, #196]	; (800b4f0 <xTaskIncrementTick+0x150>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d203      	bcs.n	800b448 <xTaskIncrementTick+0xa8>
=======
 800b90c:	4b31      	ldr	r3, [pc, #196]	; (800b9d4 <xTaskIncrementTick+0x150>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	429a      	cmp	r2, r3
 800b922:	d203      	bcs.n	800b92c <xTaskIncrementTick+0xa8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 800b440:	4a2e      	ldr	r2, [pc, #184]	; (800b4fc <xTaskIncrementTick+0x15c>)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b446:	e02f      	b.n	800b4a8 <xTaskIncrementTick+0x108>
=======
 800b924:	4a2e      	ldr	r2, [pc, #184]	; (800b9e0 <xTaskIncrementTick+0x15c>)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b92a:	e02f      	b.n	800b98c <xTaskIncrementTick+0x108>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	3304      	adds	r3, #4
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7fe fd70 	bl	8009f32 <uxListRemove>
=======
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	3304      	adds	r3, #4
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe fd70 	bl	800a416 <uxListRemove>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b456:	2b00      	cmp	r3, #0
 800b458:	d004      	beq.n	800b464 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	3318      	adds	r3, #24
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fe fd67 	bl	8009f32 <uxListRemove>
=======
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d004      	beq.n	800b948 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	3318      	adds	r3, #24
 800b942:	4618      	mov	r0, r3
 800b944:	f7fe fd67 	bl	800a416 <uxListRemove>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b468:	4b25      	ldr	r3, [pc, #148]	; (800b500 <xTaskIncrementTick+0x160>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d903      	bls.n	800b478 <xTaskIncrementTick+0xd8>
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b474:	4a22      	ldr	r2, [pc, #136]	; (800b500 <xTaskIncrementTick+0x160>)
 800b476:	6013      	str	r3, [r2, #0]
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4a1f      	ldr	r2, [pc, #124]	; (800b504 <xTaskIncrementTick+0x164>)
 800b486:	441a      	add	r2, r3
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	3304      	adds	r3, #4
 800b48c:	4619      	mov	r1, r3
 800b48e:	4610      	mov	r0, r2
 800b490:	f7fe fcf2 	bl	8009e78 <vListInsertEnd>
=======
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94c:	4b25      	ldr	r3, [pc, #148]	; (800b9e4 <xTaskIncrementTick+0x160>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d903      	bls.n	800b95c <xTaskIncrementTick+0xd8>
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b958:	4a22      	ldr	r2, [pc, #136]	; (800b9e4 <xTaskIncrementTick+0x160>)
 800b95a:	6013      	str	r3, [r2, #0]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b960:	4613      	mov	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4a1f      	ldr	r2, [pc, #124]	; (800b9e8 <xTaskIncrementTick+0x164>)
 800b96a:	441a      	add	r2, r3
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	3304      	adds	r3, #4
 800b970:	4619      	mov	r1, r3
 800b972:	4610      	mov	r0, r2
 800b974:	f7fe fcf2 	bl	800a35c <vListInsertEnd>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b498:	4b1b      	ldr	r3, [pc, #108]	; (800b508 <xTaskIncrementTick+0x168>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d3b8      	bcc.n	800b414 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4a6:	e7b5      	b.n	800b414 <xTaskIncrementTick+0x74>
=======
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97c:	4b1b      	ldr	r3, [pc, #108]	; (800b9ec <xTaskIncrementTick+0x168>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b982:	429a      	cmp	r2, r3
 800b984:	d3b8      	bcc.n	800b8f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b986:	2301      	movs	r3, #1
 800b988:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b98a:	e7b5      	b.n	800b8f8 <xTaskIncrementTick+0x74>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800b4a8:	4b17      	ldr	r3, [pc, #92]	; (800b508 <xTaskIncrementTick+0x168>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ae:	4915      	ldr	r1, [pc, #84]	; (800b504 <xTaskIncrementTick+0x164>)
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	440b      	add	r3, r1
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d901      	bls.n	800b4c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	617b      	str	r3, [r7, #20]
=======
 800b98c:	4b17      	ldr	r3, [pc, #92]	; (800b9ec <xTaskIncrementTick+0x168>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b992:	4915      	ldr	r1, [pc, #84]	; (800b9e8 <xTaskIncrementTick+0x164>)
 800b994:	4613      	mov	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	440b      	add	r3, r1
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d901      	bls.n	800b9a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800b4c4:	4b11      	ldr	r3, [pc, #68]	; (800b50c <xTaskIncrementTick+0x16c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d007      	beq.n	800b4dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	617b      	str	r3, [r7, #20]
 800b4d0:	e004      	b.n	800b4dc <xTaskIncrementTick+0x13c>
=======
 800b9a8:	4b11      	ldr	r3, [pc, #68]	; (800b9f0 <xTaskIncrementTick+0x16c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d007      	beq.n	800b9c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	617b      	str	r3, [r7, #20]
 800b9b4:	e004      	b.n	800b9c0 <xTaskIncrementTick+0x13c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< HEAD
 800b4d2:	4b0f      	ldr	r3, [pc, #60]	; (800b510 <xTaskIncrementTick+0x170>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	4a0d      	ldr	r2, [pc, #52]	; (800b510 <xTaskIncrementTick+0x170>)
 800b4da:	6013      	str	r3, [r2, #0]
=======
 800b9b6:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <xTaskIncrementTick+0x170>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	4a0d      	ldr	r2, [pc, #52]	; (800b9f4 <xTaskIncrementTick+0x170>)
 800b9be:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< HEAD
 800b4dc:	697b      	ldr	r3, [r7, #20]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3718      	adds	r7, #24
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	200013c4 	.word	0x200013c4
 800b4ec:	200013a0 	.word	0x200013a0
 800b4f0:	20001354 	.word	0x20001354
 800b4f4:	20001358 	.word	0x20001358
 800b4f8:	200013b4 	.word	0x200013b4
 800b4fc:	200013bc 	.word	0x200013bc
 800b500:	200013a4 	.word	0x200013a4
 800b504:	20000ecc 	.word	0x20000ecc
 800b508:	20000ec8 	.word	0x20000ec8
 800b50c:	200013b0 	.word	0x200013b0
 800b510:	200013ac 	.word	0x200013ac

0800b514 <vTaskSwitchContext>:
=======
 800b9c0:	697b      	ldr	r3, [r7, #20]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	200013ac 	.word	0x200013ac
 800b9d0:	20001388 	.word	0x20001388
 800b9d4:	2000133c 	.word	0x2000133c
 800b9d8:	20001340 	.word	0x20001340
 800b9dc:	2000139c 	.word	0x2000139c
 800b9e0:	200013a4 	.word	0x200013a4
 800b9e4:	2000138c 	.word	0x2000138c
 800b9e8:	20000eb4 	.word	0x20000eb4
 800b9ec:	20000eb0 	.word	0x20000eb0
 800b9f0:	20001398 	.word	0x20001398
 800b9f4:	20001394 	.word	0x20001394

0800b9f8 <vTaskSwitchContext>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b51a:	4b28      	ldr	r3, [pc, #160]	; (800b5bc <vTaskSwitchContext+0xa8>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <vTaskSwitchContext+0x16>
=======
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9fe:	4b28      	ldr	r3, [pc, #160]	; (800baa0 <vTaskSwitchContext+0xa8>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <vTaskSwitchContext+0x16>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 800b522:	4b27      	ldr	r3, [pc, #156]	; (800b5c0 <vTaskSwitchContext+0xac>)
 800b524:	2201      	movs	r2, #1
 800b526:	601a      	str	r2, [r3, #0]
=======
 800ba06:	4b27      	ldr	r3, [pc, #156]	; (800baa4 <vTaskSwitchContext+0xac>)
 800ba08:	2201      	movs	r2, #1
 800ba0a:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 800b528:	e041      	b.n	800b5ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b52a:	4b25      	ldr	r3, [pc, #148]	; (800b5c0 <vTaskSwitchContext+0xac>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b530:	4b24      	ldr	r3, [pc, #144]	; (800b5c4 <vTaskSwitchContext+0xb0>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	60fb      	str	r3, [r7, #12]
 800b536:	e010      	b.n	800b55a <vTaskSwitchContext+0x46>
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10a      	bne.n	800b554 <vTaskSwitchContext+0x40>
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	607b      	str	r3, [r7, #4]
}
 800b550:	bf00      	nop
 800b552:	e7fe      	b.n	800b552 <vTaskSwitchContext+0x3e>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	3b01      	subs	r3, #1
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	491b      	ldr	r1, [pc, #108]	; (800b5c8 <vTaskSwitchContext+0xb4>)
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	4613      	mov	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4413      	add	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	440b      	add	r3, r1
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0e4      	beq.n	800b538 <vTaskSwitchContext+0x24>
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	4613      	mov	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4413      	add	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4a13      	ldr	r2, [pc, #76]	; (800b5c8 <vTaskSwitchContext+0xb4>)
 800b57a:	4413      	add	r3, r2
 800b57c:	60bb      	str	r3, [r7, #8]
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	605a      	str	r2, [r3, #4]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	3308      	adds	r3, #8
 800b590:	429a      	cmp	r2, r3
 800b592:	d104      	bne.n	800b59e <vTaskSwitchContext+0x8a>
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	685a      	ldr	r2, [r3, #4]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	605a      	str	r2, [r3, #4]
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	4a09      	ldr	r2, [pc, #36]	; (800b5cc <vTaskSwitchContext+0xb8>)
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	4a06      	ldr	r2, [pc, #24]	; (800b5c4 <vTaskSwitchContext+0xb0>)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6013      	str	r3, [r2, #0]
}
 800b5ae:	bf00      	nop
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	200013c4 	.word	0x200013c4
 800b5c0:	200013b0 	.word	0x200013b0
 800b5c4:	200013a4 	.word	0x200013a4
 800b5c8:	20000ecc 	.word	0x20000ecc
 800b5cc:	20000ec8 	.word	0x20000ec8

0800b5d0 <vTaskPlaceOnEventList>:
=======
 800ba0c:	e041      	b.n	800ba92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ba0e:	4b25      	ldr	r3, [pc, #148]	; (800baa4 <vTaskSwitchContext+0xac>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba14:	4b24      	ldr	r3, [pc, #144]	; (800baa8 <vTaskSwitchContext+0xb0>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	e010      	b.n	800ba3e <vTaskSwitchContext+0x46>
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10a      	bne.n	800ba38 <vTaskSwitchContext+0x40>
	__asm volatile
 800ba22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba26:	f383 8811 	msr	BASEPRI, r3
 800ba2a:	f3bf 8f6f 	isb	sy
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	607b      	str	r3, [r7, #4]
}
 800ba34:	bf00      	nop
 800ba36:	e7fe      	b.n	800ba36 <vTaskSwitchContext+0x3e>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	491b      	ldr	r1, [pc, #108]	; (800baac <vTaskSwitchContext+0xb4>)
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	4613      	mov	r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4413      	add	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	440b      	add	r3, r1
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d0e4      	beq.n	800ba1c <vTaskSwitchContext+0x24>
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	4613      	mov	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4a13      	ldr	r2, [pc, #76]	; (800baac <vTaskSwitchContext+0xb4>)
 800ba5e:	4413      	add	r3, r2
 800ba60:	60bb      	str	r3, [r7, #8]
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	685a      	ldr	r2, [r3, #4]
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	605a      	str	r2, [r3, #4]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	685a      	ldr	r2, [r3, #4]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	3308      	adds	r3, #8
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d104      	bne.n	800ba82 <vTaskSwitchContext+0x8a>
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	605a      	str	r2, [r3, #4]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	4a09      	ldr	r2, [pc, #36]	; (800bab0 <vTaskSwitchContext+0xb8>)
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	4a06      	ldr	r2, [pc, #24]	; (800baa8 <vTaskSwitchContext+0xb0>)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6013      	str	r3, [r2, #0]
}
 800ba92:	bf00      	nop
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	200013ac 	.word	0x200013ac
 800baa4:	20001398 	.word	0x20001398
 800baa8:	2000138c 	.word	0x2000138c
 800baac:	20000eb4 	.word	0x20000eb4
 800bab0:	20000eb0 	.word	0x20000eb0

0800bab4 <vTaskPlaceOnEventList>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10a      	bne.n	800b5f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e4:	f383 8811 	msr	BASEPRI, r3
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	60fb      	str	r3, [r7, #12]
}
 800b5f2:	bf00      	nop
 800b5f4:	e7fe      	b.n	800b5f4 <vTaskPlaceOnEventList+0x24>
=======
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10a      	bne.n	800bada <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	60fb      	str	r3, [r7, #12]
}
 800bad6:	bf00      	nop
 800bad8:	e7fe      	b.n	800bad8 <vTaskPlaceOnEventList+0x24>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 800b5f6:	4b07      	ldr	r3, [pc, #28]	; (800b614 <vTaskPlaceOnEventList+0x44>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	3318      	adds	r3, #24
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7fe fc5e 	bl	8009ec0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b604:	2101      	movs	r1, #1
 800b606:	6838      	ldr	r0, [r7, #0]
 800b608:	f000 fdb0 	bl	800c16c <prvAddCurrentTaskToDelayedList>
}
 800b60c:	bf00      	nop
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	20000ec8 	.word	0x20000ec8

0800b618 <vTaskPlaceOnEventListRestricted>:
=======
 800bada:	4b07      	ldr	r3, [pc, #28]	; (800baf8 <vTaskPlaceOnEventList+0x44>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	3318      	adds	r3, #24
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7fe fc5e 	bl	800a3a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bae8:	2101      	movs	r1, #1
 800baea:	6838      	ldr	r0, [r7, #0]
 800baec:	f000 fdb0 	bl	800c650 <prvAddCurrentTaskToDelayedList>
}
 800baf0:	bf00      	nop
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	20000eb0 	.word	0x20000eb0

0800bafc <vTaskPlaceOnEventListRestricted>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10a      	bne.n	800b640 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	617b      	str	r3, [r7, #20]
}
 800b63c:	bf00      	nop
 800b63e:	e7fe      	b.n	800b63e <vTaskPlaceOnEventListRestricted+0x26>
=======
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b086      	sub	sp, #24
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10a      	bne.n	800bb24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	617b      	str	r3, [r7, #20]
}
 800bb20:	bf00      	nop
 800bb22:	e7fe      	b.n	800bb22 <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 800b640:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <vTaskPlaceOnEventListRestricted+0x54>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3318      	adds	r3, #24
 800b646:	4619      	mov	r1, r3
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f7fe fc15 	bl	8009e78 <vListInsertEnd>
=======
 800bb24:	4b0a      	ldr	r3, [pc, #40]	; (800bb50 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3318      	adds	r3, #24
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f7fe fc15 	bl	800a35c <vListInsertEnd>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< HEAD
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b654:	f04f 33ff 	mov.w	r3, #4294967295
 800b658:	60bb      	str	r3, [r7, #8]
=======
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb38:	f04f 33ff 	mov.w	r3, #4294967295
 800bb3c:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< HEAD
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	68b8      	ldr	r0, [r7, #8]
 800b65e:	f000 fd85 	bl	800c16c <prvAddCurrentTaskToDelayedList>
	}
 800b662:	bf00      	nop
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	20000ec8 	.word	0x20000ec8

0800b670 <xTaskRemoveFromEventList>:
=======
 800bb3e:	6879      	ldr	r1, [r7, #4]
 800bb40:	68b8      	ldr	r0, [r7, #8]
 800bb42:	f000 fd85 	bl	800c650 <prvAddCurrentTaskToDelayedList>
	}
 800bb46:	bf00      	nop
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	20000eb0 	.word	0x20000eb0

0800bb54 <xTaskRemoveFromEventList>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
=======
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	60fb      	str	r3, [r7, #12]
}
 800b698:	bf00      	nop
 800b69a:	e7fe      	b.n	800b69a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	3318      	adds	r3, #24
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe fc46 	bl	8009f32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6a6:	4b1e      	ldr	r3, [pc, #120]	; (800b720 <xTaskRemoveFromEventList+0xb0>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d11d      	bne.n	800b6ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fe fc3d 	bl	8009f32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6bc:	4b19      	ldr	r3, [pc, #100]	; (800b724 <xTaskRemoveFromEventList+0xb4>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d903      	bls.n	800b6cc <xTaskRemoveFromEventList+0x5c>
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c8:	4a16      	ldr	r2, [pc, #88]	; (800b724 <xTaskRemoveFromEventList+0xb4>)
 800b6ca:	6013      	str	r3, [r2, #0]
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	4413      	add	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4a13      	ldr	r2, [pc, #76]	; (800b728 <xTaskRemoveFromEventList+0xb8>)
 800b6da:	441a      	add	r2, r3
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	3304      	adds	r3, #4
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4610      	mov	r0, r2
 800b6e4:	f7fe fbc8 	bl	8009e78 <vListInsertEnd>
 800b6e8:	e005      	b.n	800b6f6 <xTaskRemoveFromEventList+0x86>
=======
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10a      	bne.n	800bb80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	60fb      	str	r3, [r7, #12]
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	3318      	adds	r3, #24
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fe fc46 	bl	800a416 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb8a:	4b1e      	ldr	r3, [pc, #120]	; (800bc04 <xTaskRemoveFromEventList+0xb0>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d11d      	bne.n	800bbce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	3304      	adds	r3, #4
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fe fc3d 	bl	800a416 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba0:	4b19      	ldr	r3, [pc, #100]	; (800bc08 <xTaskRemoveFromEventList+0xb4>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d903      	bls.n	800bbb0 <xTaskRemoveFromEventList+0x5c>
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbac:	4a16      	ldr	r2, [pc, #88]	; (800bc08 <xTaskRemoveFromEventList+0xb4>)
 800bbae:	6013      	str	r3, [r2, #0]
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4a13      	ldr	r2, [pc, #76]	; (800bc0c <xTaskRemoveFromEventList+0xb8>)
 800bbbe:	441a      	add	r2, r3
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	3304      	adds	r3, #4
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	4610      	mov	r0, r2
 800bbc8:	f7fe fbc8 	bl	800a35c <vListInsertEnd>
 800bbcc:	e005      	b.n	800bbda <xTaskRemoveFromEventList+0x86>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	3318      	adds	r3, #24
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	480e      	ldr	r0, [pc, #56]	; (800b72c <xTaskRemoveFromEventList+0xbc>)
 800b6f2:	f7fe fbc1 	bl	8009e78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6fa:	4b0d      	ldr	r3, [pc, #52]	; (800b730 <xTaskRemoveFromEventList+0xc0>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b700:	429a      	cmp	r2, r3
 800b702:	d905      	bls.n	800b710 <xTaskRemoveFromEventList+0xa0>
=======
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	3318      	adds	r3, #24
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	480e      	ldr	r0, [pc, #56]	; (800bc10 <xTaskRemoveFromEventList+0xbc>)
 800bbd6:	f7fe fbc1 	bl	800a35c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbde:	4b0d      	ldr	r3, [pc, #52]	; (800bc14 <xTaskRemoveFromEventList+0xc0>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d905      	bls.n	800bbf4 <xTaskRemoveFromEventList+0xa0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 800b704:	2301      	movs	r3, #1
 800b706:	617b      	str	r3, [r7, #20]
=======
 800bbe8:	2301      	movs	r3, #1
 800bbea:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 800b708:	4b0a      	ldr	r3, [pc, #40]	; (800b734 <xTaskRemoveFromEventList+0xc4>)
 800b70a:	2201      	movs	r2, #1
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	e001      	b.n	800b714 <xTaskRemoveFromEventList+0xa4>
=======
 800bbec:	4b0a      	ldr	r3, [pc, #40]	; (800bc18 <xTaskRemoveFromEventList+0xc4>)
 800bbee:	2201      	movs	r2, #1
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	e001      	b.n	800bbf8 <xTaskRemoveFromEventList+0xa4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b714:	697b      	ldr	r3, [r7, #20]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	200013c4 	.word	0x200013c4
 800b724:	200013a4 	.word	0x200013a4
 800b728:	20000ecc 	.word	0x20000ecc
 800b72c:	2000135c 	.word	0x2000135c
 800b730:	20000ec8 	.word	0x20000ec8
 800b734:	200013b0 	.word	0x200013b0

0800b738 <vTaskInternalSetTimeOutState>:
=======
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbf8:	697b      	ldr	r3, [r7, #20]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	200013ac 	.word	0x200013ac
 800bc08:	2000138c 	.word	0x2000138c
 800bc0c:	20000eb4 	.word	0x20000eb4
 800bc10:	20001344 	.word	0x20001344
 800bc14:	20000eb0 	.word	0x20000eb0
 800bc18:	20001398 	.word	0x20001398

0800bc1c <vTaskInternalSetTimeOutState>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b740:	4b06      	ldr	r3, [pc, #24]	; (800b75c <vTaskInternalSetTimeOutState+0x24>)
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b748:	4b05      	ldr	r3, [pc, #20]	; (800b760 <vTaskInternalSetTimeOutState+0x28>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	605a      	str	r2, [r3, #4]
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	200013b4 	.word	0x200013b4
 800b760:	200013a0 	.word	0x200013a0

0800b764 <xTaskCheckForTimeOut>:
=======
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc24:	4b06      	ldr	r3, [pc, #24]	; (800bc40 <vTaskInternalSetTimeOutState+0x24>)
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc2c:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <vTaskInternalSetTimeOutState+0x28>)
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	605a      	str	r2, [r3, #4]
}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	2000139c 	.word	0x2000139c
 800bc44:	20001388 	.word	0x20001388

0800bc48 <xTaskCheckForTimeOut>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 800b764:	b580      	push	{r7, lr}
 800b766:	b088      	sub	sp, #32
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10a      	bne.n	800b78a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	613b      	str	r3, [r7, #16]
}
 800b786:	bf00      	nop
 800b788:	e7fe      	b.n	800b788 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10a      	bne.n	800b7a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b794:	f383 8811 	msr	BASEPRI, r3
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	60fb      	str	r3, [r7, #12]
}
 800b7a2:	bf00      	nop
 800b7a4:	e7fe      	b.n	800b7a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b7a6:	f001 fa6d 	bl	800cc84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7aa:	4b1d      	ldr	r3, [pc, #116]	; (800b820 <xTaskCheckForTimeOut+0xbc>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	617b      	str	r3, [r7, #20]
=======
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10a      	bne.n	800bc6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	613b      	str	r3, [r7, #16]
}
 800bc6a:	bf00      	nop
 800bc6c:	e7fe      	b.n	800bc6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10a      	bne.n	800bc8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	60fb      	str	r3, [r7, #12]
}
 800bc86:	bf00      	nop
 800bc88:	e7fe      	b.n	800bc88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc8a:	f001 fa0b 	bl	800d0a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc8e:	4b1d      	ldr	r3, [pc, #116]	; (800bd04 <xTaskCheckForTimeOut+0xbc>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	69ba      	ldr	r2, [r7, #24]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c2:	d102      	bne.n	800b7ca <xTaskCheckForTimeOut+0x66>
=======
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca6:	d102      	bne.n	800bcae <xTaskCheckForTimeOut+0x66>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	61fb      	str	r3, [r7, #28]
 800b7c8:	e023      	b.n	800b812 <xTaskCheckForTimeOut+0xae>
=======
 800bca8:	2300      	movs	r3, #0
 800bcaa:	61fb      	str	r3, [r7, #28]
 800bcac:	e023      	b.n	800bcf6 <xTaskCheckForTimeOut+0xae>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	4b15      	ldr	r3, [pc, #84]	; (800b824 <xTaskCheckForTimeOut+0xc0>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d007      	beq.n	800b7e6 <xTaskCheckForTimeOut+0x82>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	69ba      	ldr	r2, [r7, #24]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d302      	bcc.n	800b7e6 <xTaskCheckForTimeOut+0x82>
=======
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	4b15      	ldr	r3, [pc, #84]	; (800bd08 <xTaskCheckForTimeOut+0xc0>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d007      	beq.n	800bcca <xTaskCheckForTimeOut+0x82>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	69ba      	ldr	r2, [r7, #24]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d302      	bcc.n	800bcca <xTaskCheckForTimeOut+0x82>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	61fb      	str	r3, [r7, #28]
 800b7e4:	e015      	b.n	800b812 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d20b      	bcs.n	800b808 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	1ad2      	subs	r2, r2, r3
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7ff ff9b 	bl	800b738 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b802:	2300      	movs	r3, #0
 800b804:	61fb      	str	r3, [r7, #28]
 800b806:	e004      	b.n	800b812 <xTaskCheckForTimeOut+0xae>
=======
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	61fb      	str	r3, [r7, #28]
 800bcc8:	e015      	b.n	800bcf6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d20b      	bcs.n	800bcec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	1ad2      	subs	r2, r2, r3
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7ff ff9b 	bl	800bc1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bce6:	2300      	movs	r3, #0
 800bce8:	61fb      	str	r3, [r7, #28]
 800bcea:	e004      	b.n	800bcf6 <xTaskCheckForTimeOut+0xae>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	2200      	movs	r2, #0
 800b80c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b80e:	2301      	movs	r3, #1
 800b810:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b812:	f001 fa67 	bl	800cce4 <vPortExitCritical>

	return xReturn;
 800b816:	69fb      	ldr	r3, [r7, #28]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3720      	adds	r7, #32
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	200013a0 	.word	0x200013a0
 800b824:	200013b4 	.word	0x200013b4

0800b828 <vTaskMissedYield>:
=======
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcf6:	f001 fa05 	bl	800d104 <vPortExitCritical>

	return xReturn;
 800bcfa:	69fb      	ldr	r3, [r7, #28]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3720      	adds	r7, #32
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	20001388 	.word	0x20001388
 800bd08:	2000139c 	.word	0x2000139c

0800bd0c <vTaskMissedYield>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 800b828:	b480      	push	{r7}
 800b82a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b82c:	4b03      	ldr	r3, [pc, #12]	; (800b83c <vTaskMissedYield+0x14>)
 800b82e:	2201      	movs	r2, #1
 800b830:	601a      	str	r2, [r3, #0]
}
 800b832:	bf00      	nop
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	200013b0 	.word	0x200013b0

0800b840 <prvIdleTask>:
=======
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd10:	4b03      	ldr	r3, [pc, #12]	; (800bd20 <vTaskMissedYield+0x14>)
 800bd12:	2201      	movs	r2, #1
 800bd14:	601a      	str	r2, [r3, #0]
}
 800bd16:	bf00      	nop
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	20001398 	.word	0x20001398

0800bd24 <prvIdleTask>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
=======
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 800b848:	f000 f852 	bl	800b8f0 <prvCheckTasksWaitingTermination>
=======
 800bd2c:	f000 f852 	bl	800bdd4 <prvCheckTasksWaitingTermination>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800b84c:	4b06      	ldr	r3, [pc, #24]	; (800b868 <prvIdleTask+0x28>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d9f9      	bls.n	800b848 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b854:	4b05      	ldr	r3, [pc, #20]	; (800b86c <prvIdleTask+0x2c>)
 800b856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b85a:	601a      	str	r2, [r3, #0]
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b864:	e7f0      	b.n	800b848 <prvIdleTask+0x8>
 800b866:	bf00      	nop
 800b868:	20000ecc 	.word	0x20000ecc
 800b86c:	e000ed04 	.word	0xe000ed04

0800b870 <prvInitialiseTaskLists>:
=======
 800bd30:	4b06      	ldr	r3, [pc, #24]	; (800bd4c <prvIdleTask+0x28>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d9f9      	bls.n	800bd2c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd38:	4b05      	ldr	r3, [pc, #20]	; (800bd50 <prvIdleTask+0x2c>)
 800bd3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd3e:	601a      	str	r2, [r3, #0]
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd48:	e7f0      	b.n	800bd2c <prvIdleTask+0x8>
 800bd4a:	bf00      	nop
 800bd4c:	20000eb4 	.word	0x20000eb4
 800bd50:	e000ed04 	.word	0xe000ed04

0800bd54 <prvInitialiseTaskLists>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b876:	2300      	movs	r3, #0
 800b878:	607b      	str	r3, [r7, #4]
 800b87a:	e00c      	b.n	800b896 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	4613      	mov	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4a12      	ldr	r2, [pc, #72]	; (800b8d0 <prvInitialiseTaskLists+0x60>)
 800b888:	4413      	add	r3, r2
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fe fac7 	bl	8009e1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3301      	adds	r3, #1
 800b894:	607b      	str	r3, [r7, #4]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2b37      	cmp	r3, #55	; 0x37
 800b89a:	d9ef      	bls.n	800b87c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b89c:	480d      	ldr	r0, [pc, #52]	; (800b8d4 <prvInitialiseTaskLists+0x64>)
 800b89e:	f7fe fabe 	bl	8009e1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8a2:	480d      	ldr	r0, [pc, #52]	; (800b8d8 <prvInitialiseTaskLists+0x68>)
 800b8a4:	f7fe fabb 	bl	8009e1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8a8:	480c      	ldr	r0, [pc, #48]	; (800b8dc <prvInitialiseTaskLists+0x6c>)
 800b8aa:	f7fe fab8 	bl	8009e1e <vListInitialise>
=======
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	607b      	str	r3, [r7, #4]
 800bd5e:	e00c      	b.n	800bd7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	4613      	mov	r3, r2
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	4413      	add	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4a12      	ldr	r2, [pc, #72]	; (800bdb4 <prvInitialiseTaskLists+0x60>)
 800bd6c:	4413      	add	r3, r2
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe fac7 	bl	800a302 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3301      	adds	r3, #1
 800bd78:	607b      	str	r3, [r7, #4]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2b37      	cmp	r3, #55	; 0x37
 800bd7e:	d9ef      	bls.n	800bd60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd80:	480d      	ldr	r0, [pc, #52]	; (800bdb8 <prvInitialiseTaskLists+0x64>)
 800bd82:	f7fe fabe 	bl	800a302 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd86:	480d      	ldr	r0, [pc, #52]	; (800bdbc <prvInitialiseTaskLists+0x68>)
 800bd88:	f7fe fabb 	bl	800a302 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd8c:	480c      	ldr	r0, [pc, #48]	; (800bdc0 <prvInitialiseTaskLists+0x6c>)
 800bd8e:	f7fe fab8 	bl	800a302 <vListInitialise>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 800b8ae:	480c      	ldr	r0, [pc, #48]	; (800b8e0 <prvInitialiseTaskLists+0x70>)
 800b8b0:	f7fe fab5 	bl	8009e1e <vListInitialise>
=======
 800bd92:	480c      	ldr	r0, [pc, #48]	; (800bdc4 <prvInitialiseTaskLists+0x70>)
 800bd94:	f7fe fab5 	bl	800a302 <vListInitialise>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 800b8b4:	480b      	ldr	r0, [pc, #44]	; (800b8e4 <prvInitialiseTaskLists+0x74>)
 800b8b6:	f7fe fab2 	bl	8009e1e <vListInitialise>
=======
 800bd98:	480b      	ldr	r0, [pc, #44]	; (800bdc8 <prvInitialiseTaskLists+0x74>)
 800bd9a:	f7fe fab2 	bl	800a302 <vListInitialise>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 800b8ba:	4b0b      	ldr	r3, [pc, #44]	; (800b8e8 <prvInitialiseTaskLists+0x78>)
 800b8bc:	4a05      	ldr	r2, [pc, #20]	; (800b8d4 <prvInitialiseTaskLists+0x64>)
 800b8be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8c0:	4b0a      	ldr	r3, [pc, #40]	; (800b8ec <prvInitialiseTaskLists+0x7c>)
 800b8c2:	4a05      	ldr	r2, [pc, #20]	; (800b8d8 <prvInitialiseTaskLists+0x68>)
 800b8c4:	601a      	str	r2, [r3, #0]
}
 800b8c6:	bf00      	nop
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20000ecc 	.word	0x20000ecc
 800b8d4:	2000132c 	.word	0x2000132c
 800b8d8:	20001340 	.word	0x20001340
 800b8dc:	2000135c 	.word	0x2000135c
 800b8e0:	20001370 	.word	0x20001370
 800b8e4:	20001388 	.word	0x20001388
 800b8e8:	20001354 	.word	0x20001354
 800b8ec:	20001358 	.word	0x20001358

0800b8f0 <prvCheckTasksWaitingTermination>:
=======
 800bd9e:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <prvInitialiseTaskLists+0x78>)
 800bda0:	4a05      	ldr	r2, [pc, #20]	; (800bdb8 <prvInitialiseTaskLists+0x64>)
 800bda2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bda4:	4b0a      	ldr	r3, [pc, #40]	; (800bdd0 <prvInitialiseTaskLists+0x7c>)
 800bda6:	4a05      	ldr	r2, [pc, #20]	; (800bdbc <prvInitialiseTaskLists+0x68>)
 800bda8:	601a      	str	r2, [r3, #0]
}
 800bdaa:	bf00      	nop
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	20000eb4 	.word	0x20000eb4
 800bdb8:	20001314 	.word	0x20001314
 800bdbc:	20001328 	.word	0x20001328
 800bdc0:	20001344 	.word	0x20001344
 800bdc4:	20001358 	.word	0x20001358
 800bdc8:	20001370 	.word	0x20001370
 800bdcc:	2000133c 	.word	0x2000133c
 800bdd0:	20001340 	.word	0x20001340

0800bdd4 <prvCheckTasksWaitingTermination>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
=======
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 800b8f6:	e019      	b.n	800b92c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8f8:	f001 f9c4 	bl	800cc84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8fc:	4b10      	ldr	r3, [pc, #64]	; (800b940 <prvCheckTasksWaitingTermination+0x50>)
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3304      	adds	r3, #4
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fe fb12 	bl	8009f32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b90e:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <prvCheckTasksWaitingTermination+0x54>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	3b01      	subs	r3, #1
 800b914:	4a0b      	ldr	r2, [pc, #44]	; (800b944 <prvCheckTasksWaitingTermination+0x54>)
 800b916:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b918:	4b0b      	ldr	r3, [pc, #44]	; (800b948 <prvCheckTasksWaitingTermination+0x58>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	4a0a      	ldr	r2, [pc, #40]	; (800b948 <prvCheckTasksWaitingTermination+0x58>)
 800b920:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b922:	f001 f9df 	bl	800cce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f810 	bl	800b94c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b92c:	4b06      	ldr	r3, [pc, #24]	; (800b948 <prvCheckTasksWaitingTermination+0x58>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1e1      	bne.n	800b8f8 <prvCheckTasksWaitingTermination+0x8>
=======
 800bdda:	e019      	b.n	800be10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bddc:	f001 f962 	bl	800d0a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde0:	4b10      	ldr	r3, [pc, #64]	; (800be24 <prvCheckTasksWaitingTermination+0x50>)
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	3304      	adds	r3, #4
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fe fb12 	bl	800a416 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdf2:	4b0d      	ldr	r3, [pc, #52]	; (800be28 <prvCheckTasksWaitingTermination+0x54>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	4a0b      	ldr	r2, [pc, #44]	; (800be28 <prvCheckTasksWaitingTermination+0x54>)
 800bdfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdfc:	4b0b      	ldr	r3, [pc, #44]	; (800be2c <prvCheckTasksWaitingTermination+0x58>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	3b01      	subs	r3, #1
 800be02:	4a0a      	ldr	r2, [pc, #40]	; (800be2c <prvCheckTasksWaitingTermination+0x58>)
 800be04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be06:	f001 f97d 	bl	800d104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f810 	bl	800be30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be10:	4b06      	ldr	r3, [pc, #24]	; (800be2c <prvCheckTasksWaitingTermination+0x58>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1e1      	bne.n	800bddc <prvCheckTasksWaitingTermination+0x8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 800b934:	bf00      	nop
 800b936:	bf00      	nop
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	20001370 	.word	0x20001370
 800b944:	2000139c 	.word	0x2000139c
 800b948:	20001384 	.word	0x20001384

0800b94c <prvDeleteTCB>:
=======
 800be18:	bf00      	nop
 800be1a:	bf00      	nop
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	20001358 	.word	0x20001358
 800be28:	20001384 	.word	0x20001384
 800be2c:	2000136c 	.word	0x2000136c

0800be30 <prvDeleteTCB>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
=======
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d108      	bne.n	800b970 <prvDeleteTCB+0x24>
=======
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d108      	bne.n	800be54 <prvDeleteTCB+0x24>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b962:	4618      	mov	r0, r3
 800b964:	f001 fb7c 	bl	800d060 <vPortFree>
				vPortFree( pxTCB );
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f001 fb79 	bl	800d060 <vPortFree>
=======
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be46:	4618      	mov	r0, r3
 800be48:	f001 fb1a 	bl	800d480 <vPortFree>
				vPortFree( pxTCB );
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f001 fb17 	bl	800d480 <vPortFree>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 800b96e:	e018      	b.n	800b9a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b976:	2b01      	cmp	r3, #1
 800b978:	d103      	bne.n	800b982 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f001 fb70 	bl	800d060 <vPortFree>
	}
 800b980:	e00f      	b.n	800b9a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d00a      	beq.n	800b9a2 <prvDeleteTCB+0x56>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	60fb      	str	r3, [r7, #12]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <prvDeleteTCB+0x54>
	}
 800b9a2:	bf00      	nop
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <prvResetNextTaskUnblockTime>:
=======
 800be52:	e018      	b.n	800be86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d103      	bne.n	800be66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f001 fb0e 	bl	800d480 <vPortFree>
	}
 800be64:	e00f      	b.n	800be86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d00a      	beq.n	800be86 <prvDeleteTCB+0x56>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	60fb      	str	r3, [r7, #12]
}
 800be82:	bf00      	nop
 800be84:	e7fe      	b.n	800be84 <prvDeleteTCB+0x54>
	}
 800be86:	bf00      	nop
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
	...

0800be90 <prvResetNextTaskUnblockTime>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9b2:	4b0c      	ldr	r3, [pc, #48]	; (800b9e4 <prvResetNextTaskUnblockTime+0x38>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d104      	bne.n	800b9c6 <prvResetNextTaskUnblockTime+0x1a>
=======
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be96:	4b0c      	ldr	r3, [pc, #48]	; (800bec8 <prvResetNextTaskUnblockTime+0x38>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d104      	bne.n	800beaa <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 800b9bc:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <prvResetNextTaskUnblockTime+0x3c>)
 800b9be:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c2:	601a      	str	r2, [r3, #0]
=======
 800bea0:	4b0a      	ldr	r3, [pc, #40]	; (800becc <prvResetNextTaskUnblockTime+0x3c>)
 800bea2:	f04f 32ff 	mov.w	r2, #4294967295
 800bea6:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 800b9c4:	e008      	b.n	800b9d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c6:	4b07      	ldr	r3, [pc, #28]	; (800b9e4 <prvResetNextTaskUnblockTime+0x38>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	4a04      	ldr	r2, [pc, #16]	; (800b9e8 <prvResetNextTaskUnblockTime+0x3c>)
 800b9d6:	6013      	str	r3, [r2, #0]
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	20001354 	.word	0x20001354
 800b9e8:	200013bc 	.word	0x200013bc

0800b9ec <xTaskGetSchedulerState>:
=======
 800bea8:	e008      	b.n	800bebc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beaa:	4b07      	ldr	r3, [pc, #28]	; (800bec8 <prvResetNextTaskUnblockTime+0x38>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	4a04      	ldr	r2, [pc, #16]	; (800becc <prvResetNextTaskUnblockTime+0x3c>)
 800beba:	6013      	str	r3, [r2, #0]
}
 800bebc:	bf00      	nop
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	2000133c 	.word	0x2000133c
 800becc:	200013a4 	.word	0x200013a4

0800bed0 <xTaskGetSchedulerState>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ba20 <xTaskGetSchedulerState+0x34>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d102      	bne.n	800ba00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	607b      	str	r3, [r7, #4]
 800b9fe:	e008      	b.n	800ba12 <xTaskGetSchedulerState+0x26>
=======
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bed6:	4b0b      	ldr	r3, [pc, #44]	; (800bf04 <xTaskGetSchedulerState+0x34>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d102      	bne.n	800bee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bede:	2301      	movs	r3, #1
 800bee0:	607b      	str	r3, [r7, #4]
 800bee2:	e008      	b.n	800bef6 <xTaskGetSchedulerState+0x26>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800ba00:	4b08      	ldr	r3, [pc, #32]	; (800ba24 <xTaskGetSchedulerState+0x38>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d102      	bne.n	800ba0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba08:	2302      	movs	r3, #2
 800ba0a:	607b      	str	r3, [r7, #4]
 800ba0c:	e001      	b.n	800ba12 <xTaskGetSchedulerState+0x26>
=======
 800bee4:	4b08      	ldr	r3, [pc, #32]	; (800bf08 <xTaskGetSchedulerState+0x38>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d102      	bne.n	800bef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800beec:	2302      	movs	r3, #2
 800beee:	607b      	str	r3, [r7, #4]
 800bef0:	e001      	b.n	800bef6 <xTaskGetSchedulerState+0x26>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 800ba0e:	2300      	movs	r3, #0
 800ba10:	607b      	str	r3, [r7, #4]
=======
 800bef2:	2300      	movs	r3, #0
 800bef4:	607b      	str	r3, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
		}

		return xReturn;
<<<<<<< HEAD
 800ba12:	687b      	ldr	r3, [r7, #4]
	}
 800ba14:	4618      	mov	r0, r3
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	200013a8 	.word	0x200013a8
 800ba24:	200013c4 	.word	0x200013c4

0800ba28 <xTaskPriorityInherit>:
=======
 800bef6:	687b      	ldr	r3, [r7, #4]
	}
 800bef8:	4618      	mov	r0, r3
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr
 800bf04:	20001390 	.word	0x20001390
 800bf08:	200013ac 	.word	0x200013ac

0800bf0c <xTaskPriorityInherit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba34:	2300      	movs	r3, #0
 800ba36:	60fb      	str	r3, [r7, #12]
=======
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
<<<<<<< HEAD
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d051      	beq.n	800bae2 <xTaskPriorityInherit+0xba>
=======
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d051      	beq.n	800bfc6 <xTaskPriorityInherit+0xba>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba42:	4b2a      	ldr	r3, [pc, #168]	; (800baec <xTaskPriorityInherit+0xc4>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d241      	bcs.n	800bad0 <xTaskPriorityInherit+0xa8>
=======
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf26:	4b2a      	ldr	r3, [pc, #168]	; (800bfd0 <xTaskPriorityInherit+0xc4>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d241      	bcs.n	800bfb4 <xTaskPriorityInherit+0xa8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	db06      	blt.n	800ba62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba54:	4b25      	ldr	r3, [pc, #148]	; (800baec <xTaskPriorityInherit+0xc4>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	619a      	str	r2, [r3, #24]
=======
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	db06      	blt.n	800bf46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf38:	4b25      	ldr	r3, [pc, #148]	; (800bfd0 <xTaskPriorityInherit+0xc4>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	619a      	str	r2, [r3, #24]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< HEAD
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	6959      	ldr	r1, [r3, #20]
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	4413      	add	r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4a1f      	ldr	r2, [pc, #124]	; (800baf0 <xTaskPriorityInherit+0xc8>)
 800ba74:	4413      	add	r3, r2
 800ba76:	4299      	cmp	r1, r3
 800ba78:	d122      	bne.n	800bac0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7fe fa57 	bl	8009f32 <uxListRemove>
=======
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	6959      	ldr	r1, [r3, #20]
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf4e:	4613      	mov	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4413      	add	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4a1f      	ldr	r2, [pc, #124]	; (800bfd4 <xTaskPriorityInherit+0xc8>)
 800bf58:	4413      	add	r3, r2
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	d122      	bne.n	800bfa4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	3304      	adds	r3, #4
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fe fa57 	bl	800a416 <uxListRemove>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
 800ba84:	4b19      	ldr	r3, [pc, #100]	; (800baec <xTaskPriorityInherit+0xc4>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba92:	4b18      	ldr	r3, [pc, #96]	; (800baf4 <xTaskPriorityInherit+0xcc>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d903      	bls.n	800baa2 <xTaskPriorityInherit+0x7a>
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9e:	4a15      	ldr	r2, [pc, #84]	; (800baf4 <xTaskPriorityInherit+0xcc>)
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4a10      	ldr	r2, [pc, #64]	; (800baf0 <xTaskPriorityInherit+0xc8>)
 800bab0:	441a      	add	r2, r3
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	3304      	adds	r3, #4
 800bab6:	4619      	mov	r1, r3
 800bab8:	4610      	mov	r0, r2
 800baba:	f7fe f9dd 	bl	8009e78 <vListInsertEnd>
 800babe:	e004      	b.n	800baca <xTaskPriorityInherit+0xa2>
=======
 800bf68:	4b19      	ldr	r3, [pc, #100]	; (800bfd0 <xTaskPriorityInherit+0xc4>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf76:	4b18      	ldr	r3, [pc, #96]	; (800bfd8 <xTaskPriorityInherit+0xcc>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d903      	bls.n	800bf86 <xTaskPriorityInherit+0x7a>
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf82:	4a15      	ldr	r2, [pc, #84]	; (800bfd8 <xTaskPriorityInherit+0xcc>)
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4413      	add	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4a10      	ldr	r2, [pc, #64]	; (800bfd4 <xTaskPriorityInherit+0xc8>)
 800bf94:	441a      	add	r2, r3
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	3304      	adds	r3, #4
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	f7fe f9dd 	bl	800a35c <vListInsertEnd>
 800bfa2:	e004      	b.n	800bfae <xTaskPriorityInherit+0xa2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
 800bac0:	4b0a      	ldr	r3, [pc, #40]	; (800baec <xTaskPriorityInherit+0xc4>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800bfa4:	4b0a      	ldr	r3, [pc, #40]	; (800bfd0 <xTaskPriorityInherit+0xc4>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
<<<<<<< HEAD
 800baca:	2301      	movs	r3, #1
 800bacc:	60fb      	str	r3, [r7, #12]
 800bace:	e008      	b.n	800bae2 <xTaskPriorityInherit+0xba>
=======
 800bfae:	2301      	movs	r3, #1
 800bfb0:	60fb      	str	r3, [r7, #12]
 800bfb2:	e008      	b.n	800bfc6 <xTaskPriorityInherit+0xba>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bad4:	4b05      	ldr	r3, [pc, #20]	; (800baec <xTaskPriorityInherit+0xc4>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bada:	429a      	cmp	r2, r3
 800badc:	d201      	bcs.n	800bae2 <xTaskPriorityInherit+0xba>
=======
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfb8:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <xTaskPriorityInherit+0xc4>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d201      	bcs.n	800bfc6 <xTaskPriorityInherit+0xba>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 800bade:	2301      	movs	r3, #1
 800bae0:	60fb      	str	r3, [r7, #12]
=======
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 800bae2:	68fb      	ldr	r3, [r7, #12]
	}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20000ec8 	.word	0x20000ec8
 800baf0:	20000ecc 	.word	0x20000ecc
 800baf4:	200013a4 	.word	0x200013a4

0800baf8 <xTaskPriorityDisinherit>:
=======
 800bfc6:	68fb      	ldr	r3, [r7, #12]
	}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	20000eb0 	.word	0x20000eb0
 800bfd4:	20000eb4 	.word	0x20000eb4
 800bfd8:	2000138c 	.word	0x2000138c

0800bfdc <xTaskPriorityDisinherit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb04:	2300      	movs	r3, #0
 800bb06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d056      	beq.n	800bbbc <xTaskPriorityDisinherit+0xc4>
=======
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d056      	beq.n	800c0a0 <xTaskPriorityDisinherit+0xc4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 800bb0e:	4b2e      	ldr	r3, [pc, #184]	; (800bbc8 <xTaskPriorityDisinherit+0xd0>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d00a      	beq.n	800bb2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1c:	f383 8811 	msr	BASEPRI, r3
 800bb20:	f3bf 8f6f 	isb	sy
 800bb24:	f3bf 8f4f 	dsb	sy
 800bb28:	60fb      	str	r3, [r7, #12]
}
 800bb2a:	bf00      	nop
 800bb2c:	e7fe      	b.n	800bb2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10a      	bne.n	800bb4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	60bb      	str	r3, [r7, #8]
}
 800bb48:	bf00      	nop
 800bb4a:	e7fe      	b.n	800bb4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb50:	1e5a      	subs	r2, r3, #1
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	651a      	str	r2, [r3, #80]	; 0x50
=======
 800bff2:	4b2e      	ldr	r3, [pc, #184]	; (800c0ac <xTaskPriorityDisinherit+0xd0>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	693a      	ldr	r2, [r7, #16]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d00a      	beq.n	800c012 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c000:	f383 8811 	msr	BASEPRI, r3
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	60fb      	str	r3, [r7, #12]
}
 800c00e:	bf00      	nop
 800c010:	e7fe      	b.n	800c010 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c016:	2b00      	cmp	r3, #0
 800c018:	d10a      	bne.n	800c030 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01e:	f383 8811 	msr	BASEPRI, r3
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	60bb      	str	r3, [r7, #8]
}
 800c02c:	bf00      	nop
 800c02e:	e7fe      	b.n	800c02e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c034:	1e5a      	subs	r2, r3, #1
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d02c      	beq.n	800bbbc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d128      	bne.n	800bbbc <xTaskPriorityDisinherit+0xc4>
=======
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c042:	429a      	cmp	r2, r3
 800c044:	d02c      	beq.n	800c0a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d128      	bne.n	800c0a0 <xTaskPriorityDisinherit+0xc4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fe f9df 	bl	8009f32 <uxListRemove>
=======
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	3304      	adds	r3, #4
 800c052:	4618      	mov	r0, r3
 800c054:	f7fe f9df 	bl	800a416 <uxListRemove>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8c:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <xTaskPriorityDisinherit+0xd4>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d903      	bls.n	800bb9c <xTaskPriorityDisinherit+0xa4>
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb98:	4a0c      	ldr	r2, [pc, #48]	; (800bbcc <xTaskPriorityDisinherit+0xd4>)
 800bb9a:	6013      	str	r3, [r2, #0]
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba0:	4613      	mov	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	4413      	add	r3, r2
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4a09      	ldr	r2, [pc, #36]	; (800bbd0 <xTaskPriorityDisinherit+0xd8>)
 800bbaa:	441a      	add	r2, r3
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	4610      	mov	r0, r2
 800bbb4:	f7fe f960 	bl	8009e78 <vListInsertEnd>
=======
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c064:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c070:	4b0f      	ldr	r3, [pc, #60]	; (800c0b0 <xTaskPriorityDisinherit+0xd4>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	429a      	cmp	r2, r3
 800c076:	d903      	bls.n	800c080 <xTaskPriorityDisinherit+0xa4>
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07c:	4a0c      	ldr	r2, [pc, #48]	; (800c0b0 <xTaskPriorityDisinherit+0xd4>)
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c084:	4613      	mov	r3, r2
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	4413      	add	r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	4a09      	ldr	r2, [pc, #36]	; (800c0b4 <xTaskPriorityDisinherit+0xd8>)
 800c08e:	441a      	add	r2, r3
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	3304      	adds	r3, #4
 800c094:	4619      	mov	r1, r3
 800c096:	4610      	mov	r0, r2
 800c098:	f7fe f960 	bl	800a35c <vListInsertEnd>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 800bbb8:	2301      	movs	r3, #1
 800bbba:	617b      	str	r3, [r7, #20]
=======
 800c09c:	2301      	movs	r3, #1
 800c09e:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 800bbbc:	697b      	ldr	r3, [r7, #20]
	}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000ec8 	.word	0x20000ec8
 800bbcc:	200013a4 	.word	0x200013a4
 800bbd0:	20000ecc 	.word	0x20000ecc

0800bbd4 <vTaskPriorityDisinheritAfterTimeout>:
=======
 800c0a0:	697b      	ldr	r3, [r7, #20]
	}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3718      	adds	r7, #24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20000eb0 	.word	0x20000eb0
 800c0b0:	2000138c 	.word	0x2000138c
 800c0b4:	20000eb4 	.word	0x20000eb4

0800c0b8 <vTaskPriorityDisinheritAfterTimeout>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
<<<<<<< HEAD
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d06a      	beq.n	800bcc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
=======
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b088      	sub	sp, #32
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d06a      	beq.n	800c1a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
<<<<<<< HEAD
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10a      	bne.n	800bc0a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	60fb      	str	r3, [r7, #12]
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <vTaskPriorityDisinheritAfterTimeout+0x34>
=======
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10a      	bne.n	800c0ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	60fb      	str	r3, [r7, #12]
}
 800c0ea:	bf00      	nop
 800c0ec:	e7fe      	b.n	800c0ec <vTaskPriorityDisinheritAfterTimeout+0x34>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
<<<<<<< HEAD
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d902      	bls.n	800bc1a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	61fb      	str	r3, [r7, #28]
 800bc18:	e002      	b.n	800bc20 <vTaskPriorityDisinheritAfterTimeout+0x4c>
=======
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0f2:	683a      	ldr	r2, [r7, #0]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d902      	bls.n	800c0fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	61fb      	str	r3, [r7, #28]
 800c0fc:	e002      	b.n	800c104 <vTaskPriorityDisinheritAfterTimeout+0x4c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
<<<<<<< HEAD
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc1e:	61fb      	str	r3, [r7, #28]
=======
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c102:	61fb      	str	r3, [r7, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
<<<<<<< HEAD
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc24:	69fa      	ldr	r2, [r7, #28]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d04b      	beq.n	800bcc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
=======
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c108:	69fa      	ldr	r2, [r7, #28]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d04b      	beq.n	800c1a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
<<<<<<< HEAD
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d146      	bne.n	800bcc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
=======
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	429a      	cmp	r2, r3
 800c116:	d146      	bne.n	800c1a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
<<<<<<< HEAD
 800bc34:	4b25      	ldr	r3, [pc, #148]	; (800bccc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	69ba      	ldr	r2, [r7, #24]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d10a      	bne.n	800bc54 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	60bb      	str	r3, [r7, #8]
}
 800bc50:	bf00      	nop
 800bc52:	e7fe      	b.n	800bc52 <vTaskPriorityDisinheritAfterTimeout+0x7e>
=======
 800c118:	4b25      	ldr	r3, [pc, #148]	; (800c1b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	69ba      	ldr	r2, [r7, #24]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d10a      	bne.n	800c138 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	60bb      	str	r3, [r7, #8]
}
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <vTaskPriorityDisinheritAfterTimeout+0x7e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
<<<<<<< HEAD
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc58:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	69fa      	ldr	r2, [r7, #28]
 800bc5e:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	699b      	ldr	r3, [r3, #24]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	db04      	blt.n	800bc72 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	619a      	str	r2, [r3, #24]
=======
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	db04      	blt.n	800c156 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	619a      	str	r2, [r3, #24]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< HEAD
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	6959      	ldr	r1, [r3, #20]
 800bc76:	693a      	ldr	r2, [r7, #16]
 800bc78:	4613      	mov	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4413      	add	r3, r2
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4a13      	ldr	r2, [pc, #76]	; (800bcd0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bc82:	4413      	add	r3, r2
 800bc84:	4299      	cmp	r1, r3
 800bc86:	d11c      	bne.n	800bcc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fe f950 	bl	8009f32 <uxListRemove>
=======
 800c156:	69bb      	ldr	r3, [r7, #24]
 800c158:	6959      	ldr	r1, [r3, #20]
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	4613      	mov	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	4413      	add	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	4a13      	ldr	r2, [pc, #76]	; (800c1b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c166:	4413      	add	r3, r2
 800c168:	4299      	cmp	r1, r3
 800c16a:	d11c      	bne.n	800c1a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	3304      	adds	r3, #4
 800c170:	4618      	mov	r0, r3
 800c172:	f7fe f950 	bl	800a416 <uxListRemove>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc96:	4b0f      	ldr	r3, [pc, #60]	; (800bcd4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d903      	bls.n	800bca6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca2:	4a0c      	ldr	r2, [pc, #48]	; (800bcd4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bca4:	6013      	str	r3, [r2, #0]
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcaa:	4613      	mov	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4a07      	ldr	r2, [pc, #28]	; (800bcd0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bcb4:	441a      	add	r2, r3
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	3304      	adds	r3, #4
 800bcba:	4619      	mov	r1, r3
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	f7fe f8db 	bl	8009e78 <vListInsertEnd>
=======
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17a:	4b0f      	ldr	r3, [pc, #60]	; (800c1b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d903      	bls.n	800c18a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c186:	4a0c      	ldr	r2, [pc, #48]	; (800c1b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c188:	6013      	str	r3, [r2, #0]
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18e:	4613      	mov	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4a07      	ldr	r2, [pc, #28]	; (800c1b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c198:	441a      	add	r2, r3
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	3304      	adds	r3, #4
 800c19e:	4619      	mov	r1, r3
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	f7fe f8db 	bl	800a35c <vListInsertEnd>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800bcc2:	bf00      	nop
 800bcc4:	3720      	adds	r7, #32
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	20000ec8 	.word	0x20000ec8
 800bcd0:	20000ecc 	.word	0x20000ecc
 800bcd4:	200013a4 	.word	0x200013a4

0800bcd8 <pvTaskIncrementMutexHeldCount>:
=======
 800c1a6:	bf00      	nop
 800c1a8:	3720      	adds	r7, #32
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	20000eb0 	.word	0x20000eb0
 800c1b4:	20000eb4 	.word	0x20000eb4
 800c1b8:	2000138c 	.word	0x2000138c

0800c1bc <pvTaskIncrementMutexHeldCount>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
<<<<<<< HEAD
 800bcd8:	b480      	push	{r7}
 800bcda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bcdc:	4b07      	ldr	r3, [pc, #28]	; (800bcfc <pvTaskIncrementMutexHeldCount+0x24>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d004      	beq.n	800bcee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bce4:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <pvTaskIncrementMutexHeldCount+0x24>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcea:	3201      	adds	r2, #1
 800bcec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bcee:	4b03      	ldr	r3, [pc, #12]	; (800bcfc <pvTaskIncrementMutexHeldCount+0x24>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
	}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	20000ec8 	.word	0x20000ec8

0800bd00 <ulTaskNotifyTake>:
=======
 800c1bc:	b480      	push	{r7}
 800c1be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c1c0:	4b07      	ldr	r3, [pc, #28]	; (800c1e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d004      	beq.n	800c1d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c1c8:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1ce:	3201      	adds	r2, #1
 800c1d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c1d2:	4b03      	ldr	r3, [pc, #12]	; (800c1e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
	}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr
 800c1e0:	20000eb0 	.word	0x20000eb0

0800c1e4 <ulTaskNotifyTake>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
<<<<<<< HEAD
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bd0a:	f000 ffbb 	bl	800cc84 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bd0e:	4b1e      	ldr	r3, [pc, #120]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d113      	bne.n	800bd40 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bd18:	4b1b      	ldr	r3, [pc, #108]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00b      	beq.n	800bd40 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd28:	2101      	movs	r1, #1
 800bd2a:	6838      	ldr	r0, [r7, #0]
 800bd2c:	f000 fa1e 	bl	800c16c <prvAddCurrentTaskToDelayedList>
=======
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c1ee:	f000 ff59 	bl	800d0a4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c1f2:	4b1e      	ldr	r3, [pc, #120]	; (800c26c <ulTaskNotifyTake+0x88>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d113      	bne.n	800c224 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c1fc:	4b1b      	ldr	r3, [pc, #108]	; (800c26c <ulTaskNotifyTake+0x88>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00b      	beq.n	800c224 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c20c:	2101      	movs	r1, #1
 800c20e:	6838      	ldr	r0, [r7, #0]
 800c210:	f000 fa1e 	bl	800c650 <prvAddCurrentTaskToDelayedList>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
<<<<<<< HEAD
 800bd30:	4b16      	ldr	r3, [pc, #88]	; (800bd8c <ulTaskNotifyTake+0x8c>)
 800bd32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd36:	601a      	str	r2, [r3, #0]
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	f3bf 8f6f 	isb	sy
=======
 800c214:	4b16      	ldr	r3, [pc, #88]	; (800c270 <ulTaskNotifyTake+0x8c>)
 800c216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c21a:	601a      	str	r2, [r3, #0]
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	f3bf 8f6f 	isb	sy
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800bd40:	f000 ffd0 	bl	800cce4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bd44:	f000 ff9e 	bl	800cc84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bd48:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd4e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00c      	beq.n	800bd70 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d004      	beq.n	800bd66 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bd5c:	4b0a      	ldr	r3, [pc, #40]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2200      	movs	r2, #0
 800bd62:	655a      	str	r2, [r3, #84]	; 0x54
 800bd64:	e004      	b.n	800bd70 <ulTaskNotifyTake+0x70>
=======
 800c224:	f000 ff6e 	bl	800d104 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c228:	f000 ff3c 	bl	800d0a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c22c:	4b0f      	ldr	r3, [pc, #60]	; (800c26c <ulTaskNotifyTake+0x88>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c232:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00c      	beq.n	800c254 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d004      	beq.n	800c24a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c240:	4b0a      	ldr	r3, [pc, #40]	; (800c26c <ulTaskNotifyTake+0x88>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2200      	movs	r2, #0
 800c246:	655a      	str	r2, [r3, #84]	; 0x54
 800c248:	e004      	b.n	800c254 <ulTaskNotifyTake+0x70>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
<<<<<<< HEAD
 800bd66:	4b08      	ldr	r3, [pc, #32]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	3a01      	subs	r2, #1
 800bd6e:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800c24a:	4b08      	ldr	r3, [pc, #32]	; (800c26c <ulTaskNotifyTake+0x88>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	3a01      	subs	r2, #1
 800c252:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
<<<<<<< HEAD
 800bd70:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bd7a:	f000 ffb3 	bl	800cce4 <vPortExitCritical>

		return ulReturn;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
	}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20000ec8 	.word	0x20000ec8
 800bd8c:	e000ed04 	.word	0xe000ed04

0800bd90 <xTaskNotifyWait>:
=======
 800c254:	4b05      	ldr	r3, [pc, #20]	; (800c26c <ulTaskNotifyTake+0x88>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c25e:	f000 ff51 	bl	800d104 <vPortExitCritical>

		return ulReturn;
 800c262:	68fb      	ldr	r3, [r7, #12]
	}
 800c264:	4618      	mov	r0, r3
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	20000eb0 	.word	0x20000eb0
 800c270:	e000ed04 	.word	0xe000ed04

0800c274 <xTaskNotifyWait>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
<<<<<<< HEAD
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800bd9e:	f000 ff71 	bl	800cc84 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bda2:	4b26      	ldr	r3, [pc, #152]	; (800be3c <xTaskNotifyWait+0xac>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d01a      	beq.n	800bde6 <xTaskNotifyWait+0x56>
=======
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
 800c280:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c282:	f000 ff0f 	bl	800d0a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c286:	4b26      	ldr	r3, [pc, #152]	; (800c320 <xTaskNotifyWait+0xac>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	2b02      	cmp	r3, #2
 800c292:	d01a      	beq.n	800c2ca <xTaskNotifyWait+0x56>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
<<<<<<< HEAD
 800bdb0:	4b22      	ldr	r3, [pc, #136]	; (800be3c <xTaskNotifyWait+0xac>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	43d2      	mvns	r2, r2
 800bdba:	400a      	ands	r2, r1
 800bdbc:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bdbe:	4b1f      	ldr	r3, [pc, #124]	; (800be3c <xTaskNotifyWait+0xac>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00b      	beq.n	800bde6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdce:	2101      	movs	r1, #1
 800bdd0:	6838      	ldr	r0, [r7, #0]
 800bdd2:	f000 f9cb 	bl	800c16c <prvAddCurrentTaskToDelayedList>
=======
 800c294:	4b22      	ldr	r3, [pc, #136]	; (800c320 <xTaskNotifyWait+0xac>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	43d2      	mvns	r2, r2
 800c29e:	400a      	ands	r2, r1
 800c2a0:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c2a2:	4b1f      	ldr	r3, [pc, #124]	; (800c320 <xTaskNotifyWait+0xac>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00b      	beq.n	800c2ca <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	6838      	ldr	r0, [r7, #0]
 800c2b6:	f000 f9cb 	bl	800c650 <prvAddCurrentTaskToDelayedList>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
<<<<<<< HEAD
 800bdd6:	4b1a      	ldr	r3, [pc, #104]	; (800be40 <xTaskNotifyWait+0xb0>)
 800bdd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	f3bf 8f4f 	dsb	sy
 800bde2:	f3bf 8f6f 	isb	sy
=======
 800c2ba:	4b1a      	ldr	r3, [pc, #104]	; (800c324 <xTaskNotifyWait+0xb0>)
 800c2bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c0:	601a      	str	r2, [r3, #0]
 800c2c2:	f3bf 8f4f 	dsb	sy
 800c2c6:	f3bf 8f6f 	isb	sy
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800bde6:	f000 ff7d 	bl	800cce4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bdea:	f000 ff4b 	bl	800cc84 <vPortEnterCritical>
=======
 800c2ca:	f000 ff1b 	bl	800d104 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c2ce:	f000 fee9 	bl	800d0a4 <vPortEnterCritical>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
<<<<<<< HEAD
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d004      	beq.n	800bdfe <xTaskNotifyWait+0x6e>
=======
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d004      	beq.n	800c2e2 <xTaskNotifyWait+0x6e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
<<<<<<< HEAD
 800bdf4:	4b11      	ldr	r3, [pc, #68]	; (800be3c <xTaskNotifyWait+0xac>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	601a      	str	r2, [r3, #0]
=======
 800c2d8:	4b11      	ldr	r3, [pc, #68]	; (800c320 <xTaskNotifyWait+0xac>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
<<<<<<< HEAD
 800bdfe:	4b0f      	ldr	r3, [pc, #60]	; (800be3c <xTaskNotifyWait+0xac>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800be06:	b2db      	uxtb	r3, r3
 800be08:	2b02      	cmp	r3, #2
 800be0a:	d002      	beq.n	800be12 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800be0c:	2300      	movs	r3, #0
 800be0e:	617b      	str	r3, [r7, #20]
 800be10:	e008      	b.n	800be24 <xTaskNotifyWait+0x94>
=======
 800c2e2:	4b0f      	ldr	r3, [pc, #60]	; (800c320 <xTaskNotifyWait+0xac>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d002      	beq.n	800c2f6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	617b      	str	r3, [r7, #20]
 800c2f4:	e008      	b.n	800c308 <xTaskNotifyWait+0x94>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
<<<<<<< HEAD
 800be12:	4b0a      	ldr	r3, [pc, #40]	; (800be3c <xTaskNotifyWait+0xac>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	43d2      	mvns	r2, r2
 800be1c:	400a      	ands	r2, r1
 800be1e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800be20:	2301      	movs	r3, #1
 800be22:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be24:	4b05      	ldr	r3, [pc, #20]	; (800be3c <xTaskNotifyWait+0xac>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800be2e:	f000 ff59 	bl	800cce4 <vPortExitCritical>

		return xReturn;
 800be32:	697b      	ldr	r3, [r7, #20]
	}
 800be34:	4618      	mov	r0, r3
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	20000ec8 	.word	0x20000ec8
 800be40:	e000ed04 	.word	0xe000ed04

0800be44 <xTaskGenericNotify>:
=======
 800c2f6:	4b0a      	ldr	r3, [pc, #40]	; (800c320 <xTaskNotifyWait+0xac>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	43d2      	mvns	r2, r2
 800c300:	400a      	ands	r2, r1
 800c302:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800c304:	2301      	movs	r3, #1
 800c306:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c308:	4b05      	ldr	r3, [pc, #20]	; (800c320 <xTaskNotifyWait+0xac>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c312:	f000 fef7 	bl	800d104 <vPortExitCritical>

		return xReturn;
 800c316:	697b      	ldr	r3, [r7, #20]
	}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20000eb0 	.word	0x20000eb0
 800c324:	e000ed04 	.word	0xe000ed04

0800c328 <xTaskGenericNotify>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
<<<<<<< HEAD
 800be44:	b580      	push	{r7, lr}
 800be46:	b08a      	sub	sp, #40	; 0x28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	603b      	str	r3, [r7, #0]
 800be50:	4613      	mov	r3, r2
 800be52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800be54:	2301      	movs	r3, #1
 800be56:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10a      	bne.n	800be74 <xTaskGenericNotify+0x30>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	61bb      	str	r3, [r7, #24]
}
 800be70:	bf00      	nop
 800be72:	e7fe      	b.n	800be72 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800be78:	f000 ff04 	bl	800cc84 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800be8a:	6a3b      	ldr	r3, [r7, #32]
 800be8c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800be90:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800be92:	6a3b      	ldr	r3, [r7, #32]
 800be94:	2202      	movs	r2, #2
 800be96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800be9a:	79fb      	ldrb	r3, [r7, #7]
 800be9c:	2b04      	cmp	r3, #4
 800be9e:	d828      	bhi.n	800bef2 <xTaskGenericNotify+0xae>
 800bea0:	a201      	add	r2, pc, #4	; (adr r2, 800bea8 <xTaskGenericNotify+0x64>)
 800bea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea6:	bf00      	nop
 800bea8:	0800bf13 	.word	0x0800bf13
 800beac:	0800bebd 	.word	0x0800bebd
 800beb0:	0800becb 	.word	0x0800becb
 800beb4:	0800bed7 	.word	0x0800bed7
 800beb8:	0800bedf 	.word	0x0800bedf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bebc:	6a3b      	ldr	r3, [r7, #32]
 800bebe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	431a      	orrs	r2, r3
 800bec4:	6a3b      	ldr	r3, [r7, #32]
 800bec6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bec8:	e026      	b.n	800bf18 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800beca:	6a3b      	ldr	r3, [r7, #32]
 800becc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bece:	1c5a      	adds	r2, r3, #1
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bed4:	e020      	b.n	800bf18 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bed6:	6a3b      	ldr	r3, [r7, #32]
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bedc:	e01c      	b.n	800bf18 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bede:	7ffb      	ldrb	r3, [r7, #31]
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d003      	beq.n	800beec <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08a      	sub	sp, #40	; 0x28
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	603b      	str	r3, [r7, #0]
 800c334:	4613      	mov	r3, r2
 800c336:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c338:	2301      	movs	r3, #1
 800c33a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10a      	bne.n	800c358 <xTaskGenericNotify+0x30>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	61bb      	str	r3, [r7, #24]
}
 800c354:	bf00      	nop
 800c356:	e7fe      	b.n	800c356 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c35c:	f000 fea2 	bl	800d0a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d003      	beq.n	800c36e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c366:	6a3b      	ldr	r3, [r7, #32]
 800c368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c36e:	6a3b      	ldr	r3, [r7, #32]
 800c370:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c374:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c376:	6a3b      	ldr	r3, [r7, #32]
 800c378:	2202      	movs	r2, #2
 800c37a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c37e:	79fb      	ldrb	r3, [r7, #7]
 800c380:	2b04      	cmp	r3, #4
 800c382:	d828      	bhi.n	800c3d6 <xTaskGenericNotify+0xae>
 800c384:	a201      	add	r2, pc, #4	; (adr r2, 800c38c <xTaskGenericNotify+0x64>)
 800c386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38a:	bf00      	nop
 800c38c:	0800c3f7 	.word	0x0800c3f7
 800c390:	0800c3a1 	.word	0x0800c3a1
 800c394:	0800c3af 	.word	0x0800c3af
 800c398:	0800c3bb 	.word	0x0800c3bb
 800c39c:	0800c3c3 	.word	0x0800c3c3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	431a      	orrs	r2, r3
 800c3a8:	6a3b      	ldr	r3, [r7, #32]
 800c3aa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c3ac:	e026      	b.n	800c3fc <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c3ae:	6a3b      	ldr	r3, [r7, #32]
 800c3b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b2:	1c5a      	adds	r2, r3, #1
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c3b8:	e020      	b.n	800c3fc <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c3c0:	e01c      	b.n	800c3fc <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c3c2:	7ffb      	ldrb	r3, [r7, #31]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d003      	beq.n	800c3d0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c3c8:	6a3b      	ldr	r3, [r7, #32]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
<<<<<<< HEAD
 800beea:	e015      	b.n	800bf18 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800beec:	2300      	movs	r3, #0
 800beee:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bef0:	e012      	b.n	800bf18 <xTaskGenericNotify+0xd4>
=======
 800c3ce:	e015      	b.n	800c3fc <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c3d4:	e012      	b.n	800c3fc <xTaskGenericNotify+0xd4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
<<<<<<< HEAD
 800bef2:	6a3b      	ldr	r3, [r7, #32]
 800bef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befa:	d00c      	beq.n	800bf16 <xTaskGenericNotify+0xd2>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	617b      	str	r3, [r7, #20]
}
 800bf0e:	bf00      	nop
 800bf10:	e7fe      	b.n	800bf10 <xTaskGenericNotify+0xcc>
					break;
 800bf12:	bf00      	nop
 800bf14:	e000      	b.n	800bf18 <xTaskGenericNotify+0xd4>

					break;
 800bf16:	bf00      	nop
=======
 800c3d6:	6a3b      	ldr	r3, [r7, #32]
 800c3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3de:	d00c      	beq.n	800c3fa <xTaskGenericNotify+0xd2>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	617b      	str	r3, [r7, #20]
}
 800c3f2:	bf00      	nop
 800c3f4:	e7fe      	b.n	800c3f4 <xTaskGenericNotify+0xcc>
					break;
 800c3f6:	bf00      	nop
 800c3f8:	e000      	b.n	800c3fc <xTaskGenericNotify+0xd4>

					break;
 800c3fa:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
<<<<<<< HEAD
 800bf18:	7ffb      	ldrb	r3, [r7, #31]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d13a      	bne.n	800bf94 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf1e:	6a3b      	ldr	r3, [r7, #32]
 800bf20:	3304      	adds	r3, #4
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fe f805 	bl	8009f32 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bf28:	6a3b      	ldr	r3, [r7, #32]
 800bf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf2c:	4b1d      	ldr	r3, [pc, #116]	; (800bfa4 <xTaskGenericNotify+0x160>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d903      	bls.n	800bf3c <xTaskGenericNotify+0xf8>
 800bf34:	6a3b      	ldr	r3, [r7, #32]
 800bf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf38:	4a1a      	ldr	r2, [pc, #104]	; (800bfa4 <xTaskGenericNotify+0x160>)
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	6a3b      	ldr	r3, [r7, #32]
 800bf3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf40:	4613      	mov	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4413      	add	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	4a17      	ldr	r2, [pc, #92]	; (800bfa8 <xTaskGenericNotify+0x164>)
 800bf4a:	441a      	add	r2, r3
 800bf4c:	6a3b      	ldr	r3, [r7, #32]
 800bf4e:	3304      	adds	r3, #4
 800bf50:	4619      	mov	r1, r3
 800bf52:	4610      	mov	r0, r2
 800bf54:	f7fd ff90 	bl	8009e78 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bf58:	6a3b      	ldr	r3, [r7, #32]
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00a      	beq.n	800bf76 <xTaskGenericNotify+0x132>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	613b      	str	r3, [r7, #16]
}
 800bf72:	bf00      	nop
 800bf74:	e7fe      	b.n	800bf74 <xTaskGenericNotify+0x130>
=======
 800c3fc:	7ffb      	ldrb	r3, [r7, #31]
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d13a      	bne.n	800c478 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	3304      	adds	r3, #4
 800c406:	4618      	mov	r0, r3
 800c408:	f7fe f805 	bl	800a416 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c40c:	6a3b      	ldr	r3, [r7, #32]
 800c40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c410:	4b1d      	ldr	r3, [pc, #116]	; (800c488 <xTaskGenericNotify+0x160>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	429a      	cmp	r2, r3
 800c416:	d903      	bls.n	800c420 <xTaskGenericNotify+0xf8>
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	4a1a      	ldr	r2, [pc, #104]	; (800c488 <xTaskGenericNotify+0x160>)
 800c41e:	6013      	str	r3, [r2, #0]
 800c420:	6a3b      	ldr	r3, [r7, #32]
 800c422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c424:	4613      	mov	r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	4413      	add	r3, r2
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	4a17      	ldr	r2, [pc, #92]	; (800c48c <xTaskGenericNotify+0x164>)
 800c42e:	441a      	add	r2, r3
 800c430:	6a3b      	ldr	r3, [r7, #32]
 800c432:	3304      	adds	r3, #4
 800c434:	4619      	mov	r1, r3
 800c436:	4610      	mov	r0, r2
 800c438:	f7fd ff90 	bl	800a35c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c43c:	6a3b      	ldr	r3, [r7, #32]
 800c43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00a      	beq.n	800c45a <xTaskGenericNotify+0x132>
	__asm volatile
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	613b      	str	r3, [r7, #16]
}
 800c456:	bf00      	nop
 800c458:	e7fe      	b.n	800c458 <xTaskGenericNotify+0x130>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800bf76:	6a3b      	ldr	r3, [r7, #32]
 800bf78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7a:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <xTaskGenericNotify+0x168>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d907      	bls.n	800bf94 <xTaskGenericNotify+0x150>
=======
 800c45a:	6a3b      	ldr	r3, [r7, #32]
 800c45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c45e:	4b0c      	ldr	r3, [pc, #48]	; (800c490 <xTaskGenericNotify+0x168>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c464:	429a      	cmp	r2, r3
 800c466:	d907      	bls.n	800c478 <xTaskGenericNotify+0x150>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 800bf84:	4b0a      	ldr	r3, [pc, #40]	; (800bfb0 <xTaskGenericNotify+0x16c>)
 800bf86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	f3bf 8f6f 	isb	sy
=======
 800c468:	4b0a      	ldr	r3, [pc, #40]	; (800c494 <xTaskGenericNotify+0x16c>)
 800c46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c46e:	601a      	str	r2, [r3, #0]
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	f3bf 8f6f 	isb	sy
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800bf94:	f000 fea6 	bl	800cce4 <vPortExitCritical>

		return xReturn;
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3728      	adds	r7, #40	; 0x28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	200013a4 	.word	0x200013a4
 800bfa8:	20000ecc 	.word	0x20000ecc
 800bfac:	20000ec8 	.word	0x20000ec8
 800bfb0:	e000ed04 	.word	0xe000ed04

0800bfb4 <xTaskGenericNotifyFromISR>:
=======
 800c478:	f000 fe44 	bl	800d104 <vPortExitCritical>

		return xReturn;
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c47e:	4618      	mov	r0, r3
 800c480:	3728      	adds	r7, #40	; 0x28
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	2000138c 	.word	0x2000138c
 800c48c:	20000eb4 	.word	0x20000eb4
 800c490:	20000eb0 	.word	0x20000eb0
 800c494:	e000ed04 	.word	0xe000ed04

0800c498 <xTaskGenericNotifyFromISR>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
<<<<<<< HEAD
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b08e      	sub	sp, #56	; 0x38
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	603b      	str	r3, [r7, #0]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10a      	bne.n	800bfe4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bfe0:	bf00      	nop
 800bfe2:	e7fe      	b.n	800bfe2 <xTaskGenericNotifyFromISR+0x2e>
=======
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08e      	sub	sp, #56	; 0x38
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	603b      	str	r3, [r7, #0]
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d10a      	bne.n	800c4c8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c4c4:	bf00      	nop
 800c4c6:	e7fe      	b.n	800c4c6 <xTaskGenericNotifyFromISR+0x2e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 800bfe4:	f000 ff30 	bl	800ce48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800bfec:	f3ef 8211 	mrs	r2, BASEPRI
 800bff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	623a      	str	r2, [r7, #32]
 800c002:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c004:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c006:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d003      	beq.n	800c016 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c01c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c022:	2202      	movs	r2, #2
 800c024:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c028:	79fb      	ldrb	r3, [r7, #7]
 800c02a:	2b04      	cmp	r3, #4
 800c02c:	d828      	bhi.n	800c080 <xTaskGenericNotifyFromISR+0xcc>
 800c02e:	a201      	add	r2, pc, #4	; (adr r2, 800c034 <xTaskGenericNotifyFromISR+0x80>)
 800c030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c034:	0800c0a1 	.word	0x0800c0a1
 800c038:	0800c049 	.word	0x0800c049
 800c03c:	0800c057 	.word	0x0800c057
 800c040:	0800c063 	.word	0x0800c063
 800c044:	0800c06b 	.word	0x0800c06b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	431a      	orrs	r2, r3
 800c050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c052:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c054:	e027      	b.n	800c0a6 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c060:	e021      	b.n	800c0a6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c068:	e01d      	b.n	800c0a6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c06a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c06e:	2b02      	cmp	r3, #2
 800c070:	d003      	beq.n	800c07a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	68ba      	ldr	r2, [r7, #8]
 800c076:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800c4c8:	f000 fece 	bl	800d268 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c4d0:	f3ef 8211 	mrs	r2, BASEPRI
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	623a      	str	r2, [r7, #32]
 800c4e6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c4e8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c506:	2202      	movs	r2, #2
 800c508:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c50c:	79fb      	ldrb	r3, [r7, #7]
 800c50e:	2b04      	cmp	r3, #4
 800c510:	d828      	bhi.n	800c564 <xTaskGenericNotifyFromISR+0xcc>
 800c512:	a201      	add	r2, pc, #4	; (adr r2, 800c518 <xTaskGenericNotifyFromISR+0x80>)
 800c514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c518:	0800c585 	.word	0x0800c585
 800c51c:	0800c52d 	.word	0x0800c52d
 800c520:	0800c53b 	.word	0x0800c53b
 800c524:	0800c547 	.word	0x0800c547
 800c528:	0800c54f 	.word	0x0800c54f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	431a      	orrs	r2, r3
 800c534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c536:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c538:	e027      	b.n	800c58a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c53e:	1c5a      	adds	r2, r3, #1
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c544:	e021      	b.n	800c58a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c54c:	e01d      	b.n	800c58a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c54e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c552:	2b02      	cmp	r3, #2
 800c554:	d003      	beq.n	800c55e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
<<<<<<< HEAD
 800c078:	e015      	b.n	800c0a6 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c07e:	e012      	b.n	800c0a6 <xTaskGenericNotifyFromISR+0xf2>
=======
 800c55c:	e015      	b.n	800c58a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c55e:	2300      	movs	r3, #0
 800c560:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c562:	e012      	b.n	800c58a <xTaskGenericNotifyFromISR+0xf2>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
<<<<<<< HEAD
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c088:	d00c      	beq.n	800c0a4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08e:	f383 8811 	msr	BASEPRI, r3
 800c092:	f3bf 8f6f 	isb	sy
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	61bb      	str	r3, [r7, #24]
}
 800c09c:	bf00      	nop
 800c09e:	e7fe      	b.n	800c09e <xTaskGenericNotifyFromISR+0xea>
					break;
 800c0a0:	bf00      	nop
 800c0a2:	e000      	b.n	800c0a6 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c0a4:	bf00      	nop
=======
 800c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c56c:	d00c      	beq.n	800c588 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	61bb      	str	r3, [r7, #24]
}
 800c580:	bf00      	nop
 800c582:	e7fe      	b.n	800c582 <xTaskGenericNotifyFromISR+0xea>
					break;
 800c584:	bf00      	nop
 800c586:	e000      	b.n	800c58a <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c588:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
<<<<<<< HEAD
 800c0a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d146      	bne.n	800c13c <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00a      	beq.n	800c0cc <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ba:	f383 8811 	msr	BASEPRI, r3
 800c0be:	f3bf 8f6f 	isb	sy
 800c0c2:	f3bf 8f4f 	dsb	sy
 800c0c6:	617b      	str	r3, [r7, #20]
}
 800c0c8:	bf00      	nop
 800c0ca:	e7fe      	b.n	800c0ca <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0cc:	4b21      	ldr	r3, [pc, #132]	; (800c154 <xTaskGenericNotifyFromISR+0x1a0>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d11d      	bne.n	800c110 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fd ff2a 	bl	8009f32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e2:	4b1d      	ldr	r3, [pc, #116]	; (800c158 <xTaskGenericNotifyFromISR+0x1a4>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d903      	bls.n	800c0f2 <xTaskGenericNotifyFromISR+0x13e>
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ee:	4a1a      	ldr	r2, [pc, #104]	; (800c158 <xTaskGenericNotifyFromISR+0x1a4>)
 800c0f0:	6013      	str	r3, [r2, #0]
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	4413      	add	r3, r2
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	4a17      	ldr	r2, [pc, #92]	; (800c15c <xTaskGenericNotifyFromISR+0x1a8>)
 800c100:	441a      	add	r2, r3
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	3304      	adds	r3, #4
 800c106:	4619      	mov	r1, r3
 800c108:	4610      	mov	r0, r2
 800c10a:	f7fd feb5 	bl	8009e78 <vListInsertEnd>
 800c10e:	e005      	b.n	800c11c <xTaskGenericNotifyFromISR+0x168>
=======
 800c58a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d146      	bne.n	800c620 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00a      	beq.n	800c5b0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	617b      	str	r3, [r7, #20]
}
 800c5ac:	bf00      	nop
 800c5ae:	e7fe      	b.n	800c5ae <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5b0:	4b21      	ldr	r3, [pc, #132]	; (800c638 <xTaskGenericNotifyFromISR+0x1a0>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d11d      	bne.n	800c5f4 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7fd ff2a 	bl	800a416 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c6:	4b1d      	ldr	r3, [pc, #116]	; (800c63c <xTaskGenericNotifyFromISR+0x1a4>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d903      	bls.n	800c5d6 <xTaskGenericNotifyFromISR+0x13e>
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d2:	4a1a      	ldr	r2, [pc, #104]	; (800c63c <xTaskGenericNotifyFromISR+0x1a4>)
 800c5d4:	6013      	str	r3, [r2, #0]
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5da:	4613      	mov	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	4a17      	ldr	r2, [pc, #92]	; (800c640 <xTaskGenericNotifyFromISR+0x1a8>)
 800c5e4:	441a      	add	r2, r3
 800c5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	f7fd feb5 	bl	800a35c <vListInsertEnd>
 800c5f2:	e005      	b.n	800c600 <xTaskGenericNotifyFromISR+0x168>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
<<<<<<< HEAD
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	3318      	adds	r3, #24
 800c114:	4619      	mov	r1, r3
 800c116:	4812      	ldr	r0, [pc, #72]	; (800c160 <xTaskGenericNotifyFromISR+0x1ac>)
 800c118:	f7fd feae 	bl	8009e78 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c120:	4b10      	ldr	r3, [pc, #64]	; (800c164 <xTaskGenericNotifyFromISR+0x1b0>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c126:	429a      	cmp	r2, r3
 800c128:	d908      	bls.n	800c13c <xTaskGenericNotifyFromISR+0x188>
=======
 800c5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f6:	3318      	adds	r3, #24
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4812      	ldr	r0, [pc, #72]	; (800c644 <xTaskGenericNotifyFromISR+0x1ac>)
 800c5fc:	f7fd feae 	bl	800a35c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c604:	4b10      	ldr	r3, [pc, #64]	; (800c648 <xTaskGenericNotifyFromISR+0x1b0>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d908      	bls.n	800c620 <xTaskGenericNotifyFromISR+0x188>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 800c12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d002      	beq.n	800c136 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c132:	2201      	movs	r2, #1
 800c134:	601a      	str	r2, [r3, #0]
=======
 800c60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c610:	2b00      	cmp	r3, #0
 800c612:	d002      	beq.n	800c61a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c616:	2201      	movs	r2, #1
 800c618:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
<<<<<<< HEAD
 800c136:	4b0c      	ldr	r3, [pc, #48]	; (800c168 <xTaskGenericNotifyFromISR+0x1b4>)
 800c138:	2201      	movs	r2, #1
 800c13a:	601a      	str	r2, [r3, #0]
 800c13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	f383 8811 	msr	BASEPRI, r3
}
 800c146:	bf00      	nop
=======
 800c61a:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <xTaskGenericNotifyFromISR+0x1b4>)
 800c61c:	2201      	movs	r2, #1
 800c61e:	601a      	str	r2, [r3, #0]
 800c620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c622:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	f383 8811 	msr	BASEPRI, r3
}
 800c62a:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
<<<<<<< HEAD
 800c148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3738      	adds	r7, #56	; 0x38
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	200013c4 	.word	0x200013c4
 800c158:	200013a4 	.word	0x200013a4
 800c15c:	20000ecc 	.word	0x20000ecc
 800c160:	2000135c 	.word	0x2000135c
 800c164:	20000ec8 	.word	0x20000ec8
 800c168:	200013b0 	.word	0x200013b0

0800c16c <prvAddCurrentTaskToDelayedList>:
=======
 800c62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c62e:	4618      	mov	r0, r3
 800c630:	3738      	adds	r7, #56	; 0x38
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	200013ac 	.word	0x200013ac
 800c63c:	2000138c 	.word	0x2000138c
 800c640:	20000eb4 	.word	0x20000eb4
 800c644:	20001344 	.word	0x20001344
 800c648:	20000eb0 	.word	0x20000eb0
 800c64c:	20001398 	.word	0x20001398

0800c650 <prvAddCurrentTaskToDelayedList>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c176:	4b21      	ldr	r3, [pc, #132]	; (800c1fc <prvAddCurrentTaskToDelayedList+0x90>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	60fb      	str	r3, [r7, #12]
=======
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c65a:	4b21      	ldr	r3, [pc, #132]	; (800c6e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800c17c:	4b20      	ldr	r3, [pc, #128]	; (800c200 <prvAddCurrentTaskToDelayedList+0x94>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3304      	adds	r3, #4
 800c182:	4618      	mov	r0, r3
 800c184:	f7fd fed5 	bl	8009f32 <uxListRemove>
=======
 800c660:	4b20      	ldr	r3, [pc, #128]	; (800c6e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3304      	adds	r3, #4
 800c666:	4618      	mov	r0, r3
 800c668:	f7fd fed5 	bl	800a416 <uxListRemove>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18e:	d10a      	bne.n	800c1a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d007      	beq.n	800c1a6 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c672:	d10a      	bne.n	800c68a <prvAddCurrentTaskToDelayedList+0x3a>
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d007      	beq.n	800c68a <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 800c196:	4b1a      	ldr	r3, [pc, #104]	; (800c200 <prvAddCurrentTaskToDelayedList+0x94>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3304      	adds	r3, #4
 800c19c:	4619      	mov	r1, r3
 800c19e:	4819      	ldr	r0, [pc, #100]	; (800c204 <prvAddCurrentTaskToDelayedList+0x98>)
 800c1a0:	f7fd fe6a 	bl	8009e78 <vListInsertEnd>
=======
 800c67a:	4b1a      	ldr	r3, [pc, #104]	; (800c6e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	3304      	adds	r3, #4
 800c680:	4619      	mov	r1, r3
 800c682:	4819      	ldr	r0, [pc, #100]	; (800c6e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c684:	f7fd fe6a 	bl	800a35c <vListInsertEnd>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 800c1a4:	e026      	b.n	800c1f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1ae:	4b14      	ldr	r3, [pc, #80]	; (800c200 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d209      	bcs.n	800c1d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1be:	4b12      	ldr	r3, [pc, #72]	; (800c208 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	4b0f      	ldr	r3, [pc, #60]	; (800c200 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	4610      	mov	r0, r2
 800c1cc:	f7fd fe78 	bl	8009ec0 <vListInsert>
}
 800c1d0:	e010      	b.n	800c1f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1d2:	4b0e      	ldr	r3, [pc, #56]	; (800c20c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	4b0a      	ldr	r3, [pc, #40]	; (800c200 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	3304      	adds	r3, #4
 800c1dc:	4619      	mov	r1, r3
 800c1de:	4610      	mov	r0, r2
 800c1e0:	f7fd fe6e 	bl	8009ec0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1e4:	4b0a      	ldr	r3, [pc, #40]	; (800c210 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d202      	bcs.n	800c1f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c1ee:	4a08      	ldr	r2, [pc, #32]	; (800c210 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	6013      	str	r3, [r2, #0]
}
 800c1f4:	bf00      	nop
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	200013a0 	.word	0x200013a0
 800c200:	20000ec8 	.word	0x20000ec8
 800c204:	20001388 	.word	0x20001388
 800c208:	20001358 	.word	0x20001358
 800c20c:	20001354 	.word	0x20001354
 800c210:	200013bc 	.word	0x200013bc

0800c214 <xTimerCreateTimerTask>:
=======
 800c688:	e026      	b.n	800c6d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4413      	add	r3, r2
 800c690:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c692:	4b14      	ldr	r3, [pc, #80]	; (800c6e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d209      	bcs.n	800c6b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6a2:	4b12      	ldr	r3, [pc, #72]	; (800c6ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	4610      	mov	r0, r2
 800c6b0:	f7fd fe78 	bl	800a3a4 <vListInsert>
}
 800c6b4:	e010      	b.n	800c6d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6b6:	4b0e      	ldr	r3, [pc, #56]	; (800c6f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	4b0a      	ldr	r3, [pc, #40]	; (800c6e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	3304      	adds	r3, #4
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	f7fd fe6e 	bl	800a3a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c6c8:	4b0a      	ldr	r3, [pc, #40]	; (800c6f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d202      	bcs.n	800c6d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c6d2:	4a08      	ldr	r2, [pc, #32]	; (800c6f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	6013      	str	r3, [r2, #0]
}
 800c6d8:	bf00      	nop
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	20001388 	.word	0x20001388
 800c6e4:	20000eb0 	.word	0x20000eb0
 800c6e8:	20001370 	.word	0x20001370
 800c6ec:	20001340 	.word	0x20001340
 800c6f0:	2000133c 	.word	0x2000133c
 800c6f4:	200013a4 	.word	0x200013a4

0800c6f8 <xTimerCreateTimerTask>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< HEAD
 800c214:	b580      	push	{r7, lr}
 800c216:	b08a      	sub	sp, #40	; 0x28
 800c218:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c21a:	2300      	movs	r3, #0
 800c21c:	617b      	str	r3, [r7, #20]
=======
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b08a      	sub	sp, #40	; 0x28
 800c6fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c6fe:	2300      	movs	r3, #0
 800c700:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< HEAD
 800c21e:	f000 fba1 	bl	800c964 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c222:	4b1c      	ldr	r3, [pc, #112]	; (800c294 <xTimerCreateTimerTask+0x80>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d021      	beq.n	800c26e <xTimerCreateTimerTask+0x5a>
=======
 800c702:	f000 fb63 	bl	800cdcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c706:	4b1c      	ldr	r3, [pc, #112]	; (800c778 <xTimerCreateTimerTask+0x80>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d021      	beq.n	800c752 <xTimerCreateTimerTask+0x5a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800c22a:	2300      	movs	r3, #0
 800c22c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c22e:	2300      	movs	r3, #0
 800c230:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c232:	1d3a      	adds	r2, r7, #4
 800c234:	f107 0108 	add.w	r1, r7, #8
 800c238:	f107 030c 	add.w	r3, r7, #12
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fd fd83 	bl	8009d48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c242:	6879      	ldr	r1, [r7, #4]
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	9202      	str	r2, [sp, #8]
 800c24a:	9301      	str	r3, [sp, #4]
 800c24c:	2302      	movs	r3, #2
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	2300      	movs	r3, #0
 800c252:	460a      	mov	r2, r1
 800c254:	4910      	ldr	r1, [pc, #64]	; (800c298 <xTimerCreateTimerTask+0x84>)
 800c256:	4811      	ldr	r0, [pc, #68]	; (800c29c <xTimerCreateTimerTask+0x88>)
 800c258:	f7fe fd98 	bl	800ad8c <xTaskCreateStatic>
 800c25c:	4603      	mov	r3, r0
 800c25e:	4a10      	ldr	r2, [pc, #64]	; (800c2a0 <xTimerCreateTimerTask+0x8c>)
 800c260:	6013      	str	r3, [r2, #0]
=======
 800c70e:	2300      	movs	r3, #0
 800c710:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c712:	2300      	movs	r3, #0
 800c714:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c716:	1d3a      	adds	r2, r7, #4
 800c718:	f107 0108 	add.w	r1, r7, #8
 800c71c:	f107 030c 	add.w	r3, r7, #12
 800c720:	4618      	mov	r0, r3
 800c722:	f7fd fd83 	bl	800a22c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c726:	6879      	ldr	r1, [r7, #4]
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	9202      	str	r2, [sp, #8]
 800c72e:	9301      	str	r3, [sp, #4]
 800c730:	2302      	movs	r3, #2
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	2300      	movs	r3, #0
 800c736:	460a      	mov	r2, r1
 800c738:	4910      	ldr	r1, [pc, #64]	; (800c77c <xTimerCreateTimerTask+0x84>)
 800c73a:	4811      	ldr	r0, [pc, #68]	; (800c780 <xTimerCreateTimerTask+0x88>)
 800c73c:	f7fe fd98 	bl	800b270 <xTaskCreateStatic>
 800c740:	4603      	mov	r3, r0
 800c742:	4a10      	ldr	r2, [pc, #64]	; (800c784 <xTimerCreateTimerTask+0x8c>)
 800c744:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< HEAD
 800c262:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <xTimerCreateTimerTask+0x8c>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d001      	beq.n	800c26e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c26a:	2301      	movs	r3, #1
 800c26c:	617b      	str	r3, [r7, #20]
=======
 800c746:	4b0f      	ldr	r3, [pc, #60]	; (800c784 <xTimerCreateTimerTask+0x8c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d001      	beq.n	800c752 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c74e:	2301      	movs	r3, #1
 800c750:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10a      	bne.n	800c28a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	613b      	str	r3, [r7, #16]
}
 800c286:	bf00      	nop
 800c288:	e7fe      	b.n	800c288 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c28a:	697b      	ldr	r3, [r7, #20]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	200013f8 	.word	0x200013f8
 800c298:	0800eea8 	.word	0x0800eea8
 800c29c:	0800c50d 	.word	0x0800c50d
 800c2a0:	200013fc 	.word	0x200013fc

0800c2a4 <xTimerCreate>:
=======
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10a      	bne.n	800c76e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75c:	f383 8811 	msr	BASEPRI, r3
 800c760:	f3bf 8f6f 	isb	sy
 800c764:	f3bf 8f4f 	dsb	sy
 800c768:	613b      	str	r3, [r7, #16]
}
 800c76a:	bf00      	nop
 800c76c:	e7fe      	b.n	800c76c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c76e:	697b      	ldr	r3, [r7, #20]
}
 800c770:	4618      	mov	r0, r3
 800c772:	3718      	adds	r7, #24
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	200013e0 	.word	0x200013e0
 800c77c:	0800f504 	.word	0x0800f504
 800c780:	0800c975 	.word	0x0800c975
 800c784:	200013e4 	.word	0x200013e4

0800c788 <xTimerCreate>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
<<<<<<< HEAD
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b088      	sub	sp, #32
 800c2a8:	af02      	add	r7, sp, #8
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c2b2:	202c      	movs	r0, #44	; 0x2c
 800c2b4:	f000 fe08 	bl	800cec8 <pvPortMalloc>
 800c2b8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00d      	beq.n	800c2dc <xTimerCreate+0x38>
=======
 800c788:	b580      	push	{r7, lr}
 800c78a:	b088      	sub	sp, #32
 800c78c:	af02      	add	r7, sp, #8
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
 800c794:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c796:	202c      	movs	r0, #44	; 0x2c
 800c798:	f000 fda6 	bl	800d2e8 <pvPortMalloc>
 800c79c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00d      	beq.n	800c7c0 <xTimerCreate+0x38>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
<<<<<<< HEAD
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	68b9      	ldr	r1, [r7, #8]
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f000 f843 	bl	800c362 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c2dc:	697b      	ldr	r3, [r7, #20]
	}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b08a      	sub	sp, #40	; 0x28
 800c2ea:	af02      	add	r7, sp, #8
 800c2ec:	60f8      	str	r0, [r7, #12]
 800c2ee:	60b9      	str	r1, [r7, #8]
 800c2f0:	607a      	str	r2, [r7, #4]
 800c2f2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c2f4:	232c      	movs	r3, #44	; 0x2c
 800c2f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	2b2c      	cmp	r3, #44	; 0x2c
 800c2fc:	d00a      	beq.n	800c314 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	61bb      	str	r3, [r7, #24]
}
 800c310:	bf00      	nop
 800c312:	e7fe      	b.n	800c312 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c314:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10a      	bne.n	800c332 <xTimerCreateStatic+0x4c>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	617b      	str	r3, [r7, #20]
}
 800c32e:	bf00      	nop
 800c330:	e7fe      	b.n	800c330 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c334:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00d      	beq.n	800c358 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	2202      	movs	r2, #2
 800c340:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	9301      	str	r3, [sp, #4]
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	68b9      	ldr	r1, [r7, #8]
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	f000 f805 	bl	800c362 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c358:	69fb      	ldr	r3, [r7, #28]
	}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3720      	adds	r7, #32
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <prvInitialiseNewTimer>:
=======
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	9301      	str	r3, [sp, #4]
 800c7b0:	6a3b      	ldr	r3, [r7, #32]
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	68b9      	ldr	r1, [r7, #8]
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f000 f805 	bl	800c7ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c7c0:	697b      	ldr	r3, [r7, #20]
	}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3718      	adds	r7, #24
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <prvInitialiseNewTimer>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
<<<<<<< HEAD
 800c362:	b580      	push	{r7, lr}
 800c364:	b086      	sub	sp, #24
 800c366:	af00      	add	r7, sp, #0
 800c368:	60f8      	str	r0, [r7, #12]
 800c36a:	60b9      	str	r1, [r7, #8]
 800c36c:	607a      	str	r2, [r7, #4]
 800c36e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10a      	bne.n	800c38c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	617b      	str	r3, [r7, #20]
}
 800c388:	bf00      	nop
 800c38a:	e7fe      	b.n	800c38a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d01e      	beq.n	800c3d0 <prvInitialiseNewTimer+0x6e>
=======
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b086      	sub	sp, #24
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	60f8      	str	r0, [r7, #12]
 800c7d2:	60b9      	str	r1, [r7, #8]
 800c7d4:	607a      	str	r2, [r7, #4]
 800c7d6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10a      	bne.n	800c7f4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	617b      	str	r3, [r7, #20]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d01e      	beq.n	800c838 <prvInitialiseNewTimer+0x6e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
<<<<<<< HEAD
 800c392:	f000 fae7 	bl	800c964 <prvCheckForValidListAndQueue>
=======
 800c7fa:	f000 fae7 	bl	800cdcc <prvCheckForValidListAndQueue>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
<<<<<<< HEAD
 800c396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3aa:	6a3a      	ldr	r2, [r7, #32]
 800c3ac:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b0:	3304      	adds	r3, #4
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fd fd53 	bl	8009e5e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d008      	beq.n	800c3d0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3c4:	f043 0304 	orr.w	r3, r3, #4
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c812:	6a3a      	ldr	r2, [r7, #32]
 800c814:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c818:	3304      	adds	r3, #4
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fd fd91 	bl	800a342 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d008      	beq.n	800c838 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c82c:	f043 0304 	orr.w	r3, r3, #4
 800c830:	b2da      	uxtb	r2, r3
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
<<<<<<< HEAD
 800c3d0:	bf00      	nop
 800c3d2:	3718      	adds	r7, #24
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <xTimerGenericCommand>:
=======
 800c838:	bf00      	nop
 800c83a:	3718      	adds	r7, #24
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <xTimerGenericCommand>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08a      	sub	sp, #40	; 0x28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10a      	bne.n	800c406 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	623b      	str	r3, [r7, #32]
}
 800c402:	bf00      	nop
 800c404:	e7fe      	b.n	800c404 <xTimerGenericCommand+0x2c>
=======
 800c840:	b580      	push	{r7, lr}
 800c842:	b08a      	sub	sp, #40	; 0x28
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
 800c84c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c84e:	2300      	movs	r3, #0
 800c850:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10a      	bne.n	800c86e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	623b      	str	r3, [r7, #32]
}
 800c86a:	bf00      	nop
 800c86c:	e7fe      	b.n	800c86c <xTimerGenericCommand+0x2c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< HEAD
 800c406:	4b1a      	ldr	r3, [pc, #104]	; (800c470 <xTimerGenericCommand+0x98>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d02a      	beq.n	800c464 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2b05      	cmp	r3, #5
 800c41e:	dc18      	bgt.n	800c452 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c420:	f7ff fae4 	bl	800b9ec <xTaskGetSchedulerState>
 800c424:	4603      	mov	r3, r0
 800c426:	2b02      	cmp	r3, #2
 800c428:	d109      	bne.n	800c43e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c42a:	4b11      	ldr	r3, [pc, #68]	; (800c470 <xTimerGenericCommand+0x98>)
 800c42c:	6818      	ldr	r0, [r3, #0]
 800c42e:	f107 0110 	add.w	r1, r7, #16
 800c432:	2300      	movs	r3, #0
 800c434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c436:	f7fd ff4f 	bl	800a2d8 <xQueueGenericSend>
 800c43a:	6278      	str	r0, [r7, #36]	; 0x24
 800c43c:	e012      	b.n	800c464 <xTimerGenericCommand+0x8c>
=======
 800c86e:	4b1a      	ldr	r3, [pc, #104]	; (800c8d8 <xTimerGenericCommand+0x98>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d02a      	beq.n	800c8cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	2b05      	cmp	r3, #5
 800c886:	dc18      	bgt.n	800c8ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c888:	f7ff fb22 	bl	800bed0 <xTaskGetSchedulerState>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b02      	cmp	r3, #2
 800c890:	d109      	bne.n	800c8a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c892:	4b11      	ldr	r3, [pc, #68]	; (800c8d8 <xTimerGenericCommand+0x98>)
 800c894:	6818      	ldr	r0, [r3, #0]
 800c896:	f107 0110 	add.w	r1, r7, #16
 800c89a:	2300      	movs	r3, #0
 800c89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c89e:	f7fd ff8d 	bl	800a7bc <xQueueGenericSend>
 800c8a2:	6278      	str	r0, [r7, #36]	; 0x24
 800c8a4:	e012      	b.n	800c8cc <xTimerGenericCommand+0x8c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< HEAD
 800c43e:	4b0c      	ldr	r3, [pc, #48]	; (800c470 <xTimerGenericCommand+0x98>)
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	f107 0110 	add.w	r1, r7, #16
 800c446:	2300      	movs	r3, #0
 800c448:	2200      	movs	r2, #0
 800c44a:	f7fd ff45 	bl	800a2d8 <xQueueGenericSend>
 800c44e:	6278      	str	r0, [r7, #36]	; 0x24
 800c450:	e008      	b.n	800c464 <xTimerGenericCommand+0x8c>
=======
 800c8a6:	4b0c      	ldr	r3, [pc, #48]	; (800c8d8 <xTimerGenericCommand+0x98>)
 800c8a8:	6818      	ldr	r0, [r3, #0]
 800c8aa:	f107 0110 	add.w	r1, r7, #16
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f7fd ff83 	bl	800a7bc <xQueueGenericSend>
 800c8b6:	6278      	str	r0, [r7, #36]	; 0x24
 800c8b8:	e008      	b.n	800c8cc <xTimerGenericCommand+0x8c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< HEAD
 800c452:	4b07      	ldr	r3, [pc, #28]	; (800c470 <xTimerGenericCommand+0x98>)
 800c454:	6818      	ldr	r0, [r3, #0]
 800c456:	f107 0110 	add.w	r1, r7, #16
 800c45a:	2300      	movs	r3, #0
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	f7fe f839 	bl	800a4d4 <xQueueGenericSendFromISR>
 800c462:	6278      	str	r0, [r7, #36]	; 0x24
=======
 800c8ba:	4b07      	ldr	r3, [pc, #28]	; (800c8d8 <xTimerGenericCommand+0x98>)
 800c8bc:	6818      	ldr	r0, [r3, #0]
 800c8be:	f107 0110 	add.w	r1, r7, #16
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	683a      	ldr	r2, [r7, #0]
 800c8c6:	f7fe f877 	bl	800a9b8 <xQueueGenericSendFromISR>
 800c8ca:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< HEAD
 800c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c466:	4618      	mov	r0, r3
 800c468:	3728      	adds	r7, #40	; 0x28
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	200013f8 	.word	0x200013f8

0800c474 <prvProcessExpiredTimer>:
=======
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3728      	adds	r7, #40	; 0x28
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	200013e0 	.word	0x200013e0

0800c8dc <prvProcessExpiredTimer>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< HEAD
 800c474:	b580      	push	{r7, lr}
 800c476:	b088      	sub	sp, #32
 800c478:	af02      	add	r7, sp, #8
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c47e:	4b22      	ldr	r3, [pc, #136]	; (800c508 <prvProcessExpiredTimer+0x94>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	617b      	str	r3, [r7, #20]
=======
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b088      	sub	sp, #32
 800c8e0:	af02      	add	r7, sp, #8
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8e6:	4b22      	ldr	r3, [pc, #136]	; (800c970 <prvProcessExpiredTimer+0x94>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	3304      	adds	r3, #4
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fd fd50 	bl	8009f32 <uxListRemove>
=======
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fd fd8e 	bl	800a416 <uxListRemove>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< HEAD
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c498:	f003 0304 	and.w	r3, r3, #4
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d022      	beq.n	800c4e6 <prvProcessExpiredTimer+0x72>
=======
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c900:	f003 0304 	and.w	r3, r3, #4
 800c904:	2b00      	cmp	r3, #0
 800c906:	d022      	beq.n	800c94e <prvProcessExpiredTimer+0x72>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< HEAD
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	699a      	ldr	r2, [r3, #24]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	18d1      	adds	r1, r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	6978      	ldr	r0, [r7, #20]
 800c4ae:	f000 f8d1 	bl	800c654 <prvInsertTimerInActiveList>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d01f      	beq.n	800c4f8 <prvProcessExpiredTimer+0x84>
=======
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	699a      	ldr	r2, [r3, #24]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	18d1      	adds	r1, r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	6978      	ldr	r0, [r7, #20]
 800c916:	f000 f8d1 	bl	800cabc <prvInsertTimerInActiveList>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d01f      	beq.n	800c960 <prvProcessExpiredTimer+0x84>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	2300      	movs	r3, #0
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	6978      	ldr	r0, [r7, #20]
 800c4c4:	f7ff ff88 	bl	800c3d8 <xTimerGenericCommand>
 800c4c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d113      	bne.n	800c4f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	60fb      	str	r3, [r7, #12]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <prvProcessExpiredTimer+0x70>
=======
 800c920:	2300      	movs	r3, #0
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	2300      	movs	r3, #0
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	2100      	movs	r1, #0
 800c92a:	6978      	ldr	r0, [r7, #20]
 800c92c:	f7ff ff88 	bl	800c840 <xTimerGenericCommand>
 800c930:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d113      	bne.n	800c960 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93c:	f383 8811 	msr	BASEPRI, r3
 800c940:	f3bf 8f6f 	isb	sy
 800c944:	f3bf 8f4f 	dsb	sy
 800c948:	60fb      	str	r3, [r7, #12]
}
 800c94a:	bf00      	nop
 800c94c:	e7fe      	b.n	800c94c <prvProcessExpiredTimer+0x70>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4ec:	f023 0301 	bic.w	r3, r3, #1
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c954:	f023 0301 	bic.w	r3, r3, #1
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	6a1b      	ldr	r3, [r3, #32]
 800c4fc:	6978      	ldr	r0, [r7, #20]
 800c4fe:	4798      	blx	r3
}
 800c500:	bf00      	nop
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	200013f0 	.word	0x200013f0

0800c50c <prvTimerTask>:
=======
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	6a1b      	ldr	r3, [r3, #32]
 800c964:	6978      	ldr	r0, [r7, #20]
 800c966:	4798      	blx	r3
}
 800c968:	bf00      	nop
 800c96a:	3718      	adds	r7, #24
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	200013d8 	.word	0x200013d8

0800c974 <prvTimerTask>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
<<<<<<< HEAD
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
=======
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< HEAD
 800c514:	f107 0308 	add.w	r3, r7, #8
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 f857 	bl	800c5cc <prvGetNextExpireTime>
 800c51e:	60f8      	str	r0, [r7, #12]
=======
 800c97c:	f107 0308 	add.w	r3, r7, #8
 800c980:	4618      	mov	r0, r3
 800c982:	f000 f857 	bl	800ca34 <prvGetNextExpireTime>
 800c986:	60f8      	str	r0, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< HEAD
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	4619      	mov	r1, r3
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f000 f803 	bl	800c530 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c52a:	f000 f8d5 	bl	800c6d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c52e:	e7f1      	b.n	800c514 <prvTimerTask+0x8>

0800c530 <prvProcessTimerOrBlockTask>:
=======
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	4619      	mov	r1, r3
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f000 f803 	bl	800c998 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c992:	f000 f8d5 	bl	800cb40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c996:	e7f1      	b.n	800c97c <prvTimerTask+0x8>

0800c998 <prvProcessTimerOrBlockTask>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< HEAD
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
=======
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
 800c53a:	f7fe fe63 	bl	800b204 <vTaskSuspendAll>
=======
 800c9a2:	f7fe fea1 	bl	800b6e8 <vTaskSuspendAll>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 800c53e:	f107 0308 	add.w	r3, r7, #8
 800c542:	4618      	mov	r0, r3
 800c544:	f000 f866 	bl	800c614 <prvSampleTimeNow>
 800c548:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d130      	bne.n	800c5b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <prvProcessTimerOrBlockTask+0x3c>
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d806      	bhi.n	800c56c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c55e:	f7fe fe5f 	bl	800b220 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c562:	68f9      	ldr	r1, [r7, #12]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7ff ff85 	bl	800c474 <prvProcessExpiredTimer>
=======
 800c9a6:	f107 0308 	add.w	r3, r7, #8
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f866 	bl	800ca7c <prvSampleTimeNow>
 800c9b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d130      	bne.n	800ca1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10a      	bne.n	800c9d4 <prvProcessTimerOrBlockTask+0x3c>
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d806      	bhi.n	800c9d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c9c6:	f7fe fe9d 	bl	800b704 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c9ca:	68f9      	ldr	r1, [r7, #12]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7ff ff85 	bl	800c8dc <prvProcessExpiredTimer>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< HEAD
 800c56a:	e024      	b.n	800c5b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d008      	beq.n	800c584 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c572:	4b13      	ldr	r3, [pc, #76]	; (800c5c0 <prvProcessTimerOrBlockTask+0x90>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d101      	bne.n	800c580 <prvProcessTimerOrBlockTask+0x50>
 800c57c:	2301      	movs	r3, #1
 800c57e:	e000      	b.n	800c582 <prvProcessTimerOrBlockTask+0x52>
 800c580:	2300      	movs	r3, #0
 800c582:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c584:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <prvProcessTimerOrBlockTask+0x94>)
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	1ad3      	subs	r3, r2, r3
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	4619      	mov	r1, r3
 800c592:	f7fe fbc7 	bl	800ad24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c596:	f7fe fe43 	bl	800b220 <xTaskResumeAll>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10a      	bne.n	800c5b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c5a0:	4b09      	ldr	r3, [pc, #36]	; (800c5c8 <prvProcessTimerOrBlockTask+0x98>)
 800c5a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5a6:	601a      	str	r2, [r3, #0]
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	f3bf 8f6f 	isb	sy
}
 800c5b0:	e001      	b.n	800c5b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5b2:	f7fe fe35 	bl	800b220 <xTaskResumeAll>
}
 800c5b6:	bf00      	nop
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	200013f4 	.word	0x200013f4
 800c5c4:	200013f8 	.word	0x200013f8
 800c5c8:	e000ed04 	.word	0xe000ed04

0800c5cc <prvGetNextExpireTime>:
=======
 800c9d2:	e024      	b.n	800ca1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d008      	beq.n	800c9ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c9da:	4b13      	ldr	r3, [pc, #76]	; (800ca28 <prvProcessTimerOrBlockTask+0x90>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d101      	bne.n	800c9e8 <prvProcessTimerOrBlockTask+0x50>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e000      	b.n	800c9ea <prvProcessTimerOrBlockTask+0x52>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c9ec:	4b0f      	ldr	r3, [pc, #60]	; (800ca2c <prvProcessTimerOrBlockTask+0x94>)
 800c9ee:	6818      	ldr	r0, [r3, #0]
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	f7fe fc05 	bl	800b208 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c9fe:	f7fe fe81 	bl	800b704 <xTaskResumeAll>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10a      	bne.n	800ca1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ca08:	4b09      	ldr	r3, [pc, #36]	; (800ca30 <prvProcessTimerOrBlockTask+0x98>)
 800ca0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca0e:	601a      	str	r2, [r3, #0]
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	f3bf 8f6f 	isb	sy
}
 800ca18:	e001      	b.n	800ca1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ca1a:	f7fe fe73 	bl	800b704 <xTaskResumeAll>
}
 800ca1e:	bf00      	nop
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	200013dc 	.word	0x200013dc
 800ca2c:	200013e0 	.word	0x200013e0
 800ca30:	e000ed04 	.word	0xe000ed04

0800ca34 <prvGetNextExpireTime>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< HEAD
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
=======
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< HEAD
 800c5d4:	4b0e      	ldr	r3, [pc, #56]	; (800c610 <prvGetNextExpireTime+0x44>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <prvGetNextExpireTime+0x16>
 800c5de:	2201      	movs	r2, #1
 800c5e0:	e000      	b.n	800c5e4 <prvGetNextExpireTime+0x18>
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d105      	bne.n	800c5fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5f0:	4b07      	ldr	r3, [pc, #28]	; (800c610 <prvGetNextExpireTime+0x44>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	60fb      	str	r3, [r7, #12]
 800c5fa:	e001      	b.n	800c600 <prvGetNextExpireTime+0x34>
=======
 800ca3c:	4b0e      	ldr	r3, [pc, #56]	; (800ca78 <prvGetNextExpireTime+0x44>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <prvGetNextExpireTime+0x16>
 800ca46:	2201      	movs	r2, #1
 800ca48:	e000      	b.n	800ca4c <prvGetNextExpireTime+0x18>
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d105      	bne.n	800ca64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca58:	4b07      	ldr	r3, [pc, #28]	; (800ca78 <prvGetNextExpireTime+0x44>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	60fb      	str	r3, [r7, #12]
 800ca62:	e001      	b.n	800ca68 <prvGetNextExpireTime+0x34>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< HEAD
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c600:	68fb      	ldr	r3, [r7, #12]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	200013f0 	.word	0x200013f0

0800c614 <prvSampleTimeNow>:
=======
 800ca64:	2300      	movs	r3, #0
 800ca66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ca68:	68fb      	ldr	r3, [r7, #12]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr
 800ca76:	bf00      	nop
 800ca78:	200013d8 	.word	0x200013d8

0800ca7c <prvSampleTimeNow>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< HEAD
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
=======
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< HEAD
 800c61c:	f7fe fe9e 	bl	800b35c <xTaskGetTickCount>
 800c620:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c622:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <prvSampleTimeNow+0x3c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d205      	bcs.n	800c638 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c62c:	f000 f936 	bl	800c89c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	601a      	str	r2, [r3, #0]
 800c636:	e002      	b.n	800c63e <prvSampleTimeNow+0x2a>
=======
 800ca84:	f7fe fedc 	bl	800b840 <xTaskGetTickCount>
 800ca88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ca8a:	4b0b      	ldr	r3, [pc, #44]	; (800cab8 <prvSampleTimeNow+0x3c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d205      	bcs.n	800caa0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ca94:	f000 f936 	bl	800cd04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	e002      	b.n	800caa6 <prvSampleTimeNow+0x2a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< HEAD
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c63e:	4a04      	ldr	r2, [pc, #16]	; (800c650 <prvSampleTimeNow+0x3c>)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c644:	68fb      	ldr	r3, [r7, #12]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	20001400 	.word	0x20001400

0800c654 <prvInsertTimerInActiveList>:
=======
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800caa6:	4a04      	ldr	r2, [pc, #16]	; (800cab8 <prvSampleTimeNow+0x3c>)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800caac:	68fb      	ldr	r3, [r7, #12]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	200013e8 	.word	0x200013e8

0800cabc <prvInsertTimerInActiveList>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< HEAD
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	607a      	str	r2, [r7, #4]
 800c660:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c662:	2300      	movs	r3, #0
 800c664:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	429a      	cmp	r2, r3
 800c678:	d812      	bhi.n	800c6a0 <prvInsertTimerInActiveList+0x4c>
=======
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800caca:	2300      	movs	r3, #0
 800cacc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d812      	bhi.n	800cb08 <prvInsertTimerInActiveList+0x4c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	1ad2      	subs	r2, r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	429a      	cmp	r2, r3
 800c686:	d302      	bcc.n	800c68e <prvInsertTimerInActiveList+0x3a>
=======
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	1ad2      	subs	r2, r2, r3
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	699b      	ldr	r3, [r3, #24]
 800caec:	429a      	cmp	r2, r3
 800caee:	d302      	bcc.n	800caf6 <prvInsertTimerInActiveList+0x3a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 800c688:	2301      	movs	r3, #1
 800c68a:	617b      	str	r3, [r7, #20]
 800c68c:	e01b      	b.n	800c6c6 <prvInsertTimerInActiveList+0x72>
=======
 800caf0:	2301      	movs	r3, #1
 800caf2:	617b      	str	r3, [r7, #20]
 800caf4:	e01b      	b.n	800cb2e <prvInsertTimerInActiveList+0x72>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800c68e:	4b10      	ldr	r3, [pc, #64]	; (800c6d0 <prvInsertTimerInActiveList+0x7c>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	3304      	adds	r3, #4
 800c696:	4619      	mov	r1, r3
 800c698:	4610      	mov	r0, r2
 800c69a:	f7fd fc11 	bl	8009ec0 <vListInsert>
 800c69e:	e012      	b.n	800c6c6 <prvInsertTimerInActiveList+0x72>
=======
 800caf6:	4b10      	ldr	r3, [pc, #64]	; (800cb38 <prvInsertTimerInActiveList+0x7c>)
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	3304      	adds	r3, #4
 800cafe:	4619      	mov	r1, r3
 800cb00:	4610      	mov	r0, r2
 800cb02:	f7fd fc4f 	bl	800a3a4 <vListInsert>
 800cb06:	e012      	b.n	800cb2e <prvInsertTimerInActiveList+0x72>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d206      	bcs.n	800c6b6 <prvInsertTimerInActiveList+0x62>
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d302      	bcc.n	800c6b6 <prvInsertTimerInActiveList+0x62>
=======
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d206      	bcs.n	800cb1e <prvInsertTimerInActiveList+0x62>
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d302      	bcc.n	800cb1e <prvInsertTimerInActiveList+0x62>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	617b      	str	r3, [r7, #20]
 800c6b4:	e007      	b.n	800c6c6 <prvInsertTimerInActiveList+0x72>
=======
 800cb18:	2301      	movs	r3, #1
 800cb1a:	617b      	str	r3, [r7, #20]
 800cb1c:	e007      	b.n	800cb2e <prvInsertTimerInActiveList+0x72>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800c6b6:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <prvInsertTimerInActiveList+0x80>)
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	4619      	mov	r1, r3
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	f7fd fbfd 	bl	8009ec0 <vListInsert>
=======
 800cb1e:	4b07      	ldr	r3, [pc, #28]	; (800cb3c <prvInsertTimerInActiveList+0x80>)
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3304      	adds	r3, #4
 800cb26:	4619      	mov	r1, r3
 800cb28:	4610      	mov	r0, r2
 800cb2a:	f7fd fc3b 	bl	800a3a4 <vListInsert>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
	}

	return xProcessTimerNow;
<<<<<<< HEAD
 800c6c6:	697b      	ldr	r3, [r7, #20]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3718      	adds	r7, #24
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	200013f4 	.word	0x200013f4
 800c6d4:	200013f0 	.word	0x200013f0

0800c6d8 <prvProcessReceivedCommands>:
=======
 800cb2e:	697b      	ldr	r3, [r7, #20]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	200013dc 	.word	0x200013dc
 800cb3c:	200013d8 	.word	0x200013d8

0800cb40 <prvProcessReceivedCommands>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< HEAD
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b08e      	sub	sp, #56	; 0x38
 800c6dc:	af02      	add	r7, sp, #8
=======
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b08e      	sub	sp, #56	; 0x38
 800cb44:	af02      	add	r7, sp, #8
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
 800c6de:	e0ca      	b.n	800c876 <prvProcessReceivedCommands+0x19e>
=======
 800cb46:	e0ca      	b.n	800ccde <prvProcessReceivedCommands+0x19e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< HEAD
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	da18      	bge.n	800c718 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6e6:	1d3b      	adds	r3, r7, #4
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	da18      	bge.n	800cb80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cb4e:	1d3b      	adds	r3, r7, #4
 800cb50:	3304      	adds	r3, #4
 800cb52:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< HEAD
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10a      	bne.n	800c708 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f6:	f383 8811 	msr	BASEPRI, r3
 800c6fa:	f3bf 8f6f 	isb	sy
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	61fb      	str	r3, [r7, #28]
}
 800c704:	bf00      	nop
 800c706:	e7fe      	b.n	800c706 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c70e:	6850      	ldr	r0, [r2, #4]
 800c710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c712:	6892      	ldr	r2, [r2, #8]
 800c714:	4611      	mov	r1, r2
 800c716:	4798      	blx	r3
=======
 800cb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10a      	bne.n	800cb70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	61fb      	str	r3, [r7, #28]
}
 800cb6c:	bf00      	nop
 800cb6e:	e7fe      	b.n	800cb6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb76:	6850      	ldr	r0, [r2, #4]
 800cb78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb7a:	6892      	ldr	r2, [r2, #8]
 800cb7c:	4611      	mov	r1, r2
 800cb7e:	4798      	blx	r3
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< HEAD
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f2c0 80ab 	blt.w	800c876 <prvProcessReceivedCommands+0x19e>
=======
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f2c0 80ab 	blt.w	800ccde <prvProcessReceivedCommands+0x19e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< HEAD
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c726:	695b      	ldr	r3, [r3, #20]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d004      	beq.n	800c736 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	3304      	adds	r3, #4
 800c730:	4618      	mov	r0, r3
 800c732:	f7fd fbfe 	bl	8009f32 <uxListRemove>
=======
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8e:	695b      	ldr	r3, [r3, #20]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d004      	beq.n	800cb9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb96:	3304      	adds	r3, #4
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fd fc3c 	bl	800a416 <uxListRemove>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 800c736:	463b      	mov	r3, r7
 800c738:	4618      	mov	r0, r3
 800c73a:	f7ff ff6b 	bl	800c614 <prvSampleTimeNow>
 800c73e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b09      	cmp	r3, #9
 800c744:	f200 8096 	bhi.w	800c874 <prvProcessReceivedCommands+0x19c>
 800c748:	a201      	add	r2, pc, #4	; (adr r2, 800c750 <prvProcessReceivedCommands+0x78>)
 800c74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74e:	bf00      	nop
 800c750:	0800c779 	.word	0x0800c779
 800c754:	0800c779 	.word	0x0800c779
 800c758:	0800c779 	.word	0x0800c779
 800c75c:	0800c7ed 	.word	0x0800c7ed
 800c760:	0800c801 	.word	0x0800c801
 800c764:	0800c84b 	.word	0x0800c84b
 800c768:	0800c779 	.word	0x0800c779
 800c76c:	0800c779 	.word	0x0800c779
 800c770:	0800c7ed 	.word	0x0800c7ed
 800c774:	0800c801 	.word	0x0800c801
=======
 800cb9e:	463b      	mov	r3, r7
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7ff ff6b 	bl	800ca7c <prvSampleTimeNow>
 800cba6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b09      	cmp	r3, #9
 800cbac:	f200 8096 	bhi.w	800ccdc <prvProcessReceivedCommands+0x19c>
 800cbb0:	a201      	add	r2, pc, #4	; (adr r2, 800cbb8 <prvProcessReceivedCommands+0x78>)
 800cbb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb6:	bf00      	nop
 800cbb8:	0800cbe1 	.word	0x0800cbe1
 800cbbc:	0800cbe1 	.word	0x0800cbe1
 800cbc0:	0800cbe1 	.word	0x0800cbe1
 800cbc4:	0800cc55 	.word	0x0800cc55
 800cbc8:	0800cc69 	.word	0x0800cc69
 800cbcc:	0800ccb3 	.word	0x0800ccb3
 800cbd0:	0800cbe1 	.word	0x0800cbe1
 800cbd4:	0800cbe1 	.word	0x0800cbe1
 800cbd8:	0800cc55 	.word	0x0800cc55
 800cbdc:	0800cc69 	.word	0x0800cc69
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c77e:	f043 0301 	orr.w	r3, r3, #1
 800c782:	b2da      	uxtb	r2, r3
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	18d1      	adds	r1, r2, r3
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c798:	f7ff ff5c 	bl	800c654 <prvInsertTimerInActiveList>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d069      	beq.n	800c876 <prvProcessReceivedCommands+0x19e>
=======
 800cbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbe6:	f043 0301 	orr.w	r3, r3, #1
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf6:	699b      	ldr	r3, [r3, #24]
 800cbf8:	18d1      	adds	r1, r2, r3
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc00:	f7ff ff5c 	bl	800cabc <prvInsertTimerInActiveList>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d069      	beq.n	800ccde <prvProcessReceivedCommands+0x19e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800c7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a4:	6a1b      	ldr	r3, [r3, #32]
 800c7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d05e      	beq.n	800c876 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	441a      	add	r2, r3
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ca:	f7ff fe05 	bl	800c3d8 <xTimerGenericCommand>
 800c7ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d14f      	bne.n	800c876 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	61bb      	str	r3, [r7, #24]
}
 800c7e8:	bf00      	nop
 800c7ea:	e7fe      	b.n	800c7ea <prvProcessReceivedCommands+0x112>
=======
 800cc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0c:	6a1b      	ldr	r3, [r3, #32]
 800cc0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc18:	f003 0304 	and.w	r3, r3, #4
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d05e      	beq.n	800ccde <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc24:	699b      	ldr	r3, [r3, #24]
 800cc26:	441a      	add	r2, r3
 800cc28:	2300      	movs	r3, #0
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	2100      	movs	r1, #0
 800cc30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc32:	f7ff fe05 	bl	800c840 <xTimerGenericCommand>
 800cc36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cc38:	6a3b      	ldr	r3, [r7, #32]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d14f      	bne.n	800ccde <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	61bb      	str	r3, [r7, #24]
}
 800cc50:	bf00      	nop
 800cc52:	e7fe      	b.n	800cc52 <prvProcessReceivedCommands+0x112>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f2:	f023 0301 	bic.w	r3, r3, #1
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c7fe:	e03a      	b.n	800c876 <prvProcessReceivedCommands+0x19e>
=======
 800cc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc5a:	f023 0301 	bic.w	r3, r3, #1
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cc66:	e03a      	b.n	800ccde <prvProcessReceivedCommands+0x19e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c806:	f043 0301 	orr.w	r3, r3, #1
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c816:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10a      	bne.n	800c836 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	617b      	str	r3, [r7, #20]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <prvProcessReceivedCommands+0x15c>
=======
 800cc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc6e:	f043 0301 	orr.w	r3, r3, #1
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc82:	699b      	ldr	r3, [r3, #24]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10a      	bne.n	800cc9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	617b      	str	r3, [r7, #20]
}
 800cc9a:	bf00      	nop
 800cc9c:	e7fe      	b.n	800cc9c <prvProcessReceivedCommands+0x15c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< HEAD
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	699a      	ldr	r2, [r3, #24]
 800c83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83c:	18d1      	adds	r1, r2, r3
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c844:	f7ff ff06 	bl	800c654 <prvInsertTimerInActiveList>
					break;
 800c848:	e015      	b.n	800c876 <prvProcessReceivedCommands+0x19e>
=======
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	699a      	ldr	r2, [r3, #24]
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	18d1      	adds	r1, r2, r3
 800cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccac:	f7ff ff06 	bl	800cabc <prvInsertTimerInActiveList>
					break;
 800ccb0:	e015      	b.n	800ccde <prvProcessReceivedCommands+0x19e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
<<<<<<< HEAD
 800c84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c850:	f003 0302 	and.w	r3, r3, #2
 800c854:	2b00      	cmp	r3, #0
 800c856:	d103      	bne.n	800c860 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c85a:	f000 fc01 	bl	800d060 <vPortFree>
 800c85e:	e00a      	b.n	800c876 <prvProcessReceivedCommands+0x19e>
=======
 800ccb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccb8:	f003 0302 	and.w	r3, r3, #2
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d103      	bne.n	800ccc8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ccc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccc2:	f000 fbdd 	bl	800d480 <vPortFree>
 800ccc6:	e00a      	b.n	800ccde <prvProcessReceivedCommands+0x19e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c866:	f023 0301 	bic.w	r3, r3, #1
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccce:	f023 0301 	bic.w	r3, r3, #1
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< HEAD
 800c872:	e000      	b.n	800c876 <prvProcessReceivedCommands+0x19e>
=======
 800ccda:	e000      	b.n	800ccde <prvProcessReceivedCommands+0x19e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

				default	:
					/* Don't expect to get here. */
					break;
<<<<<<< HEAD
 800c874:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c876:	4b08      	ldr	r3, [pc, #32]	; (800c898 <prvProcessReceivedCommands+0x1c0>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	1d39      	adds	r1, r7, #4
 800c87c:	2200      	movs	r2, #0
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fd fec4 	bl	800a60c <xQueueReceive>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	f47f af2a 	bne.w	800c6e0 <prvProcessReceivedCommands+0x8>
=======
 800ccdc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ccde:	4b08      	ldr	r3, [pc, #32]	; (800cd00 <prvProcessReceivedCommands+0x1c0>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	1d39      	adds	r1, r7, #4
 800cce4:	2200      	movs	r2, #0
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fd ff02 	bl	800aaf0 <xQueueReceive>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f47f af2a 	bne.w	800cb48 <prvProcessReceivedCommands+0x8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
		}
	}
}
<<<<<<< HEAD
 800c88c:	bf00      	nop
 800c88e:	bf00      	nop
 800c890:	3730      	adds	r7, #48	; 0x30
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	200013f8 	.word	0x200013f8

0800c89c <prvSwitchTimerLists>:
=======
 800ccf4:	bf00      	nop
 800ccf6:	bf00      	nop
 800ccf8:	3730      	adds	r7, #48	; 0x30
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	200013e0 	.word	0x200013e0

0800cd04 <prvSwitchTimerLists>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< HEAD
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b088      	sub	sp, #32
 800c8a0:	af02      	add	r7, sp, #8
=======
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b088      	sub	sp, #32
 800cd08:	af02      	add	r7, sp, #8
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
 800c8a2:	e048      	b.n	800c936 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8a4:	4b2d      	ldr	r3, [pc, #180]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8ae:	4b2b      	ldr	r3, [pc, #172]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7fd fb38 	bl	8009f32 <uxListRemove>
=======
 800cd0a:	e048      	b.n	800cd9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd0c:	4b2d      	ldr	r3, [pc, #180]	; (800cdc4 <prvSwitchTimerLists+0xc0>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd16:	4b2b      	ldr	r3, [pc, #172]	; (800cdc4 <prvSwitchTimerLists+0xc0>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	3304      	adds	r3, #4
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fd fb76 	bl	800a416 <uxListRemove>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8d0:	f003 0304 	and.w	r3, r3, #4
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d02e      	beq.n	800c936 <prvSwitchTimerLists+0x9a>
=======
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6a1b      	ldr	r3, [r3, #32]
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd38:	f003 0304 	and.w	r3, r3, #4
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d02e      	beq.n	800cd9e <prvSwitchTimerLists+0x9a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< HEAD
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	693a      	ldr	r2, [r7, #16]
 800c8de:	4413      	add	r3, r2
 800c8e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d90e      	bls.n	800c908 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8f6:	4b19      	ldr	r3, [pc, #100]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	4619      	mov	r1, r3
 800c900:	4610      	mov	r0, r2
 800c902:	f7fd fadd 	bl	8009ec0 <vListInsert>
 800c906:	e016      	b.n	800c936 <prvSwitchTimerLists+0x9a>
=======
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	699b      	ldr	r3, [r3, #24]
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	4413      	add	r3, r2
 800cd48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d90e      	bls.n	800cd70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd5e:	4b19      	ldr	r3, [pc, #100]	; (800cdc4 <prvSwitchTimerLists+0xc0>)
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	3304      	adds	r3, #4
 800cd66:	4619      	mov	r1, r3
 800cd68:	4610      	mov	r0, r2
 800cd6a:	f7fd fb1b 	bl	800a3a4 <vListInsert>
 800cd6e:	e016      	b.n	800cd9e <prvSwitchTimerLists+0x9a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800c908:	2300      	movs	r3, #0
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	2300      	movs	r3, #0
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	2100      	movs	r1, #0
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f7ff fd60 	bl	800c3d8 <xTimerGenericCommand>
 800c918:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10a      	bne.n	800c936 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	603b      	str	r3, [r7, #0]
}
 800c932:	bf00      	nop
 800c934:	e7fe      	b.n	800c934 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c936:	4b09      	ldr	r3, [pc, #36]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1b1      	bne.n	800c8a4 <prvSwitchTimerLists+0x8>
=======
 800cd70:	2300      	movs	r3, #0
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	2300      	movs	r3, #0
 800cd76:	693a      	ldr	r2, [r7, #16]
 800cd78:	2100      	movs	r1, #0
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f7ff fd60 	bl	800c840 <xTimerGenericCommand>
 800cd80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10a      	bne.n	800cd9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	603b      	str	r3, [r7, #0]
}
 800cd9a:	bf00      	nop
 800cd9c:	e7fe      	b.n	800cd9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd9e:	4b09      	ldr	r3, [pc, #36]	; (800cdc4 <prvSwitchTimerLists+0xc0>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1b1      	bne.n	800cd0c <prvSwitchTimerLists+0x8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< HEAD
 800c940:	4b06      	ldr	r3, [pc, #24]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c946:	4b06      	ldr	r3, [pc, #24]	; (800c960 <prvSwitchTimerLists+0xc4>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a04      	ldr	r2, [pc, #16]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c94c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c94e:	4a04      	ldr	r2, [pc, #16]	; (800c960 <prvSwitchTimerLists+0xc4>)
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	6013      	str	r3, [r2, #0]
}
 800c954:	bf00      	nop
 800c956:	3718      	adds	r7, #24
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	200013f0 	.word	0x200013f0
 800c960:	200013f4 	.word	0x200013f4

0800c964 <prvCheckForValidListAndQueue>:
=======
 800cda8:	4b06      	ldr	r3, [pc, #24]	; (800cdc4 <prvSwitchTimerLists+0xc0>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cdae:	4b06      	ldr	r3, [pc, #24]	; (800cdc8 <prvSwitchTimerLists+0xc4>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a04      	ldr	r2, [pc, #16]	; (800cdc4 <prvSwitchTimerLists+0xc0>)
 800cdb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cdb6:	4a04      	ldr	r2, [pc, #16]	; (800cdc8 <prvSwitchTimerLists+0xc4>)
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	6013      	str	r3, [r2, #0]
}
 800cdbc:	bf00      	nop
 800cdbe:	3718      	adds	r7, #24
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	200013d8 	.word	0x200013d8
 800cdc8:	200013dc 	.word	0x200013dc

0800cdcc <prvCheckForValidListAndQueue>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< HEAD
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af02      	add	r7, sp, #8
=======
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af02      	add	r7, sp, #8
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800c96a:	f000 f98b 	bl	800cc84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c96e:	4b15      	ldr	r3, [pc, #84]	; (800c9c4 <prvCheckForValidListAndQueue+0x60>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d120      	bne.n	800c9b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c976:	4814      	ldr	r0, [pc, #80]	; (800c9c8 <prvCheckForValidListAndQueue+0x64>)
 800c978:	f7fd fa51 	bl	8009e1e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c97c:	4813      	ldr	r0, [pc, #76]	; (800c9cc <prvCheckForValidListAndQueue+0x68>)
 800c97e:	f7fd fa4e 	bl	8009e1e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c982:	4b13      	ldr	r3, [pc, #76]	; (800c9d0 <prvCheckForValidListAndQueue+0x6c>)
 800c984:	4a10      	ldr	r2, [pc, #64]	; (800c9c8 <prvCheckForValidListAndQueue+0x64>)
 800c986:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c988:	4b12      	ldr	r3, [pc, #72]	; (800c9d4 <prvCheckForValidListAndQueue+0x70>)
 800c98a:	4a10      	ldr	r2, [pc, #64]	; (800c9cc <prvCheckForValidListAndQueue+0x68>)
 800c98c:	601a      	str	r2, [r3, #0]
=======
 800cdd2:	f000 f967 	bl	800d0a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cdd6:	4b15      	ldr	r3, [pc, #84]	; (800ce2c <prvCheckForValidListAndQueue+0x60>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d120      	bne.n	800ce20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cdde:	4814      	ldr	r0, [pc, #80]	; (800ce30 <prvCheckForValidListAndQueue+0x64>)
 800cde0:	f7fd fa8f 	bl	800a302 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cde4:	4813      	ldr	r0, [pc, #76]	; (800ce34 <prvCheckForValidListAndQueue+0x68>)
 800cde6:	f7fd fa8c 	bl	800a302 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cdea:	4b13      	ldr	r3, [pc, #76]	; (800ce38 <prvCheckForValidListAndQueue+0x6c>)
 800cdec:	4a10      	ldr	r2, [pc, #64]	; (800ce30 <prvCheckForValidListAndQueue+0x64>)
 800cdee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cdf0:	4b12      	ldr	r3, [pc, #72]	; (800ce3c <prvCheckForValidListAndQueue+0x70>)
 800cdf2:	4a10      	ldr	r2, [pc, #64]	; (800ce34 <prvCheckForValidListAndQueue+0x68>)
 800cdf4:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< HEAD
 800c98e:	2300      	movs	r3, #0
 800c990:	9300      	str	r3, [sp, #0]
 800c992:	4b11      	ldr	r3, [pc, #68]	; (800c9d8 <prvCheckForValidListAndQueue+0x74>)
 800c994:	4a11      	ldr	r2, [pc, #68]	; (800c9dc <prvCheckForValidListAndQueue+0x78>)
 800c996:	2110      	movs	r1, #16
 800c998:	200a      	movs	r0, #10
 800c99a:	f7fd fb5d 	bl	800a058 <xQueueGenericCreateStatic>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	4a08      	ldr	r2, [pc, #32]	; (800c9c4 <prvCheckForValidListAndQueue+0x60>)
 800c9a2:	6013      	str	r3, [r2, #0]
=======
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	4b11      	ldr	r3, [pc, #68]	; (800ce40 <prvCheckForValidListAndQueue+0x74>)
 800cdfc:	4a11      	ldr	r2, [pc, #68]	; (800ce44 <prvCheckForValidListAndQueue+0x78>)
 800cdfe:	2110      	movs	r1, #16
 800ce00:	200a      	movs	r0, #10
 800ce02:	f7fd fb9b 	bl	800a53c <xQueueGenericCreateStatic>
 800ce06:	4603      	mov	r3, r0
 800ce08:	4a08      	ldr	r2, [pc, #32]	; (800ce2c <prvCheckForValidListAndQueue+0x60>)
 800ce0a:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< HEAD
 800c9a4:	4b07      	ldr	r3, [pc, #28]	; (800c9c4 <prvCheckForValidListAndQueue+0x60>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d005      	beq.n	800c9b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9ac:	4b05      	ldr	r3, [pc, #20]	; (800c9c4 <prvCheckForValidListAndQueue+0x60>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	490b      	ldr	r1, [pc, #44]	; (800c9e0 <prvCheckForValidListAndQueue+0x7c>)
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fe f962 	bl	800ac7c <vQueueAddToRegistry>
=======
 800ce0c:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <prvCheckForValidListAndQueue+0x60>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d005      	beq.n	800ce20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce14:	4b05      	ldr	r3, [pc, #20]	; (800ce2c <prvCheckForValidListAndQueue+0x60>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	490b      	ldr	r1, [pc, #44]	; (800ce48 <prvCheckForValidListAndQueue+0x7c>)
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fe f9a0 	bl	800b160 <vQueueAddToRegistry>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800c9b8:	f000 f994 	bl	800cce4 <vPortExitCritical>
}
 800c9bc:	bf00      	nop
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	200013f8 	.word	0x200013f8
 800c9c8:	200013c8 	.word	0x200013c8
 800c9cc:	200013dc 	.word	0x200013dc
 800c9d0:	200013f0 	.word	0x200013f0
 800c9d4:	200013f4 	.word	0x200013f4
 800c9d8:	200014a4 	.word	0x200014a4
 800c9dc:	20001404 	.word	0x20001404
 800c9e0:	0800eeb0 	.word	0x0800eeb0

0800c9e4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10a      	bne.n	800ca0c <pvTimerGetTimerID+0x28>
	__asm volatile
 800c9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	60fb      	str	r3, [r7, #12]
}
 800ca08:	bf00      	nop
 800ca0a:	e7fe      	b.n	800ca0a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ca0c:	f000 f93a 	bl	800cc84 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	69db      	ldr	r3, [r3, #28]
 800ca14:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ca16:	f000 f965 	bl	800cce4 <vPortExitCritical>

	return pvReturn;
 800ca1a:	693b      	ldr	r3, [r7, #16]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3718      	adds	r7, #24
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <pxPortInitialiseStack>:
=======
 800ce20:	f000 f970 	bl	800d104 <vPortExitCritical>
}
 800ce24:	bf00      	nop
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	200013e0 	.word	0x200013e0
 800ce30:	200013b0 	.word	0x200013b0
 800ce34:	200013c4 	.word	0x200013c4
 800ce38:	200013d8 	.word	0x200013d8
 800ce3c:	200013dc 	.word	0x200013dc
 800ce40:	2000148c 	.word	0x2000148c
 800ce44:	200013ec 	.word	0x200013ec
 800ce48:	0800f50c 	.word	0x0800f50c

0800ce4c <pxPortInitialiseStack>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
=======
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	60b9      	str	r1, [r7, #8]
 800ce56:	607a      	str	r2, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	3b04      	subs	r3, #4
 800ca34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	3b04      	subs	r3, #4
 800ca42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	f023 0201 	bic.w	r2, r3, #1
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3b04      	subs	r3, #4
 800ca52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca54:	4a0c      	ldr	r2, [pc, #48]	; (800ca88 <pxPortInitialiseStack+0x64>)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	3b14      	subs	r3, #20
 800ca5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	601a      	str	r2, [r3, #0]
=======
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	3b04      	subs	r3, #4
 800ce5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ce64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	3b04      	subs	r3, #4
 800ce6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	f023 0201 	bic.w	r2, r3, #1
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	3b04      	subs	r3, #4
 800ce7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce7c:	4a0c      	ldr	r2, [pc, #48]	; (800ceb0 <pxPortInitialiseStack+0x64>)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	3b14      	subs	r3, #20
 800ce86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	3b04      	subs	r3, #4
 800ca6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f06f 0202 	mvn.w	r2, #2
 800ca72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3b20      	subs	r3, #32
 800ca78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr
 800ca88:	0800ca8d 	.word	0x0800ca8d

0800ca8c <prvTaskExitError>:
=======
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	3b04      	subs	r3, #4
 800ce92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f06f 0202 	mvn.w	r2, #2
 800ce9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	3b20      	subs	r3, #32
 800cea0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cea2:	68fb      	ldr	r3, [r7, #12]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3714      	adds	r7, #20
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr
 800ceb0:	0800ceb5 	.word	0x0800ceb5

0800ceb4 <prvTaskExitError>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	607b      	str	r3, [r7, #4]
=======
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	607b      	str	r3, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 800ca96:	4b12      	ldr	r3, [pc, #72]	; (800cae0 <prvTaskExitError+0x54>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca9e:	d00a      	beq.n	800cab6 <prvTaskExitError+0x2a>
	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	60fb      	str	r3, [r7, #12]
}
 800cab2:	bf00      	nop
 800cab4:	e7fe      	b.n	800cab4 <prvTaskExitError+0x28>
	__asm volatile
 800cab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caba:	f383 8811 	msr	BASEPRI, r3
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	60bb      	str	r3, [r7, #8]
}
 800cac8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800caca:	bf00      	nop
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d0fc      	beq.n	800cacc <prvTaskExitError+0x40>
=======
 800cebe:	4b12      	ldr	r3, [pc, #72]	; (800cf08 <prvTaskExitError+0x54>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec6:	d00a      	beq.n	800cede <prvTaskExitError+0x2a>
	__asm volatile
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	f383 8811 	msr	BASEPRI, r3
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	60fb      	str	r3, [r7, #12]
}
 800ceda:	bf00      	nop
 800cedc:	e7fe      	b.n	800cedc <prvTaskExitError+0x28>
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	60bb      	str	r3, [r7, #8]
}
 800cef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cef2:	bf00      	nop
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d0fc      	beq.n	800cef4 <prvTaskExitError+0x40>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 800cad2:	bf00      	nop
 800cad4:	bf00      	nop
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	20000078 	.word	0x20000078
	...

0800caf0 <SVC_Handler>:
=======
 800cefa:	bf00      	nop
 800cefc:	bf00      	nop
 800cefe:	3714      	adds	r7, #20
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr
 800cf08:	20000050 	.word	0x20000050
 800cf0c:	00000000 	.word	0x00000000

0800cf10 <SVC_Handler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 800caf0:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <pxCurrentTCBConst2>)
 800caf2:	6819      	ldr	r1, [r3, #0]
 800caf4:	6808      	ldr	r0, [r1, #0]
 800caf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafa:	f380 8809 	msr	PSP, r0
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f04f 0000 	mov.w	r0, #0
 800cb06:	f380 8811 	msr	BASEPRI, r0
 800cb0a:	4770      	bx	lr
 800cb0c:	f3af 8000 	nop.w

0800cb10 <pxCurrentTCBConst2>:
 800cb10:	20000ec8 	.word	0x20000ec8
=======
 800cf10:	4b07      	ldr	r3, [pc, #28]	; (800cf30 <pxCurrentTCBConst2>)
 800cf12:	6819      	ldr	r1, [r3, #0]
 800cf14:	6808      	ldr	r0, [r1, #0]
 800cf16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1a:	f380 8809 	msr	PSP, r0
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f04f 0000 	mov.w	r0, #0
 800cf26:	f380 8811 	msr	BASEPRI, r0
 800cf2a:	4770      	bx	lr
 800cf2c:	f3af 8000 	nop.w

0800cf30 <pxCurrentTCBConst2>:
 800cf30:	20000eb0 	.word	0x20000eb0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop

0800cb18 <prvPortStartFirstTask>:
=======
 800cf34:	bf00      	nop
 800cf36:	bf00      	nop

0800cf38 <prvPortStartFirstTask>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 800cb18:	4808      	ldr	r0, [pc, #32]	; (800cb3c <prvPortStartFirstTask+0x24>)
 800cb1a:	6800      	ldr	r0, [r0, #0]
 800cb1c:	6800      	ldr	r0, [r0, #0]
 800cb1e:	f380 8808 	msr	MSP, r0
 800cb22:	f04f 0000 	mov.w	r0, #0
 800cb26:	f380 8814 	msr	CONTROL, r0
 800cb2a:	b662      	cpsie	i
 800cb2c:	b661      	cpsie	f
 800cb2e:	f3bf 8f4f 	dsb	sy
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	df00      	svc	0
 800cb38:	bf00      	nop
=======
 800cf38:	4808      	ldr	r0, [pc, #32]	; (800cf5c <prvPortStartFirstTask+0x24>)
 800cf3a:	6800      	ldr	r0, [r0, #0]
 800cf3c:	6800      	ldr	r0, [r0, #0]
 800cf3e:	f380 8808 	msr	MSP, r0
 800cf42:	f04f 0000 	mov.w	r0, #0
 800cf46:	f380 8814 	msr	CONTROL, r0
 800cf4a:	b662      	cpsie	i
 800cf4c:	b661      	cpsie	f
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	df00      	svc	0
 800cf58:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 800cb3a:	bf00      	nop
 800cb3c:	e000ed08 	.word	0xe000ed08

0800cb40 <xPortStartScheduler>:
=======
 800cf5a:	bf00      	nop
 800cf5c:	e000ed08 	.word	0xe000ed08

0800cf60 <xPortStartScheduler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
=======
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 800cb46:	4b46      	ldr	r3, [pc, #280]	; (800cc60 <xPortStartScheduler+0x120>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a46      	ldr	r2, [pc, #280]	; (800cc64 <xPortStartScheduler+0x124>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d10a      	bne.n	800cb66 <xPortStartScheduler+0x26>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	613b      	str	r3, [r7, #16]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb66:	4b3e      	ldr	r3, [pc, #248]	; (800cc60 <xPortStartScheduler+0x120>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a3f      	ldr	r2, [pc, #252]	; (800cc68 <xPortStartScheduler+0x128>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d10a      	bne.n	800cb86 <xPortStartScheduler+0x46>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	60fb      	str	r3, [r7, #12]
}
 800cb82:	bf00      	nop
 800cb84:	e7fe      	b.n	800cb84 <xPortStartScheduler+0x44>
=======
 800cf66:	4b46      	ldr	r3, [pc, #280]	; (800d080 <xPortStartScheduler+0x120>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4a46      	ldr	r2, [pc, #280]	; (800d084 <xPortStartScheduler+0x124>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d10a      	bne.n	800cf86 <xPortStartScheduler+0x26>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	613b      	str	r3, [r7, #16]
}
 800cf82:	bf00      	nop
 800cf84:	e7fe      	b.n	800cf84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cf86:	4b3e      	ldr	r3, [pc, #248]	; (800d080 <xPortStartScheduler+0x120>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a3f      	ldr	r2, [pc, #252]	; (800d088 <xPortStartScheduler+0x128>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d10a      	bne.n	800cfa6 <xPortStartScheduler+0x46>
	__asm volatile
 800cf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf94:	f383 8811 	msr	BASEPRI, r3
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	60fb      	str	r3, [r7, #12]
}
 800cfa2:	bf00      	nop
 800cfa4:	e7fe      	b.n	800cfa4 <xPortStartScheduler+0x44>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 800cb86:	4b39      	ldr	r3, [pc, #228]	; (800cc6c <xPortStartScheduler+0x12c>)
 800cb88:	617b      	str	r3, [r7, #20]
=======
 800cfa6:	4b39      	ldr	r3, [pc, #228]	; (800d08c <xPortStartScheduler+0x12c>)
 800cfa8:	617b      	str	r3, [r7, #20]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	607b      	str	r3, [r7, #4]
=======
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	607b      	str	r3, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	22ff      	movs	r2, #255	; 0xff
 800cb96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cba0:	78fb      	ldrb	r3, [r7, #3]
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	4b31      	ldr	r3, [pc, #196]	; (800cc70 <xPortStartScheduler+0x130>)
 800cbac:	701a      	strb	r2, [r3, #0]
=======
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	22ff      	movs	r2, #255	; 0xff
 800cfb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cfc0:	78fb      	ldrb	r3, [r7, #3]
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	4b31      	ldr	r3, [pc, #196]	; (800d090 <xPortStartScheduler+0x130>)
 800cfcc:	701a      	strb	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 800cbae:	4b31      	ldr	r3, [pc, #196]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbb0:	2207      	movs	r2, #7
 800cbb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbb4:	e009      	b.n	800cbca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cbb6:	4b2f      	ldr	r3, [pc, #188]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	4a2d      	ldr	r2, [pc, #180]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbca:	78fb      	ldrb	r3, [r7, #3]
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbd2:	2b80      	cmp	r3, #128	; 0x80
 800cbd4:	d0ef      	beq.n	800cbb6 <xPortStartScheduler+0x76>
=======
 800cfce:	4b31      	ldr	r3, [pc, #196]	; (800d094 <xPortStartScheduler+0x134>)
 800cfd0:	2207      	movs	r2, #7
 800cfd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfd4:	e009      	b.n	800cfea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cfd6:	4b2f      	ldr	r3, [pc, #188]	; (800d094 <xPortStartScheduler+0x134>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	4a2d      	ldr	r2, [pc, #180]	; (800d094 <xPortStartScheduler+0x134>)
 800cfde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cfe0:	78fb      	ldrb	r3, [r7, #3]
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	005b      	lsls	r3, r3, #1
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfea:	78fb      	ldrb	r3, [r7, #3]
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cff2:	2b80      	cmp	r3, #128	; 0x80
 800cff4:	d0ef      	beq.n	800cfd6 <xPortStartScheduler+0x76>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 800cbd6:	4b27      	ldr	r3, [pc, #156]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f1c3 0307 	rsb	r3, r3, #7
 800cbde:	2b04      	cmp	r3, #4
 800cbe0:	d00a      	beq.n	800cbf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe6:	f383 8811 	msr	BASEPRI, r3
 800cbea:	f3bf 8f6f 	isb	sy
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	60bb      	str	r3, [r7, #8]
}
 800cbf4:	bf00      	nop
 800cbf6:	e7fe      	b.n	800cbf6 <xPortStartScheduler+0xb6>
=======
 800cff6:	4b27      	ldr	r3, [pc, #156]	; (800d094 <xPortStartScheduler+0x134>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f1c3 0307 	rsb	r3, r3, #7
 800cffe:	2b04      	cmp	r3, #4
 800d000:	d00a      	beq.n	800d018 <xPortStartScheduler+0xb8>
	__asm volatile
 800d002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d006:	f383 8811 	msr	BASEPRI, r3
 800d00a:	f3bf 8f6f 	isb	sy
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	60bb      	str	r3, [r7, #8]
}
 800d014:	bf00      	nop
 800d016:	e7fe      	b.n	800d016 <xPortStartScheduler+0xb6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 800cbf8:	4b1e      	ldr	r3, [pc, #120]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	021b      	lsls	r3, r3, #8
 800cbfe:	4a1d      	ldr	r2, [pc, #116]	; (800cc74 <xPortStartScheduler+0x134>)
 800cc00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc02:	4b1c      	ldr	r3, [pc, #112]	; (800cc74 <xPortStartScheduler+0x134>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc0a:	4a1a      	ldr	r2, [pc, #104]	; (800cc74 <xPortStartScheduler+0x134>)
 800cc0c:	6013      	str	r3, [r2, #0]
=======
 800d018:	4b1e      	ldr	r3, [pc, #120]	; (800d094 <xPortStartScheduler+0x134>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	021b      	lsls	r3, r3, #8
 800d01e:	4a1d      	ldr	r2, [pc, #116]	; (800d094 <xPortStartScheduler+0x134>)
 800d020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d022:	4b1c      	ldr	r3, [pc, #112]	; (800d094 <xPortStartScheduler+0x134>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d02a:	4a1a      	ldr	r2, [pc, #104]	; (800d094 <xPortStartScheduler+0x134>)
 800d02c:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	701a      	strb	r2, [r3, #0]
=======
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	b2da      	uxtb	r2, r3
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	701a      	strb	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 800cc16:	4b18      	ldr	r3, [pc, #96]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a17      	ldr	r2, [pc, #92]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc22:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a14      	ldr	r2, [pc, #80]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc2c:	6013      	str	r3, [r2, #0]
=======
 800d036:	4b18      	ldr	r3, [pc, #96]	; (800d098 <xPortStartScheduler+0x138>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a17      	ldr	r2, [pc, #92]	; (800d098 <xPortStartScheduler+0x138>)
 800d03c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d042:	4b15      	ldr	r3, [pc, #84]	; (800d098 <xPortStartScheduler+0x138>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a14      	ldr	r2, [pc, #80]	; (800d098 <xPortStartScheduler+0x138>)
 800d048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d04c:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 800cc2e:	f000 f8dd 	bl	800cdec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc32:	4b12      	ldr	r3, [pc, #72]	; (800cc7c <xPortStartScheduler+0x13c>)
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc38:	f000 f8fc 	bl	800ce34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc3c:	4b10      	ldr	r3, [pc, #64]	; (800cc80 <xPortStartScheduler+0x140>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a0f      	ldr	r2, [pc, #60]	; (800cc80 <xPortStartScheduler+0x140>)
 800cc42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc48:	f7ff ff66 	bl	800cb18 <prvPortStartFirstTask>
=======
 800d04e:	f000 f8dd 	bl	800d20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d052:	4b12      	ldr	r3, [pc, #72]	; (800d09c <xPortStartScheduler+0x13c>)
 800d054:	2200      	movs	r2, #0
 800d056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d058:	f000 f8fc 	bl	800d254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d05c:	4b10      	ldr	r3, [pc, #64]	; (800d0a0 <xPortStartScheduler+0x140>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a0f      	ldr	r2, [pc, #60]	; (800d0a0 <xPortStartScheduler+0x140>)
 800d062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d068:	f7ff ff66 	bl	800cf38 <prvPortStartFirstTask>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 800cc4c:	f7fe fc62 	bl	800b514 <vTaskSwitchContext>
	prvTaskExitError();
 800cc50:	f7ff ff1c 	bl	800ca8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	e000ed00 	.word	0xe000ed00
 800cc64:	410fc271 	.word	0x410fc271
 800cc68:	410fc270 	.word	0x410fc270
 800cc6c:	e000e400 	.word	0xe000e400
 800cc70:	200014f4 	.word	0x200014f4
 800cc74:	200014f8 	.word	0x200014f8
 800cc78:	e000ed20 	.word	0xe000ed20
 800cc7c:	20000078 	.word	0x20000078
 800cc80:	e000ef34 	.word	0xe000ef34

0800cc84 <vPortEnterCritical>:
=======
 800d06c:	f7fe fcc4 	bl	800b9f8 <vTaskSwitchContext>
	prvTaskExitError();
 800d070:	f7ff ff20 	bl	800ceb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	e000ed00 	.word	0xe000ed00
 800d084:	410fc271 	.word	0x410fc271
 800d088:	410fc270 	.word	0x410fc270
 800d08c:	e000e400 	.word	0xe000e400
 800d090:	200014dc 	.word	0x200014dc
 800d094:	200014e0 	.word	0x200014e0
 800d098:	e000ed20 	.word	0xe000ed20
 800d09c:	20000050 	.word	0x20000050
 800d0a0:	e000ef34 	.word	0xe000ef34

0800d0a4 <vPortEnterCritical>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	607b      	str	r3, [r7, #4]
}
 800cc9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc9e:	4b0f      	ldr	r3, [pc, #60]	; (800ccdc <vPortEnterCritical+0x58>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	3301      	adds	r3, #1
 800cca4:	4a0d      	ldr	r2, [pc, #52]	; (800ccdc <vPortEnterCritical+0x58>)
 800cca6:	6013      	str	r3, [r2, #0]
=======
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
	__asm volatile
 800d0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ae:	f383 8811 	msr	BASEPRI, r3
 800d0b2:	f3bf 8f6f 	isb	sy
 800d0b6:	f3bf 8f4f 	dsb	sy
 800d0ba:	607b      	str	r3, [r7, #4]
}
 800d0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d0be:	4b0f      	ldr	r3, [pc, #60]	; (800d0fc <vPortEnterCritical+0x58>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	4a0d      	ldr	r2, [pc, #52]	; (800d0fc <vPortEnterCritical+0x58>)
 800d0c6:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 800cca8:	4b0c      	ldr	r3, [pc, #48]	; (800ccdc <vPortEnterCritical+0x58>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d10f      	bne.n	800ccd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccb0:	4b0b      	ldr	r3, [pc, #44]	; (800cce0 <vPortEnterCritical+0x5c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00a      	beq.n	800ccd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	603b      	str	r3, [r7, #0]
}
 800cccc:	bf00      	nop
 800ccce:	e7fe      	b.n	800ccce <vPortEnterCritical+0x4a>
	}
}
 800ccd0:	bf00      	nop
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr
 800ccdc:	20000078 	.word	0x20000078
 800cce0:	e000ed04 	.word	0xe000ed04

0800cce4 <vPortExitCritical>:
=======
 800d0c8:	4b0c      	ldr	r3, [pc, #48]	; (800d0fc <vPortEnterCritical+0x58>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d10f      	bne.n	800d0f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d0d0:	4b0b      	ldr	r3, [pc, #44]	; (800d100 <vPortEnterCritical+0x5c>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00a      	beq.n	800d0f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	603b      	str	r3, [r7, #0]
}
 800d0ec:	bf00      	nop
 800d0ee:	e7fe      	b.n	800d0ee <vPortEnterCritical+0x4a>
	}
}
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr
 800d0fc:	20000050 	.word	0x20000050
 800d100:	e000ed04 	.word	0xe000ed04

0800d104 <vPortExitCritical>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccea:	4b12      	ldr	r3, [pc, #72]	; (800cd34 <vPortExitCritical+0x50>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <vPortExitCritical+0x24>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	607b      	str	r3, [r7, #4]
}
 800cd04:	bf00      	nop
 800cd06:	e7fe      	b.n	800cd06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd08:	4b0a      	ldr	r3, [pc, #40]	; (800cd34 <vPortExitCritical+0x50>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	4a09      	ldr	r2, [pc, #36]	; (800cd34 <vPortExitCritical+0x50>)
 800cd10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd12:	4b08      	ldr	r3, [pc, #32]	; (800cd34 <vPortExitCritical+0x50>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d105      	bne.n	800cd26 <vPortExitCritical+0x42>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	f383 8811 	msr	BASEPRI, r3
}
 800cd24:	bf00      	nop
=======
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d10a:	4b12      	ldr	r3, [pc, #72]	; (800d154 <vPortExitCritical+0x50>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10a      	bne.n	800d128 <vPortExitCritical+0x24>
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	607b      	str	r3, [r7, #4]
}
 800d124:	bf00      	nop
 800d126:	e7fe      	b.n	800d126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d128:	4b0a      	ldr	r3, [pc, #40]	; (800d154 <vPortExitCritical+0x50>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	3b01      	subs	r3, #1
 800d12e:	4a09      	ldr	r2, [pc, #36]	; (800d154 <vPortExitCritical+0x50>)
 800d130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d132:	4b08      	ldr	r3, [pc, #32]	; (800d154 <vPortExitCritical+0x50>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d105      	bne.n	800d146 <vPortExitCritical+0x42>
 800d13a:	2300      	movs	r3, #0
 800d13c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	f383 8811 	msr	BASEPRI, r3
}
 800d144:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 800cd26:	bf00      	nop
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
 800cd32:	bf00      	nop
 800cd34:	20000078 	.word	0x20000078
	...

0800cd40 <PendSV_Handler>:
=======
 800d146:	bf00      	nop
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	20000050 	.word	0x20000050
	...

0800d160 <PendSV_Handler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 800cd40:	f3ef 8009 	mrs	r0, PSP
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	4b15      	ldr	r3, [pc, #84]	; (800cda0 <pxCurrentTCBConst>)
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	f01e 0f10 	tst.w	lr, #16
 800cd50:	bf08      	it	eq
 800cd52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5a:	6010      	str	r0, [r2, #0]
 800cd5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd64:	f380 8811 	msr	BASEPRI, r0
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f7fe fbd0 	bl	800b514 <vTaskSwitchContext>
 800cd74:	f04f 0000 	mov.w	r0, #0
 800cd78:	f380 8811 	msr	BASEPRI, r0
 800cd7c:	bc09      	pop	{r0, r3}
 800cd7e:	6819      	ldr	r1, [r3, #0]
 800cd80:	6808      	ldr	r0, [r1, #0]
 800cd82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd86:	f01e 0f10 	tst.w	lr, #16
 800cd8a:	bf08      	it	eq
 800cd8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd90:	f380 8809 	msr	PSP, r0
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	f3af 8000 	nop.w

0800cda0 <pxCurrentTCBConst>:
 800cda0:	20000ec8 	.word	0x20000ec8
=======
 800d160:	f3ef 8009 	mrs	r0, PSP
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	4b15      	ldr	r3, [pc, #84]	; (800d1c0 <pxCurrentTCBConst>)
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	f01e 0f10 	tst.w	lr, #16
 800d170:	bf08      	it	eq
 800d172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17a:	6010      	str	r0, [r2, #0]
 800d17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d180:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d184:	f380 8811 	msr	BASEPRI, r0
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f7fe fc32 	bl	800b9f8 <vTaskSwitchContext>
 800d194:	f04f 0000 	mov.w	r0, #0
 800d198:	f380 8811 	msr	BASEPRI, r0
 800d19c:	bc09      	pop	{r0, r3}
 800d19e:	6819      	ldr	r1, [r3, #0]
 800d1a0:	6808      	ldr	r0, [r1, #0]
 800d1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a6:	f01e 0f10 	tst.w	lr, #16
 800d1aa:	bf08      	it	eq
 800d1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d1b0:	f380 8809 	msr	PSP, r0
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	f3af 8000 	nop.w

0800d1c0 <pxCurrentTCBConst>:
 800d1c0:	20000eb0 	.word	0x20000eb0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop

0800cda8 <xPortSysTickHandler>:
=======
 800d1c4:	bf00      	nop
 800d1c6:	bf00      	nop

0800d1c8 <xPortSysTickHandler>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	607b      	str	r3, [r7, #4]
}
 800cdc0:	bf00      	nop
=======
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	607b      	str	r3, [r7, #4]
}
 800d1e0:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800cdc2:	f7fe faed 	bl	800b3a0 <xTaskIncrementTick>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d003      	beq.n	800cdd4 <xPortSysTickHandler+0x2c>
=======
 800d1e2:	f7fe fb4f 	bl	800b884 <xTaskIncrementTick>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d003      	beq.n	800d1f4 <xPortSysTickHandler+0x2c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 800cdcc:	4b06      	ldr	r3, [pc, #24]	; (800cde8 <xPortSysTickHandler+0x40>)
 800cdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	f383 8811 	msr	BASEPRI, r3
}
 800cdde:	bf00      	nop
=======
 800d1ec:	4b06      	ldr	r3, [pc, #24]	; (800d208 <xPortSysTickHandler+0x40>)
 800d1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f2:	601a      	str	r2, [r3, #0]
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	f383 8811 	msr	BASEPRI, r3
}
 800d1fe:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 800cde0:	bf00      	nop
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	e000ed04 	.word	0xe000ed04

0800cdec <vPortSetupTimerInterrupt>:
=======
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	e000ed04 	.word	0xe000ed04

0800d20c <vPortSetupTimerInterrupt>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 800cdec:	b480      	push	{r7}
 800cdee:	af00      	add	r7, sp, #0
=======
 800d20c:	b480      	push	{r7}
 800d20e:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 800cdf0:	4b0b      	ldr	r3, [pc, #44]	; (800ce20 <vPortSetupTimerInterrupt+0x34>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdf6:	4b0b      	ldr	r3, [pc, #44]	; (800ce24 <vPortSetupTimerInterrupt+0x38>)
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdfc:	4b0a      	ldr	r3, [pc, #40]	; (800ce28 <vPortSetupTimerInterrupt+0x3c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a0a      	ldr	r2, [pc, #40]	; (800ce2c <vPortSetupTimerInterrupt+0x40>)
 800ce02:	fba2 2303 	umull	r2, r3, r2, r3
 800ce06:	099b      	lsrs	r3, r3, #6
 800ce08:	4a09      	ldr	r2, [pc, #36]	; (800ce30 <vPortSetupTimerInterrupt+0x44>)
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce0e:	4b04      	ldr	r3, [pc, #16]	; (800ce20 <vPortSetupTimerInterrupt+0x34>)
 800ce10:	2207      	movs	r2, #7
 800ce12:	601a      	str	r2, [r3, #0]
}
 800ce14:	bf00      	nop
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	e000e010 	.word	0xe000e010
 800ce24:	e000e018 	.word	0xe000e018
 800ce28:	2000006c 	.word	0x2000006c
 800ce2c:	10624dd3 	.word	0x10624dd3
 800ce30:	e000e014 	.word	0xe000e014

0800ce34 <vPortEnableVFP>:
=======
 800d210:	4b0b      	ldr	r3, [pc, #44]	; (800d240 <vPortSetupTimerInterrupt+0x34>)
 800d212:	2200      	movs	r2, #0
 800d214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d216:	4b0b      	ldr	r3, [pc, #44]	; (800d244 <vPortSetupTimerInterrupt+0x38>)
 800d218:	2200      	movs	r2, #0
 800d21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d21c:	4b0a      	ldr	r3, [pc, #40]	; (800d248 <vPortSetupTimerInterrupt+0x3c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a0a      	ldr	r2, [pc, #40]	; (800d24c <vPortSetupTimerInterrupt+0x40>)
 800d222:	fba2 2303 	umull	r2, r3, r2, r3
 800d226:	099b      	lsrs	r3, r3, #6
 800d228:	4a09      	ldr	r2, [pc, #36]	; (800d250 <vPortSetupTimerInterrupt+0x44>)
 800d22a:	3b01      	subs	r3, #1
 800d22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d22e:	4b04      	ldr	r3, [pc, #16]	; (800d240 <vPortSetupTimerInterrupt+0x34>)
 800d230:	2207      	movs	r2, #7
 800d232:	601a      	str	r2, [r3, #0]
}
 800d234:	bf00      	nop
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	e000e010 	.word	0xe000e010
 800d244:	e000e018 	.word	0xe000e018
 800d248:	20000044 	.word	0x20000044
 800d24c:	10624dd3 	.word	0x10624dd3
 800d250:	e000e014 	.word	0xe000e014

0800d254 <vPortEnableVFP>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 800ce34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce44 <vPortEnableVFP+0x10>
 800ce38:	6801      	ldr	r1, [r0, #0]
 800ce3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce3e:	6001      	str	r1, [r0, #0]
 800ce40:	4770      	bx	lr
=======
 800d254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d264 <vPortEnableVFP+0x10>
 800d258:	6801      	ldr	r1, [r0, #0]
 800d25a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d25e:	6001      	str	r1, [r0, #0]
 800d260:	4770      	bx	lr
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 800ce42:	bf00      	nop
 800ce44:	e000ed88 	.word	0xe000ed88

0800ce48 <vPortValidateInterruptPriority>:
=======
 800d262:	bf00      	nop
 800d264:	e000ed88 	.word	0xe000ed88

0800d268 <vPortValidateInterruptPriority>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
=======
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 800ce4e:	f3ef 8305 	mrs	r3, IPSR
 800ce52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b0f      	cmp	r3, #15
 800ce58:	d914      	bls.n	800ce84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce5a:	4a17      	ldr	r2, [pc, #92]	; (800ceb8 <vPortValidateInterruptPriority+0x70>)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4413      	add	r3, r2
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	72fb      	strb	r3, [r7, #11]
=======
 800d26e:	f3ef 8305 	mrs	r3, IPSR
 800d272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2b0f      	cmp	r3, #15
 800d278:	d914      	bls.n	800d2a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d27a:	4a17      	ldr	r2, [pc, #92]	; (800d2d8 <vPortValidateInterruptPriority+0x70>)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	4413      	add	r3, r2
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	72fb      	strb	r3, [r7, #11]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 800ce64:	4b15      	ldr	r3, [pc, #84]	; (800cebc <vPortValidateInterruptPriority+0x74>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	7afa      	ldrb	r2, [r7, #11]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d20a      	bcs.n	800ce84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
}
 800ce80:	bf00      	nop
 800ce82:	e7fe      	b.n	800ce82 <vPortValidateInterruptPriority+0x3a>
=======
 800d284:	4b15      	ldr	r3, [pc, #84]	; (800d2dc <vPortValidateInterruptPriority+0x74>)
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	7afa      	ldrb	r2, [r7, #11]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d20a      	bcs.n	800d2a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	607b      	str	r3, [r7, #4]
}
 800d2a0:	bf00      	nop
 800d2a2:	e7fe      	b.n	800d2a2 <vPortValidateInterruptPriority+0x3a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 800ce84:	4b0e      	ldr	r3, [pc, #56]	; (800cec0 <vPortValidateInterruptPriority+0x78>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce8c:	4b0d      	ldr	r3, [pc, #52]	; (800cec4 <vPortValidateInterruptPriority+0x7c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d90a      	bls.n	800ceaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	603b      	str	r3, [r7, #0]
}
 800cea6:	bf00      	nop
 800cea8:	e7fe      	b.n	800cea8 <vPortValidateInterruptPriority+0x60>
	}
 800ceaa:	bf00      	nop
 800ceac:	3714      	adds	r7, #20
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop
 800ceb8:	e000e3f0 	.word	0xe000e3f0
 800cebc:	200014f4 	.word	0x200014f4
 800cec0:	e000ed0c 	.word	0xe000ed0c
 800cec4:	200014f8 	.word	0x200014f8

0800cec8 <pvPortMalloc>:
=======
 800d2a4:	4b0e      	ldr	r3, [pc, #56]	; (800d2e0 <vPortValidateInterruptPriority+0x78>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d2ac:	4b0d      	ldr	r3, [pc, #52]	; (800d2e4 <vPortValidateInterruptPriority+0x7c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d90a      	bls.n	800d2ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	603b      	str	r3, [r7, #0]
}
 800d2c6:	bf00      	nop
 800d2c8:	e7fe      	b.n	800d2c8 <vPortValidateInterruptPriority+0x60>
	}
 800d2ca:	bf00      	nop
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	e000e3f0 	.word	0xe000e3f0
 800d2dc:	200014dc 	.word	0x200014dc
 800d2e0:	e000ed0c 	.word	0xe000ed0c
 800d2e4:	200014e0 	.word	0x200014e0

0800d2e8 <pvPortMalloc>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b08a      	sub	sp, #40	; 0x28
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ced0:	2300      	movs	r3, #0
 800ced2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ced4:	f7fe f996 	bl	800b204 <vTaskSuspendAll>
=======
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08a      	sub	sp, #40	; 0x28
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d2f4:	f7fe f9f8 	bl	800b6e8 <vTaskSuspendAll>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 800ced8:	4b5b      	ldr	r3, [pc, #364]	; (800d048 <pvPortMalloc+0x180>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d101      	bne.n	800cee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cee0:	f000 f920 	bl	800d124 <prvHeapInit>
=======
 800d2f8:	4b5b      	ldr	r3, [pc, #364]	; (800d468 <pvPortMalloc+0x180>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d101      	bne.n	800d304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d300:	f000 f920 	bl	800d544 <prvHeapInit>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 800cee4:	4b59      	ldr	r3, [pc, #356]	; (800d04c <pvPortMalloc+0x184>)
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4013      	ands	r3, r2
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f040 8093 	bne.w	800d018 <pvPortMalloc+0x150>
=======
 800d304:	4b59      	ldr	r3, [pc, #356]	; (800d46c <pvPortMalloc+0x184>)
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4013      	ands	r3, r2
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f040 8093 	bne.w	800d438 <pvPortMalloc+0x150>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d01d      	beq.n	800cf34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cef8:	2208      	movs	r2, #8
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4413      	add	r3, r2
 800cefe:	607b      	str	r3, [r7, #4]
=======
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d01d      	beq.n	800d354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d318:	2208      	movs	r2, #8
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4413      	add	r3, r2
 800d31e:	607b      	str	r3, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f003 0307 	and.w	r3, r3, #7
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d014      	beq.n	800cf34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f023 0307 	bic.w	r3, r3, #7
 800cf10:	3308      	adds	r3, #8
 800cf12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f003 0307 	and.w	r3, r3, #7
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00a      	beq.n	800cf34 <pvPortMalloc+0x6c>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	617b      	str	r3, [r7, #20]
}
 800cf30:	bf00      	nop
 800cf32:	e7fe      	b.n	800cf32 <pvPortMalloc+0x6a>
=======
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f003 0307 	and.w	r3, r3, #7
 800d326:	2b00      	cmp	r3, #0
 800d328:	d014      	beq.n	800d354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f023 0307 	bic.w	r3, r3, #7
 800d330:	3308      	adds	r3, #8
 800d332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f003 0307 	and.w	r3, r3, #7
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00a      	beq.n	800d354 <pvPortMalloc+0x6c>
	__asm volatile
 800d33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	617b      	str	r3, [r7, #20]
}
 800d350:	bf00      	nop
 800d352:	e7fe      	b.n	800d352 <pvPortMalloc+0x6a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d06e      	beq.n	800d018 <pvPortMalloc+0x150>
 800cf3a:	4b45      	ldr	r3, [pc, #276]	; (800d050 <pvPortMalloc+0x188>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d869      	bhi.n	800d018 <pvPortMalloc+0x150>
=======
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d06e      	beq.n	800d438 <pvPortMalloc+0x150>
 800d35a:	4b45      	ldr	r3, [pc, #276]	; (800d470 <pvPortMalloc+0x188>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	429a      	cmp	r2, r3
 800d362:	d869      	bhi.n	800d438 <pvPortMalloc+0x150>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 800cf44:	4b43      	ldr	r3, [pc, #268]	; (800d054 <pvPortMalloc+0x18c>)
 800cf46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf48:	4b42      	ldr	r3, [pc, #264]	; (800d054 <pvPortMalloc+0x18c>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf4e:	e004      	b.n	800cf5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d903      	bls.n	800cf6c <pvPortMalloc+0xa4>
 800cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1f1      	bne.n	800cf50 <pvPortMalloc+0x88>
=======
 800d364:	4b43      	ldr	r3, [pc, #268]	; (800d474 <pvPortMalloc+0x18c>)
 800d366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d368:	4b42      	ldr	r3, [pc, #264]	; (800d474 <pvPortMalloc+0x18c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d36e:	e004      	b.n	800d37a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	429a      	cmp	r2, r3
 800d382:	d903      	bls.n	800d38c <pvPortMalloc+0xa4>
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1f1      	bne.n	800d370 <pvPortMalloc+0x88>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 800cf6c:	4b36      	ldr	r3, [pc, #216]	; (800d048 <pvPortMalloc+0x180>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d050      	beq.n	800d018 <pvPortMalloc+0x150>
=======
 800d38c:	4b36      	ldr	r3, [pc, #216]	; (800d468 <pvPortMalloc+0x180>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d392:	429a      	cmp	r2, r3
 800d394:	d050      	beq.n	800d438 <pvPortMalloc+0x150>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 800cf76:	6a3b      	ldr	r3, [r7, #32]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2208      	movs	r2, #8
 800cf7c:	4413      	add	r3, r2
 800cf7e:	61fb      	str	r3, [r7, #28]
=======
 800d396:	6a3b      	ldr	r3, [r7, #32]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2208      	movs	r2, #8
 800d39c:	4413      	add	r3, r2
 800d39e:	61fb      	str	r3, [r7, #28]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	601a      	str	r2, [r3, #0]
=======
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	6a3b      	ldr	r3, [r7, #32]
 800d3a6:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 800cf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8a:	685a      	ldr	r2, [r3, #4]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	1ad2      	subs	r2, r2, r3
 800cf90:	2308      	movs	r3, #8
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d91f      	bls.n	800cfd8 <pvPortMalloc+0x110>
=======
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	1ad2      	subs	r2, r2, r3
 800d3b0:	2308      	movs	r3, #8
 800d3b2:	005b      	lsls	r3, r3, #1
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d91f      	bls.n	800d3f8 <pvPortMalloc+0x110>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 800cf98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	f003 0307 	and.w	r3, r3, #7
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00a      	beq.n	800cfc0 <pvPortMalloc+0xf8>
	__asm volatile
 800cfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	613b      	str	r3, [r7, #16]
}
 800cfbc:	bf00      	nop
 800cfbe:	e7fe      	b.n	800cfbe <pvPortMalloc+0xf6>
=======
 800d3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4413      	add	r3, r2
 800d3be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	f003 0307 	and.w	r3, r3, #7
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00a      	beq.n	800d3e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ce:	f383 8811 	msr	BASEPRI, r3
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	613b      	str	r3, [r7, #16]
}
 800d3dc:	bf00      	nop
 800d3de:	e7fe      	b.n	800d3de <pvPortMalloc+0xf6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	685a      	ldr	r2, [r3, #4]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	1ad2      	subs	r2, r2, r3
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cfd2:	69b8      	ldr	r0, [r7, #24]
 800cfd4:	f000 f908 	bl	800d1e8 <prvInsertBlockIntoFreeList>
=======
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e2:	685a      	ldr	r2, [r3, #4]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	1ad2      	subs	r2, r2, r3
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d3f2:	69b8      	ldr	r0, [r7, #24]
 800d3f4:	f000 f908 	bl	800d608 <prvInsertBlockIntoFreeList>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 800cfd8:	4b1d      	ldr	r3, [pc, #116]	; (800d050 <pvPortMalloc+0x188>)
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	4a1b      	ldr	r2, [pc, #108]	; (800d050 <pvPortMalloc+0x188>)
 800cfe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cfe6:	4b1a      	ldr	r3, [pc, #104]	; (800d050 <pvPortMalloc+0x188>)
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	4b1b      	ldr	r3, [pc, #108]	; (800d058 <pvPortMalloc+0x190>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d203      	bcs.n	800cffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cff2:	4b17      	ldr	r3, [pc, #92]	; (800d050 <pvPortMalloc+0x188>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a18      	ldr	r2, [pc, #96]	; (800d058 <pvPortMalloc+0x190>)
 800cff8:	6013      	str	r3, [r2, #0]
=======
 800d3f8:	4b1d      	ldr	r3, [pc, #116]	; (800d470 <pvPortMalloc+0x188>)
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	4a1b      	ldr	r2, [pc, #108]	; (800d470 <pvPortMalloc+0x188>)
 800d404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d406:	4b1a      	ldr	r3, [pc, #104]	; (800d470 <pvPortMalloc+0x188>)
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	4b1b      	ldr	r3, [pc, #108]	; (800d478 <pvPortMalloc+0x190>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d203      	bcs.n	800d41a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d412:	4b17      	ldr	r3, [pc, #92]	; (800d470 <pvPortMalloc+0x188>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a18      	ldr	r2, [pc, #96]	; (800d478 <pvPortMalloc+0x190>)
 800d418:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	685a      	ldr	r2, [r3, #4]
 800cffe:	4b13      	ldr	r3, [pc, #76]	; (800d04c <pvPortMalloc+0x184>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	431a      	orrs	r2, r3
 800d004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00a:	2200      	movs	r2, #0
 800d00c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d00e:	4b13      	ldr	r3, [pc, #76]	; (800d05c <pvPortMalloc+0x194>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3301      	adds	r3, #1
 800d014:	4a11      	ldr	r2, [pc, #68]	; (800d05c <pvPortMalloc+0x194>)
 800d016:	6013      	str	r3, [r2, #0]
=======
 800d41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41c:	685a      	ldr	r2, [r3, #4]
 800d41e:	4b13      	ldr	r3, [pc, #76]	; (800d46c <pvPortMalloc+0x184>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	431a      	orrs	r2, r3
 800d424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	2200      	movs	r2, #0
 800d42c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d42e:	4b13      	ldr	r3, [pc, #76]	; (800d47c <pvPortMalloc+0x194>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	3301      	adds	r3, #1
 800d434:	4a11      	ldr	r2, [pc, #68]	; (800d47c <pvPortMalloc+0x194>)
 800d436:	6013      	str	r3, [r2, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 800d018:	f7fe f902 	bl	800b220 <xTaskResumeAll>
=======
 800d438:	f7fe f964 	bl	800b704 <xTaskResumeAll>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	f003 0307 	and.w	r3, r3, #7
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00a      	beq.n	800d03c <pvPortMalloc+0x174>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	60fb      	str	r3, [r7, #12]
}
 800d038:	bf00      	nop
 800d03a:	e7fe      	b.n	800d03a <pvPortMalloc+0x172>
	return pvReturn;
 800d03c:	69fb      	ldr	r3, [r7, #28]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3728      	adds	r7, #40	; 0x28
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20002104 	.word	0x20002104
 800d04c:	20002118 	.word	0x20002118
 800d050:	20002108 	.word	0x20002108
 800d054:	200020fc 	.word	0x200020fc
 800d058:	2000210c 	.word	0x2000210c
 800d05c:	20002110 	.word	0x20002110

0800d060 <vPortFree>:
=======
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	f003 0307 	and.w	r3, r3, #7
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00a      	beq.n	800d45c <pvPortMalloc+0x174>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	60fb      	str	r3, [r7, #12]
}
 800d458:	bf00      	nop
 800d45a:	e7fe      	b.n	800d45a <pvPortMalloc+0x172>
	return pvReturn;
 800d45c:	69fb      	ldr	r3, [r7, #28]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3728      	adds	r7, #40	; 0x28
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	200020ec 	.word	0x200020ec
 800d46c:	20002100 	.word	0x20002100
 800d470:	200020f0 	.word	0x200020f0
 800d474:	200020e4 	.word	0x200020e4
 800d478:	200020f4 	.word	0x200020f4
 800d47c:	200020f8 	.word	0x200020f8

0800d480 <vPortFree>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d04d      	beq.n	800d10e <vPortFree+0xae>
=======
 800d480:	b580      	push	{r7, lr}
 800d482:	b086      	sub	sp, #24
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d04d      	beq.n	800d52e <vPortFree+0xae>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 800d072:	2308      	movs	r3, #8
 800d074:	425b      	negs	r3, r3
 800d076:	697a      	ldr	r2, [r7, #20]
 800d078:	4413      	add	r3, r2
 800d07a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	4b24      	ldr	r3, [pc, #144]	; (800d118 <vPortFree+0xb8>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4013      	ands	r3, r2
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10a      	bne.n	800d0a4 <vPortFree+0x44>
	__asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	60fb      	str	r3, [r7, #12]
}
 800d0a0:	bf00      	nop
 800d0a2:	e7fe      	b.n	800d0a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00a      	beq.n	800d0c2 <vPortFree+0x62>
	__asm volatile
 800d0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b0:	f383 8811 	msr	BASEPRI, r3
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	f3bf 8f4f 	dsb	sy
 800d0bc:	60bb      	str	r3, [r7, #8]
}
 800d0be:	bf00      	nop
 800d0c0:	e7fe      	b.n	800d0c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	685a      	ldr	r2, [r3, #4]
 800d0c6:	4b14      	ldr	r3, [pc, #80]	; (800d118 <vPortFree+0xb8>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d01e      	beq.n	800d10e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d11a      	bne.n	800d10e <vPortFree+0xae>
=======
 800d492:	2308      	movs	r3, #8
 800d494:	425b      	negs	r3, r3
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	4413      	add	r3, r2
 800d49a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	685a      	ldr	r2, [r3, #4]
 800d4a4:	4b24      	ldr	r3, [pc, #144]	; (800d538 <vPortFree+0xb8>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10a      	bne.n	800d4c4 <vPortFree+0x44>
	__asm volatile
 800d4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	60fb      	str	r3, [r7, #12]
}
 800d4c0:	bf00      	nop
 800d4c2:	e7fe      	b.n	800d4c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d00a      	beq.n	800d4e2 <vPortFree+0x62>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	60bb      	str	r3, [r7, #8]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	685a      	ldr	r2, [r3, #4]
 800d4e6:	4b14      	ldr	r3, [pc, #80]	; (800d538 <vPortFree+0xb8>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4013      	ands	r3, r2
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d01e      	beq.n	800d52e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d11a      	bne.n	800d52e <vPortFree+0xae>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	4b0e      	ldr	r3, [pc, #56]	; (800d118 <vPortFree+0xb8>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	43db      	mvns	r3, r3
 800d0e2:	401a      	ands	r2, r3
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d0e8:	f7fe f88c 	bl	800b204 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	685a      	ldr	r2, [r3, #4]
 800d0f0:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <vPortFree+0xbc>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	4a09      	ldr	r2, [pc, #36]	; (800d11c <vPortFree+0xbc>)
 800d0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d0fa:	6938      	ldr	r0, [r7, #16]
 800d0fc:	f000 f874 	bl	800d1e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d100:	4b07      	ldr	r3, [pc, #28]	; (800d120 <vPortFree+0xc0>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	3301      	adds	r3, #1
 800d106:	4a06      	ldr	r2, [pc, #24]	; (800d120 <vPortFree+0xc0>)
 800d108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d10a:	f7fe f889 	bl	800b220 <xTaskResumeAll>
=======
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	4b0e      	ldr	r3, [pc, #56]	; (800d538 <vPortFree+0xb8>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	43db      	mvns	r3, r3
 800d502:	401a      	ands	r2, r3
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d508:	f7fe f8ee 	bl	800b6e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	685a      	ldr	r2, [r3, #4]
 800d510:	4b0a      	ldr	r3, [pc, #40]	; (800d53c <vPortFree+0xbc>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4413      	add	r3, r2
 800d516:	4a09      	ldr	r2, [pc, #36]	; (800d53c <vPortFree+0xbc>)
 800d518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d51a:	6938      	ldr	r0, [r7, #16]
 800d51c:	f000 f874 	bl	800d608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d520:	4b07      	ldr	r3, [pc, #28]	; (800d540 <vPortFree+0xc0>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	3301      	adds	r3, #1
 800d526:	4a06      	ldr	r2, [pc, #24]	; (800d540 <vPortFree+0xc0>)
 800d528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d52a:	f7fe f8eb 	bl	800b704 <xTaskResumeAll>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 800d10e:	bf00      	nop
 800d110:	3718      	adds	r7, #24
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	20002118 	.word	0x20002118
 800d11c:	20002108 	.word	0x20002108
 800d120:	20002114 	.word	0x20002114

0800d124 <prvHeapInit>:
=======
 800d52e:	bf00      	nop
 800d530:	3718      	adds	r7, #24
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	20002100 	.word	0x20002100
 800d53c:	200020f0 	.word	0x200020f0
 800d540:	200020fc 	.word	0x200020fc

0800d544 <prvHeapInit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
=======
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 800d12a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d12e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d130:	4b27      	ldr	r3, [pc, #156]	; (800d1d0 <prvHeapInit+0xac>)
 800d132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f003 0307 	and.w	r3, r3, #7
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00c      	beq.n	800d158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	3307      	adds	r3, #7
 800d142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f023 0307 	bic.w	r3, r3, #7
 800d14a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d14c:	68ba      	ldr	r2, [r7, #8]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	4a1f      	ldr	r2, [pc, #124]	; (800d1d0 <prvHeapInit+0xac>)
 800d154:	4413      	add	r3, r2
 800d156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	607b      	str	r3, [r7, #4]
=======
 800d54a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d550:	4b27      	ldr	r3, [pc, #156]	; (800d5f0 <prvHeapInit+0xac>)
 800d552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f003 0307 	and.w	r3, r3, #7
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00c      	beq.n	800d578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	3307      	adds	r3, #7
 800d562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f023 0307 	bic.w	r3, r3, #7
 800d56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d56c:	68ba      	ldr	r2, [r7, #8]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	4a1f      	ldr	r2, [pc, #124]	; (800d5f0 <prvHeapInit+0xac>)
 800d574:	4413      	add	r3, r2
 800d576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	607b      	str	r3, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800d15c:	4a1d      	ldr	r2, [pc, #116]	; (800d1d4 <prvHeapInit+0xb0>)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d162:	4b1c      	ldr	r3, [pc, #112]	; (800d1d4 <prvHeapInit+0xb0>)
 800d164:	2200      	movs	r2, #0
 800d166:	605a      	str	r2, [r3, #4]
=======
 800d57c:	4a1d      	ldr	r2, [pc, #116]	; (800d5f4 <prvHeapInit+0xb0>)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d582:	4b1c      	ldr	r3, [pc, #112]	; (800d5f4 <prvHeapInit+0xb0>)
 800d584:	2200      	movs	r2, #0
 800d586:	605a      	str	r2, [r3, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	4413      	add	r3, r2
 800d16e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d170:	2208      	movs	r2, #8
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	1a9b      	subs	r3, r3, r2
 800d176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f023 0307 	bic.w	r3, r3, #7
 800d17e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	4a15      	ldr	r2, [pc, #84]	; (800d1d8 <prvHeapInit+0xb4>)
 800d184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d186:	4b14      	ldr	r3, [pc, #80]	; (800d1d8 <prvHeapInit+0xb4>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2200      	movs	r2, #0
 800d18c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d18e:	4b12      	ldr	r3, [pc, #72]	; (800d1d8 <prvHeapInit+0xb4>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]
=======
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	4413      	add	r3, r2
 800d58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d590:	2208      	movs	r2, #8
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	1a9b      	subs	r3, r3, r2
 800d596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f023 0307 	bic.w	r3, r3, #7
 800d59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	4a15      	ldr	r2, [pc, #84]	; (800d5f8 <prvHeapInit+0xb4>)
 800d5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d5a6:	4b14      	ldr	r3, [pc, #80]	; (800d5f8 <prvHeapInit+0xb4>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d5ae:	4b12      	ldr	r3, [pc, #72]	; (800d5f8 <prvHeapInit+0xb4>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	1ad2      	subs	r2, r2, r3
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d1a4:	4b0c      	ldr	r3, [pc, #48]	; (800d1d8 <prvHeapInit+0xb4>)
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	4a0a      	ldr	r2, [pc, #40]	; (800d1dc <prvHeapInit+0xb8>)
 800d1b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	4a09      	ldr	r2, [pc, #36]	; (800d1e0 <prvHeapInit+0xbc>)
 800d1ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d1bc:	4b09      	ldr	r3, [pc, #36]	; (800d1e4 <prvHeapInit+0xc0>)
 800d1be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d1c2:	601a      	str	r2, [r3, #0]
}
 800d1c4:	bf00      	nop
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr
 800d1d0:	200014fc 	.word	0x200014fc
 800d1d4:	200020fc 	.word	0x200020fc
 800d1d8:	20002104 	.word	0x20002104
 800d1dc:	2000210c 	.word	0x2000210c
 800d1e0:	20002108 	.word	0x20002108
 800d1e4:	20002118 	.word	0x20002118

0800d1e8 <prvInsertBlockIntoFreeList>:
=======
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	1ad2      	subs	r2, r2, r3
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d5c4:	4b0c      	ldr	r3, [pc, #48]	; (800d5f8 <prvHeapInit+0xb4>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	4a0a      	ldr	r2, [pc, #40]	; (800d5fc <prvHeapInit+0xb8>)
 800d5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	4a09      	ldr	r2, [pc, #36]	; (800d600 <prvHeapInit+0xbc>)
 800d5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d5dc:	4b09      	ldr	r3, [pc, #36]	; (800d604 <prvHeapInit+0xc0>)
 800d5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d5e2:	601a      	str	r2, [r3, #0]
}
 800d5e4:	bf00      	nop
 800d5e6:	3714      	adds	r7, #20
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	200014e4 	.word	0x200014e4
 800d5f4:	200020e4 	.word	0x200020e4
 800d5f8:	200020ec 	.word	0x200020ec
 800d5fc:	200020f4 	.word	0x200020f4
 800d600:	200020f0 	.word	0x200020f0
 800d604:	20002100 	.word	0x20002100

0800d608 <prvInsertBlockIntoFreeList>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
=======
 800d608:	b480      	push	{r7}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 800d1f0:	4b28      	ldr	r3, [pc, #160]	; (800d294 <prvInsertBlockIntoFreeList+0xac>)
 800d1f2:	60fb      	str	r3, [r7, #12]
 800d1f4:	e002      	b.n	800d1fc <prvInsertBlockIntoFreeList+0x14>
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	60fb      	str	r3, [r7, #12]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	429a      	cmp	r2, r3
 800d204:	d8f7      	bhi.n	800d1f6 <prvInsertBlockIntoFreeList+0xe>
=======
 800d610:	4b28      	ldr	r3, [pc, #160]	; (800d6b4 <prvInsertBlockIntoFreeList+0xac>)
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	e002      	b.n	800d61c <prvInsertBlockIntoFreeList+0x14>
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	429a      	cmp	r2, r3
 800d624:	d8f7      	bhi.n	800d616 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	4413      	add	r3, r2
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	429a      	cmp	r2, r3
 800d216:	d108      	bne.n	800d22a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	441a      	add	r2, r3
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	607b      	str	r3, [r7, #4]
=======
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	68ba      	ldr	r2, [r7, #8]
 800d630:	4413      	add	r3, r2
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	429a      	cmp	r2, r3
 800d636:	d108      	bne.n	800d64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	441a      	add	r2, r3
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	607b      	str	r3, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	441a      	add	r2, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d118      	bne.n	800d270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	4b15      	ldr	r3, [pc, #84]	; (800d298 <prvInsertBlockIntoFreeList+0xb0>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	429a      	cmp	r2, r3
 800d248:	d00d      	beq.n	800d266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	685a      	ldr	r2, [r3, #4]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	441a      	add	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	e008      	b.n	800d278 <prvInsertBlockIntoFreeList+0x90>
=======
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	68ba      	ldr	r2, [r7, #8]
 800d654:	441a      	add	r2, r3
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d118      	bne.n	800d690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	4b15      	ldr	r3, [pc, #84]	; (800d6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	429a      	cmp	r2, r3
 800d668:	d00d      	beq.n	800d686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	685a      	ldr	r2, [r3, #4]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	441a      	add	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	601a      	str	r2, [r3, #0]
 800d684:	e008      	b.n	800d698 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 800d266:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <prvInsertBlockIntoFreeList+0xb0>)
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	e003      	b.n	800d278 <prvInsertBlockIntoFreeList+0x90>
=======
 800d686:	4b0c      	ldr	r3, [pc, #48]	; (800d6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	601a      	str	r2, [r3, #0]
 800d68e:	e003      	b.n	800d698 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	601a      	str	r2, [r3, #0]
=======
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d002      	beq.n	800d286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	601a      	str	r2, [r3, #0]
=======
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d002      	beq.n	800d6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800d286:	bf00      	nop
 800d288:	3714      	adds	r7, #20
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop
 800d294:	200020fc 	.word	0x200020fc
 800d298:	20002104 	.word	0x20002104

0800d29c <RingAdd>:
=======
 800d6a6:	bf00      	nop
 800d6a8:	3714      	adds	r7, #20
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	200020e4 	.word	0x200020e4
 800d6b8:	200020ec 	.word	0x200020ec

0800d6bc <RingAdd>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
<<<<<<< HEAD
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	78fa      	ldrb	r2, [r7, #3]
 800d2b4:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d2bc:	3301      	adds	r3, #1
 800d2be:	425a      	negs	r2, r3
 800d2c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d2c8:	bf58      	it	pl
 800d2ca:	4253      	negpl	r3, r2
 800d2cc:	b2da      	uxtb	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d2da:	2b80      	cmp	r3, #128	; 0x80
 800d2dc:	d113      	bne.n	800d306 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	425a      	negs	r2, r3
 800d2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d2f8:	bf58      	it	pl
 800d2fa:	4253      	negpl	r3, r2
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
=======
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	78fa      	ldrb	r2, [r7, #3]
 800d6d4:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d6dc:	3301      	adds	r3, #1
 800d6de:	425a      	negs	r2, r3
 800d6e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d6e8:	bf58      	it	pl
 800d6ea:	4253      	negpl	r3, r2
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d6fa:	2b80      	cmp	r3, #128	; 0x80
 800d6fc:	d113      	bne.n	800d726 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d70c:	3301      	adds	r3, #1
 800d70e:	425a      	negs	r2, r3
 800d710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d714:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d718:	bf58      	it	pl
 800d71a:	4253      	negpl	r3, r2
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
<<<<<<< HEAD
 800d304:	e00b      	b.n	800d31e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d314:	3301      	adds	r3, #1
 800d316:	b2da      	uxtb	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800d31e:	bf00      	nop
 800d320:	370c      	adds	r7, #12
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr

0800d32a <RingGetAllBytes>:
=======
 800d724:	e00b      	b.n	800d73e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d734:	3301      	adds	r3, #1
 800d736:	b2da      	uxtb	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800d73e:	bf00      	nop
 800d740:	370c      	adds	r7, #12
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr

0800d74a <RingGetAllBytes>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
<<<<<<< HEAD
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b082      	sub	sp, #8
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
 800d332:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d33a:	461a      	mov	r2, r3
 800d33c:	6839      	ldr	r1, [r7, #0]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f805 	bl	800d34e <RingGetNBytes>
 800d344:	4603      	mov	r3, r0
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <RingGetNBytes>:
=======
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b082      	sub	sp, #8
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d75a:	461a      	mov	r2, r3
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f805 	bl	800d76e <RingGetNBytes>
 800d764:	4603      	mov	r3, r0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <RingGetNBytes>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
<<<<<<< HEAD
 800d34e:	b580      	push	{r7, lr}
 800d350:	b086      	sub	sp, #24
 800d352:	af00      	add	r7, sp, #0
 800d354:	60f8      	str	r0, [r7, #12]
 800d356:	60b9      	str	r1, [r7, #8]
 800d358:	4613      	mov	r3, r2
 800d35a:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d362:	2b00      	cmp	r3, #0
 800d364:	d002      	beq.n	800d36c <RingGetNBytes+0x1e>
 800d366:	79fb      	ldrb	r3, [r7, #7]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <RingGetNBytes+0x22>
 800d36c:	2300      	movs	r3, #0
 800d36e:	e03e      	b.n	800d3ee <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800d370:	79fb      	ldrb	r3, [r7, #7]
 800d372:	2b80      	cmp	r3, #128	; 0x80
 800d374:	d901      	bls.n	800d37a <RingGetNBytes+0x2c>
 800d376:	2300      	movs	r3, #0
 800d378:	e039      	b.n	800d3ee <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d37a:	2300      	movs	r3, #0
 800d37c:	75fb      	strb	r3, [r7, #23]
 800d37e:	e01b      	b.n	800d3b8 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d386:	4619      	mov	r1, r3
 800d388:	7dfb      	ldrb	r3, [r7, #23]
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	4413      	add	r3, r2
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	5c52      	ldrb	r2, [r2, r1]
 800d392:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d39a:	3301      	adds	r3, #1
 800d39c:	425a      	negs	r2, r3
 800d39e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d3a6:	bf58      	it	pl
 800d3a8:	4253      	negpl	r3, r2
 800d3aa:	b2da      	uxtb	r2, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d3b2:	7dfb      	ldrb	r3, [r7, #23]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	75fb      	strb	r3, [r7, #23]
 800d3b8:	7dfa      	ldrb	r2, [r7, #23]
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d205      	bcs.n	800d3cc <RingGetNBytes+0x7e>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d3c6:	7dfa      	ldrb	r2, [r7, #23]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d3d9      	bcc.n	800d380 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800d3d2:	7dfb      	ldrb	r3, [r7, #23]
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f000 f805 	bl	800d3f6 <RingClear>

	return uCounter;
 800d3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3718      	adds	r7, #24
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <RingClear>:
=======
 800d76e:	b580      	push	{r7, lr}
 800d770:	b086      	sub	sp, #24
 800d772:	af00      	add	r7, sp, #0
 800d774:	60f8      	str	r0, [r7, #12]
 800d776:	60b9      	str	r1, [r7, #8]
 800d778:	4613      	mov	r3, r2
 800d77a:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d782:	2b00      	cmp	r3, #0
 800d784:	d002      	beq.n	800d78c <RingGetNBytes+0x1e>
 800d786:	79fb      	ldrb	r3, [r7, #7]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <RingGetNBytes+0x22>
 800d78c:	2300      	movs	r3, #0
 800d78e:	e03e      	b.n	800d80e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800d790:	79fb      	ldrb	r3, [r7, #7]
 800d792:	2b80      	cmp	r3, #128	; 0x80
 800d794:	d901      	bls.n	800d79a <RingGetNBytes+0x2c>
 800d796:	2300      	movs	r3, #0
 800d798:	e039      	b.n	800d80e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d79a:	2300      	movs	r3, #0
 800d79c:	75fb      	strb	r3, [r7, #23]
 800d79e:	e01b      	b.n	800d7d8 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	7dfb      	ldrb	r3, [r7, #23]
 800d7aa:	68ba      	ldr	r2, [r7, #8]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	5c52      	ldrb	r2, [r2, r1]
 800d7b2:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	425a      	negs	r2, r3
 800d7be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d7c6:	bf58      	it	pl
 800d7c8:	4253      	negpl	r3, r2
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d7d2:	7dfb      	ldrb	r3, [r7, #23]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	75fb      	strb	r3, [r7, #23]
 800d7d8:	7dfa      	ldrb	r2, [r7, #23]
 800d7da:	79fb      	ldrb	r3, [r7, #7]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d205      	bcs.n	800d7ec <RingGetNBytes+0x7e>
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d7e6:	7dfa      	ldrb	r2, [r7, #23]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d3d9      	bcc.n	800d7a0 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800d7f2:	7dfb      	ldrb	r3, [r7, #23]
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f000 f805 	bl	800d816 <RingClear>

	return uCounter;
 800d80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <RingClear>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
<<<<<<< HEAD
 800d3f6:	b480      	push	{r7}
 800d3f8:	b083      	sub	sp, #12
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2200      	movs	r2, #0
 800d402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800d41e:	bf00      	nop
 800d420:	370c      	adds	r7, #12
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr
	...

0800d42c <ModbusInit>:
=======
 800d816:	b480      	push	{r7}
 800d818:	b083      	sub	sp, #12
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2200      	movs	r2, #0
 800d83a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800d83e:	bf00      	nop
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
	...

0800d84c <ModbusInit>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
<<<<<<< HEAD
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af02      	add	r7, sp, #8
 800d432:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800d434:	4b42      	ldr	r3, [pc, #264]	; (800d540 <ModbusInit+0x114>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d87d      	bhi.n	800d538 <ModbusInit+0x10c>
=======
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af02      	add	r7, sp, #8
 800d852:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800d854:	4b42      	ldr	r3, [pc, #264]	; (800d960 <ModbusInit+0x114>)
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d87d      	bhi.n	800d958 <ModbusInit+0x10c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
<<<<<<< HEAD
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	33d0      	adds	r3, #208	; 0xd0
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff ffd8 	bl	800d3f6 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	2b03      	cmp	r3, #3
 800d44c:	d109      	bne.n	800d462 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800d44e:	4a3d      	ldr	r2, [pc, #244]	; (800d544 <ModbusInit+0x118>)
 800d450:	6879      	ldr	r1, [r7, #4]
 800d452:	483d      	ldr	r0, [pc, #244]	; (800d548 <ModbusInit+0x11c>)
 800d454:	f7fc f8e6 	bl	8009624 <osThreadNew>
 800d458:	4602      	mov	r2, r0
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800d460:	e033      	b.n	800d4ca <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	2b04      	cmp	r3, #4
 800d468:	d12e      	bne.n	800d4c8 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800d46a:	4a38      	ldr	r2, [pc, #224]	; (800d54c <ModbusInit+0x120>)
 800d46c:	6879      	ldr	r1, [r7, #4]
 800d46e:	4838      	ldr	r0, [pc, #224]	; (800d550 <ModbusInit+0x124>)
 800d470:	f7fc f8d8 	bl	8009624 <osThreadNew>
 800d474:	4602      	mov	r2, r0
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
=======
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	33d0      	adds	r3, #208	; 0xd0
 800d860:	4618      	mov	r0, r3
 800d862:	f7ff ffd8 	bl	800d816 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d109      	bne.n	800d882 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800d86e:	4a3d      	ldr	r2, [pc, #244]	; (800d964 <ModbusInit+0x118>)
 800d870:	6879      	ldr	r1, [r7, #4]
 800d872:	483d      	ldr	r0, [pc, #244]	; (800d968 <ModbusInit+0x11c>)
 800d874:	f7fc fa08 	bl	8009c88 <osThreadNew>
 800d878:	4602      	mov	r2, r0
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800d880:	e033      	b.n	800d8ea <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	2b04      	cmp	r3, #4
 800d888:	d12e      	bne.n	800d8e8 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800d88a:	4a38      	ldr	r2, [pc, #224]	; (800d96c <ModbusInit+0x120>)
 800d88c:	6879      	ldr	r1, [r7, #4]
 800d88e:	4838      	ldr	r0, [pc, #224]	; (800d970 <ModbusInit+0x124>)
 800d890:	f7fc f9fa 	bl	8009c88 <osThreadNew>
 800d894:	4602      	mov	r2, r0
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
<<<<<<< HEAD
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d482:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d48a:	4a32      	ldr	r2, [pc, #200]	; (800d554 <ModbusInit+0x128>)
 800d48c:	9200      	str	r2, [sp, #0]
 800d48e:	2200      	movs	r2, #0
 800d490:	4831      	ldr	r0, [pc, #196]	; (800d558 <ModbusInit+0x12c>)
 800d492:	f7fe ff07 	bl	800c2a4 <xTimerCreate>
 800d496:	4602      	mov	r2, r0
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
=======
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d8a2:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d8aa:	4a32      	ldr	r2, [pc, #200]	; (800d974 <ModbusInit+0x128>)
 800d8ac:	9200      	str	r2, [sp, #0]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	4831      	ldr	r0, [pc, #196]	; (800d978 <ModbusInit+0x12c>)
 800d8b2:	f7fe ff69 	bl	800c788 <xTimerCreate>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
<<<<<<< HEAD
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d100      	bne.n	800d4aa <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800d4a8:	e7fe      	b.n	800d4a8 <ModbusInit+0x7c>
=======
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d100      	bne.n	800d8ca <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800d8c8:	e7fe      	b.n	800d8c8 <ModbusInit+0x7c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
<<<<<<< HEAD
 800d4aa:	4a2c      	ldr	r2, [pc, #176]	; (800d55c <ModbusInit+0x130>)
 800d4ac:	2110      	movs	r1, #16
 800d4ae:	2002      	movs	r0, #2
 800d4b0:	f7fc fbbc 	bl	8009c2c <osMessageQueueNew>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

		  if(modH->QueueTelegramHandle == NULL)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d101      	bne.n	800d4ca <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800d4c6:	e7fe      	b.n	800d4c6 <ModbusInit+0x9a>
=======
 800d8ca:	4a2c      	ldr	r2, [pc, #176]	; (800d97c <ModbusInit+0x130>)
 800d8cc:	2110      	movs	r1, #16
 800d8ce:	2002      	movs	r0, #2
 800d8d0:	f7fc fc1e 	bl	800a110 <osMessageQueueNew>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

		  if(modH->QueueTelegramHandle == NULL)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d101      	bne.n	800d8ea <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800d8e6:	e7fe      	b.n	800d8e6 <ModbusInit+0x9a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
<<<<<<< HEAD
 800d4c8:	e7fe      	b.n	800d4c8 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d100      	bne.n	800d4d6 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800d4d4:	e7fe      	b.n	800d4d4 <ModbusInit+0xa8>
=======
 800d8e8:	e7fe      	b.n	800d8e8 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d100      	bne.n	800d8f6 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800d8f4:	e7fe      	b.n	800d8f4 <ModbusInit+0xa8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
<<<<<<< HEAD
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800d4dc:	4a20      	ldr	r2, [pc, #128]	; (800d560 <ModbusInit+0x134>)
 800d4de:	9200      	str	r2, [sp, #0]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	2105      	movs	r1, #5
 800d4e4:	481f      	ldr	r0, [pc, #124]	; (800d564 <ModbusInit+0x138>)
 800d4e6:	f7fe fedd 	bl	800c2a4 <xTimerCreate>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d100      	bne.n	800d4fe <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800d4fc:	e7fe      	b.n	800d4fc <ModbusInit+0xd0>
=======
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800d8fc:	4a20      	ldr	r2, [pc, #128]	; (800d980 <ModbusInit+0x134>)
 800d8fe:	9200      	str	r2, [sp, #0]
 800d900:	2200      	movs	r2, #0
 800d902:	2105      	movs	r1, #5
 800d904:	481f      	ldr	r0, [pc, #124]	; (800d984 <ModbusInit+0x138>)
 800d906:	f7fe ff3f 	bl	800c788 <xTimerCreate>
 800d90a:	4602      	mov	r2, r0
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d100      	bne.n	800d91e <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800d91c:	e7fe      	b.n	800d91c <ModbusInit+0xd0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
<<<<<<< HEAD
 800d4fe:	4a1a      	ldr	r2, [pc, #104]	; (800d568 <ModbusInit+0x13c>)
 800d500:	2101      	movs	r1, #1
 800d502:	2001      	movs	r0, #1
 800d504:	f7fc fb09 	bl	8009b1a <osSemaphoreNew>
 800d508:	4602      	mov	r2, r0
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	  if(modH->ModBusSphrHandle == NULL)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d516:	2b00      	cmp	r3, #0
 800d518:	d100      	bne.n	800d51c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800d51a:	e7fe      	b.n	800d51a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800d51c:	4b08      	ldr	r3, [pc, #32]	; (800d540 <ModbusInit+0x114>)
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	4619      	mov	r1, r3
 800d522:	4a12      	ldr	r2, [pc, #72]	; (800d56c <ModbusInit+0x140>)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800d52a:	4b05      	ldr	r3, [pc, #20]	; (800d540 <ModbusInit+0x114>)
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	3301      	adds	r3, #1
 800d530:	b2da      	uxtb	r2, r3
 800d532:	4b03      	ldr	r3, [pc, #12]	; (800d540 <ModbusInit+0x114>)
 800d534:	701a      	strb	r2, [r3, #0]
=======
 800d91e:	4a1a      	ldr	r2, [pc, #104]	; (800d988 <ModbusInit+0x13c>)
 800d920:	2101      	movs	r1, #1
 800d922:	2001      	movs	r0, #1
 800d924:	f7fc fb6b 	bl	8009ffe <osSemaphoreNew>
 800d928:	4602      	mov	r2, r0
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	  if(modH->ModBusSphrHandle == NULL)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d936:	2b00      	cmp	r3, #0
 800d938:	d100      	bne.n	800d93c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800d93a:	e7fe      	b.n	800d93a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800d93c:	4b08      	ldr	r3, [pc, #32]	; (800d960 <ModbusInit+0x114>)
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	4619      	mov	r1, r3
 800d942:	4a12      	ldr	r2, [pc, #72]	; (800d98c <ModbusInit+0x140>)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800d94a:	4b05      	ldr	r3, [pc, #20]	; (800d960 <ModbusInit+0x114>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	3301      	adds	r3, #1
 800d950:	b2da      	uxtb	r2, r3
 800d952:	4b03      	ldr	r3, [pc, #12]	; (800d960 <ModbusInit+0x114>)
 800d954:	701a      	strb	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
<<<<<<< HEAD
 800d536:	e000      	b.n	800d53a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800d538:	e7fe      	b.n	800d538 <ModbusInit+0x10c>
}
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	20002124 	.word	0x20002124
 800d544:	0800f084 	.word	0x0800f084
 800d548:	0800d779 	.word	0x0800d779
 800d54c:	0800f0a8 	.word	0x0800f0a8
 800d550:	0800dc55 	.word	0x0800dc55
 800d554:	0800d71d 	.word	0x0800d71d
 800d558:	0800eefc 	.word	0x0800eefc
 800d55c:	0800f06c 	.word	0x0800f06c
 800d560:	0800d699 	.word	0x0800d699
 800d564:	0800ef0c 	.word	0x0800ef0c
 800d568:	0800f0cc 	.word	0x0800f0cc
 800d56c:	2000211c 	.word	0x2000211c

0800d570 <ModbusStart>:
=======
 800d956:	e000      	b.n	800d95a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800d958:	e7fe      	b.n	800d958 <ModbusInit+0x10c>
}
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	2000210c 	.word	0x2000210c
 800d964:	0800f6ac 	.word	0x0800f6ac
 800d968:	0800db99 	.word	0x0800db99
 800d96c:	0800f6d0 	.word	0x0800f6d0
 800d970:	0800e075 	.word	0x0800e075
 800d974:	0800db3d 	.word	0x0800db3d
 800d978:	0800f558 	.word	0x0800f558
 800d97c:	0800f694 	.word	0x0800f694
 800d980:	0800dab9 	.word	0x0800dab9
 800d984:	0800f568 	.word	0x0800f568
 800d988:	0800f6f4 	.word	0x0800f6f4
 800d98c:	20002104 	.word	0x20002104

0800d990 <ModbusStart>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
<<<<<<< HEAD
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d005      	beq.n	800d58e <ModbusStart+0x1e>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d588:	2b04      	cmp	r3, #4
 800d58a:	d000      	beq.n	800d58e <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800d58c:	e7fe      	b.n	800d58c <ModbusStart+0x1c>
=======
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d005      	beq.n	800d9ae <ModbusStart+0x1e>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d9a8:	2b04      	cmp	r3, #4
 800d9aa:	d000      	beq.n	800d9ae <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800d9ac:	e7fe      	b.n	800d9ac <ModbusStart+0x1c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
<<<<<<< HEAD
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d594:	2b01      	cmp	r3, #1
 800d596:	d004      	beq.n	800d5a2 <ModbusStart+0x32>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d59e:	2b04      	cmp	r3, #4
 800d5a0:	d15c      	bne.n	800d65c <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d007      	beq.n	800d5ba <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	68d8      	ldr	r0, [r3, #12]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	8a1b      	ldrh	r3, [r3, #16]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	f7f6 fd1f 	bl	8003ff8 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regsHR == NULL )
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d105      	bne.n	800d5ce <ModbusStart+0x5e>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d100      	bne.n	800d5ce <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800d5cc:	e7fe      	b.n	800d5cc <ModbusStart+0x5c>
=======
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d004      	beq.n	800d9c2 <ModbusStart+0x32>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d9be:	2b04      	cmp	r3, #4
 800d9c0:	d15c      	bne.n	800da7c <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d007      	beq.n	800d9da <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68d8      	ldr	r0, [r3, #12]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	8a1b      	ldrh	r3, [r3, #16]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	f7f6 fae3 	bl	8003fa0 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regsHR == NULL )
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	2b03      	cmp	r3, #3
 800d9e0:	d105      	bne.n	800d9ee <ModbusStart+0x5e>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d100      	bne.n	800d9ee <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800d9ec:	e7fe      	b.n	800d9ec <ModbusStart+0x5c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
<<<<<<< HEAD
 800d5ce:	bf00      	nop
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7f9 ff0f 	bl	80073f8 <HAL_UART_GetState>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b20      	cmp	r3, #32
 800d5de:	d1f7      	bne.n	800d5d0 <ModbusStart+0x60>
=======
 800d9ee:	bf00      	nop
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fa f831 	bl	8007a5c <HAL_UART_GetState>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b20      	cmp	r3, #32
 800d9fe:	d1f7      	bne.n	800d9f0 <ModbusStart+0x60>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
<<<<<<< HEAD
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d5e6:	2b04      	cmp	r3, #4
 800d5e8:	d11a      	bne.n	800d620 <ModbusStart+0xb0>
=======
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800da06:	2b04      	cmp	r3, #4
 800da08:	d11a      	bne.n	800da40 <ModbusStart+0xb0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
<<<<<<< HEAD
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6858      	ldr	r0, [r3, #4]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	33d0      	adds	r3, #208	; 0xd0
 800d5f2:	2280      	movs	r2, #128	; 0x80
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	f7fb fea8 	bl	800934a <HAL_UARTEx_ReceiveToIdle_DMA>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d000      	beq.n	800d602 <ModbusStart+0x92>
        	   {
        	         while(1)
 800d600:	e7fe      	b.n	800d600 <ModbusStart+0x90>
=======
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6858      	ldr	r0, [r3, #4]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	33d0      	adds	r3, #208	; 0xd0
 800da12:	2280      	movs	r2, #128	; 0x80
 800da14:	4619      	mov	r1, r3
 800da16:	f7fb ffca 	bl	80099ae <HAL_UARTEx_ReceiveToIdle_DMA>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d000      	beq.n	800da22 <ModbusStart+0x92>
        	   {
        	         while(1)
 800da20:	e7fe      	b.n	800da20 <ModbusStart+0x90>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
<<<<<<< HEAD
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f022 0204 	bic.w	r2, r2, #4
 800d61c:	601a      	str	r2, [r3, #0]
 800d61e:	e00b      	b.n	800d638 <ModbusStart+0xc8>
=======
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f022 0204 	bic.w	r2, r2, #4
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	e00b      	b.n	800da58 <ModbusStart+0xc8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
<<<<<<< HEAD
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6858      	ldr	r0, [r3, #4]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	33b8      	adds	r3, #184	; 0xb8
 800d628:	2201      	movs	r2, #1
 800d62a:	4619      	mov	r1, r3
 800d62c:	f7f9 f8ca 	bl	80067c4 <HAL_UART_Receive_IT>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d000      	beq.n	800d638 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800d636:	e7fe      	b.n	800d636 <ModbusStart+0xc6>
=======
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6858      	ldr	r0, [r3, #4]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	33b8      	adds	r3, #184	; 0xb8
 800da48:	2201      	movs	r2, #1
 800da4a:	4619      	mov	r1, r3
 800da4c:	f7f9 f9ec 	bl	8006e28 <HAL_UART_Receive_IT>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d000      	beq.n	800da58 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800da56:	e7fe      	b.n	800da56 <ModbusStart+0xc6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
<<<<<<< HEAD
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	7a1b      	ldrb	r3, [r3, #8]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d004      	beq.n	800d64a <ModbusStart+0xda>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2b04      	cmp	r3, #4
 800d646:	d100      	bne.n	800d64a <ModbusStart+0xda>
          {
        	  while(1)
 800d648:	e7fe      	b.n	800d648 <ModbusStart+0xd8>
=======
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	7a1b      	ldrb	r3, [r3, #8]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d004      	beq.n	800da6a <ModbusStart+0xda>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b04      	cmp	r3, #4
 800da66:	d100      	bne.n	800da6a <ModbusStart+0xda>
          {
        	  while(1)
 800da68:	e7fe      	b.n	800da68 <ModbusStart+0xd8>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
<<<<<<< HEAD
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	7a1b      	ldrb	r3, [r3, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d104      	bne.n	800d65c <ModbusStart+0xec>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	2b03      	cmp	r3, #3
 800d658:	d100      	bne.n	800d65c <ModbusStart+0xec>
          {
             	  while(1)
 800d65a:	e7fe      	b.n	800d65a <ModbusStart+0xea>
=======
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	7a1b      	ldrb	r3, [r3, #8]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d104      	bne.n	800da7c <ModbusStart+0xec>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	2b03      	cmp	r3, #3
 800da78:	d100      	bne.n	800da7c <ModbusStart+0xec>
          {
             	  while(1)
 800da7a:	e7fe      	b.n	800da7a <ModbusStart+0xea>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
<<<<<<< HEAD
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

}
 800d690:	bf00      	nop
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af02      	add	r7, sp, #8
 800d69e:	6078      	str	r0, [r7, #4]
=======
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

}
 800dab0:	bf00      	nop
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af02      	add	r7, sp, #8
 800dabe:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
<<<<<<< HEAD
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	60fb      	str	r3, [r7, #12]
 800d6a4:	e02a      	b.n	800d6fc <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800d6a6:	4a1b      	ldr	r2, [pc, #108]	; (800d714 <vTimerCallbackT35+0x7c>)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d11e      	bne.n	800d6f6 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800d6b8:	4a16      	ldr	r2, [pc, #88]	; (800d714 <vTimerCallbackT35+0x7c>)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	2b04      	cmp	r3, #4
 800d6c4:	d10c      	bne.n	800d6e0 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800d6c6:	4a13      	ldr	r2, [pc, #76]	; (800d714 <vTimerCallbackT35+0x7c>)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ce:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	2200      	movs	r2, #0
 800d6da:	2103      	movs	r1, #3
 800d6dc:	f7fe fe7c 	bl	800c3d8 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800d6e0:	4a0c      	ldr	r2, [pc, #48]	; (800d714 <vTimerCallbackT35+0x7c>)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6e8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	2203      	movs	r2, #3
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	f7fe fba7 	bl	800be44 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	60fb      	str	r3, [r7, #12]
 800d6fc:	4b06      	ldr	r3, [pc, #24]	; (800d718 <vTimerCallbackT35+0x80>)
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	461a      	mov	r2, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	4293      	cmp	r3, r2
 800d706:	dbce      	blt.n	800d6a6 <vTimerCallbackT35+0xe>
=======
 800dac0:	2300      	movs	r3, #0
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	e02a      	b.n	800db1c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800dac6:	4a1b      	ldr	r2, [pc, #108]	; (800db34 <vTimerCallbackT35+0x7c>)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dace:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d11e      	bne.n	800db16 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800dad8:	4a16      	ldr	r2, [pc, #88]	; (800db34 <vTimerCallbackT35+0x7c>)
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	2b04      	cmp	r3, #4
 800dae4:	d10c      	bne.n	800db00 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800dae6:	4a13      	ldr	r2, [pc, #76]	; (800db34 <vTimerCallbackT35+0x7c>)
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daee:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800daf2:	2300      	movs	r3, #0
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	2300      	movs	r3, #0
 800daf8:	2200      	movs	r2, #0
 800dafa:	2103      	movs	r1, #3
 800dafc:	f7fe fea0 	bl	800c840 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800db00:	4a0c      	ldr	r2, [pc, #48]	; (800db34 <vTimerCallbackT35+0x7c>)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db08:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800db0c:	2300      	movs	r3, #0
 800db0e:	2203      	movs	r2, #3
 800db10:	2100      	movs	r1, #0
 800db12:	f7fe fc09 	bl	800c328 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3301      	adds	r3, #1
 800db1a:	60fb      	str	r3, [r7, #12]
 800db1c:	4b06      	ldr	r3, [pc, #24]	; (800db38 <vTimerCallbackT35+0x80>)
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	461a      	mov	r2, r3
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	4293      	cmp	r3, r2
 800db26:	dbce      	blt.n	800dac6 <vTimerCallbackT35+0xe>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}

	}
}
<<<<<<< HEAD
 800d708:	bf00      	nop
 800d70a:	bf00      	nop
 800d70c:	3710      	adds	r7, #16
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	2000211c 	.word	0x2000211c
 800d718:	20002124 	.word	0x20002124

0800d71c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
=======
 800db28:	bf00      	nop
 800db2a:	bf00      	nop
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	20002104 	.word	0x20002104
 800db38:	2000210c 	.word	0x2000210c

0800db3c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
<<<<<<< HEAD
 800d724:	2300      	movs	r3, #0
 800d726:	60fb      	str	r3, [r7, #12]
 800d728:	e017      	b.n	800d75a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800d72a:	4a11      	ldr	r2, [pc, #68]	; (800d770 <vTimerCallbackTimeout+0x54>)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d732:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d10b      	bne.n	800d754 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800d73c:	4a0c      	ldr	r2, [pc, #48]	; (800d770 <vTimerCallbackTimeout+0x54>)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d744:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d748:	2300      	movs	r3, #0
 800d74a:	2203      	movs	r2, #3
 800d74c:	f06f 0107 	mvn.w	r1, #7
 800d750:	f7fe fb78 	bl	800be44 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	3301      	adds	r3, #1
 800d758:	60fb      	str	r3, [r7, #12]
 800d75a:	4b06      	ldr	r3, [pc, #24]	; (800d774 <vTimerCallbackTimeout+0x58>)
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	461a      	mov	r2, r3
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	4293      	cmp	r3, r2
 800d764:	dbe1      	blt.n	800d72a <vTimerCallbackTimeout+0xe>
=======
 800db44:	2300      	movs	r3, #0
 800db46:	60fb      	str	r3, [r7, #12]
 800db48:	e017      	b.n	800db7a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800db4a:	4a11      	ldr	r2, [pc, #68]	; (800db90 <vTimerCallbackTimeout+0x54>)
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db52:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d10b      	bne.n	800db74 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800db5c:	4a0c      	ldr	r2, [pc, #48]	; (800db90 <vTimerCallbackTimeout+0x54>)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db64:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800db68:	2300      	movs	r3, #0
 800db6a:	2203      	movs	r2, #3
 800db6c:	f06f 0107 	mvn.w	r1, #7
 800db70:	f7fe fbda 	bl	800c328 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	3301      	adds	r3, #1
 800db78:	60fb      	str	r3, [r7, #12]
 800db7a:	4b06      	ldr	r3, [pc, #24]	; (800db94 <vTimerCallbackTimeout+0x58>)
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	461a      	mov	r2, r3
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	4293      	cmp	r3, r2
 800db84:	dbe1      	blt.n	800db4a <vTimerCallbackTimeout+0xe>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
		}

	}

}
<<<<<<< HEAD
 800d766:	bf00      	nop
 800d768:	bf00      	nop
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	2000211c 	.word	0x2000211c
 800d774:	20002124 	.word	0x20002124

0800d778 <StartTaskModbusSlave>:
=======
 800db86:	bf00      	nop
 800db88:	bf00      	nop
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	20002104 	.word	0x20002104
 800db94:	2000210c 	.word	0x2000210c

0800db98 <StartTaskModbusSlave>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa


void StartTaskModbusSlave(void *argument)
{
<<<<<<< HEAD
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	60fb      	str	r3, [r7, #12]
=======
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
<<<<<<< HEAD
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2200      	movs	r2, #0
 800d788:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d790:	2b01      	cmp	r3, #1
 800d792:	d004      	beq.n	800d79e <StartTaskModbusSlave+0x26>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d79a:	2b04      	cmp	r3, #4
 800d79c:	d117      	bne.n	800d7ce <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800d79e:	f04f 31ff 	mov.w	r1, #4294967295
 800d7a2:	2001      	movs	r0, #1
 800d7a4:	f7fe faac 	bl	800bd00 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f000 fc21 	bl	800dff0 <getRxBuffer>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	f113 0f03 	cmn.w	r3, #3
 800d7b4:	d10b      	bne.n	800d7ce <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	22fd      	movs	r2, #253	; 0xfd
 800d7ba:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  continue;
 800d7cc:	e0b7      	b.n	800d93e <StartTaskModbusSlave+0x1c6>
=======
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d004      	beq.n	800dbbe <StartTaskModbusSlave+0x26>
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dbba:	2b04      	cmp	r3, #4
 800dbbc:	d117      	bne.n	800dbee <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800dbbe:	f04f 31ff 	mov.w	r1, #4294967295
 800dbc2:	2001      	movs	r0, #1
 800dbc4:	f7fe fb0e 	bl	800c1e4 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	f000 fc21 	bl	800e410 <getRxBuffer>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	f113 0f03 	cmn.w	r3, #3
 800dbd4:	d10b      	bne.n	800dbee <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	22fd      	movs	r2, #253	; 0xfd
 800dbda:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  continue;
 800dbec:	e0b7      	b.n	800dd5e <StartTaskModbusSlave+0x1c6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	  }
   }

   if (modH->u8BufferSize < 7)
<<<<<<< HEAD
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d7d4:	2b06      	cmp	r3, #6
 800d7d6:	d80b      	bhi.n	800d7f0 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	22fa      	movs	r2, #250	; 0xfa
 800d7dc:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	  continue;
 800d7ee:	e0a6      	b.n	800d93e <StartTaskModbusSlave+0x1c6>
=======
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbf4:	2b06      	cmp	r3, #6
 800dbf6:	d80b      	bhi.n	800dc10 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	22fa      	movs	r2, #250	; 0xfa
 800dbfc:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dc04:	3301      	adds	r3, #1
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	  continue;
 800dc0e:	e0a6      	b.n	800dd5e <StartTaskModbusSlave+0x1c6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
<<<<<<< HEAD
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	7cda      	ldrb	r2, [r3, #19]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	7a1b      	ldrb	r3, [r3, #8]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	f040 809f 	bne.w	800d93c <StartTaskModbusSlave+0x1c4>
=======
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	7cda      	ldrb	r2, [r3, #19]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	7a1b      	ldrb	r3, [r3, #8]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	f040 809f 	bne.w	800dd5c <StartTaskModbusSlave+0x1c4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
<<<<<<< HEAD
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f000 fc40 	bl	800e084 <validateRequest>
 800d804:	4603      	mov	r3, r0
 800d806:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800d808:	7afb      	ldrb	r3, [r7, #11]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00c      	beq.n	800d828 <StartTaskModbusSlave+0xb0>
=======
 800dc1e:	68f8      	ldr	r0, [r7, #12]
 800dc20:	f000 fc40 	bl	800e4a4 <validateRequest>
 800dc24:	4603      	mov	r3, r0
 800dc26:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800dc28:	7afb      	ldrb	r3, [r7, #11]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00c      	beq.n	800dc48 <StartTaskModbusSlave+0xb0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
<<<<<<< HEAD
 800d80e:	7afb      	ldrb	r3, [r7, #11]
 800d810:	68f9      	ldr	r1, [r7, #12]
 800d812:	4618      	mov	r0, r3
 800d814:	f000 fdda 	bl	800e3cc <buildException>
			sendTxBuffer(modH);
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f000 fdf6 	bl	800e40a <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800d81e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800d826:	e08a      	b.n	800d93e <StartTaskModbusSlave+0x1c6>
	 }

	 modH->i8lastError = 0;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2200      	movs	r2, #0
 800d82c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d834:	f04f 31ff 	mov.w	r1, #4294967295
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fc ffc7 	bl	800a7cc <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	7d1b      	ldrb	r3, [r3, #20]
 800d842:	3b01      	subs	r3, #1
 800d844:	2b0f      	cmp	r3, #15
 800d846:	d86f      	bhi.n	800d928 <StartTaskModbusSlave+0x1b0>
 800d848:	a201      	add	r2, pc, #4	; (adr r2, 800d850 <StartTaskModbusSlave+0xd8>)
 800d84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84e:	bf00      	nop
 800d850:	0800d891 	.word	0x0800d891
 800d854:	0800d8a5 	.word	0x0800d8a5
 800d858:	0800d8b9 	.word	0x0800d8b9
 800d85c:	0800d8cd 	.word	0x0800d8cd
 800d860:	0800d8e1 	.word	0x0800d8e1
 800d864:	0800d8f3 	.word	0x0800d8f3
 800d868:	0800d929 	.word	0x0800d929
 800d86c:	0800d929 	.word	0x0800d929
 800d870:	0800d929 	.word	0x0800d929
 800d874:	0800d929 	.word	0x0800d929
 800d878:	0800d929 	.word	0x0800d929
 800d87c:	0800d929 	.word	0x0800d929
 800d880:	0800d929 	.word	0x0800d929
 800d884:	0800d929 	.word	0x0800d929
 800d888:	0800d905 	.word	0x0800d905
 800d88c:	0800d917 	.word	0x0800d917
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH,DB_COILS);
 800d890:	2101      	movs	r1, #1
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f000 fe5b 	bl	800e54e <process_FC1>
 800d898:	4603      	mov	r3, r0
 800d89a:	461a      	mov	r2, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d8a2:	e042      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH,DB_INPUT_COILS);
 800d8a4:	2102      	movs	r1, #2
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f000 fe51 	bl	800e54e <process_FC1>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d8b6:	e038      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_REGISTERS:
				modH->i8state = process_FC3(modH,DB_HOLDING_REGISTER);
 800d8b8:	2103      	movs	r1, #3
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f000 ff03 	bl	800e6c6 <process_FC3>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d8ca:	e02e      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC3(modH,DB_INPUT_REGISTERS);
 800d8cc:	2104      	movs	r1, #4
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f000 fef9 	bl	800e6c6 <process_FC3>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d8de:	e024      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f000 ff68 	bl	800e7b6 <process_FC5>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d8f0:	e01b      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f000 ffb8 	bl	800e868 <process_FC6>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d902:	e012      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800d904:	68f8      	ldr	r0, [r7, #12]
 800d906:	f000 ffe1 	bl	800e8cc <process_FC15>
 800d90a:	4603      	mov	r3, r0
 800d90c:	461a      	mov	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d914:	e009      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f001 f866 	bl	800e9e8 <process_FC16>
 800d91c:	4603      	mov	r3, r0
 800d91e:	461a      	mov	r2, r3
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d926:	e000      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			default:
				break;
 800d928:	bf00      	nop
=======
 800dc2e:	7afb      	ldrb	r3, [r7, #11]
 800dc30:	68f9      	ldr	r1, [r7, #12]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 fdda 	bl	800e7ec <buildException>
			sendTxBuffer(modH);
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f000 fdf6 	bl	800e82a <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800dc3e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800dc46:	e08a      	b.n	800dd5e <StartTaskModbusSlave+0x1c6>
	 }

	 modH->i8lastError = 0;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dc54:	f04f 31ff 	mov.w	r1, #4294967295
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7fd f829 	bl	800acb0 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	7d1b      	ldrb	r3, [r3, #20]
 800dc62:	3b01      	subs	r3, #1
 800dc64:	2b0f      	cmp	r3, #15
 800dc66:	d86f      	bhi.n	800dd48 <StartTaskModbusSlave+0x1b0>
 800dc68:	a201      	add	r2, pc, #4	; (adr r2, 800dc70 <StartTaskModbusSlave+0xd8>)
 800dc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6e:	bf00      	nop
 800dc70:	0800dcb1 	.word	0x0800dcb1
 800dc74:	0800dcc5 	.word	0x0800dcc5
 800dc78:	0800dcd9 	.word	0x0800dcd9
 800dc7c:	0800dced 	.word	0x0800dced
 800dc80:	0800dd01 	.word	0x0800dd01
 800dc84:	0800dd13 	.word	0x0800dd13
 800dc88:	0800dd49 	.word	0x0800dd49
 800dc8c:	0800dd49 	.word	0x0800dd49
 800dc90:	0800dd49 	.word	0x0800dd49
 800dc94:	0800dd49 	.word	0x0800dd49
 800dc98:	0800dd49 	.word	0x0800dd49
 800dc9c:	0800dd49 	.word	0x0800dd49
 800dca0:	0800dd49 	.word	0x0800dd49
 800dca4:	0800dd49 	.word	0x0800dd49
 800dca8:	0800dd25 	.word	0x0800dd25
 800dcac:	0800dd37 	.word	0x0800dd37
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH,DB_COILS);
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f000 fe5b 	bl	800e96e <process_FC1>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	461a      	mov	r2, r3
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dcc2:	e042      	b.n	800dd4a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH,DB_INPUT_COILS);
 800dcc4:	2102      	movs	r1, #2
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f000 fe51 	bl	800e96e <process_FC1>
 800dccc:	4603      	mov	r3, r0
 800dcce:	461a      	mov	r2, r3
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dcd6:	e038      	b.n	800dd4a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_REGISTERS:
				modH->i8state = process_FC3(modH,DB_HOLDING_REGISTER);
 800dcd8:	2103      	movs	r1, #3
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	f000 ff03 	bl	800eae6 <process_FC3>
 800dce0:	4603      	mov	r3, r0
 800dce2:	461a      	mov	r2, r3
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dcea:	e02e      	b.n	800dd4a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC3(modH,DB_INPUT_REGISTERS);
 800dcec:	2104      	movs	r1, #4
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f000 fef9 	bl	800eae6 <process_FC3>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dcfe:	e024      	b.n	800dd4a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f000 ff68 	bl	800ebd6 <process_FC5>
 800dd06:	4603      	mov	r3, r0
 800dd08:	461a      	mov	r2, r3
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dd10:	e01b      	b.n	800dd4a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	f000 ffb8 	bl	800ec88 <process_FC6>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dd22:	e012      	b.n	800dd4a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f000 ffe1 	bl	800ecec <process_FC15>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dd34:	e009      	b.n	800dd4a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	f001 f866 	bl	800ee08 <process_FC16>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	461a      	mov	r2, r3
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dd46:	e000      	b.n	800dd4a <StartTaskModbusSlave+0x1b2>
			default:
				break;
 800dd48:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
<<<<<<< HEAD
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800d930:	2300      	movs	r3, #0
 800d932:	2200      	movs	r2, #0
 800d934:	2100      	movs	r1, #0
 800d936:	f7fc fccf 	bl	800a2d8 <xQueueGenericSend>

	 continue;
 800d93a:	e000      	b.n	800d93e <StartTaskModbusSlave+0x1c6>
    	continue;
 800d93c:	bf00      	nop
  {
 800d93e:	e721      	b.n	800d784 <StartTaskModbusSlave+0xc>

0800d940 <SendQuery>:
=======
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800dd50:	2300      	movs	r3, #0
 800dd52:	2200      	movs	r2, #0
 800dd54:	2100      	movs	r1, #0
 800dd56:	f7fc fd31 	bl	800a7bc <xQueueGenericSend>

	 continue;
 800dd5a:	e000      	b.n	800dd5e <StartTaskModbusSlave+0x1c6>
    	continue;
 800dd5c:	bf00      	nop
  {
 800dd5e:	e721      	b.n	800dba4 <StartTaskModbusSlave+0xc>

0800dd60 <SendQuery>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
<<<<<<< HEAD
 800d940:	b084      	sub	sp, #16
 800d942:	b580      	push	{r7, lr}
 800d944:	b084      	sub	sp, #16
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
 800d94a:	f107 001c 	add.w	r0, r7, #28
 800d94e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 800dd60:	b084      	sub	sp, #16
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b084      	sub	sp, #16
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
 800dd6a:	f107 001c 	add.w	r0, r7, #28
 800dd6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
<<<<<<< HEAD
 800d952:	2300      	movs	r3, #0
 800d954:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d95c:	f04f 31ff 	mov.w	r1, #4294967295
 800d960:	4618      	mov	r0, r3
 800d962:	f7fc ff33 	bl	800a7cc <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	7a1b      	ldrb	r3, [r3, #8]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d001      	beq.n	800d972 <SendQuery+0x32>
 800d96e:	23ff      	movs	r3, #255	; 0xff
 800d970:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f993 30b9 	ldrsb.w	r3, [r3, #185]	; 0xb9
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d001      	beq.n	800d980 <SendQuery+0x40>
 800d97c:	23fe      	movs	r3, #254	; 0xfe
 800d97e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800d980:	7f3b      	ldrb	r3, [r7, #28]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d002      	beq.n	800d98c <SendQuery+0x4c>
 800d986:	7f3b      	ldrb	r3, [r7, #28]
 800d988:	2bf7      	cmp	r3, #247	; 0xf7
 800d98a:	d901      	bls.n	800d990 <SendQuery+0x50>
 800d98c:	23f7      	movs	r3, #247	; 0xf7
 800d98e:	73bb      	strb	r3, [r7, #14]


	if(error)
 800d990:	7bbb      	ldrb	r3, [r7, #14]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00e      	beq.n	800d9b4 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800d996:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	f7fc fc95 	bl	800a2d8 <xQueueGenericSend>
		 return error;
 800d9ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9b2:	e147      	b.n	800dc44 <SendQuery+0x304>
=======
 800dd72:	2300      	movs	r3, #0
 800dd74:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dd7c:	f04f 31ff 	mov.w	r1, #4294967295
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fc ff95 	bl	800acb0 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	7a1b      	ldrb	r3, [r3, #8]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d001      	beq.n	800dd92 <SendQuery+0x32>
 800dd8e:	23ff      	movs	r3, #255	; 0xff
 800dd90:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f993 30b9 	ldrsb.w	r3, [r3, #185]	; 0xb9
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d001      	beq.n	800dda0 <SendQuery+0x40>
 800dd9c:	23fe      	movs	r3, #254	; 0xfe
 800dd9e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800dda0:	7f3b      	ldrb	r3, [r7, #28]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d002      	beq.n	800ddac <SendQuery+0x4c>
 800dda6:	7f3b      	ldrb	r3, [r7, #28]
 800dda8:	2bf7      	cmp	r3, #247	; 0xf7
 800ddaa:	d901      	bls.n	800ddb0 <SendQuery+0x50>
 800ddac:	23f7      	movs	r3, #247	; 0xf7
 800ddae:	73bb      	strb	r3, [r7, #14]


	if(error)
 800ddb0:	7bbb      	ldrb	r3, [r7, #14]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00e      	beq.n	800ddd4 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800ddb6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	2100      	movs	r1, #0
 800ddca:	f7fc fcf7 	bl	800a7bc <xQueueGenericSend>
		 return error;
 800ddce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddd2:	e147      	b.n	800e064 <SendQuery+0x304>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}


	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
<<<<<<< HEAD
 800d9b4:	7f7b      	ldrb	r3, [r7, #29]
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d008      	beq.n	800d9cc <SendQuery+0x8c>
 800d9ba:	7f7b      	ldrb	r3, [r7, #29]
 800d9bc:	2b02      	cmp	r3, #2
 800d9be:	d005      	beq.n	800d9cc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800d9c0:	7f7b      	ldrb	r3, [r7, #29]
	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800d9c2:	2b05      	cmp	r3, #5
 800d9c4:	d002      	beq.n	800d9cc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800d9c6:	7f7b      	ldrb	r3, [r7, #29]
 800d9c8:	2b0f      	cmp	r3, #15
 800d9ca:	d104      	bne.n	800d9d6 <SendQuery+0x96>
	{
		modH->u16regsCoils = telegram.u16reg;
 800d9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800d9d4:	e00f      	b.n	800d9f6 <SendQuery+0xb6>
	}
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800d9d6:	7f7b      	ldrb	r3, [r7, #29]
 800d9d8:	2b03      	cmp	r3, #3
 800d9da:	d008      	beq.n	800d9ee <SendQuery+0xae>
 800d9dc:	7f7b      	ldrb	r3, [r7, #29]
 800d9de:	2b04      	cmp	r3, #4
 800d9e0:	d005      	beq.n	800d9ee <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800d9e2:	7f7b      	ldrb	r3, [r7, #29]
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800d9e4:	2b06      	cmp	r3, #6
 800d9e6:	d002      	beq.n	800d9ee <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800d9e8:	7f7b      	ldrb	r3, [r7, #29]
 800d9ea:	2b10      	cmp	r3, #16
 800d9ec:	d103      	bne.n	800d9f6 <SendQuery+0xb6>
	{
		modH->u16regsHR = telegram.u16reg;
 800d9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
=======
 800ddd4:	7f7b      	ldrb	r3, [r7, #29]
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d008      	beq.n	800ddec <SendQuery+0x8c>
 800ddda:	7f7b      	ldrb	r3, [r7, #29]
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	d005      	beq.n	800ddec <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800dde0:	7f7b      	ldrb	r3, [r7, #29]
	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800dde2:	2b05      	cmp	r3, #5
 800dde4:	d002      	beq.n	800ddec <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800dde6:	7f7b      	ldrb	r3, [r7, #29]
 800dde8:	2b0f      	cmp	r3, #15
 800ddea:	d104      	bne.n	800ddf6 <SendQuery+0x96>
	{
		modH->u16regsCoils = telegram.u16reg;
 800ddec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800ddf4:	e00f      	b.n	800de16 <SendQuery+0xb6>
	}
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800ddf6:	7f7b      	ldrb	r3, [r7, #29]
 800ddf8:	2b03      	cmp	r3, #3
 800ddfa:	d008      	beq.n	800de0e <SendQuery+0xae>
 800ddfc:	7f7b      	ldrb	r3, [r7, #29]
 800ddfe:	2b04      	cmp	r3, #4
 800de00:	d005      	beq.n	800de0e <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800de02:	7f7b      	ldrb	r3, [r7, #29]
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800de04:	2b06      	cmp	r3, #6
 800de06:	d002      	beq.n	800de0e <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800de08:	7f7b      	ldrb	r3, [r7, #29]
 800de0a:	2b10      	cmp	r3, #16
 800de0c:	d103      	bne.n	800de16 <SendQuery+0xb6>
	{
		modH->u16regsHR = telegram.u16reg;
 800de0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
<<<<<<< HEAD
 800d9f6:	7f3a      	ldrb	r2, [r7, #28]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800d9fc:	7f7a      	ldrb	r2, [r7, #29]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800da02:	8bfb      	ldrh	r3, [r7, #30]
 800da04:	0a1b      	lsrs	r3, r3, #8
 800da06:	b29b      	uxth	r3, r3
 800da08:	b2da      	uxtb	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800da0e:	8bfb      	ldrh	r3, [r7, #30]
 800da10:	b2da      	uxtb	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800da16:	7f7b      	ldrb	r3, [r7, #29]
 800da18:	3b01      	subs	r3, #1
 800da1a:	2b0f      	cmp	r3, #15
 800da1c:	f200 80ff 	bhi.w	800dc1e <SendQuery+0x2de>
 800da20:	a201      	add	r2, pc, #4	; (adr r2, 800da28 <SendQuery+0xe8>)
 800da22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da26:	bf00      	nop
 800da28:	0800da69 	.word	0x0800da69
 800da2c:	0800da69 	.word	0x0800da69
 800da30:	0800da69 	.word	0x0800da69
 800da34:	0800da69 	.word	0x0800da69
 800da38:	0800da87 	.word	0x0800da87
 800da3c:	0800daa9 	.word	0x0800daa9
 800da40:	0800dc1f 	.word	0x0800dc1f
 800da44:	0800dc1f 	.word	0x0800dc1f
 800da48:	0800dc1f 	.word	0x0800dc1f
 800da4c:	0800dc1f 	.word	0x0800dc1f
 800da50:	0800dc1f 	.word	0x0800dc1f
 800da54:	0800dc1f 	.word	0x0800dc1f
 800da58:	0800dc1f 	.word	0x0800dc1f
 800da5c:	0800dc1f 	.word	0x0800dc1f
 800da60:	0800dacb 	.word	0x0800dacb
 800da64:	0800db89 	.word	0x0800db89
=======
 800de16:	7f3a      	ldrb	r2, [r7, #28]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800de1c:	7f7a      	ldrb	r2, [r7, #29]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800de22:	8bfb      	ldrh	r3, [r7, #30]
 800de24:	0a1b      	lsrs	r3, r3, #8
 800de26:	b29b      	uxth	r3, r3
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800de2e:	8bfb      	ldrh	r3, [r7, #30]
 800de30:	b2da      	uxtb	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800de36:	7f7b      	ldrb	r3, [r7, #29]
 800de38:	3b01      	subs	r3, #1
 800de3a:	2b0f      	cmp	r3, #15
 800de3c:	f200 80ff 	bhi.w	800e03e <SendQuery+0x2de>
 800de40:	a201      	add	r2, pc, #4	; (adr r2, 800de48 <SendQuery+0xe8>)
 800de42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de46:	bf00      	nop
 800de48:	0800de89 	.word	0x0800de89
 800de4c:	0800de89 	.word	0x0800de89
 800de50:	0800de89 	.word	0x0800de89
 800de54:	0800de89 	.word	0x0800de89
 800de58:	0800dea7 	.word	0x0800dea7
 800de5c:	0800dec9 	.word	0x0800dec9
 800de60:	0800e03f 	.word	0x0800e03f
 800de64:	0800e03f 	.word	0x0800e03f
 800de68:	0800e03f 	.word	0x0800e03f
 800de6c:	0800e03f 	.word	0x0800e03f
 800de70:	0800e03f 	.word	0x0800e03f
 800de74:	0800e03f 	.word	0x0800e03f
 800de78:	0800e03f 	.word	0x0800e03f
 800de7c:	0800e03f 	.word	0x0800e03f
 800de80:	0800deeb 	.word	0x0800deeb
 800de84:	0800dfa9 	.word	0x0800dfa9
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
<<<<<<< HEAD
 800da68:	8c3b      	ldrh	r3, [r7, #32]
 800da6a:	0a1b      	lsrs	r3, r3, #8
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	b2da      	uxtb	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800da74:	8c3b      	ldrh	r3, [r7, #32]
 800da76:	b2da      	uxtb	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2206      	movs	r2, #6
 800da80:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800da84:	e0cb      	b.n	800dc1e <SendQuery+0x2de>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800da86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d001      	beq.n	800da92 <SendQuery+0x152>
 800da8e:	22ff      	movs	r2, #255	; 0xff
 800da90:	e000      	b.n	800da94 <SendQuery+0x154>
 800da92:	2200      	movs	r2, #0
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2206      	movs	r2, #6
 800daa2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800daa6:	e0ba      	b.n	800dc1e <SendQuery+0x2de>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daaa:	881b      	ldrh	r3, [r3, #0]
 800daac:	0a1b      	lsrs	r3, r3, #8
 800daae:	b29b      	uxth	r3, r3
 800dab0:	b2da      	uxtb	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab8:	881b      	ldrh	r3, [r3, #0]
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2206      	movs	r2, #6
 800dac4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800dac8:	e0a9      	b.n	800dc1e <SendQuery+0x2de>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800daca:	8c3b      	ldrh	r3, [r7, #32]
 800dacc:	091b      	lsrs	r3, r3, #4
 800dace:	b29b      	uxth	r3, r3
 800dad0:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800dad2:	7a7b      	ldrb	r3, [r7, #9]
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800dad8:	8c3b      	ldrh	r3, [r7, #32]
 800dada:	f003 030f 	and.w	r3, r3, #15
 800dade:	b29b      	uxth	r3, r3
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d005      	beq.n	800daf0 <SendQuery+0x1b0>
	    {
	        u8bytesno++;
 800dae4:	7bfb      	ldrb	r3, [r7, #15]
 800dae6:	3301      	adds	r3, #1
 800dae8:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800daea:	7a7b      	ldrb	r3, [r7, #9]
 800daec:	3301      	adds	r3, #1
 800daee:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800daf0:	8c3b      	ldrh	r3, [r7, #32]
 800daf2:	0a1b      	lsrs	r3, r3, #8
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800dafc:	8c3b      	ldrh	r3, [r7, #32]
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	7bfa      	ldrb	r2, [r7, #15]
 800db08:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2207      	movs	r2, #7
 800db0e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800db12:	2300      	movs	r3, #0
 800db14:	81bb      	strh	r3, [r7, #12]
 800db16:	e031      	b.n	800db7c <SendQuery+0x23c>
	    {
	        if(i%2)
 800db18:	89bb      	ldrh	r3, [r7, #12]
 800db1a:	f003 0301 	and.w	r3, r3, #1
 800db1e:	b29b      	uxth	r3, r3
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00f      	beq.n	800db44 <SendQuery+0x204>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800db24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db26:	89bb      	ldrh	r3, [r7, #12]
 800db28:	085b      	lsrs	r3, r3, #1
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	005b      	lsls	r3, r3, #1
 800db2e:	4413      	add	r3, r2
 800db30:	881a      	ldrh	r2, [r3, #0]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800db38:	4619      	mov	r1, r3
 800db3a:	b2d2      	uxtb	r2, r2
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	440b      	add	r3, r1
 800db40:	74da      	strb	r2, [r3, #19]
 800db42:	e010      	b.n	800db66 <SendQuery+0x226>
=======
 800de88:	8c3b      	ldrh	r3, [r7, #32]
 800de8a:	0a1b      	lsrs	r3, r3, #8
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	b2da      	uxtb	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800de94:	8c3b      	ldrh	r3, [r7, #32]
 800de96:	b2da      	uxtb	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2206      	movs	r2, #6
 800dea0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800dea4:	e0cb      	b.n	800e03e <SendQuery+0x2de>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800dea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea8:	881b      	ldrh	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <SendQuery+0x152>
 800deae:	22ff      	movs	r2, #255	; 0xff
 800deb0:	e000      	b.n	800deb4 <SendQuery+0x154>
 800deb2:	2200      	movs	r2, #0
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2200      	movs	r2, #0
 800debc:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2206      	movs	r2, #6
 800dec2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800dec6:	e0ba      	b.n	800e03e <SendQuery+0x2de>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800dec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deca:	881b      	ldrh	r3, [r3, #0]
 800decc:	0a1b      	lsrs	r3, r3, #8
 800dece:	b29b      	uxth	r3, r3
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800ded6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2206      	movs	r2, #6
 800dee4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800dee8:	e0a9      	b.n	800e03e <SendQuery+0x2de>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800deea:	8c3b      	ldrh	r3, [r7, #32]
 800deec:	091b      	lsrs	r3, r3, #4
 800deee:	b29b      	uxth	r3, r3
 800def0:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800def2:	7a7b      	ldrb	r3, [r7, #9]
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800def8:	8c3b      	ldrh	r3, [r7, #32]
 800defa:	f003 030f 	and.w	r3, r3, #15
 800defe:	b29b      	uxth	r3, r3
 800df00:	2b00      	cmp	r3, #0
 800df02:	d005      	beq.n	800df10 <SendQuery+0x1b0>
	    {
	        u8bytesno++;
 800df04:	7bfb      	ldrb	r3, [r7, #15]
 800df06:	3301      	adds	r3, #1
 800df08:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800df0a:	7a7b      	ldrb	r3, [r7, #9]
 800df0c:	3301      	adds	r3, #1
 800df0e:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800df10:	8c3b      	ldrh	r3, [r7, #32]
 800df12:	0a1b      	lsrs	r3, r3, #8
 800df14:	b29b      	uxth	r3, r3
 800df16:	b2da      	uxtb	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800df1c:	8c3b      	ldrh	r3, [r7, #32]
 800df1e:	b2da      	uxtb	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	7bfa      	ldrb	r2, [r7, #15]
 800df28:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2207      	movs	r2, #7
 800df2e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800df32:	2300      	movs	r3, #0
 800df34:	81bb      	strh	r3, [r7, #12]
 800df36:	e031      	b.n	800df9c <SendQuery+0x23c>
	    {
	        if(i%2)
 800df38:	89bb      	ldrh	r3, [r7, #12]
 800df3a:	f003 0301 	and.w	r3, r3, #1
 800df3e:	b29b      	uxth	r3, r3
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00f      	beq.n	800df64 <SendQuery+0x204>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800df44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df46:	89bb      	ldrh	r3, [r7, #12]
 800df48:	085b      	lsrs	r3, r3, #1
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	005b      	lsls	r3, r3, #1
 800df4e:	4413      	add	r3, r2
 800df50:	881a      	ldrh	r2, [r3, #0]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df58:	4619      	mov	r1, r3
 800df5a:	b2d2      	uxtb	r2, r2
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	440b      	add	r3, r1
 800df60:	74da      	strb	r2, [r3, #19]
 800df62:	e010      	b.n	800df86 <SendQuery+0x226>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
<<<<<<< HEAD
 800db44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db46:	89bb      	ldrh	r3, [r7, #12]
 800db48:	085b      	lsrs	r3, r3, #1
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	005b      	lsls	r3, r3, #1
 800db4e:	4413      	add	r3, r2
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	0a1b      	lsrs	r3, r3, #8
 800db54:	b29a      	uxth	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800db5c:	4619      	mov	r1, r3
 800db5e:	b2d2      	uxtb	r2, r2
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	440b      	add	r3, r1
 800db64:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800db6c:	3301      	adds	r3, #1
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800db76:	89bb      	ldrh	r3, [r7, #12]
 800db78:	3301      	adds	r3, #1
 800db7a:	81bb      	strh	r3, [r7, #12]
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	b29b      	uxth	r3, r3
 800db80:	89ba      	ldrh	r2, [r7, #12]
 800db82:	429a      	cmp	r2, r3
 800db84:	d3c8      	bcc.n	800db18 <SendQuery+0x1d8>
	    }
	    break;
 800db86:	e04a      	b.n	800dc1e <SendQuery+0x2de>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800db88:	8c3b      	ldrh	r3, [r7, #32]
 800db8a:	0a1b      	lsrs	r3, r3, #8
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800db94:	8c3b      	ldrh	r3, [r7, #32]
 800db96:	b2da      	uxtb	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800db9c:	8c3b      	ldrh	r3, [r7, #32]
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	005b      	lsls	r3, r3, #1
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2207      	movs	r2, #7
 800dbac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	817b      	strh	r3, [r7, #10]
 800dbb4:	e02e      	b.n	800dc14 <SendQuery+0x2d4>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800dbb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbb8:	897b      	ldrh	r3, [r7, #10]
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	4413      	add	r3, r2
 800dbbe:	881b      	ldrh	r3, [r3, #0]
 800dbc0:	0a1b      	lsrs	r3, r3, #8
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbca:	4619      	mov	r1, r3
 800dbcc:	b2d2      	uxtb	r2, r2
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	440b      	add	r3, r1
 800dbd2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbda:	3301      	adds	r3, #1
 800dbdc:	b2da      	uxtb	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800dbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbe6:	897b      	ldrh	r3, [r7, #10]
 800dbe8:	005b      	lsls	r3, r3, #1
 800dbea:	4413      	add	r3, r2
 800dbec:	881a      	ldrh	r2, [r3, #0]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	b2d2      	uxtb	r2, r2
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	440b      	add	r3, r1
 800dbfc:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc04:	3301      	adds	r3, #1
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800dc0e:	897b      	ldrh	r3, [r7, #10]
 800dc10:	3301      	adds	r3, #1
 800dc12:	817b      	strh	r3, [r7, #10]
 800dc14:	8c3b      	ldrh	r3, [r7, #32]
 800dc16:	897a      	ldrh	r2, [r7, #10]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d3cc      	bcc.n	800dbb6 <SendQuery+0x276>
	    }
	    break;
 800dc1c:	bf00      	nop
=======
 800df64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df66:	89bb      	ldrh	r3, [r7, #12]
 800df68:	085b      	lsrs	r3, r3, #1
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	005b      	lsls	r3, r3, #1
 800df6e:	4413      	add	r3, r2
 800df70:	881b      	ldrh	r3, [r3, #0]
 800df72:	0a1b      	lsrs	r3, r3, #8
 800df74:	b29a      	uxth	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df7c:	4619      	mov	r1, r3
 800df7e:	b2d2      	uxtb	r2, r2
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	440b      	add	r3, r1
 800df84:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df8c:	3301      	adds	r3, #1
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800df96:	89bb      	ldrh	r3, [r7, #12]
 800df98:	3301      	adds	r3, #1
 800df9a:	81bb      	strh	r3, [r7, #12]
 800df9c:	7bfb      	ldrb	r3, [r7, #15]
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	89ba      	ldrh	r2, [r7, #12]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d3c8      	bcc.n	800df38 <SendQuery+0x1d8>
	    }
	    break;
 800dfa6:	e04a      	b.n	800e03e <SendQuery+0x2de>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800dfa8:	8c3b      	ldrh	r3, [r7, #32]
 800dfaa:	0a1b      	lsrs	r3, r3, #8
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	b2da      	uxtb	r2, r3
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800dfb4:	8c3b      	ldrh	r3, [r7, #32]
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800dfbc:	8c3b      	ldrh	r3, [r7, #32]
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2207      	movs	r2, #7
 800dfcc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	817b      	strh	r3, [r7, #10]
 800dfd4:	e02e      	b.n	800e034 <SendQuery+0x2d4>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800dfd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfd8:	897b      	ldrh	r3, [r7, #10]
 800dfda:	005b      	lsls	r3, r3, #1
 800dfdc:	4413      	add	r3, r2
 800dfde:	881b      	ldrh	r3, [r3, #0]
 800dfe0:	0a1b      	lsrs	r3, r3, #8
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dfea:	4619      	mov	r1, r3
 800dfec:	b2d2      	uxtb	r2, r2
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	440b      	add	r3, r1
 800dff2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dffa:	3301      	adds	r3, #1
 800dffc:	b2da      	uxtb	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800e004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e006:	897b      	ldrh	r3, [r7, #10]
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	4413      	add	r3, r2
 800e00c:	881a      	ldrh	r2, [r3, #0]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e014:	4619      	mov	r1, r3
 800e016:	b2d2      	uxtb	r2, r2
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	440b      	add	r3, r1
 800e01c:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e024:	3301      	adds	r3, #1
 800e026:	b2da      	uxtb	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800e02e:	897b      	ldrh	r3, [r7, #10]
 800e030:	3301      	adds	r3, #1
 800e032:	817b      	strh	r3, [r7, #10]
 800e034:	8c3b      	ldrh	r3, [r7, #32]
 800e036:	897a      	ldrh	r2, [r7, #10]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d3cc      	bcc.n	800dfd6 <SendQuery+0x276>
	    }
	    break;
 800e03c:	bf00      	nop
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	}


	sendTxBuffer(modH);
<<<<<<< HEAD
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 fbf3 	bl	800e40a <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	2100      	movs	r1, #0
 800dc30:	f7fc fb52 	bl	800a2d8 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	modH->i8lastError = 0;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	749a      	strb	r2, [r3, #18]
	return 0;
 800dc42:	2300      	movs	r3, #0


}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc4e:	b004      	add	sp, #16
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop

0800dc54 <StartTaskModbusMaster>:
=======
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 fbf3 	bl	800e82a <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e04a:	2300      	movs	r3, #0
 800e04c:	2200      	movs	r2, #0
 800e04e:	2100      	movs	r1, #0
 800e050:	f7fc fbb4 	bl	800a7bc <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2201      	movs	r2, #1
 800e058:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	modH->i8lastError = 0;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	749a      	strb	r2, [r3, #18]
	return 0;
 800e062:	2300      	movs	r3, #0


}
 800e064:	4618      	mov	r0, r3
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e06e:	b004      	add	sp, #16
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop

0800e074 <StartTaskModbusMaster>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa


void StartTaskModbusMaster(void *argument)
{
<<<<<<< HEAD
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b08c      	sub	sp, #48	; 0x30
 800dc58:	af02      	add	r7, sp, #8
 800dc5a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800e074:	b580      	push	{r7, lr}
 800e076:	b08c      	sub	sp, #48	; 0x30
 800e078:	af02      	add	r7, sp, #8
 800e07a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
<<<<<<< HEAD
 800dc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dc66:	f107 010c 	add.w	r1, r7, #12
 800dc6a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fc fccc 	bl	800a60c <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	f107 030c 	add.w	r3, r7, #12
 800dc7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc80:	f7ff fe5e 	bl	800d940 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800dc84:	f04f 31ff 	mov.w	r1, #4294967295
 800dc88:	2001      	movs	r0, #1
 800dc8a:	f7fe f839 	bl	800bd00 <ulTaskNotifyTake>
 800dc8e:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800dc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc92:	2200      	movs	r2, #0
 800dc94:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800dc96:	6a3b      	ldr	r3, [r7, #32]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d018      	beq.n	800dcce <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    	  modH->i8lastError = ERR_TIME_OUT;
 800dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca6:	22f8      	movs	r2, #248	; 0xf8
 800dca8:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dcba:	69b8      	ldr	r0, [r7, #24]
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	2203      	movs	r2, #3
 800dcc8:	f7fe f8bc 	bl	800be44 <xTaskGenericNotify>
    	  continue;
 800dccc:	e09a      	b.n	800de04 <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800dcce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcd0:	f000 f98e 	bl	800dff0 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dcda:	2b05      	cmp	r3, #5
 800dcdc:	d818      	bhi.n	800dd10 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce0:	2200      	movs	r2, #0
 800dce2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		  modH->i8lastError = ERR_BAD_SIZE;
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	22fa      	movs	r2, #250	; 0xfa
 800dcea:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dcfc:	69b8      	ldr	r0, [r7, #24]
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd00:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dd04:	4619      	mov	r1, r3
 800dd06:	2300      	movs	r3, #0
 800dd08:	2203      	movs	r2, #3
 800dd0a:	f7fe f89b 	bl	800be44 <xTaskGenericNotify>
		  continue;
 800dd0e:	e079      	b.n	800de04 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800dd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd12:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800dd16:	2300      	movs	r3, #0
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	2103      	movs	r1, #3
 800dd20:	f7fe fb5a 	bl	800c3d8 <xTimerGenericCommand>
=======
 800e080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e082:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e086:	f107 010c 	add.w	r1, r7, #12
 800e08a:	f04f 32ff 	mov.w	r2, #4294967295
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fc fd2e 	bl	800aaf0 <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800e094:	69bb      	ldr	r3, [r7, #24]
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	f107 030c 	add.w	r3, r7, #12
 800e09c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e09e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0a0:	f7ff fe5e 	bl	800dd60 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800e0a4:	f04f 31ff 	mov.w	r1, #4294967295
 800e0a8:	2001      	movs	r0, #1
 800e0aa:	f7fe f89b 	bl	800c1e4 <ulTaskNotifyTake>
 800e0ae:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d018      	beq.n	800e0ee <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    	  modH->i8lastError = ERR_TIME_OUT;
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c6:	22f8      	movs	r2, #248	; 0xf8
 800e0c8:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0cc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e0da:	69b8      	ldr	r0, [r7, #24]
 800e0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0de:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	2203      	movs	r2, #3
 800e0e8:	f7fe f91e 	bl	800c328 <xTaskGenericNotify>
    	  continue;
 800e0ec:	e09a      	b.n	800e224 <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800e0ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0f0:	f000 f98e 	bl	800e410 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e0fa:	2b05      	cmp	r3, #5
 800e0fc:	d818      	bhi.n	800e130 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800e0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e100:	2200      	movs	r2, #0
 800e102:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		  modH->i8lastError = ERR_BAD_SIZE;
 800e106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e108:	22fa      	movs	r2, #250	; 0xfa
 800e10a:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e112:	3301      	adds	r3, #1
 800e114:	b29a      	uxth	r2, r3
 800e116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e118:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e11c:	69b8      	ldr	r0, [r7, #24]
 800e11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e120:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e124:	4619      	mov	r1, r3
 800e126:	2300      	movs	r3, #0
 800e128:	2203      	movs	r2, #3
 800e12a:	f7fe f8fd 	bl	800c328 <xTaskGenericNotify>
		  continue;
 800e12e:	e079      	b.n	800e224 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800e130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e132:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800e136:	2300      	movs	r3, #0
 800e138:	9300      	str	r3, [sp, #0]
 800e13a:	2300      	movs	r3, #0
 800e13c:	2200      	movs	r2, #0
 800e13e:	2103      	movs	r1, #3
 800e140:	f7fe fb7e 	bl	800c840 <xTimerGenericCommand>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
<<<<<<< HEAD
 800dd24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd26:	f000 f8f5 	bl	800df14 <validateAnswer>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800dd2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d010      	beq.n	800dd58 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800dd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
         modH->i8lastError = u8exception;
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd40:	7ffa      	ldrb	r2, [r7, #31]
 800dd42:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dd44:	69b8      	ldr	r0, [r7, #24]
 800dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd48:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	2300      	movs	r3, #0
 800dd50:	2203      	movs	r2, #3
 800dd52:	f7fe f877 	bl	800be44 <xTaskGenericNotify>
	     continue;
 800dd56:	e055      	b.n	800de04 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5a:	7ffa      	ldrb	r2, [r7, #31]
 800dd5c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd60:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dd64:	f04f 31ff 	mov.w	r1, #4294967295
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fc fd2f 	bl	800a7cc <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	7d1b      	ldrb	r3, [r3, #20]
 800dd72:	3b01      	subs	r3, #1
 800dd74:	2b0f      	cmp	r3, #15
 800dd76:	d82b      	bhi.n	800ddd0 <StartTaskModbusMaster+0x17c>
 800dd78:	a201      	add	r2, pc, #4	; (adr r2, 800dd80 <StartTaskModbusMaster+0x12c>)
 800dd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7e:	bf00      	nop
 800dd80:	0800ddc1 	.word	0x0800ddc1
 800dd84:	0800ddc1 	.word	0x0800ddc1
 800dd88:	0800ddc9 	.word	0x0800ddc9
 800dd8c:	0800ddc9 	.word	0x0800ddc9
 800dd90:	0800ddd1 	.word	0x0800ddd1
 800dd94:	0800ddd1 	.word	0x0800ddd1
 800dd98:	0800ddd1 	.word	0x0800ddd1
 800dd9c:	0800ddd1 	.word	0x0800ddd1
 800dda0:	0800ddd1 	.word	0x0800ddd1
 800dda4:	0800ddd1 	.word	0x0800ddd1
 800dda8:	0800ddd1 	.word	0x0800ddd1
 800ddac:	0800ddd1 	.word	0x0800ddd1
 800ddb0:	0800ddd1 	.word	0x0800ddd1
 800ddb4:	0800ddd1 	.word	0x0800ddd1
 800ddb8:	0800ddd1 	.word	0x0800ddd1
 800ddbc:	0800ddd1 	.word	0x0800ddd1
=======
 800e144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e146:	f000 f8f5 	bl	800e334 <validateAnswer>
 800e14a:	4603      	mov	r3, r0
 800e14c:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800e14e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d010      	beq.n	800e178 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800e156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
         modH->i8lastError = u8exception;
 800e15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e160:	7ffa      	ldrb	r2, [r7, #31]
 800e162:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e164:	69b8      	ldr	r0, [r7, #24]
 800e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e168:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e16c:	4619      	mov	r1, r3
 800e16e:	2300      	movs	r3, #0
 800e170:	2203      	movs	r2, #3
 800e172:	f7fe f8d9 	bl	800c328 <xTaskGenericNotify>
	     continue;
 800e176:	e055      	b.n	800e224 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17a:	7ffa      	ldrb	r2, [r7, #31]
 800e17c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e180:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e184:	f04f 31ff 	mov.w	r1, #4294967295
 800e188:	4618      	mov	r0, r3
 800e18a:	f7fc fd91 	bl	800acb0 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800e18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e190:	7d1b      	ldrb	r3, [r3, #20]
 800e192:	3b01      	subs	r3, #1
 800e194:	2b0f      	cmp	r3, #15
 800e196:	d82b      	bhi.n	800e1f0 <StartTaskModbusMaster+0x17c>
 800e198:	a201      	add	r2, pc, #4	; (adr r2, 800e1a0 <StartTaskModbusMaster+0x12c>)
 800e19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e19e:	bf00      	nop
 800e1a0:	0800e1e1 	.word	0x0800e1e1
 800e1a4:	0800e1e1 	.word	0x0800e1e1
 800e1a8:	0800e1e9 	.word	0x0800e1e9
 800e1ac:	0800e1e9 	.word	0x0800e1e9
 800e1b0:	0800e1f1 	.word	0x0800e1f1
 800e1b4:	0800e1f1 	.word	0x0800e1f1
 800e1b8:	0800e1f1 	.word	0x0800e1f1
 800e1bc:	0800e1f1 	.word	0x0800e1f1
 800e1c0:	0800e1f1 	.word	0x0800e1f1
 800e1c4:	0800e1f1 	.word	0x0800e1f1
 800e1c8:	0800e1f1 	.word	0x0800e1f1
 800e1cc:	0800e1f1 	.word	0x0800e1f1
 800e1d0:	0800e1f1 	.word	0x0800e1f1
 800e1d4:	0800e1f1 	.word	0x0800e1f1
 800e1d8:	0800e1f1 	.word	0x0800e1f1
 800e1dc:	0800e1f1 	.word	0x0800e1f1
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
<<<<<<< HEAD
 800ddc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddc2:	f000 f821 	bl	800de08 <get_FC1>
	      break;
 800ddc6:	e004      	b.n	800ddd2 <StartTaskModbusMaster+0x17e>
=======
 800e1e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1e2:	f000 f821 	bl	800e228 <get_FC1>
	      break;
 800e1e6:	e004      	b.n	800e1f2 <StartTaskModbusMaster+0x17e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
<<<<<<< HEAD
 800ddc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddca:	f000 f874 	bl	800deb6 <get_FC3>
	      break;
 800ddce:	e000      	b.n	800ddd2 <StartTaskModbusMaster+0x17e>
=======
 800e1e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ea:	f000 f874 	bl	800e2d6 <get_FC3>
	      break;
 800e1ee:	e000      	b.n	800e1f2 <StartTaskModbusMaster+0x17e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
<<<<<<< HEAD
 800ddd0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d10e      	bne.n	800de02 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800dde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800ddea:	2300      	movs	r3, #0
 800ddec:	2200      	movs	r2, #0
 800ddee:	2100      	movs	r1, #0
 800ddf0:	f7fc fa72 	bl	800a2d8 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800ddf4:	69b8      	ldr	r0, [r7, #24]
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	2203      	movs	r2, #3
 800ddfa:	f06f 010a 	mvn.w	r1, #10
 800ddfe:	f7fe f821 	bl	800be44 <xTaskGenericNotify>
=======
 800e1f0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800e1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fc:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d10e      	bne.n	800e222 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800e204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e206:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e20a:	2300      	movs	r3, #0
 800e20c:	2200      	movs	r2, #0
 800e20e:	2100      	movs	r1, #0
 800e210:	f7fc fad4 	bl	800a7bc <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800e214:	69b8      	ldr	r0, [r7, #24]
 800e216:	2300      	movs	r3, #0
 800e218:	2203      	movs	r2, #3
 800e21a:	f06f 010a 	mvn.w	r1, #10
 800e21e:	f7fe f883 	bl	800c328 <xTaskGenericNotify>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	  }


	  continue;
<<<<<<< HEAD
 800de02:	bf00      	nop
  {
 800de04:	e72c      	b.n	800dc60 <StartTaskModbusMaster+0xc>
 800de06:	bf00      	nop

0800de08 <get_FC1>:
=======
 800e222:	bf00      	nop
  {
 800e224:	e72c      	b.n	800e080 <StartTaskModbusMaster+0xc>
 800e226:	bf00      	nop

0800e228 <get_FC1>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800de08:	b590      	push	{r4, r7, lr}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800de10:	2303      	movs	r3, #3
 800de12:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800de14:	2300      	movs	r3, #0
 800de16:	73fb      	strb	r3, [r7, #15]
 800de18:	e043      	b.n	800dea2 <get_FC1+0x9a>

        if(i%2)
 800de1a:	7bfb      	ldrb	r3, [r7, #15]
 800de1c:	f003 0301 	and.w	r3, r3, #1
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b00      	cmp	r3, #0
 800de24:	d01c      	beq.n	800de60 <get_FC1+0x58>
        {
        	modH->u16regsCoils[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regsCoils[i/2]));
 800de26:	7bfa      	ldrb	r2, [r7, #15]
 800de28:	7bbb      	ldrb	r3, [r7, #14]
 800de2a:	4413      	add	r3, r2
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	4413      	add	r3, r2
 800de30:	7cd8      	ldrb	r0, [r3, #19]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800de38:	7bfb      	ldrb	r3, [r7, #15]
 800de3a:	085b      	lsrs	r3, r3, #1
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	005b      	lsls	r3, r3, #1
 800de40:	4413      	add	r3, r2
 800de42:	881b      	ldrh	r3, [r3, #0]
 800de44:	b2d9      	uxtb	r1, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800de4c:	7bfb      	ldrb	r3, [r7, #15]
 800de4e:	085b      	lsrs	r3, r3, #1
 800de50:	b2db      	uxtb	r3, r3
 800de52:	005b      	lsls	r3, r3, #1
 800de54:	18d4      	adds	r4, r2, r3
 800de56:	f000 fa5f 	bl	800e318 <word>
 800de5a:	4603      	mov	r3, r0
 800de5c:	8023      	strh	r3, [r4, #0]
 800de5e:	e01d      	b.n	800de9c <get_FC1+0x94>
=======
 800e228:	b590      	push	{r4, r7, lr}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800e230:	2303      	movs	r3, #3
 800e232:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800e234:	2300      	movs	r3, #0
 800e236:	73fb      	strb	r3, [r7, #15]
 800e238:	e043      	b.n	800e2c2 <get_FC1+0x9a>

        if(i%2)
 800e23a:	7bfb      	ldrb	r3, [r7, #15]
 800e23c:	f003 0301 	and.w	r3, r3, #1
 800e240:	b2db      	uxtb	r3, r3
 800e242:	2b00      	cmp	r3, #0
 800e244:	d01c      	beq.n	800e280 <get_FC1+0x58>
        {
        	modH->u16regsCoils[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regsCoils[i/2]));
 800e246:	7bfa      	ldrb	r2, [r7, #15]
 800e248:	7bbb      	ldrb	r3, [r7, #14]
 800e24a:	4413      	add	r3, r2
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	4413      	add	r3, r2
 800e250:	7cd8      	ldrb	r0, [r3, #19]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e258:	7bfb      	ldrb	r3, [r7, #15]
 800e25a:	085b      	lsrs	r3, r3, #1
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	005b      	lsls	r3, r3, #1
 800e260:	4413      	add	r3, r2
 800e262:	881b      	ldrh	r3, [r3, #0]
 800e264:	b2d9      	uxtb	r1, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	085b      	lsrs	r3, r3, #1
 800e270:	b2db      	uxtb	r3, r3
 800e272:	005b      	lsls	r3, r3, #1
 800e274:	18d4      	adds	r4, r2, r3
 800e276:	f000 fa5f 	bl	800e738 <word>
 800e27a:	4603      	mov	r3, r0
 800e27c:	8023      	strh	r3, [r4, #0]
 800e27e:	e01d      	b.n	800e2bc <get_FC1+0x94>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
        else
        {

        	modH->u16regsCoils[i/2]= word(highByte(modH->u16regsCoils[i/2]), modH->u8Buffer[i+u8byte]);
<<<<<<< HEAD
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800de66:	7bfb      	ldrb	r3, [r7, #15]
 800de68:	085b      	lsrs	r3, r3, #1
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	005b      	lsls	r3, r3, #1
 800de6e:	4413      	add	r3, r2
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	0a1b      	lsrs	r3, r3, #8
 800de74:	b29b      	uxth	r3, r3
 800de76:	b2d8      	uxtb	r0, r3
 800de78:	7bfa      	ldrb	r2, [r7, #15]
 800de7a:	7bbb      	ldrb	r3, [r7, #14]
 800de7c:	4413      	add	r3, r2
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	4413      	add	r3, r2
 800de82:	7cd9      	ldrb	r1, [r3, #19]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800de8a:	7bfb      	ldrb	r3, [r7, #15]
 800de8c:	085b      	lsrs	r3, r3, #1
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	005b      	lsls	r3, r3, #1
 800de92:	18d4      	adds	r4, r2, r3
 800de94:	f000 fa40 	bl	800e318 <word>
 800de98:	4603      	mov	r3, r0
 800de9a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	3301      	adds	r3, #1
 800dea0:	73fb      	strb	r3, [r7, #15]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	7d5b      	ldrb	r3, [r3, #21]
 800dea6:	7bfa      	ldrb	r2, [r7, #15]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d3b6      	bcc.n	800de1a <get_FC1+0x12>
=======
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e286:	7bfb      	ldrb	r3, [r7, #15]
 800e288:	085b      	lsrs	r3, r3, #1
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	005b      	lsls	r3, r3, #1
 800e28e:	4413      	add	r3, r2
 800e290:	881b      	ldrh	r3, [r3, #0]
 800e292:	0a1b      	lsrs	r3, r3, #8
 800e294:	b29b      	uxth	r3, r3
 800e296:	b2d8      	uxtb	r0, r3
 800e298:	7bfa      	ldrb	r2, [r7, #15]
 800e29a:	7bbb      	ldrb	r3, [r7, #14]
 800e29c:	4413      	add	r3, r2
 800e29e:	687a      	ldr	r2, [r7, #4]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	7cd9      	ldrb	r1, [r3, #19]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e2aa:	7bfb      	ldrb	r3, [r7, #15]
 800e2ac:	085b      	lsrs	r3, r3, #1
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	005b      	lsls	r3, r3, #1
 800e2b2:	18d4      	adds	r4, r2, r3
 800e2b4:	f000 fa40 	bl	800e738 <word>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800e2bc:	7bfb      	ldrb	r3, [r7, #15]
 800e2be:	3301      	adds	r3, #1
 800e2c0:	73fb      	strb	r3, [r7, #15]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	7d5b      	ldrb	r3, [r3, #21]
 800e2c6:	7bfa      	ldrb	r2, [r7, #15]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d3b6      	bcc.n	800e23a <get_FC1+0x12>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }

     }
}
<<<<<<< HEAD
 800deac:	bf00      	nop
 800deae:	bf00      	nop
 800deb0:	3714      	adds	r7, #20
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd90      	pop	{r4, r7, pc}

0800deb6 <get_FC3>:
=======
 800e2cc:	bf00      	nop
 800e2ce:	bf00      	nop
 800e2d0:	3714      	adds	r7, #20
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd90      	pop	{r4, r7, pc}

0800e2d6 <get_FC3>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800deb6:	b590      	push	{r4, r7, lr}
 800deb8:	b085      	sub	sp, #20
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800debe:	2303      	movs	r3, #3
 800dec0:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800dec2:	2300      	movs	r3, #0
 800dec4:	73bb      	strb	r3, [r7, #14]
 800dec6:	e018      	b.n	800defa <get_FC3+0x44>
    {
    	modH->u16regsHR[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800dec8:	7bfb      	ldrb	r3, [r7, #15]
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	4413      	add	r3, r2
 800dece:	7cd8      	ldrb	r0, [r3, #19]
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
 800ded2:	3301      	adds	r3, #1
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	4413      	add	r3, r2
 800ded8:	7cd9      	ldrb	r1, [r3, #19]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800dee0:	7bbb      	ldrb	r3, [r7, #14]
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	18d4      	adds	r4, r2, r3
 800dee6:	f000 fa17 	bl	800e318 <word>
 800deea:	4603      	mov	r3, r0
 800deec:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800deee:	7bfb      	ldrb	r3, [r7, #15]
 800def0:	3302      	adds	r3, #2
 800def2:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800def4:	7bbb      	ldrb	r3, [r7, #14]
 800def6:	3301      	adds	r3, #1
 800def8:	73bb      	strb	r3, [r7, #14]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7d5b      	ldrb	r3, [r3, #21]
 800defe:	085b      	lsrs	r3, r3, #1
 800df00:	b2db      	uxtb	r3, r3
 800df02:	7bba      	ldrb	r2, [r7, #14]
 800df04:	429a      	cmp	r2, r3
 800df06:	d3df      	bcc.n	800dec8 <get_FC3+0x12>
    }
}
 800df08:	bf00      	nop
 800df0a:	bf00      	nop
 800df0c:	3714      	adds	r7, #20
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd90      	pop	{r4, r7, pc}
	...

0800df14 <validateAnswer>:
=======
 800e2d6:	b590      	push	{r4, r7, lr}
 800e2d8:	b085      	sub	sp, #20
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800e2de:	2303      	movs	r3, #3
 800e2e0:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	73bb      	strb	r3, [r7, #14]
 800e2e6:	e018      	b.n	800e31a <get_FC3+0x44>
    {
    	modH->u16regsHR[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800e2e8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ea:	687a      	ldr	r2, [r7, #4]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	7cd8      	ldrb	r0, [r3, #19]
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	4413      	add	r3, r2
 800e2f8:	7cd9      	ldrb	r1, [r3, #19]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e300:	7bbb      	ldrb	r3, [r7, #14]
 800e302:	005b      	lsls	r3, r3, #1
 800e304:	18d4      	adds	r4, r2, r3
 800e306:	f000 fa17 	bl	800e738 <word>
 800e30a:	4603      	mov	r3, r0
 800e30c:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800e30e:	7bfb      	ldrb	r3, [r7, #15]
 800e310:	3302      	adds	r3, #2
 800e312:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800e314:	7bbb      	ldrb	r3, [r7, #14]
 800e316:	3301      	adds	r3, #1
 800e318:	73bb      	strb	r3, [r7, #14]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	7d5b      	ldrb	r3, [r3, #21]
 800e31e:	085b      	lsrs	r3, r3, #1
 800e320:	b2db      	uxtb	r3, r3
 800e322:	7bba      	ldrb	r2, [r7, #14]
 800e324:	429a      	cmp	r2, r3
 800e326:	d3df      	bcc.n	800e2e8 <get_FC3+0x12>
    }
}
 800e328:	bf00      	nop
 800e32a:	bf00      	nop
 800e32c:	3714      	adds	r7, #20
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd90      	pop	{r4, r7, pc}
	...

0800e334 <validateAnswer>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
=======
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
<<<<<<< HEAD
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df22:	3b02      	subs	r3, #2
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	4413      	add	r3, r2
 800df28:	7cdb      	ldrb	r3, [r3, #19]
 800df2a:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800df2c:	b21a      	sxth	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df34:	3b01      	subs	r3, #1
 800df36:	6879      	ldr	r1, [r7, #4]
 800df38:	440b      	add	r3, r1
 800df3a:	7cdb      	ldrb	r3, [r3, #19]
 800df3c:	b21b      	sxth	r3, r3
 800df3e:	4313      	orrs	r3, r2
 800df40:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800df42:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f103 0213 	add.w	r2, r3, #19
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df50:	3b02      	subs	r3, #2
 800df52:	b2db      	uxtb	r3, r3
 800df54:	4619      	mov	r1, r3
 800df56:	4610      	mov	r0, r2
 800df58:	f000 f9f1 	bl	800e33e <calcCRC>
 800df5c:	4603      	mov	r3, r0
 800df5e:	461a      	mov	r2, r3
 800df60:	89bb      	ldrh	r3, [r7, #12]
 800df62:	4293      	cmp	r3, r2
 800df64:	d009      	beq.n	800df7a <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800df6c:	3301      	adds	r3, #1
 800df6e:	b29a      	uxth	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_BAD_CRC;
 800df76:	23fc      	movs	r3, #252	; 0xfc
 800df78:	e034      	b.n	800dfe4 <validateAnswer+0xd0>
=======
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e342:	3b02      	subs	r3, #2
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	4413      	add	r3, r2
 800e348:	7cdb      	ldrb	r3, [r3, #19]
 800e34a:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e34c:	b21a      	sxth	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e354:	3b01      	subs	r3, #1
 800e356:	6879      	ldr	r1, [r7, #4]
 800e358:	440b      	add	r3, r1
 800e35a:	7cdb      	ldrb	r3, [r3, #19]
 800e35c:	b21b      	sxth	r3, r3
 800e35e:	4313      	orrs	r3, r2
 800e360:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800e362:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f103 0213 	add.w	r2, r3, #19
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e370:	3b02      	subs	r3, #2
 800e372:	b2db      	uxtb	r3, r3
 800e374:	4619      	mov	r1, r3
 800e376:	4610      	mov	r0, r2
 800e378:	f000 f9f1 	bl	800e75e <calcCRC>
 800e37c:	4603      	mov	r3, r0
 800e37e:	461a      	mov	r2, r3
 800e380:	89bb      	ldrh	r3, [r7, #12]
 800e382:	4293      	cmp	r3, r2
 800e384:	d009      	beq.n	800e39a <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e38c:	3301      	adds	r3, #1
 800e38e:	b29a      	uxth	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_BAD_CRC;
 800e396:	23fc      	movs	r3, #252	; 0xfc
 800e398:	e034      	b.n	800e404 <validateAnswer+0xd0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
<<<<<<< HEAD
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	7d1b      	ldrb	r3, [r3, #20]
 800df7e:	b25b      	sxtb	r3, r3
 800df80:	2b00      	cmp	r3, #0
 800df82:	da09      	bge.n	800df98 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800df8a:	3301      	adds	r3, #1
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_EXCEPTION;
 800df94:	23fb      	movs	r3, #251	; 0xfb
 800df96:	e025      	b.n	800dfe4 <validateAnswer+0xd0>
=======
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	7d1b      	ldrb	r3, [r3, #20]
 800e39e:	b25b      	sxtb	r3, r3
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	da09      	bge.n	800e3b8 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_EXCEPTION;
 800e3b4:	23fb      	movs	r3, #251	; 0xfb
 800e3b6:	e025      	b.n	800e404 <validateAnswer+0xd0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }

    // check fct code
    bool isSupported = false;
<<<<<<< HEAD
 800df98:	2300      	movs	r3, #0
 800df9a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800df9c:	2300      	movs	r3, #0
 800df9e:	73bb      	strb	r3, [r7, #14]
 800dfa0:	e00c      	b.n	800dfbc <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800dfa2:	7bbb      	ldrb	r3, [r7, #14]
 800dfa4:	4a11      	ldr	r2, [pc, #68]	; (800dfec <validateAnswer+0xd8>)
 800dfa6:	5cd2      	ldrb	r2, [r2, r3]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	7d1b      	ldrb	r3, [r3, #20]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d102      	bne.n	800dfb6 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	73fb      	strb	r3, [r7, #15]
            break;
 800dfb4:	e005      	b.n	800dfc2 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800dfb6:	7bbb      	ldrb	r3, [r7, #14]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	73bb      	strb	r3, [r7, #14]
 800dfbc:	7bbb      	ldrb	r3, [r7, #14]
 800dfbe:	2b07      	cmp	r3, #7
 800dfc0:	d9ef      	bls.n	800dfa2 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800dfc2:	7bfb      	ldrb	r3, [r7, #15]
 800dfc4:	f083 0301 	eor.w	r3, r3, #1
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d009      	beq.n	800dfe2 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return EXC_FUNC_CODE;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e000      	b.n	800dfe4 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800dfe2:	2300      	movs	r3, #0
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3710      	adds	r7, #16
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	0800f0dc 	.word	0x0800f0dc

0800dff0 <getRxBuffer>:
=======
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e3bc:	2300      	movs	r3, #0
 800e3be:	73bb      	strb	r3, [r7, #14]
 800e3c0:	e00c      	b.n	800e3dc <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e3c2:	7bbb      	ldrb	r3, [r7, #14]
 800e3c4:	4a11      	ldr	r2, [pc, #68]	; (800e40c <validateAnswer+0xd8>)
 800e3c6:	5cd2      	ldrb	r2, [r2, r3]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	7d1b      	ldrb	r3, [r3, #20]
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d102      	bne.n	800e3d6 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	73fb      	strb	r3, [r7, #15]
            break;
 800e3d4:	e005      	b.n	800e3e2 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e3d6:	7bbb      	ldrb	r3, [r7, #14]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	73bb      	strb	r3, [r7, #14]
 800e3dc:	7bbb      	ldrb	r3, [r7, #14]
 800e3de:	2b07      	cmp	r3, #7
 800e3e0:	d9ef      	bls.n	800e3c2 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800e3e2:	7bfb      	ldrb	r3, [r7, #15]
 800e3e4:	f083 0301 	eor.w	r3, r3, #1
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d009      	beq.n	800e402 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return EXC_FUNC_CODE;
 800e3fe:	2301      	movs	r3, #1
 800e400:	e000      	b.n	800e404 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800e402:	2300      	movs	r3, #0
}
 800e404:	4618      	mov	r0, r3
 800e406:	3710      	adds	r7, #16
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	0800f704 	.word	0x0800f704

0800e410 <getRxBuffer>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
=======
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
<<<<<<< HEAD
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d104      	bne.n	800e00c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	4618      	mov	r0, r3
 800e008:	f7f8 fd3e 	bl	8006a88 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800e012:	2b00      	cmp	r3, #0
 800e014:	d008      	beq.n	800e028 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	33d0      	adds	r3, #208	; 0xd0
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7ff f9eb 	bl	800d3f6 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800e020:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800e024:	81fb      	strh	r3, [r7, #14]
 800e026:	e019      	b.n	800e05c <getRxBuffer+0x6c>
=======
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d104      	bne.n	800e42c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	4618      	mov	r0, r3
 800e428:	f7f8 fe60 	bl	80070ec <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800e432:	2b00      	cmp	r3, #0
 800e434:	d008      	beq.n	800e448 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	33d0      	adds	r3, #208	; 0xd0
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7ff f9eb 	bl	800d816 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800e440:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800e444:	81fb      	strh	r3, [r7, #14]
 800e446:	e019      	b.n	800e47c <getRxBuffer+0x6c>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
<<<<<<< HEAD
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	3313      	adds	r3, #19
 800e032:	4619      	mov	r1, r3
 800e034:	4610      	mov	r0, r2
 800e036:	f7ff f978 	bl	800d32a <RingGetAllBytes>
 800e03a:	4603      	mov	r3, r0
 800e03c:	461a      	mov	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e04a:	3301      	adds	r3, #1
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		i16result = modH->u8BufferSize;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e05a:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e062:	2b01      	cmp	r3, #1
 800e064:	d107      	bne.n	800e076 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6858      	ldr	r0, [r3, #4]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	33b8      	adds	r3, #184	; 0xb8
 800e06e:	2201      	movs	r2, #1
 800e070:	4619      	mov	r1, r3
 800e072:	f7f8 fba7 	bl	80067c4 <HAL_UART_Receive_IT>
	}

    return i16result;
 800e076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
	...

0800e084 <validateRequest>:
=======
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	3313      	adds	r3, #19
 800e452:	4619      	mov	r1, r3
 800e454:	4610      	mov	r0, r2
 800e456:	f7ff f978 	bl	800d74a <RingGetAllBytes>
 800e45a:	4603      	mov	r3, r0
 800e45c:	461a      	mov	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e46a:	3301      	adds	r3, #1
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		i16result = modH->u8BufferSize;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e47a:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e482:	2b01      	cmp	r3, #1
 800e484:	d107      	bne.n	800e496 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6858      	ldr	r0, [r3, #4]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	33b8      	adds	r3, #184	; 0xb8
 800e48e:	2201      	movs	r2, #1
 800e490:	4619      	mov	r1, r3
 800e492:	f7f8 fcc9 	bl	8006e28 <HAL_UART_Receive_IT>
	}

    return i16result;
 800e496:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
	...

0800e4a4 <validateRequest>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
=======
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
<<<<<<< HEAD
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e092:	3b02      	subs	r3, #2
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	4413      	add	r3, r2
 800e098:	7cdb      	ldrb	r3, [r3, #19]
 800e09a:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e09c:	b21a      	sxth	r2, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	6879      	ldr	r1, [r7, #4]
 800e0a8:	440b      	add	r3, r1
 800e0aa:	7cdb      	ldrb	r3, [r3, #19]
 800e0ac:	b21b      	sxth	r3, r3
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e0b2:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f103 0213 	add.w	r2, r3, #19
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e0c0:	3b02      	subs	r3, #2
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	4610      	mov	r0, r2
 800e0c8:	f000 f939 	bl	800e33e <calcCRC>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	893b      	ldrh	r3, [r7, #8]
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d009      	beq.n	800e0ea <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e0dc:	3301      	adds	r3, #1
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	       		return ERR_BAD_CRC;
 800e0e6:	23fc      	movs	r3, #252	; 0xfc
 800e0e8:	e10f      	b.n	800e30a <validateRequest+0x286>
=======
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4b2:	3b02      	subs	r3, #2
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	7cdb      	ldrb	r3, [r3, #19]
 800e4ba:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e4bc:	b21a      	sxth	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4c4:	3b01      	subs	r3, #1
 800e4c6:	6879      	ldr	r1, [r7, #4]
 800e4c8:	440b      	add	r3, r1
 800e4ca:	7cdb      	ldrb	r3, [r3, #19]
 800e4cc:	b21b      	sxth	r3, r3
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e4d2:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f103 0213 	add.w	r2, r3, #19
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4e0:	3b02      	subs	r3, #2
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	4610      	mov	r0, r2
 800e4e8:	f000 f939 	bl	800e75e <calcCRC>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	893b      	ldrh	r3, [r7, #8]
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d009      	beq.n	800e50a <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	b29a      	uxth	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	       		return ERR_BAD_CRC;
 800e506:	23fc      	movs	r3, #252	; 0xfc
 800e508:	e10f      	b.n	800e72a <validateRequest+0x286>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	    }



	    // check fct code
	    bool isSupported = false;
<<<<<<< HEAD
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	73bb      	strb	r3, [r7, #14]
 800e0f2:	e00c      	b.n	800e10e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e0f4:	7bbb      	ldrb	r3, [r7, #14]
 800e0f6:	4a87      	ldr	r2, [pc, #540]	; (800e314 <validateRequest+0x290>)
 800e0f8:	5cd2      	ldrb	r2, [r2, r3]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	7d1b      	ldrb	r3, [r3, #20]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d102      	bne.n	800e108 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800e102:	2301      	movs	r3, #1
 800e104:	73fb      	strb	r3, [r7, #15]
	            break;
 800e106:	e005      	b.n	800e114 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e108:	7bbb      	ldrb	r3, [r7, #14]
 800e10a:	3301      	adds	r3, #1
 800e10c:	73bb      	strb	r3, [r7, #14]
 800e10e:	7bbb      	ldrb	r3, [r7, #14]
 800e110:	2b07      	cmp	r3, #7
 800e112:	d9ef      	bls.n	800e0f4 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800e114:	7bfb      	ldrb	r3, [r7, #15]
 800e116:	f083 0301 	eor.w	r3, r3, #1
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d009      	beq.n	800e134 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e126:	3301      	adds	r3, #1
 800e128:	b29a      	uxth	r2, r3
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	        return EXC_FUNC_CODE;
 800e130:	2301      	movs	r3, #1
 800e132:	e0ea      	b.n	800e30a <validateRequest+0x286>
=======
 800e50a:	2300      	movs	r3, #0
 800e50c:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e50e:	2300      	movs	r3, #0
 800e510:	73bb      	strb	r3, [r7, #14]
 800e512:	e00c      	b.n	800e52e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e514:	7bbb      	ldrb	r3, [r7, #14]
 800e516:	4a87      	ldr	r2, [pc, #540]	; (800e734 <validateRequest+0x290>)
 800e518:	5cd2      	ldrb	r2, [r2, r3]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	7d1b      	ldrb	r3, [r3, #20]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d102      	bne.n	800e528 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800e522:	2301      	movs	r3, #1
 800e524:	73fb      	strb	r3, [r7, #15]
	            break;
 800e526:	e005      	b.n	800e534 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e528:	7bbb      	ldrb	r3, [r7, #14]
 800e52a:	3301      	adds	r3, #1
 800e52c:	73bb      	strb	r3, [r7, #14]
 800e52e:	7bbb      	ldrb	r3, [r7, #14]
 800e530:	2b07      	cmp	r3, #7
 800e532:	d9ef      	bls.n	800e514 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800e534:	7bfb      	ldrb	r3, [r7, #15]
 800e536:	f083 0301 	eor.w	r3, r3, #1
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d009      	beq.n	800e554 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e546:	3301      	adds	r3, #1
 800e548:	b29a      	uxth	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	        return EXC_FUNC_CODE;
 800e550:	2301      	movs	r3, #1
 800e552:	e0ea      	b.n	800e72a <validateRequest+0x286>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
<<<<<<< HEAD
 800e134:	2300      	movs	r3, #0
 800e136:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800e138:	2300      	movs	r3, #0
 800e13a:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	7d1b      	ldrb	r3, [r3, #20]
 800e140:	3b01      	subs	r3, #1
 800e142:	2b0f      	cmp	r3, #15
 800e144:	f200 80e0 	bhi.w	800e308 <validateRequest+0x284>
 800e148:	a201      	add	r2, pc, #4	; (adr r2, 800e150 <validateRequest+0xcc>)
 800e14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e14e:	bf00      	nop
 800e150:	0800e191 	.word	0x0800e191
 800e154:	0800e191 	.word	0x0800e191
 800e158:	0800e2a9 	.word	0x0800e2a9
 800e15c:	0800e2a9 	.word	0x0800e2a9
 800e160:	0800e23d 	.word	0x0800e23d
 800e164:	0800e285 	.word	0x0800e285
 800e168:	0800e309 	.word	0x0800e309
 800e16c:	0800e309 	.word	0x0800e309
 800e170:	0800e309 	.word	0x0800e309
 800e174:	0800e309 	.word	0x0800e309
 800e178:	0800e309 	.word	0x0800e309
 800e17c:	0800e309 	.word	0x0800e309
 800e180:	0800e309 	.word	0x0800e309
 800e184:	0800e309 	.word	0x0800e309
 800e188:	0800e191 	.word	0x0800e191
 800e18c:	0800e2a9 	.word	0x0800e2a9
=======
 800e554:	2300      	movs	r3, #0
 800e556:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800e558:	2300      	movs	r3, #0
 800e55a:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	7d1b      	ldrb	r3, [r3, #20]
 800e560:	3b01      	subs	r3, #1
 800e562:	2b0f      	cmp	r3, #15
 800e564:	f200 80e0 	bhi.w	800e728 <validateRequest+0x284>
 800e568:	a201      	add	r2, pc, #4	; (adr r2, 800e570 <validateRequest+0xcc>)
 800e56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56e:	bf00      	nop
 800e570:	0800e5b1 	.word	0x0800e5b1
 800e574:	0800e5b1 	.word	0x0800e5b1
 800e578:	0800e6c9 	.word	0x0800e6c9
 800e57c:	0800e6c9 	.word	0x0800e6c9
 800e580:	0800e65d 	.word	0x0800e65d
 800e584:	0800e6a5 	.word	0x0800e6a5
 800e588:	0800e729 	.word	0x0800e729
 800e58c:	0800e729 	.word	0x0800e729
 800e590:	0800e729 	.word	0x0800e729
 800e594:	0800e729 	.word	0x0800e729
 800e598:	0800e729 	.word	0x0800e729
 800e59c:	0800e729 	.word	0x0800e729
 800e5a0:	0800e729 	.word	0x0800e729
 800e5a4:	0800e729 	.word	0x0800e729
 800e5a8:	0800e5b1 	.word	0x0800e5b1
 800e5ac:	0800e6c9 	.word	0x0800e6c9
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
<<<<<<< HEAD
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	7d5a      	ldrb	r2, [r3, #21]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	7d9b      	ldrb	r3, [r3, #22]
 800e198:	4619      	mov	r1, r3
 800e19a:	4610      	mov	r0, r2
 800e19c:	f000 f8bc 	bl	800e318 <word>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	091b      	lsrs	r3, r3, #4
 800e1a4:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	7dda      	ldrb	r2, [r3, #23]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	7e1b      	ldrb	r3, [r3, #24]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	f000 f8b1 	bl	800e318 <word>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	091b      	lsrs	r3, r3, #4
 800e1ba:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	7dda      	ldrb	r2, [r3, #23]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	7e1b      	ldrb	r3, [r3, #24]
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	4610      	mov	r0, r2
 800e1c8:	f000 f8a6 	bl	800e318 <word>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	f003 030f 	and.w	r3, r3, #15
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d002      	beq.n	800e1de <validateRequest+0x15a>
 800e1d8:	897b      	ldrh	r3, [r7, #10]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e1de:	89ba      	ldrh	r2, [r7, #12]
 800e1e0:	897b      	ldrh	r3, [r7, #10]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	dd01      	ble.n	800e1f2 <validateRequest+0x16e>
 800e1ee:	2302      	movs	r3, #2
 800e1f0:	e08b      	b.n	800e30a <validateRequest+0x286>
=======
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	7d5a      	ldrb	r2, [r3, #21]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	7d9b      	ldrb	r3, [r3, #22]
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	4610      	mov	r0, r2
 800e5bc:	f000 f8bc 	bl	800e738 <word>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	091b      	lsrs	r3, r3, #4
 800e5c4:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	7dda      	ldrb	r2, [r3, #23]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	7e1b      	ldrb	r3, [r3, #24]
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	f000 f8b1 	bl	800e738 <word>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	091b      	lsrs	r3, r3, #4
 800e5da:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	7dda      	ldrb	r2, [r3, #23]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	7e1b      	ldrb	r3, [r3, #24]
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	4610      	mov	r0, r2
 800e5e8:	f000 f8a6 	bl	800e738 <word>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	f003 030f 	and.w	r3, r3, #15
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <validateRequest+0x15a>
 800e5f8:	897b      	ldrh	r3, [r7, #10]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e5fe:	89ba      	ldrh	r2, [r7, #12]
 800e600:	897b      	ldrh	r3, [r7, #10]
 800e602:	4413      	add	r3, r2
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 800e60a:	4293      	cmp	r3, r2
 800e60c:	dd01      	ble.n	800e612 <validateRequest+0x16e>
 800e60e:	2302      	movs	r3, #2
 800e610:	e08b      	b.n	800e72a <validateRequest+0x286>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
<<<<<<< HEAD
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	7dda      	ldrb	r2, [r3, #23]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	7e1b      	ldrb	r3, [r3, #24]
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	f000 f88b 	bl	800e318 <word>
 800e202:	4603      	mov	r3, r0
 800e204:	08db      	lsrs	r3, r3, #3
 800e206:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	7dda      	ldrb	r2, [r3, #23]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	7e1b      	ldrb	r3, [r3, #24]
 800e210:	4619      	mov	r1, r3
 800e212:	4610      	mov	r0, r2
 800e214:	f000 f880 	bl	800e318 <word>
 800e218:	4603      	mov	r3, r0
 800e21a:	f003 0307 	and.w	r3, r3, #7
 800e21e:	b29b      	uxth	r3, r3
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <validateRequest+0x1a6>
 800e224:	897b      	ldrh	r3, [r7, #10]
 800e226:	3301      	adds	r3, #1
 800e228:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800e22a:	897b      	ldrh	r3, [r7, #10]
 800e22c:	3305      	adds	r3, #5
 800e22e:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800e230:	897b      	ldrh	r3, [r7, #10]
 800e232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e236:	d960      	bls.n	800e2fa <validateRequest+0x276>
 800e238:	2303      	movs	r3, #3
 800e23a:	e066      	b.n	800e30a <validateRequest+0x286>
=======
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	7dda      	ldrb	r2, [r3, #23]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	7e1b      	ldrb	r3, [r3, #24]
 800e61a:	4619      	mov	r1, r3
 800e61c:	4610      	mov	r0, r2
 800e61e:	f000 f88b 	bl	800e738 <word>
 800e622:	4603      	mov	r3, r0
 800e624:	08db      	lsrs	r3, r3, #3
 800e626:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	7dda      	ldrb	r2, [r3, #23]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	7e1b      	ldrb	r3, [r3, #24]
 800e630:	4619      	mov	r1, r3
 800e632:	4610      	mov	r0, r2
 800e634:	f000 f880 	bl	800e738 <word>
 800e638:	4603      	mov	r3, r0
 800e63a:	f003 0307 	and.w	r3, r3, #7
 800e63e:	b29b      	uxth	r3, r3
 800e640:	2b00      	cmp	r3, #0
 800e642:	d002      	beq.n	800e64a <validateRequest+0x1a6>
 800e644:	897b      	ldrh	r3, [r7, #10]
 800e646:	3301      	adds	r3, #1
 800e648:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800e64a:	897b      	ldrh	r3, [r7, #10]
 800e64c:	3305      	adds	r3, #5
 800e64e:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800e650:	897b      	ldrh	r3, [r7, #10]
 800e652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e656:	d960      	bls.n	800e71a <validateRequest+0x276>
 800e658:	2303      	movs	r3, #3
 800e65a:	e066      	b.n	800e72a <validateRequest+0x286>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
<<<<<<< HEAD
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	7d5a      	ldrb	r2, [r3, #21]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	7d9b      	ldrb	r3, [r3, #22]
 800e244:	4619      	mov	r1, r3
 800e246:	4610      	mov	r0, r2
 800e248:	f000 f866 	bl	800e318 <word>
 800e24c:	4603      	mov	r3, r0
 800e24e:	091b      	lsrs	r3, r3, #4
 800e250:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	7d5a      	ldrb	r2, [r3, #21]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	7d9b      	ldrb	r3, [r3, #22]
 800e25a:	4619      	mov	r1, r3
 800e25c:	4610      	mov	r0, r2
 800e25e:	f000 f85b 	bl	800e318 <word>
 800e262:	4603      	mov	r3, r0
 800e264:	f003 030f 	and.w	r3, r3, #15
 800e268:	b29b      	uxth	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d002      	beq.n	800e274 <validateRequest+0x1f0>
 800e26e:	89bb      	ldrh	r3, [r7, #12]
 800e270:	3301      	adds	r3, #1
 800e272:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800e27a:	89ba      	ldrh	r2, [r7, #12]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d93e      	bls.n	800e2fe <validateRequest+0x27a>
 800e280:	2302      	movs	r3, #2
 800e282:	e042      	b.n	800e30a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	7d5a      	ldrb	r2, [r3, #21]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	7d9b      	ldrb	r3, [r3, #22]
 800e28c:	4619      	mov	r1, r3
 800e28e:	4610      	mov	r0, r2
 800e290:	f000 f842 	bl	800e318 <word>
 800e294:	4603      	mov	r3, r0
 800e296:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regHR_size) return EXC_ADDR_RANGE;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e29e:	89ba      	ldrh	r2, [r7, #12]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d92e      	bls.n	800e302 <validateRequest+0x27e>
 800e2a4:	2302      	movs	r3, #2
 800e2a6:	e030      	b.n	800e30a <validateRequest+0x286>
=======
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	7d5a      	ldrb	r2, [r3, #21]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	7d9b      	ldrb	r3, [r3, #22]
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f000 f866 	bl	800e738 <word>
 800e66c:	4603      	mov	r3, r0
 800e66e:	091b      	lsrs	r3, r3, #4
 800e670:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	7d5a      	ldrb	r2, [r3, #21]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	7d9b      	ldrb	r3, [r3, #22]
 800e67a:	4619      	mov	r1, r3
 800e67c:	4610      	mov	r0, r2
 800e67e:	f000 f85b 	bl	800e738 <word>
 800e682:	4603      	mov	r3, r0
 800e684:	f003 030f 	and.w	r3, r3, #15
 800e688:	b29b      	uxth	r3, r3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d002      	beq.n	800e694 <validateRequest+0x1f0>
 800e68e:	89bb      	ldrh	r3, [r7, #12]
 800e690:	3301      	adds	r3, #1
 800e692:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800e69a:	89ba      	ldrh	r2, [r7, #12]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d93e      	bls.n	800e71e <validateRequest+0x27a>
 800e6a0:	2302      	movs	r3, #2
 800e6a2:	e042      	b.n	800e72a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	7d5a      	ldrb	r2, [r3, #21]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	7d9b      	ldrb	r3, [r3, #22]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4610      	mov	r0, r2
 800e6b0:	f000 f842 	bl	800e738 <word>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regHR_size) return EXC_ADDR_RANGE;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e6be:	89ba      	ldrh	r2, [r7, #12]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d92e      	bls.n	800e722 <validateRequest+0x27e>
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	e030      	b.n	800e72a <validateRequest+0x286>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
<<<<<<< HEAD
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	7d5a      	ldrb	r2, [r3, #21]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	7d9b      	ldrb	r3, [r3, #22]
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	f000 f830 	bl	800e318 <word>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	7dda      	ldrb	r2, [r3, #23]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	7e1b      	ldrb	r3, [r3, #24]
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	4610      	mov	r0, r2
 800e2c8:	f000 f826 	bl	800e318 <word>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regHR_size) return EXC_ADDR_RANGE;
 800e2d0:	89ba      	ldrh	r2, [r7, #12]
 800e2d2:	897b      	ldrh	r3, [r7, #10]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	dd01      	ble.n	800e2e4 <validateRequest+0x260>
 800e2e0:	2302      	movs	r3, #2
 800e2e2:	e012      	b.n	800e30a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800e2e4:	897b      	ldrh	r3, [r7, #10]
 800e2e6:	005b      	lsls	r3, r3, #1
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	3305      	adds	r3, #5
 800e2ec:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800e2ee:	897b      	ldrh	r3, [r7, #10]
 800e2f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2f4:	d907      	bls.n	800e306 <validateRequest+0x282>
 800e2f6:	2303      	movs	r3, #3
 800e2f8:	e007      	b.n	800e30a <validateRequest+0x286>
	        break;
 800e2fa:	bf00      	nop
 800e2fc:	e004      	b.n	800e308 <validateRequest+0x284>
	        break;
 800e2fe:	bf00      	nop
 800e300:	e002      	b.n	800e308 <validateRequest+0x284>
	        break;
 800e302:	bf00      	nop
 800e304:	e000      	b.n	800e308 <validateRequest+0x284>
	        break;
 800e306:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800e308:	2300      	movs	r3, #0

}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	0800f0dc 	.word	0x0800f0dc

0800e318 <word>:
=======
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	7d5a      	ldrb	r2, [r3, #21]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	7d9b      	ldrb	r3, [r3, #22]
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	4610      	mov	r0, r2
 800e6d4:	f000 f830 	bl	800e738 <word>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	7dda      	ldrb	r2, [r3, #23]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	7e1b      	ldrb	r3, [r3, #24]
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	4610      	mov	r0, r2
 800e6e8:	f000 f826 	bl	800e738 <word>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regHR_size) return EXC_ADDR_RANGE;
 800e6f0:	89ba      	ldrh	r2, [r7, #12]
 800e6f2:	897b      	ldrh	r3, [r7, #10]
 800e6f4:	4413      	add	r3, r2
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	dd01      	ble.n	800e704 <validateRequest+0x260>
 800e700:	2302      	movs	r3, #2
 800e702:	e012      	b.n	800e72a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800e704:	897b      	ldrh	r3, [r7, #10]
 800e706:	005b      	lsls	r3, r3, #1
 800e708:	b29b      	uxth	r3, r3
 800e70a:	3305      	adds	r3, #5
 800e70c:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800e70e:	897b      	ldrh	r3, [r7, #10]
 800e710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e714:	d907      	bls.n	800e726 <validateRequest+0x282>
 800e716:	2303      	movs	r3, #3
 800e718:	e007      	b.n	800e72a <validateRequest+0x286>
	        break;
 800e71a:	bf00      	nop
 800e71c:	e004      	b.n	800e728 <validateRequest+0x284>
	        break;
 800e71e:	bf00      	nop
 800e720:	e002      	b.n	800e728 <validateRequest+0x284>
	        break;
 800e722:	bf00      	nop
 800e724:	e000      	b.n	800e728 <validateRequest+0x284>
	        break;
 800e726:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800e728:	2300      	movs	r3, #0

}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	0800f704 	.word	0x0800f704

0800e738 <word>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
<<<<<<< HEAD
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	4603      	mov	r3, r0
 800e320:	460a      	mov	r2, r1
 800e322:	71fb      	strb	r3, [r7, #7]
 800e324:	4613      	mov	r3, r2
 800e326:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800e328:	79bb      	ldrb	r3, [r7, #6]
 800e32a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800e32c:	79fb      	ldrb	r3, [r7, #7]
 800e32e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800e330:	89bb      	ldrh	r3, [r7, #12]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3714      	adds	r7, #20
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr

0800e33e <calcCRC>:
=======
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	4603      	mov	r3, r0
 800e740:	460a      	mov	r2, r1
 800e742:	71fb      	strb	r3, [r7, #7]
 800e744:	4613      	mov	r3, r2
 800e746:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800e748:	79bb      	ldrb	r3, [r7, #6]
 800e74a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800e74c:	79fb      	ldrb	r3, [r7, #7]
 800e74e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800e750:	89bb      	ldrh	r3, [r7, #12]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3714      	adds	r7, #20
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <calcCRC>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
<<<<<<< HEAD
 800e33e:	b480      	push	{r7}
 800e340:	b087      	sub	sp, #28
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800e34a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e34e:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800e350:	2300      	movs	r3, #0
 800e352:	74fb      	strb	r3, [r7, #19]
 800e354:	e023      	b.n	800e39e <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800e356:	7cfb      	ldrb	r3, [r7, #19]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	4413      	add	r3, r2
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	461a      	mov	r2, r3
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	4053      	eors	r3, r2
 800e364:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e366:	2301      	movs	r3, #1
 800e368:	74bb      	strb	r3, [r7, #18]
 800e36a:	e012      	b.n	800e392 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	085b      	lsrs	r3, r3, #1
 800e378:	617b      	str	r3, [r7, #20]
            if (flag)
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d005      	beq.n	800e38c <calcCRC+0x4e>
                temp ^= 0xA001;
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800e386:	f083 0301 	eor.w	r3, r3, #1
 800e38a:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e38c:	7cbb      	ldrb	r3, [r7, #18]
 800e38e:	3301      	adds	r3, #1
 800e390:	74bb      	strb	r3, [r7, #18]
 800e392:	7cbb      	ldrb	r3, [r7, #18]
 800e394:	2b08      	cmp	r3, #8
 800e396:	d9e9      	bls.n	800e36c <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800e398:	7cfb      	ldrb	r3, [r7, #19]
 800e39a:	3301      	adds	r3, #1
 800e39c:	74fb      	strb	r3, [r7, #19]
 800e39e:	7cfa      	ldrb	r2, [r7, #19]
 800e3a0:	78fb      	ldrb	r3, [r7, #3]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d3d7      	bcc.n	800e356 <calcCRC+0x18>
=======
 800e75e:	b480      	push	{r7}
 800e760:	b087      	sub	sp, #28
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
 800e766:	460b      	mov	r3, r1
 800e768:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800e76a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e76e:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800e770:	2300      	movs	r3, #0
 800e772:	74fb      	strb	r3, [r7, #19]
 800e774:	e023      	b.n	800e7be <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800e776:	7cfb      	ldrb	r3, [r7, #19]
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	4413      	add	r3, r2
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	461a      	mov	r2, r3
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	4053      	eors	r3, r2
 800e784:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e786:	2301      	movs	r3, #1
 800e788:	74bb      	strb	r3, [r7, #18]
 800e78a:	e012      	b.n	800e7b2 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	f003 0301 	and.w	r3, r3, #1
 800e792:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	085b      	lsrs	r3, r3, #1
 800e798:	617b      	str	r3, [r7, #20]
            if (flag)
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d005      	beq.n	800e7ac <calcCRC+0x4e>
                temp ^= 0xA001;
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800e7a6:	f083 0301 	eor.w	r3, r3, #1
 800e7aa:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e7ac:	7cbb      	ldrb	r3, [r7, #18]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	74bb      	strb	r3, [r7, #18]
 800e7b2:	7cbb      	ldrb	r3, [r7, #18]
 800e7b4:	2b08      	cmp	r3, #8
 800e7b6:	d9e9      	bls.n	800e78c <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800e7b8:	7cfb      	ldrb	r3, [r7, #19]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	74fb      	strb	r3, [r7, #19]
 800e7be:	7cfa      	ldrb	r2, [r7, #19]
 800e7c0:	78fb      	ldrb	r3, [r7, #3]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d3d7      	bcc.n	800e776 <calcCRC+0x18>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
<<<<<<< HEAD
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	0a1b      	lsrs	r3, r3, #8
 800e3aa:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	021b      	lsls	r3, r3, #8
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	b29b      	uxth	r3, r3

}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	371c      	adds	r7, #28
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr

0800e3cc <buildException>:
=======
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	0a1b      	lsrs	r3, r3, #8
 800e7ca:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	021b      	lsls	r3, r3, #8
 800e7d0:	68fa      	ldr	r2, [r7, #12]
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	b29b      	uxth	r3, r3

}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	371c      	adds	r7, #28
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr

0800e7ec <buildException>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
<<<<<<< HEAD
 800e3cc:	b480      	push	{r7}
 800e3ce:	b085      	sub	sp, #20
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	6039      	str	r1, [r7, #0]
 800e3d6:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	7d1b      	ldrb	r3, [r3, #20]
 800e3dc:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	7a1a      	ldrb	r2, [r3, #8]
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800e3e6:	7bfb      	ldrb	r3, [r7, #15]
 800e3e8:	3b80      	subs	r3, #128	; 0x80
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	79fa      	ldrb	r2, [r7, #7]
 800e3f4:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	2203      	movs	r2, #3
 800e3fa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800e3fe:	bf00      	nop
 800e400:	3714      	adds	r7, #20
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <sendTxBuffer>:
=======
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	6039      	str	r1, [r7, #0]
 800e7f6:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	7d1b      	ldrb	r3, [r3, #20]
 800e7fc:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	7a1a      	ldrb	r2, [r3, #8]
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800e806:	7bfb      	ldrb	r3, [r7, #15]
 800e808:	3b80      	subs	r3, #128	; 0x80
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	79fa      	ldrb	r2, [r7, #7]
 800e814:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	2203      	movs	r2, #3
 800e81a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800e81e:	bf00      	nop
 800e820:	3714      	adds	r7, #20
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr

0800e82a <sendTxBuffer>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800e40a:	b590      	push	{r4, r7, lr}
 800e40c:	b087      	sub	sp, #28
 800e40e:	af02      	add	r7, sp, #8
 800e410:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f103 0213 	add.w	r2, r3, #19
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e41e:	4619      	mov	r1, r3
 800e420:	4610      	mov	r0, r2
 800e422:	f7ff ff8c 	bl	800e33e <calcCRC>
 800e426:	4603      	mov	r3, r0
 800e428:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800e42a:	89fb      	ldrh	r3, [r7, #14]
 800e42c:	0a1b      	lsrs	r3, r3, #8
 800e42e:	b29a      	uxth	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e436:	4619      	mov	r1, r3
 800e438:	b2d2      	uxtb	r2, r2
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	440b      	add	r3, r1
 800e43e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e446:	3301      	adds	r3, #1
 800e448:	b2da      	uxtb	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e456:	4619      	mov	r1, r3
 800e458:	89fb      	ldrh	r3, [r7, #14]
 800e45a:	b2da      	uxtb	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	440b      	add	r3, r1
 800e460:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e468:	3301      	adds	r3, #1
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00c      	beq.n	800e494 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	4618      	mov	r0, r3
 800e480:	f7f8 ff12 	bl	80072a8 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	68d8      	ldr	r0, [r3, #12]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	8a1b      	ldrh	r3, [r3, #16]
 800e48c:	2201      	movs	r2, #1
 800e48e:	4619      	mov	r1, r3
 800e490:	f7f5 fdb2 	bl	8003ff8 <HAL_GPIO_WritePin>
=======
 800e82a:	b590      	push	{r4, r7, lr}
 800e82c:	b087      	sub	sp, #28
 800e82e:	af02      	add	r7, sp, #8
 800e830:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f103 0213 	add.w	r2, r3, #19
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e83e:	4619      	mov	r1, r3
 800e840:	4610      	mov	r0, r2
 800e842:	f7ff ff8c 	bl	800e75e <calcCRC>
 800e846:	4603      	mov	r3, r0
 800e848:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800e84a:	89fb      	ldrh	r3, [r7, #14]
 800e84c:	0a1b      	lsrs	r3, r3, #8
 800e84e:	b29a      	uxth	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e856:	4619      	mov	r1, r3
 800e858:	b2d2      	uxtb	r2, r2
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	440b      	add	r3, r1
 800e85e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e866:	3301      	adds	r3, #1
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e876:	4619      	mov	r1, r3
 800e878:	89fb      	ldrh	r3, [r7, #14]
 800e87a:	b2da      	uxtb	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	440b      	add	r3, r1
 800e880:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e888:	3301      	adds	r3, #1
 800e88a:	b2da      	uxtb	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	68db      	ldr	r3, [r3, #12]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00c      	beq.n	800e8b4 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7f9 f834 	bl	800790c <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	68d8      	ldr	r0, [r3, #12]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	8a1b      	ldrh	r3, [r3, #16]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	f7f5 fb76 	bl	8003fa0 <HAL_GPIO_WritePin>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
<<<<<<< HEAD
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d10c      	bne.n	800e4b8 <sendTxBuffer+0xae>
=======
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	d10c      	bne.n	800e8d8 <sendTxBuffer+0xae>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
<<<<<<< HEAD
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6858      	ldr	r0, [r3, #4]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f103 0113 	add.w	r1, r3, #19
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	f7f8 f8f3 	bl	800669c <HAL_UART_Transmit_IT>
 800e4b6:	e00b      	b.n	800e4d0 <sendTxBuffer+0xc6>
=======
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6858      	ldr	r0, [r3, #4]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f103 0113 	add.w	r1, r3, #19
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	f7f8 fa15 	bl	8006d00 <HAL_UART_Transmit_IT>
 800e8d6:	e00b      	b.n	800e8f0 <sendTxBuffer+0xc6>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
<<<<<<< HEAD
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6858      	ldr	r0, [r3, #4]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f103 0113 	add.w	r1, r3, #19
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	f7f8 f9c6 	bl	800685c <HAL_UART_Transmit_DMA>
=======
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6858      	ldr	r0, [r3, #4]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f103 0113 	add.w	r1, r3, #19
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	f7f8 fae8 	bl	8006ec0 <HAL_UART_Transmit_DMA>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
<<<<<<< HEAD
 800e4d0:	21fa      	movs	r1, #250	; 0xfa
 800e4d2:	2001      	movs	r0, #1
 800e4d4:	f7fd fc14 	bl	800bd00 <ulTaskNotifyTake>
=======
 800e8f0:	21fa      	movs	r1, #250	; 0xfa
 800e8f2:	2001      	movs	r0, #1
 800e8f4:	f7fd fc76 	bl	800c1e4 <ulTaskNotifyTake>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
<<<<<<< HEAD
 800e4d8:	bf00      	nop
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	69db      	ldr	r3, [r3, #28]
 800e4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d0f7      	beq.n	800e4da <sendTxBuffer+0xd0>
=======
 800e8f8:	bf00      	nop
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	69db      	ldr	r3, [r3, #28]
 800e902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e906:	2b00      	cmp	r3, #0
 800e908:	d0f7      	beq.n	800e8fa <sendTxBuffer+0xd0>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
<<<<<<< HEAD
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00c      	beq.n	800e50c <sendTxBuffer+0x102>
=======
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d00c      	beq.n	800e92c <sendTxBuffer+0x102>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	68d8      	ldr	r0, [r3, #12]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	8a1b      	ldrh	r3, [r3, #16]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	f7f5 fd7b 	bl	8003ff8 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	4618      	mov	r0, r3
 800e508:	f7f8 ff22 	bl	8007350 <HAL_HalfDuplex_EnableReceiver>
=======
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	68d8      	ldr	r0, [r3, #12]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	8a1b      	ldrh	r3, [r3, #16]
 800e91a:	2200      	movs	r2, #0
 800e91c:	4619      	mov	r1, r3
 800e91e:	f7f5 fb3f 	bl	8003fa0 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	4618      	mov	r0, r3
 800e928:	f7f9 f844 	bl	80079b4 <HAL_HalfDuplex_EnableReceiver>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
<<<<<<< HEAD
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	2b04      	cmp	r3, #4
 800e512:	d10c      	bne.n	800e52e <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 800e51a:	f7fc ff1f 	bl	800b35c <xTaskGetTickCount>
 800e51e:	4602      	mov	r2, r0
 800e520:	2300      	movs	r3, #0
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	2300      	movs	r3, #0
 800e526:	2102      	movs	r1, #2
 800e528:	4620      	mov	r0, r4
 800e52a:	f7fd ff55 	bl	800c3d8 <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e53c:	3301      	adds	r3, #1
 800e53e:	b29a      	uxth	r2, r3
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa


}
 800e546:	bf00      	nop
 800e548:	3714      	adds	r7, #20
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd90      	pop	{r4, r7, pc}

0800e54e <process_FC1>:
=======
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	2b04      	cmp	r3, #4
 800e932:	d10c      	bne.n	800e94e <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 800e93a:	f7fc ff81 	bl	800b840 <xTaskGetTickCount>
 800e93e:	4602      	mov	r2, r0
 800e940:	2300      	movs	r3, #0
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	2300      	movs	r3, #0
 800e946:	2102      	movs	r1, #2
 800e948:	4620      	mov	r0, r4
 800e94a:	f7fd ff79 	bl	800c840 <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e95c:	3301      	adds	r3, #1
 800e95e:	b29a      	uxth	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa


}
 800e966:	bf00      	nop
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd90      	pop	{r4, r7, pc}

0800e96e <process_FC1>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH, uint8_t Database)
{
<<<<<<< HEAD
 800e54e:	b580      	push	{r7, lr}
 800e550:	b088      	sub	sp, #32
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
 800e556:	460b      	mov	r3, r1
 800e558:	70fb      	strb	r3, [r7, #3]
=======
 800e96e:	b580      	push	{r7, lr}
 800e970:	b088      	sub	sp, #32
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
 800e976:	460b      	mov	r3, r1
 800e978:	70fb      	strb	r3, [r7, #3]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    uint16_t u16currentCoil, u16coil;

    uint16_t *u16regs;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
<<<<<<< HEAD
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	7d5a      	ldrb	r2, [r3, #21]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	7d9b      	ldrb	r3, [r3, #22]
 800e562:	4619      	mov	r1, r3
 800e564:	4610      	mov	r0, r2
 800e566:	f7ff fed7 	bl	800e318 <word>
 800e56a:	4603      	mov	r3, r0
 800e56c:	82fb      	strh	r3, [r7, #22]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	7dda      	ldrb	r2, [r3, #23]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	7e1b      	ldrb	r3, [r3, #24]
 800e576:	4619      	mov	r1, r3
 800e578:	4610      	mov	r0, r2
 800e57a:	f7ff fecd 	bl	800e318 <word>
 800e57e:	4603      	mov	r3, r0
 800e580:	82bb      	strh	r3, [r7, #20]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800e582:	8abb      	ldrh	r3, [r7, #20]
 800e584:	08db      	lsrs	r3, r3, #3
 800e586:	b29b      	uxth	r3, r3
 800e588:	77fb      	strb	r3, [r7, #31]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800e58a:	8abb      	ldrh	r3, [r7, #20]
 800e58c:	f003 0307 	and.w	r3, r3, #7
 800e590:	b29b      	uxth	r3, r3
 800e592:	2b00      	cmp	r3, #0
 800e594:	d002      	beq.n	800e59c <process_FC1+0x4e>
 800e596:	7ffb      	ldrb	r3, [r7, #31]
 800e598:	3301      	adds	r3, #1
 800e59a:	77fb      	strb	r3, [r7, #31]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	7ffa      	ldrb	r2, [r7, #31]
 800e5a0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2203      	movs	r2, #3
 800e5a6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	7ffb      	ldrb	r3, [r7, #31]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	3b01      	subs	r3, #1
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	2200      	movs	r2, #0
 800e5be:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	77bb      	strb	r3, [r7, #30]

    if (Database == 1){
 800e5c4:	78fb      	ldrb	r3, [r7, #3]
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d103      	bne.n	800e5d2 <process_FC1+0x84>
    	u16regs = modH->u16regsCoils;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e5d0:	61bb      	str	r3, [r7, #24]
=======
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	7d5a      	ldrb	r2, [r3, #21]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	7d9b      	ldrb	r3, [r3, #22]
 800e982:	4619      	mov	r1, r3
 800e984:	4610      	mov	r0, r2
 800e986:	f7ff fed7 	bl	800e738 <word>
 800e98a:	4603      	mov	r3, r0
 800e98c:	82fb      	strh	r3, [r7, #22]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	7dda      	ldrb	r2, [r3, #23]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	7e1b      	ldrb	r3, [r3, #24]
 800e996:	4619      	mov	r1, r3
 800e998:	4610      	mov	r0, r2
 800e99a:	f7ff fecd 	bl	800e738 <word>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	82bb      	strh	r3, [r7, #20]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800e9a2:	8abb      	ldrh	r3, [r7, #20]
 800e9a4:	08db      	lsrs	r3, r3, #3
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	77fb      	strb	r3, [r7, #31]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800e9aa:	8abb      	ldrh	r3, [r7, #20]
 800e9ac:	f003 0307 	and.w	r3, r3, #7
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d002      	beq.n	800e9bc <process_FC1+0x4e>
 800e9b6:	7ffb      	ldrb	r3, [r7, #31]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	77fb      	strb	r3, [r7, #31]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	7ffa      	ldrb	r2, [r7, #31]
 800e9c0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2203      	movs	r2, #3
 800e9c6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	7ffb      	ldrb	r3, [r7, #31]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	3b01      	subs	r3, #1
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	4413      	add	r3, r2
 800e9dc:	2200      	movs	r2, #0
 800e9de:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	77bb      	strb	r3, [r7, #30]

    if (Database == 1){
 800e9e4:	78fb      	ldrb	r3, [r7, #3]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d103      	bne.n	800e9f2 <process_FC1+0x84>
    	u16regs = modH->u16regsCoils;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e9f0:	61bb      	str	r3, [r7, #24]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    }


    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
<<<<<<< HEAD
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	83bb      	strh	r3, [r7, #28]
 800e5d6:	e056      	b.n	800e686 <process_FC1+0x138>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800e5d8:	8afa      	ldrh	r2, [r7, #22]
 800e5da:	8bbb      	ldrh	r3, [r7, #28]
 800e5dc:	4413      	add	r3, r2
 800e5de:	823b      	strh	r3, [r7, #16]
        u16currentRegister =  (u16coil / 16);
 800e5e0:	8a3b      	ldrh	r3, [r7, #16]
 800e5e2:	091b      	lsrs	r3, r3, #4
 800e5e4:	81fb      	strh	r3, [r7, #14]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e5e6:	8a3b      	ldrh	r3, [r7, #16]
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	f003 030f 	and.w	r3, r3, #15
 800e5ee:	737b      	strb	r3, [r7, #13]

        bitWrite(
 800e5f0:	89fb      	ldrh	r3, [r7, #14]
 800e5f2:	005b      	lsls	r3, r3, #1
 800e5f4:	69ba      	ldr	r2, [r7, #24]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	881b      	ldrh	r3, [r3, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	7b7b      	ldrb	r3, [r7, #13]
 800e5fe:	fa42 f303 	asr.w	r3, r2, r3
 800e602:	f003 0301 	and.w	r3, r3, #1
 800e606:	2b00      	cmp	r3, #0
 800e608:	d014      	beq.n	800e634 <process_FC1+0xe6>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e610:	461a      	mov	r2, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4413      	add	r3, r2
 800e616:	7cda      	ldrb	r2, [r3, #19]
 800e618:	7fbb      	ldrb	r3, [r7, #30]
 800e61a:	2101      	movs	r1, #1
 800e61c:	fa01 f303 	lsl.w	r3, r1, r3
 800e620:	b2db      	uxtb	r3, r3
 800e622:	6879      	ldr	r1, [r7, #4]
 800e624:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e628:	4313      	orrs	r3, r2
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	440b      	add	r3, r1
 800e630:	74da      	strb	r2, [r3, #19]
 800e632:	e015      	b.n	800e660 <process_FC1+0x112>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e63a:	461a      	mov	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4413      	add	r3, r2
 800e640:	7cda      	ldrb	r2, [r3, #19]
 800e642:	7fbb      	ldrb	r3, [r7, #30]
 800e644:	2101      	movs	r1, #1
 800e646:	fa01 f303 	lsl.w	r3, r1, r3
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	43db      	mvns	r3, r3
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	6879      	ldr	r1, [r7, #4]
 800e652:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e656:	4013      	ands	r3, r2
 800e658:	b2da      	uxtb	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	440b      	add	r3, r1
 800e65e:	74da      	strb	r2, [r3, #19]
=======
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	83bb      	strh	r3, [r7, #28]
 800e9f6:	e056      	b.n	800eaa6 <process_FC1+0x138>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800e9f8:	8afa      	ldrh	r2, [r7, #22]
 800e9fa:	8bbb      	ldrh	r3, [r7, #28]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	823b      	strh	r3, [r7, #16]
        u16currentRegister =  (u16coil / 16);
 800ea00:	8a3b      	ldrh	r3, [r7, #16]
 800ea02:	091b      	lsrs	r3, r3, #4
 800ea04:	81fb      	strh	r3, [r7, #14]
        u8currentBit = (uint8_t) (u16coil % 16);
 800ea06:	8a3b      	ldrh	r3, [r7, #16]
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	f003 030f 	and.w	r3, r3, #15
 800ea0e:	737b      	strb	r3, [r7, #13]

        bitWrite(
 800ea10:	89fb      	ldrh	r3, [r7, #14]
 800ea12:	005b      	lsls	r3, r3, #1
 800ea14:	69ba      	ldr	r2, [r7, #24]
 800ea16:	4413      	add	r3, r2
 800ea18:	881b      	ldrh	r3, [r3, #0]
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	7b7b      	ldrb	r3, [r7, #13]
 800ea1e:	fa42 f303 	asr.w	r3, r2, r3
 800ea22:	f003 0301 	and.w	r3, r3, #1
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d014      	beq.n	800ea54 <process_FC1+0xe6>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ea30:	461a      	mov	r2, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4413      	add	r3, r2
 800ea36:	7cda      	ldrb	r2, [r3, #19]
 800ea38:	7fbb      	ldrb	r3, [r7, #30]
 800ea3a:	2101      	movs	r1, #1
 800ea3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ea40:	b2db      	uxtb	r3, r3
 800ea42:	6879      	ldr	r1, [r7, #4]
 800ea44:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	b2da      	uxtb	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	440b      	add	r3, r1
 800ea50:	74da      	strb	r2, [r3, #19]
 800ea52:	e015      	b.n	800ea80 <process_FC1+0x112>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4413      	add	r3, r2
 800ea60:	7cda      	ldrb	r2, [r3, #19]
 800ea62:	7fbb      	ldrb	r3, [r7, #30]
 800ea64:	2101      	movs	r1, #1
 800ea66:	fa01 f303 	lsl.w	r3, r1, r3
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	43db      	mvns	r3, r3
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	6879      	ldr	r1, [r7, #4]
 800ea72:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800ea76:	4013      	ands	r3, r2
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	440b      	add	r3, r1
 800ea7e:	74da      	strb	r2, [r3, #19]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
<<<<<<< HEAD
 800e660:	7fbb      	ldrb	r3, [r7, #30]
 800e662:	3301      	adds	r3, #1
 800e664:	77bb      	strb	r3, [r7, #30]

        if (u8bitsno > 7)
 800e666:	7fbb      	ldrb	r3, [r7, #30]
 800e668:	2b07      	cmp	r3, #7
 800e66a:	d909      	bls.n	800e680 <process_FC1+0x132>
        {
            u8bitsno = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	77bb      	strb	r3, [r7, #30]
            modH->u8BufferSize++;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e676:	3301      	adds	r3, #1
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e680:	8bbb      	ldrh	r3, [r7, #28]
 800e682:	3301      	adds	r3, #1
 800e684:	83bb      	strh	r3, [r7, #28]
 800e686:	8bba      	ldrh	r2, [r7, #28]
 800e688:	8abb      	ldrh	r3, [r7, #20]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d3a4      	bcc.n	800e5d8 <process_FC1+0x8a>
=======
 800ea80:	7fbb      	ldrb	r3, [r7, #30]
 800ea82:	3301      	adds	r3, #1
 800ea84:	77bb      	strb	r3, [r7, #30]

        if (u8bitsno > 7)
 800ea86:	7fbb      	ldrb	r3, [r7, #30]
 800ea88:	2b07      	cmp	r3, #7
 800ea8a:	d909      	bls.n	800eaa0 <process_FC1+0x132>
        {
            u8bitsno = 0;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	77bb      	strb	r3, [r7, #30]
            modH->u8BufferSize++;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ea96:	3301      	adds	r3, #1
 800ea98:	b2da      	uxtb	r2, r3
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800eaa0:	8bbb      	ldrh	r3, [r7, #28]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	83bb      	strh	r3, [r7, #28]
 800eaa6:	8bba      	ldrh	r2, [r7, #28]
 800eaa8:	8abb      	ldrh	r3, [r7, #20]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d3a4      	bcc.n	800e9f8 <process_FC1+0x8a>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
<<<<<<< HEAD
 800e68e:	8abb      	ldrh	r3, [r7, #20]
 800e690:	f003 0307 	and.w	r3, r3, #7
 800e694:	b29b      	uxth	r3, r3
 800e696:	2b00      	cmp	r3, #0
 800e698:	d007      	beq.n	800e6aa <process_FC1+0x15c>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	b2da      	uxtb	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e6b0:	3302      	adds	r3, #2
 800e6b2:	74fb      	strb	r3, [r7, #19]
    sendTxBuffer(modH);
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff fea8 	bl	800e40a <sendTxBuffer>
    return u8CopyBufferSize;
 800e6ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3720      	adds	r7, #32
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <process_FC3>:
=======
 800eaae:	8abb      	ldrh	r3, [r7, #20]
 800eab0:	f003 0307 	and.w	r3, r3, #7
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d007      	beq.n	800eaca <process_FC1+0x15c>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eac0:	3301      	adds	r3, #1
 800eac2:	b2da      	uxtb	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ead0:	3302      	adds	r3, #2
 800ead2:	74fb      	strb	r3, [r7, #19]
    sendTxBuffer(modH);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f7ff fea8 	bl	800e82a <sendTxBuffer>
    return u8CopyBufferSize;
 800eada:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3720      	adds	r7, #32
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <process_FC3>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH, uint8_t Database)
{
<<<<<<< HEAD
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b086      	sub	sp, #24
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	70fb      	strb	r3, [r7, #3]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	7d5a      	ldrb	r2, [r3, #21]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	7d9b      	ldrb	r3, [r3, #22]
 800e6da:	4619      	mov	r1, r3
 800e6dc:	4610      	mov	r0, r2
 800e6de:	f7ff fe1b 	bl	800e318 <word>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	81fb      	strh	r3, [r7, #14]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	7dda      	ldrb	r2, [r3, #23]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	7e1b      	ldrb	r3, [r3, #24]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	4610      	mov	r0, r2
 800e6f2:	f7ff fe11 	bl	800e318 <word>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	737b      	strb	r3, [r7, #13]
=======
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b086      	sub	sp, #24
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	460b      	mov	r3, r1
 800eaf0:	70fb      	strb	r3, [r7, #3]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	7d5a      	ldrb	r2, [r3, #21]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	7d9b      	ldrb	r3, [r3, #22]
 800eafa:	4619      	mov	r1, r3
 800eafc:	4610      	mov	r0, r2
 800eafe:	f7ff fe1b 	bl	800e738 <word>
 800eb02:	4603      	mov	r3, r0
 800eb04:	81fb      	strh	r3, [r7, #14]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	7dda      	ldrb	r2, [r3, #23]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	7e1b      	ldrb	r3, [r3, #24]
 800eb0e:	4619      	mov	r1, r3
 800eb10:	4610      	mov	r0, r2
 800eb12:	f7ff fe11 	bl	800e738 <word>
 800eb16:	4603      	mov	r3, r0
 800eb18:	737b      	strb	r3, [r7, #13]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    uint8_t u8CopyBufferSize;
    uint16_t i;

    uint16_t *u16regs;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
<<<<<<< HEAD
 800e6fa:	7b7b      	ldrb	r3, [r7, #13]
 800e6fc:	005b      	lsls	r3, r3, #1
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2203      	movs	r2, #3
 800e708:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    if (Database == DB_HOLDING_REGISTER)
 800e70c:	78fb      	ldrb	r3, [r7, #3]
 800e70e:	2b03      	cmp	r3, #3
 800e710:	d104      	bne.n	800e71c <process_FC3+0x56>
    {
    	u16regs = modH->u16regsHR;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e718:	613b      	str	r3, [r7, #16]
 800e71a:	e006      	b.n	800e72a <process_FC3+0x64>
    }
    else if (Database == DB_INPUT_REGISTERS)
 800e71c:	78fb      	ldrb	r3, [r7, #3]
 800e71e:	2b04      	cmp	r3, #4
 800e720:	d103      	bne.n	800e72a <process_FC3+0x64>
    {
    	u16regs = modH->u16regsRO;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e728:	613b      	str	r3, [r7, #16]
    }

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e72a:	89fb      	ldrh	r3, [r7, #14]
 800e72c:	82fb      	strh	r3, [r7, #22]
 800e72e:	e02e      	b.n	800e78e <process_FC3+0xc8>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(u16regs[i]);
 800e730:	8afb      	ldrh	r3, [r7, #22]
 800e732:	005b      	lsls	r3, r3, #1
 800e734:	693a      	ldr	r2, [r7, #16]
 800e736:	4413      	add	r3, r2
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	0a1b      	lsrs	r3, r3, #8
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e744:	4619      	mov	r1, r3
 800e746:	b2d2      	uxtb	r2, r2
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	440b      	add	r3, r1
 800e74c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e754:	3301      	adds	r3, #1
 800e756:	b2da      	uxtb	r2, r3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(u16regs[i]);
 800e75e:	8afb      	ldrh	r3, [r7, #22]
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	693a      	ldr	r2, [r7, #16]
 800e764:	4413      	add	r3, r2
 800e766:	881a      	ldrh	r2, [r3, #0]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e76e:	4619      	mov	r1, r3
 800e770:	b2d2      	uxtb	r2, r2
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	440b      	add	r3, r1
 800e776:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e77e:	3301      	adds	r3, #1
 800e780:	b2da      	uxtb	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e788:	8afb      	ldrh	r3, [r7, #22]
 800e78a:	3301      	adds	r3, #1
 800e78c:	82fb      	strh	r3, [r7, #22]
 800e78e:	8afa      	ldrh	r2, [r7, #22]
 800e790:	89f9      	ldrh	r1, [r7, #14]
 800e792:	7b7b      	ldrb	r3, [r7, #13]
 800e794:	440b      	add	r3, r1
 800e796:	429a      	cmp	r2, r3
 800e798:	dbca      	blt.n	800e730 <process_FC3+0x6a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e7a0:	3302      	adds	r3, #2
 800e7a2:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7ff fe30 	bl	800e40a <sendTxBuffer>

    return u8CopyBufferSize;
 800e7aa:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3718      	adds	r7, #24
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}

0800e7b6 <process_FC5>:
=======
 800eb1a:	7b7b      	ldrb	r3, [r7, #13]
 800eb1c:	005b      	lsls	r3, r3, #1
 800eb1e:	b2da      	uxtb	r2, r3
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2203      	movs	r2, #3
 800eb28:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    if (Database == DB_HOLDING_REGISTER)
 800eb2c:	78fb      	ldrb	r3, [r7, #3]
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	d104      	bne.n	800eb3c <process_FC3+0x56>
    {
    	u16regs = modH->u16regsHR;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eb38:	613b      	str	r3, [r7, #16]
 800eb3a:	e006      	b.n	800eb4a <process_FC3+0x64>
    }
    else if (Database == DB_INPUT_REGISTERS)
 800eb3c:	78fb      	ldrb	r3, [r7, #3]
 800eb3e:	2b04      	cmp	r3, #4
 800eb40:	d103      	bne.n	800eb4a <process_FC3+0x64>
    {
    	u16regs = modH->u16regsRO;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800eb48:	613b      	str	r3, [r7, #16]
    }

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800eb4a:	89fb      	ldrh	r3, [r7, #14]
 800eb4c:	82fb      	strh	r3, [r7, #22]
 800eb4e:	e02e      	b.n	800ebae <process_FC3+0xc8>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(u16regs[i]);
 800eb50:	8afb      	ldrh	r3, [r7, #22]
 800eb52:	005b      	lsls	r3, r3, #1
 800eb54:	693a      	ldr	r2, [r7, #16]
 800eb56:	4413      	add	r3, r2
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	0a1b      	lsrs	r3, r3, #8
 800eb5c:	b29a      	uxth	r2, r3
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eb64:	4619      	mov	r1, r3
 800eb66:	b2d2      	uxtb	r2, r2
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	440b      	add	r3, r1
 800eb6c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eb74:	3301      	adds	r3, #1
 800eb76:	b2da      	uxtb	r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(u16regs[i]);
 800eb7e:	8afb      	ldrh	r3, [r7, #22]
 800eb80:	005b      	lsls	r3, r3, #1
 800eb82:	693a      	ldr	r2, [r7, #16]
 800eb84:	4413      	add	r3, r2
 800eb86:	881a      	ldrh	r2, [r3, #0]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eb8e:	4619      	mov	r1, r3
 800eb90:	b2d2      	uxtb	r2, r2
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	440b      	add	r3, r1
 800eb96:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eb9e:	3301      	adds	r3, #1
 800eba0:	b2da      	uxtb	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800eba8:	8afb      	ldrh	r3, [r7, #22]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	82fb      	strh	r3, [r7, #22]
 800ebae:	8afa      	ldrh	r2, [r7, #22]
 800ebb0:	89f9      	ldrh	r1, [r7, #14]
 800ebb2:	7b7b      	ldrb	r3, [r7, #13]
 800ebb4:	440b      	add	r3, r1
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	dbca      	blt.n	800eb50 <process_FC3+0x6a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ebc0:	3302      	adds	r3, #2
 800ebc2:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f7ff fe30 	bl	800e82a <sendTxBuffer>

    return u8CopyBufferSize;
 800ebca:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3718      	adds	r7, #24
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <process_FC5>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
<<<<<<< HEAD
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b084      	sub	sp, #16
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
=======
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b084      	sub	sp, #16
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
<<<<<<< HEAD
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	7d5a      	ldrb	r2, [r3, #21]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	7d9b      	ldrb	r3, [r3, #22]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	f7ff fda5 	bl	800e318 <word>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800e7d2:	89fb      	ldrh	r3, [r7, #14]
 800e7d4:	091b      	lsrs	r3, r3, #4
 800e7d6:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800e7d8:	89fb      	ldrh	r3, [r7, #14]
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	f003 030f 	and.w	r3, r3, #15
 800e7e0:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	7ddb      	ldrb	r3, [r3, #23]
 800e7e6:	2bff      	cmp	r3, #255	; 0xff
 800e7e8:	d115      	bne.n	800e816 <process_FC5+0x60>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e7f0:	89bb      	ldrh	r3, [r7, #12]
 800e7f2:	005b      	lsls	r3, r3, #1
 800e7f4:	4413      	add	r3, r2
 800e7f6:	8819      	ldrh	r1, [r3, #0]
 800e7f8:	7afb      	ldrb	r3, [r7, #11]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e800:	b29a      	uxth	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e808:	89bb      	ldrh	r3, [r7, #12]
 800e80a:	005b      	lsls	r3, r3, #1
 800e80c:	4403      	add	r3, r0
 800e80e:	430a      	orrs	r2, r1
 800e810:	b292      	uxth	r2, r2
 800e812:	801a      	strh	r2, [r3, #0]
 800e814:	e016      	b.n	800e844 <process_FC5+0x8e>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e81c:	89bb      	ldrh	r3, [r7, #12]
 800e81e:	005b      	lsls	r3, r3, #1
 800e820:	4413      	add	r3, r2
 800e822:	8819      	ldrh	r1, [r3, #0]
 800e824:	7afb      	ldrb	r3, [r7, #11]
 800e826:	2201      	movs	r2, #1
 800e828:	fa02 f303 	lsl.w	r3, r2, r3
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	43db      	mvns	r3, r3
 800e830:	b29a      	uxth	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e838:	89bb      	ldrh	r3, [r7, #12]
 800e83a:	005b      	lsls	r3, r3, #1
 800e83c:	4403      	add	r3, r0
 800e83e:	400a      	ands	r2, r1
 800e840:	b292      	uxth	r2, r2
 800e842:	801a      	strh	r2, [r3, #0]
=======
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	7d5a      	ldrb	r2, [r3, #21]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	7d9b      	ldrb	r3, [r3, #22]
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	4610      	mov	r0, r2
 800ebea:	f7ff fda5 	bl	800e738 <word>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800ebf2:	89fb      	ldrh	r3, [r7, #14]
 800ebf4:	091b      	lsrs	r3, r3, #4
 800ebf6:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800ebf8:	89fb      	ldrh	r3, [r7, #14]
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	f003 030f 	and.w	r3, r3, #15
 800ec00:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	7ddb      	ldrb	r3, [r3, #23]
 800ec06:	2bff      	cmp	r3, #255	; 0xff
 800ec08:	d115      	bne.n	800ec36 <process_FC5+0x60>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ec10:	89bb      	ldrh	r3, [r7, #12]
 800ec12:	005b      	lsls	r3, r3, #1
 800ec14:	4413      	add	r3, r2
 800ec16:	8819      	ldrh	r1, [r3, #0]
 800ec18:	7afb      	ldrb	r3, [r7, #11]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800ec28:	89bb      	ldrh	r3, [r7, #12]
 800ec2a:	005b      	lsls	r3, r3, #1
 800ec2c:	4403      	add	r3, r0
 800ec2e:	430a      	orrs	r2, r1
 800ec30:	b292      	uxth	r2, r2
 800ec32:	801a      	strh	r2, [r3, #0]
 800ec34:	e016      	b.n	800ec64 <process_FC5+0x8e>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ec3c:	89bb      	ldrh	r3, [r7, #12]
 800ec3e:	005b      	lsls	r3, r3, #1
 800ec40:	4413      	add	r3, r2
 800ec42:	8819      	ldrh	r1, [r3, #0]
 800ec44:	7afb      	ldrb	r3, [r7, #11]
 800ec46:	2201      	movs	r2, #1
 800ec48:	fa02 f303 	lsl.w	r3, r2, r3
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	43db      	mvns	r3, r3
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800ec58:	89bb      	ldrh	r3, [r7, #12]
 800ec5a:	005b      	lsls	r3, r3, #1
 800ec5c:	4403      	add	r3, r0
 800ec5e:	400a      	ands	r2, r1
 800ec60:	b292      	uxth	r2, r2
 800ec62:	801a      	strh	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
<<<<<<< HEAD
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2206      	movs	r2, #6
 800e848:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e852:	3302      	adds	r3, #2
 800e854:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7ff fdd7 	bl	800e40a <sendTxBuffer>

    return u8CopyBufferSize;
 800e85c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800e860:	4618      	mov	r0, r3
 800e862:	3710      	adds	r7, #16
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <process_FC6>:
=======
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2206      	movs	r2, #6
 800ec68:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec72:	3302      	adds	r3, #2
 800ec74:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f7ff fdd7 	bl	800e82a <sendTxBuffer>

    return u8CopyBufferSize;
 800ec7c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <process_FC6>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	7d5a      	ldrb	r2, [r3, #21]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	7d9b      	ldrb	r3, [r3, #22]
 800e878:	4619      	mov	r1, r3
 800e87a:	4610      	mov	r0, r2
 800e87c:	f7ff fd4c 	bl	800e318 <word>
 800e880:	4603      	mov	r3, r0
 800e882:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	7dda      	ldrb	r2, [r3, #23]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	7e1b      	ldrb	r3, [r3, #24]
 800e88c:	4619      	mov	r1, r3
 800e88e:	4610      	mov	r0, r2
 800e890:	f7ff fd42 	bl	800e318 <word>
 800e894:	4603      	mov	r3, r0
 800e896:	81bb      	strh	r3, [r7, #12]

    modH->u16regsHR[ u16add ] = u16val;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e89e:	89fb      	ldrh	r3, [r7, #14]
 800e8a0:	005b      	lsls	r3, r3, #1
 800e8a2:	4413      	add	r3, r2
 800e8a4:	89ba      	ldrh	r2, [r7, #12]
 800e8a6:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2206      	movs	r2, #6
 800e8ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8b6:	3302      	adds	r3, #2
 800e8b8:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7ff fda5 	bl	800e40a <sendTxBuffer>

    return u8CopyBufferSize;
 800e8c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <process_FC15>:
=======
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	7d5a      	ldrb	r2, [r3, #21]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	7d9b      	ldrb	r3, [r3, #22]
 800ec98:	4619      	mov	r1, r3
 800ec9a:	4610      	mov	r0, r2
 800ec9c:	f7ff fd4c 	bl	800e738 <word>
 800eca0:	4603      	mov	r3, r0
 800eca2:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	7dda      	ldrb	r2, [r3, #23]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	7e1b      	ldrb	r3, [r3, #24]
 800ecac:	4619      	mov	r1, r3
 800ecae:	4610      	mov	r0, r2
 800ecb0:	f7ff fd42 	bl	800e738 <word>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	81bb      	strh	r3, [r7, #12]

    modH->u16regsHR[ u16add ] = u16val;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ecbe:	89fb      	ldrh	r3, [r7, #14]
 800ecc0:	005b      	lsls	r3, r3, #1
 800ecc2:	4413      	add	r3, r2
 800ecc4:	89ba      	ldrh	r2, [r7, #12]
 800ecc6:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2206      	movs	r2, #6
 800eccc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ecd6:	3302      	adds	r3, #2
 800ecd8:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7ff fda5 	bl	800e82a <sendTxBuffer>

    return u8CopyBufferSize;
 800ece0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3710      	adds	r7, #16
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <process_FC15>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
<<<<<<< HEAD
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
=======
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b086      	sub	sp, #24
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
<<<<<<< HEAD
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	7d5a      	ldrb	r2, [r3, #21]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	7d9b      	ldrb	r3, [r3, #22]
 800e8dc:	4619      	mov	r1, r3
 800e8de:	4610      	mov	r0, r2
 800e8e0:	f7ff fd1a 	bl	800e318 <word>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	7dda      	ldrb	r2, [r3, #23]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	7e1b      	ldrb	r3, [r3, #24]
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	4610      	mov	r0, r2
 800e8f4:	f7ff fd10 	bl	800e318 <word>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	823b      	strh	r3, [r7, #16]
=======
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	7d5a      	ldrb	r2, [r3, #21]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	7d9b      	ldrb	r3, [r3, #22]
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	4610      	mov	r0, r2
 800ed00:	f7ff fd1a 	bl	800e738 <word>
 800ed04:	4603      	mov	r3, r0
 800ed06:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	7dda      	ldrb	r2, [r3, #23]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	7e1b      	ldrb	r3, [r3, #24]
 800ed10:	4619      	mov	r1, r3
 800ed12:	4610      	mov	r0, r2
 800ed14:	f7ff fd10 	bl	800e738 <word>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	823b      	strh	r3, [r7, #16]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
<<<<<<< HEAD
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800e900:	2307      	movs	r3, #7
 800e902:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e904:	2300      	movs	r3, #0
 800e906:	82bb      	strh	r3, [r7, #20]
 800e908:	e058      	b.n	800e9bc <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800e90a:	8a7a      	ldrh	r2, [r7, #18]
 800e90c:	8abb      	ldrh	r3, [r7, #20]
 800e90e:	4413      	add	r3, r2
 800e910:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800e912:	89bb      	ldrh	r3, [r7, #12]
 800e914:	091b      	lsrs	r3, r3, #4
 800e916:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e918:	89bb      	ldrh	r3, [r7, #12]
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	f003 030f 	and.w	r3, r3, #15
 800e920:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800e922:	7dfb      	ldrb	r3, [r7, #23]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	4413      	add	r3, r2
 800e928:	7cdb      	ldrb	r3, [r3, #19]
 800e92a:	461a      	mov	r2, r3
 800e92c:	7dbb      	ldrb	r3, [r7, #22]
 800e92e:	fa42 f303 	asr.w	r3, r2, r3
 800e932:	f003 0301 	and.w	r3, r3, #1
 800e936:	2b00      	cmp	r3, #0
 800e938:	bf14      	ite	ne
 800e93a:	2301      	movne	r3, #1
 800e93c:	2300      	moveq	r3, #0
 800e93e:	723b      	strb	r3, [r7, #8]
=======
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800ed20:	2307      	movs	r3, #7
 800ed22:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800ed24:	2300      	movs	r3, #0
 800ed26:	82bb      	strh	r3, [r7, #20]
 800ed28:	e058      	b.n	800eddc <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800ed2a:	8a7a      	ldrh	r2, [r7, #18]
 800ed2c:	8abb      	ldrh	r3, [r7, #20]
 800ed2e:	4413      	add	r3, r2
 800ed30:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800ed32:	89bb      	ldrh	r3, [r7, #12]
 800ed34:	091b      	lsrs	r3, r3, #4
 800ed36:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800ed38:	89bb      	ldrh	r3, [r7, #12]
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	f003 030f 	and.w	r3, r3, #15
 800ed40:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	4413      	add	r3, r2
 800ed48:	7cdb      	ldrb	r3, [r3, #19]
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	7dbb      	ldrb	r3, [r7, #22]
 800ed4e:	fa42 f303 	asr.w	r3, r2, r3
 800ed52:	f003 0301 	and.w	r3, r3, #1
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	bf14      	ite	ne
 800ed5a:	2301      	movne	r3, #1
 800ed5c:	2300      	moveq	r3, #0
 800ed5e:	723b      	strb	r3, [r7, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
<<<<<<< HEAD
 800e940:	7a3b      	ldrb	r3, [r7, #8]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d015      	beq.n	800e972 <process_FC15+0xa6>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e94c:	897b      	ldrh	r3, [r7, #10]
 800e94e:	005b      	lsls	r3, r3, #1
 800e950:	4413      	add	r3, r2
 800e952:	8819      	ldrh	r1, [r3, #0]
 800e954:	7a7b      	ldrb	r3, [r7, #9]
 800e956:	2201      	movs	r2, #1
 800e958:	fa02 f303 	lsl.w	r3, r2, r3
 800e95c:	b29a      	uxth	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e964:	897b      	ldrh	r3, [r7, #10]
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	4403      	add	r3, r0
 800e96a:	430a      	orrs	r2, r1
 800e96c:	b292      	uxth	r2, r2
 800e96e:	801a      	strh	r2, [r3, #0]
 800e970:	e016      	b.n	800e9a0 <process_FC15+0xd4>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e978:	897b      	ldrh	r3, [r7, #10]
 800e97a:	005b      	lsls	r3, r3, #1
 800e97c:	4413      	add	r3, r2
 800e97e:	8819      	ldrh	r1, [r3, #0]
 800e980:	7a7b      	ldrb	r3, [r7, #9]
 800e982:	2201      	movs	r2, #1
 800e984:	fa02 f303 	lsl.w	r3, r2, r3
 800e988:	b29b      	uxth	r3, r3
 800e98a:	43db      	mvns	r3, r3
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e994:	897b      	ldrh	r3, [r7, #10]
 800e996:	005b      	lsls	r3, r3, #1
 800e998:	4403      	add	r3, r0
 800e99a:	400a      	ands	r2, r1
 800e99c:	b292      	uxth	r2, r2
 800e99e:	801a      	strh	r2, [r3, #0]
=======
 800ed60:	7a3b      	ldrb	r3, [r7, #8]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d015      	beq.n	800ed92 <process_FC15+0xa6>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ed6c:	897b      	ldrh	r3, [r7, #10]
 800ed6e:	005b      	lsls	r3, r3, #1
 800ed70:	4413      	add	r3, r2
 800ed72:	8819      	ldrh	r1, [r3, #0]
 800ed74:	7a7b      	ldrb	r3, [r7, #9]
 800ed76:	2201      	movs	r2, #1
 800ed78:	fa02 f303 	lsl.w	r3, r2, r3
 800ed7c:	b29a      	uxth	r2, r3
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800ed84:	897b      	ldrh	r3, [r7, #10]
 800ed86:	005b      	lsls	r3, r3, #1
 800ed88:	4403      	add	r3, r0
 800ed8a:	430a      	orrs	r2, r1
 800ed8c:	b292      	uxth	r2, r2
 800ed8e:	801a      	strh	r2, [r3, #0]
 800ed90:	e016      	b.n	800edc0 <process_FC15+0xd4>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ed98:	897b      	ldrh	r3, [r7, #10]
 800ed9a:	005b      	lsls	r3, r3, #1
 800ed9c:	4413      	add	r3, r2
 800ed9e:	8819      	ldrh	r1, [r3, #0]
 800eda0:	7a7b      	ldrb	r3, [r7, #9]
 800eda2:	2201      	movs	r2, #1
 800eda4:	fa02 f303 	lsl.w	r3, r2, r3
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	43db      	mvns	r3, r3
 800edac:	b29a      	uxth	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800edb4:	897b      	ldrh	r3, [r7, #10]
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	4403      	add	r3, r0
 800edba:	400a      	ands	r2, r1
 800edbc:	b292      	uxth	r2, r2
 800edbe:	801a      	strh	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
            modH->u16regsCoils[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
<<<<<<< HEAD
 800e9a0:	7dbb      	ldrb	r3, [r7, #22]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800e9a6:	7dbb      	ldrb	r3, [r7, #22]
 800e9a8:	2b07      	cmp	r3, #7
 800e9aa:	d904      	bls.n	800e9b6 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800e9b0:	7dfb      	ldrb	r3, [r7, #23]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e9b6:	8abb      	ldrh	r3, [r7, #20]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	82bb      	strh	r3, [r7, #20]
 800e9bc:	8aba      	ldrh	r2, [r7, #20]
 800e9be:	8a3b      	ldrh	r3, [r7, #16]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d3a2      	bcc.n	800e90a <process_FC15+0x3e>
=======
 800edc0:	7dbb      	ldrb	r3, [r7, #22]
 800edc2:	3301      	adds	r3, #1
 800edc4:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800edc6:	7dbb      	ldrb	r3, [r7, #22]
 800edc8:	2b07      	cmp	r3, #7
 800edca:	d904      	bls.n	800edd6 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800edcc:	2300      	movs	r3, #0
 800edce:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800edd0:	7dfb      	ldrb	r3, [r7, #23]
 800edd2:	3301      	adds	r3, #1
 800edd4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800edd6:	8abb      	ldrh	r3, [r7, #20]
 800edd8:	3301      	adds	r3, #1
 800edda:	82bb      	strh	r3, [r7, #20]
 800eddc:	8aba      	ldrh	r2, [r7, #20]
 800edde:	8a3b      	ldrh	r3, [r7, #16]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d3a2      	bcc.n	800ed2a <process_FC15+0x3e>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
<<<<<<< HEAD
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2206      	movs	r2, #6
 800e9c8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e9d2:	3302      	adds	r3, #2
 800e9d4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f7ff fd17 	bl	800e40a <sendTxBuffer>
    return u8CopyBufferSize;
 800e9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3718      	adds	r7, #24
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <process_FC16>:
=======
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2206      	movs	r2, #6
 800ede8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800edf2:	3302      	adds	r3, #2
 800edf4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7ff fd17 	bl	800e82a <sendTxBuffer>
    return u8CopyBufferSize;
 800edfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3718      	adds	r7, #24
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <process_FC16>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
<<<<<<< HEAD
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b086      	sub	sp, #24
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	7d5b      	ldrb	r3, [r3, #21]
 800e9f4:	021b      	lsls	r3, r3, #8
 800e9f6:	b21a      	sxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	7d9b      	ldrb	r3, [r3, #22]
 800e9fc:	b21b      	sxth	r3, r3
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	b21b      	sxth	r3, r3
 800ea02:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	7ddb      	ldrb	r3, [r3, #23]
 800ea08:	021b      	lsls	r3, r3, #8
 800ea0a:	b21a      	sxth	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	7e1b      	ldrb	r3, [r3, #24]
 800ea10:	b21b      	sxth	r3, r3
 800ea12:	4313      	orrs	r3, r2
 800ea14:	b21b      	sxth	r3, r3
 800ea16:	827b      	strh	r3, [r7, #18]
=======
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b086      	sub	sp, #24
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	7d5b      	ldrb	r3, [r3, #21]
 800ee14:	021b      	lsls	r3, r3, #8
 800ee16:	b21a      	sxth	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	7d9b      	ldrb	r3, [r3, #22]
 800ee1c:	b21b      	sxth	r3, r3
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	b21b      	sxth	r3, r3
 800ee22:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	7ddb      	ldrb	r3, [r3, #23]
 800ee28:	021b      	lsls	r3, r3, #8
 800ee2a:	b21a      	sxth	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	7e1b      	ldrb	r3, [r3, #24]
 800ee30:	b21b      	sxth	r3, r3
 800ee32:	4313      	orrs	r3, r2
 800ee34:	b21b      	sxth	r3, r3
 800ee36:	827b      	strh	r3, [r7, #18]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
<<<<<<< HEAD
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800ea1e:	8a7b      	ldrh	r3, [r7, #18]
 800ea20:	b2da      	uxtb	r2, r3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2206      	movs	r2, #6
 800ea2a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800ea2e:	2300      	movs	r3, #0
 800ea30:	82fb      	strh	r3, [r7, #22]
 800ea32:	e01d      	b.n	800ea70 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800ea34:	8afb      	ldrh	r3, [r7, #22]
 800ea36:	005b      	lsls	r3, r3, #1
 800ea38:	3307      	adds	r3, #7
        temp = word(
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800ea40:	8afb      	ldrh	r3, [r7, #22]
 800ea42:	3304      	adds	r3, #4
 800ea44:	005b      	lsls	r3, r3, #1
        temp = word(
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	4413      	add	r3, r2
 800ea4a:	7cdb      	ldrb	r3, [r3, #19]
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f7ff fc63 	bl	800e318 <word>
 800ea52:	4603      	mov	r3, r0
 800ea54:	81fb      	strh	r3, [r7, #14]

        modH->u16regsHR[ u16StartAdd + i ] = temp;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ea5c:	8ab9      	ldrh	r1, [r7, #20]
 800ea5e:	8afb      	ldrh	r3, [r7, #22]
 800ea60:	440b      	add	r3, r1
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	4413      	add	r3, r2
 800ea66:	89fa      	ldrh	r2, [r7, #14]
 800ea68:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800ea6a:	8afb      	ldrh	r3, [r7, #22]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	82fb      	strh	r3, [r7, #22]
 800ea70:	8afa      	ldrh	r2, [r7, #22]
 800ea72:	8a7b      	ldrh	r3, [r7, #18]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d3dd      	bcc.n	800ea34 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ea7e:	3302      	adds	r3, #2
 800ea80:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f7ff fcc1 	bl	800e40a <sendTxBuffer>

    return u8CopyBufferSize;
 800ea88:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3718      	adds	r7, #24
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <HAL_UART_TxCpltCallback>:
=======
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800ee3e:	8a7b      	ldrh	r3, [r7, #18]
 800ee40:	b2da      	uxtb	r2, r3
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2206      	movs	r2, #6
 800ee4a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800ee4e:	2300      	movs	r3, #0
 800ee50:	82fb      	strh	r3, [r7, #22]
 800ee52:	e01d      	b.n	800ee90 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800ee54:	8afb      	ldrh	r3, [r7, #22]
 800ee56:	005b      	lsls	r3, r3, #1
 800ee58:	3307      	adds	r3, #7
        temp = word(
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800ee60:	8afb      	ldrh	r3, [r7, #22]
 800ee62:	3304      	adds	r3, #4
 800ee64:	005b      	lsls	r3, r3, #1
        temp = word(
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	4413      	add	r3, r2
 800ee6a:	7cdb      	ldrb	r3, [r3, #19]
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	f7ff fc63 	bl	800e738 <word>
 800ee72:	4603      	mov	r3, r0
 800ee74:	81fb      	strh	r3, [r7, #14]

        modH->u16regsHR[ u16StartAdd + i ] = temp;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ee7c:	8ab9      	ldrh	r1, [r7, #20]
 800ee7e:	8afb      	ldrh	r3, [r7, #22]
 800ee80:	440b      	add	r3, r1
 800ee82:	005b      	lsls	r3, r3, #1
 800ee84:	4413      	add	r3, r2
 800ee86:	89fa      	ldrh	r2, [r7, #14]
 800ee88:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800ee8a:	8afb      	ldrh	r3, [r7, #22]
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	82fb      	strh	r3, [r7, #22]
 800ee90:	8afa      	ldrh	r2, [r7, #22]
 800ee92:	8a7b      	ldrh	r3, [r7, #18]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d3dd      	bcc.n	800ee54 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ee9e:	3302      	adds	r3, #2
 800eea0:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f7ff fcc1 	bl	800e82a <sendTxBuffer>

    return u8CopyBufferSize;
 800eea8:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3718      	adds	r7, #24
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <HAL_UART_TxCpltCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b086      	sub	sp, #24
 800ea98:	af02      	add	r7, sp, #8
 800ea9a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	e019      	b.n	800eada <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800eaa6:	4a17      	ldr	r2, [pc, #92]	; (800eb04 <HAL_UART_TxCpltCallback+0x70>)
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d10e      	bne.n	800ead4 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800eab6:	4a13      	ldr	r2, [pc, #76]	; (800eb04 <HAL_UART_TxCpltCallback+0x70>)
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eabe:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800eac2:	f107 0308 	add.w	r3, r7, #8
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	2300      	movs	r3, #0
 800eaca:	2200      	movs	r2, #0
 800eacc:	2100      	movs	r1, #0
 800eace:	f7fd fa71 	bl	800bfb4 <xTaskGenericNotifyFromISR>
	   		break;
 800ead2:	e008      	b.n	800eae6 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	3301      	adds	r3, #1
 800ead8:	60fb      	str	r3, [r7, #12]
 800eada:	4b0b      	ldr	r3, [pc, #44]	; (800eb08 <HAL_UART_TxCpltCallback+0x74>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	461a      	mov	r2, r3
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	4293      	cmp	r3, r2
 800eae4:	dbdf      	blt.n	800eaa6 <HAL_UART_TxCpltCallback+0x12>
=======
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b086      	sub	sp, #24
 800eeb8:	af02      	add	r7, sp, #8
 800eeba:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800eebc:	2300      	movs	r3, #0
 800eebe:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800eec0:	2300      	movs	r3, #0
 800eec2:	60fb      	str	r3, [r7, #12]
 800eec4:	e019      	b.n	800eefa <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800eec6:	4a17      	ldr	r2, [pc, #92]	; (800ef24 <HAL_UART_TxCpltCallback+0x70>)
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d10e      	bne.n	800eef4 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800eed6:	4a13      	ldr	r2, [pc, #76]	; (800ef24 <HAL_UART_TxCpltCallback+0x70>)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eede:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800eee2:	f107 0308 	add.w	r3, r7, #8
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	2300      	movs	r3, #0
 800eeea:	2200      	movs	r2, #0
 800eeec:	2100      	movs	r1, #0
 800eeee:	f7fd fad3 	bl	800c498 <xTaskGenericNotifyFromISR>
	   		break;
 800eef2:	e008      	b.n	800ef06 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	3301      	adds	r3, #1
 800eef8:	60fb      	str	r3, [r7, #12]
 800eefa:	4b0b      	ldr	r3, [pc, #44]	; (800ef28 <HAL_UART_TxCpltCallback+0x74>)
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	461a      	mov	r2, r3
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	4293      	cmp	r3, r2
 800ef04:	dbdf      	blt.n	800eec6 <HAL_UART_TxCpltCallback+0x12>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
<<<<<<< HEAD
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d007      	beq.n	800eafc <HAL_UART_TxCpltCallback+0x68>
 800eaec:	4b07      	ldr	r3, [pc, #28]	; (800eb0c <HAL_UART_TxCpltCallback+0x78>)
 800eaee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf2:	601a      	str	r2, [r3, #0]
 800eaf4:	f3bf 8f4f 	dsb	sy
 800eaf8:	f3bf 8f6f 	isb	sy
=======
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d007      	beq.n	800ef1c <HAL_UART_TxCpltCallback+0x68>
 800ef0c:	4b07      	ldr	r3, [pc, #28]	; (800ef2c <HAL_UART_TxCpltCallback+0x78>)
 800ef0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef12:	601a      	str	r2, [r3, #0]
 800ef14:	f3bf 8f4f 	dsb	sy
 800ef18:	f3bf 8f6f 	isb	sy
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
<<<<<<< HEAD
 800eafc:	bf00      	nop
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	2000211c 	.word	0x2000211c
 800eb08:	20002124 	.word	0x20002124
 800eb0c:	e000ed04 	.word	0xe000ed04

0800eb10 <HAL_UART_RxCpltCallback>:
=======
 800ef1c:	bf00      	nop
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	20002104 	.word	0x20002104
 800ef28:	2000210c 	.word	0x2000210c
 800ef2c:	e000ed04 	.word	0xe000ed04

0800ef30 <HAL_UART_RxCpltCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
<<<<<<< HEAD
 800eb10:	b590      	push	{r4, r7, lr}
 800eb12:	b087      	sub	sp, #28
 800eb14:	af02      	add	r7, sp, #8
 800eb16:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	60bb      	str	r3, [r7, #8]
=======
 800ef30:	b590      	push	{r4, r7, lr}
 800ef32:	b087      	sub	sp, #28
 800ef34:	af02      	add	r7, sp, #8
 800ef36:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
<<<<<<< HEAD
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	60fb      	str	r3, [r7, #12]
 800eb20:	e042      	b.n	800eba8 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800eb22:	4a2d      	ldr	r2, [pc, #180]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d137      	bne.n	800eba2 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800eb32:	4a29      	ldr	r2, [pc, #164]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb3a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d139      	bne.n	800ebb6 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800eb42:	4a25      	ldr	r2, [pc, #148]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb4a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800eb4e:	4922      	ldr	r1, [pc, #136]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eb56:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	f7fe fb9d 	bl	800d29c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800eb62:	4a1d      	ldr	r2, [pc, #116]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb6a:	6858      	ldr	r0, [r3, #4]
 800eb6c:	4a1a      	ldr	r2, [pc, #104]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb74:	33b8      	adds	r3, #184	; 0xb8
 800eb76:	2201      	movs	r2, #1
 800eb78:	4619      	mov	r1, r3
 800eb7a:	f7f7 fe23 	bl	80067c4 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800eb7e:	4a16      	ldr	r2, [pc, #88]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb86:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 800eb8a:	f7fc fbf7 	bl	800b37c <xTaskGetTickCountFromISR>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	f107 0308 	add.w	r3, r7, #8
 800eb94:	2100      	movs	r1, #0
 800eb96:	9100      	str	r1, [sp, #0]
 800eb98:	2107      	movs	r1, #7
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f7fd fc1c 	bl	800c3d8 <xTimerGenericCommand>
    		}
    		break;
 800eba0:	e009      	b.n	800ebb6 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3301      	adds	r3, #1
 800eba6:	60fb      	str	r3, [r7, #12]
 800eba8:	4b0c      	ldr	r3, [pc, #48]	; (800ebdc <HAL_UART_RxCpltCallback+0xcc>)
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	461a      	mov	r2, r3
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	dbb6      	blt.n	800eb22 <HAL_UART_RxCpltCallback+0x12>
 800ebb4:	e000      	b.n	800ebb8 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800ebb6:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d007      	beq.n	800ebce <HAL_UART_RxCpltCallback+0xbe>
 800ebbe:	4b08      	ldr	r3, [pc, #32]	; (800ebe0 <HAL_UART_RxCpltCallback+0xd0>)
 800ebc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebc4:	601a      	str	r2, [r3, #0]
 800ebc6:	f3bf 8f4f 	dsb	sy
 800ebca:	f3bf 8f6f 	isb	sy
=======
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	60fb      	str	r3, [r7, #12]
 800ef40:	e042      	b.n	800efc8 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800ef42:	4a2d      	ldr	r2, [pc, #180]	; (800eff8 <HAL_UART_RxCpltCallback+0xc8>)
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d137      	bne.n	800efc2 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800ef52:	4a29      	ldr	r2, [pc, #164]	; (800eff8 <HAL_UART_RxCpltCallback+0xc8>)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef5a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d139      	bne.n	800efd6 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800ef62:	4a25      	ldr	r2, [pc, #148]	; (800eff8 <HAL_UART_RxCpltCallback+0xc8>)
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef6a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ef6e:	4922      	ldr	r1, [pc, #136]	; (800eff8 <HAL_UART_RxCpltCallback+0xc8>)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ef76:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	4610      	mov	r0, r2
 800ef7e:	f7fe fb9d 	bl	800d6bc <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800ef82:	4a1d      	ldr	r2, [pc, #116]	; (800eff8 <HAL_UART_RxCpltCallback+0xc8>)
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef8a:	6858      	ldr	r0, [r3, #4]
 800ef8c:	4a1a      	ldr	r2, [pc, #104]	; (800eff8 <HAL_UART_RxCpltCallback+0xc8>)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef94:	33b8      	adds	r3, #184	; 0xb8
 800ef96:	2201      	movs	r2, #1
 800ef98:	4619      	mov	r1, r3
 800ef9a:	f7f7 ff45 	bl	8006e28 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800ef9e:	4a16      	ldr	r2, [pc, #88]	; (800eff8 <HAL_UART_RxCpltCallback+0xc8>)
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efa6:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 800efaa:	f7fc fc59 	bl	800b860 <xTaskGetTickCountFromISR>
 800efae:	4602      	mov	r2, r0
 800efb0:	f107 0308 	add.w	r3, r7, #8
 800efb4:	2100      	movs	r1, #0
 800efb6:	9100      	str	r1, [sp, #0]
 800efb8:	2107      	movs	r1, #7
 800efba:	4620      	mov	r0, r4
 800efbc:	f7fd fc40 	bl	800c840 <xTimerGenericCommand>
    		}
    		break;
 800efc0:	e009      	b.n	800efd6 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	3301      	adds	r3, #1
 800efc6:	60fb      	str	r3, [r7, #12]
 800efc8:	4b0c      	ldr	r3, [pc, #48]	; (800effc <HAL_UART_RxCpltCallback+0xcc>)
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	461a      	mov	r2, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	4293      	cmp	r3, r2
 800efd2:	dbb6      	blt.n	800ef42 <HAL_UART_RxCpltCallback+0x12>
 800efd4:	e000      	b.n	800efd8 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800efd6:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d007      	beq.n	800efee <HAL_UART_RxCpltCallback+0xbe>
 800efde:	4b08      	ldr	r3, [pc, #32]	; (800f000 <HAL_UART_RxCpltCallback+0xd0>)
 800efe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efe4:	601a      	str	r2, [r3, #0]
 800efe6:	f3bf 8f4f 	dsb	sy
 800efea:	f3bf 8f6f 	isb	sy
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
<<<<<<< HEAD
 800ebce:	bf00      	nop
 800ebd0:	3714      	adds	r7, #20
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd90      	pop	{r4, r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	2000211c 	.word	0x2000211c
 800ebdc:	20002124 	.word	0x20002124
 800ebe0:	e000ed04 	.word	0xe000ed04

0800ebe4 <HAL_UART_ErrorCallback>:
=======
 800efee:	bf00      	nop
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd90      	pop	{r4, r7, pc}
 800eff6:	bf00      	nop
 800eff8:	20002104 	.word	0x20002104
 800effc:	2000210c 	.word	0x2000210c
 800f000:	e000ed04 	.word	0xe000ed04

0800f004 <HAL_UART_ErrorCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
=======
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

 int i;

 for (i = 0; i < numberHandlers; i++ )
<<<<<<< HEAD
 800ebec:	2300      	movs	r3, #0
 800ebee:	60fb      	str	r3, [r7, #12]
 800ebf0:	e041      	b.n	800ec76 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800ebf2:	4a27      	ldr	r2, [pc, #156]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d136      	bne.n	800ec70 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800ec02:	4a23      	ldr	r2, [pc, #140]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec0a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ec0e:	2b04      	cmp	r3, #4
 800ec10:	d138      	bne.n	800ec84 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ec12:	e007      	b.n	800ec24 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800ec14:	4a1e      	ldr	r2, [pc, #120]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7f7 fe9c 	bl	800695c <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ec24:	4a1a      	ldr	r2, [pc, #104]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec2c:	6858      	ldr	r0, [r3, #4]
 800ec2e:	4a18      	ldr	r2, [pc, #96]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec36:	33d0      	adds	r3, #208	; 0xd0
 800ec38:	2280      	movs	r2, #128	; 0x80
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	f7fa fb85 	bl	800934a <HAL_UARTEx_ReceiveToIdle_DMA>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d1e6      	bne.n	800ec14 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800ec46:	4a12      	ldr	r2, [pc, #72]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	490d      	ldr	r1, [pc, #52]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f022 0204 	bic.w	r2, r2, #4
 800ec6c:	601a      	str	r2, [r3, #0]
=======
 800f00c:	2300      	movs	r3, #0
 800f00e:	60fb      	str	r3, [r7, #12]
 800f010:	e041      	b.n	800f096 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800f012:	4a27      	ldr	r2, [pc, #156]	; (800f0b0 <HAL_UART_ErrorCallback+0xac>)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d136      	bne.n	800f090 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800f022:	4a23      	ldr	r2, [pc, #140]	; (800f0b0 <HAL_UART_ErrorCallback+0xac>)
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f02a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f02e:	2b04      	cmp	r3, #4
 800f030:	d138      	bne.n	800f0a4 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f032:	e007      	b.n	800f044 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800f034:	4a1e      	ldr	r2, [pc, #120]	; (800f0b0 <HAL_UART_ErrorCallback+0xac>)
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	4618      	mov	r0, r3
 800f040:	f7f7 ffbe 	bl	8006fc0 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f044:	4a1a      	ldr	r2, [pc, #104]	; (800f0b0 <HAL_UART_ErrorCallback+0xac>)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f04c:	6858      	ldr	r0, [r3, #4]
 800f04e:	4a18      	ldr	r2, [pc, #96]	; (800f0b0 <HAL_UART_ErrorCallback+0xac>)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f056:	33d0      	adds	r3, #208	; 0xd0
 800f058:	2280      	movs	r2, #128	; 0x80
 800f05a:	4619      	mov	r1, r3
 800f05c:	f7fa fca7 	bl	80099ae <HAL_UARTEx_ReceiveToIdle_DMA>
 800f060:	4603      	mov	r3, r0
 800f062:	2b00      	cmp	r3, #0
 800f064:	d1e6      	bne.n	800f034 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800f066:	4a12      	ldr	r2, [pc, #72]	; (800f0b0 <HAL_UART_ErrorCallback+0xac>)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	490d      	ldr	r1, [pc, #52]	; (800f0b0 <HAL_UART_ErrorCallback+0xac>)
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f022 0204 	bic.w	r2, r2, #4
 800f08c:	601a      	str	r2, [r3, #0]
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa

    		}

    		break;
<<<<<<< HEAD
 800ec6e:	e009      	b.n	800ec84 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	3301      	adds	r3, #1
 800ec74:	60fb      	str	r3, [r7, #12]
 800ec76:	4b07      	ldr	r3, [pc, #28]	; (800ec94 <HAL_UART_ErrorCallback+0xb0>)
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	dbb7      	blt.n	800ebf2 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800ec82:	e000      	b.n	800ec86 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800ec84:	bf00      	nop
}
 800ec86:	bf00      	nop
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	2000211c 	.word	0x2000211c
 800ec94:	20002124 	.word	0x20002124

0800ec98 <HAL_UARTEx_RxEventCallback>:
=======
 800f08e:	e009      	b.n	800f0a4 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	3301      	adds	r3, #1
 800f094:	60fb      	str	r3, [r7, #12]
 800f096:	4b07      	ldr	r3, [pc, #28]	; (800f0b4 <HAL_UART_ErrorCallback+0xb0>)
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	461a      	mov	r2, r3
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	dbb7      	blt.n	800f012 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800f0a2:	e000      	b.n	800f0a6 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800f0a4:	bf00      	nop
}
 800f0a6:	bf00      	nop
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	20002104 	.word	0x20002104
 800f0b4:	2000210c 	.word	0x2000210c

0800f0b8 <HAL_UARTEx_RxEventCallback>:
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b086      	sub	sp, #24
 800ec9c:	af02      	add	r7, sp, #8
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	460b      	mov	r3, r1
 800eca2:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800eca4:	2300      	movs	r3, #0
 800eca6:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800eca8:	2300      	movs	r3, #0
 800ecaa:	60fb      	str	r3, [r7, #12]
 800ecac:	e061      	b.n	800ed72 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800ecae:	4a3c      	ldr	r2, [pc, #240]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d156      	bne.n	800ed6c <HAL_UARTEx_RxEventCallback+0xd4>
=======
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b086      	sub	sp, #24
 800f0bc:	af02      	add	r7, sp, #8
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	60fb      	str	r3, [r7, #12]
 800f0cc:	e061      	b.n	800f192 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800f0ce:	4a3c      	ldr	r2, [pc, #240]	; (800f1c0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d156      	bne.n	800f18c <HAL_UARTEx_RxEventCallback+0xd4>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
<<<<<<< HEAD
 800ecbe:	4a38      	ldr	r2, [pc, #224]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecc6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ecca:	2b04      	cmp	r3, #4
 800eccc:	d158      	bne.n	800ed80 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800ecce:	887b      	ldrh	r3, [r7, #2]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d055      	beq.n	800ed80 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800ecd4:	4a32      	ldr	r2, [pc, #200]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecdc:	887a      	ldrh	r2, [r7, #2]
 800ecde:	b2d2      	uxtb	r2, r2
 800ece0:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		    				mHandlers[i]->xBufferRX.overflow = false;
 800ece4:	4a2e      	ldr	r2, [pc, #184]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecec:	2200      	movs	r2, #0
 800ecee:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ecf2:	e007      	b.n	800ed04 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800ecf4:	4a2a      	ldr	r2, [pc, #168]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7f7 fe2c 	bl	800695c <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ed04:	4a26      	ldr	r2, [pc, #152]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed0c:	6858      	ldr	r0, [r3, #4]
 800ed0e:	4a24      	ldr	r2, [pc, #144]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed16:	33d0      	adds	r3, #208	; 0xd0
 800ed18:	2280      	movs	r2, #128	; 0x80
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	f7fa fb15 	bl	800934a <HAL_UARTEx_ReceiveToIdle_DMA>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1e6      	bne.n	800ecf4 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800ed26:	4a1e      	ldr	r2, [pc, #120]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	4919      	ldr	r1, [pc, #100]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f022 0204 	bic.w	r2, r2, #4
 800ed4c:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800ed4e:	4a14      	ldr	r2, [pc, #80]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed56:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800ed5a:	f107 0308 	add.w	r3, r7, #8
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	2300      	movs	r3, #0
 800ed62:	2203      	movs	r2, #3
 800ed64:	2100      	movs	r1, #0
 800ed66:	f7fd f925 	bl	800bfb4 <xTaskGenericNotifyFromISR>
=======
 800f0de:	4a38      	ldr	r2, [pc, #224]	; (800f1c0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0e6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f0ea:	2b04      	cmp	r3, #4
 800f0ec:	d158      	bne.n	800f1a0 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800f0ee:	887b      	ldrh	r3, [r7, #2]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d055      	beq.n	800f1a0 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800f0f4:	4a32      	ldr	r2, [pc, #200]	; (800f1c0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0fc:	887a      	ldrh	r2, [r7, #2]
 800f0fe:	b2d2      	uxtb	r2, r2
 800f100:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		    				mHandlers[i]->xBufferRX.overflow = false;
 800f104:	4a2e      	ldr	r2, [pc, #184]	; (800f1c0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f112:	e007      	b.n	800f124 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800f114:	4a2a      	ldr	r2, [pc, #168]	; (800f1c0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	4618      	mov	r0, r3
 800f120:	f7f7 ff4e 	bl	8006fc0 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f124:	4a26      	ldr	r2, [pc, #152]	; (800f1c0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f12c:	6858      	ldr	r0, [r3, #4]
 800f12e:	4a24      	ldr	r2, [pc, #144]	; (800f1c0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f136:	33d0      	adds	r3, #208	; 0xd0
 800f138:	2280      	movs	r2, #128	; 0x80
 800f13a:	4619      	mov	r1, r3
 800f13c:	f7fa fc37 	bl	80099ae <HAL_UARTEx_ReceiveToIdle_DMA>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d1e6      	bne.n	800f114 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800f146:	4a1e      	ldr	r2, [pc, #120]	; (800f1c0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	4919      	ldr	r1, [pc, #100]	; (800f1c0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f022 0204 	bic.w	r2, r2, #4
 800f16c:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800f16e:	4a14      	ldr	r2, [pc, #80]	; (800f1c0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f176:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800f17a:	f107 0308 	add.w	r3, r7, #8
 800f17e:	9300      	str	r3, [sp, #0]
 800f180:	2300      	movs	r3, #0
 800f182:	2203      	movs	r2, #3
 800f184:	2100      	movs	r1, #0
 800f186:	f7fd f987 	bl	800c498 <xTaskGenericNotifyFromISR>
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
	    			}
	    		}

	    		break;
<<<<<<< HEAD
 800ed6a:	e009      	b.n	800ed80 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	60fb      	str	r3, [r7, #12]
 800ed72:	4b0c      	ldr	r3, [pc, #48]	; (800eda4 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	461a      	mov	r2, r3
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	db97      	blt.n	800ecae <HAL_UARTEx_RxEventCallback+0x16>
 800ed7e:	e000      	b.n	800ed82 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800ed80:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d007      	beq.n	800ed98 <HAL_UARTEx_RxEventCallback+0x100>
 800ed88:	4b07      	ldr	r3, [pc, #28]	; (800eda8 <HAL_UARTEx_RxEventCallback+0x110>)
 800ed8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed8e:	601a      	str	r2, [r3, #0]
 800ed90:	f3bf 8f4f 	dsb	sy
 800ed94:	f3bf 8f6f 	isb	sy
}
 800ed98:	bf00      	nop
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	2000211c 	.word	0x2000211c
 800eda4:	20002124 	.word	0x20002124
 800eda8:	e000ed04 	.word	0xe000ed04

0800edac <memset>:
 800edac:	4402      	add	r2, r0
 800edae:	4603      	mov	r3, r0
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d100      	bne.n	800edb6 <memset+0xa>
 800edb4:	4770      	bx	lr
 800edb6:	f803 1b01 	strb.w	r1, [r3], #1
 800edba:	e7f9      	b.n	800edb0 <memset+0x4>

0800edbc <__libc_init_array>:
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	4d0d      	ldr	r5, [pc, #52]	; (800edf4 <__libc_init_array+0x38>)
 800edc0:	4c0d      	ldr	r4, [pc, #52]	; (800edf8 <__libc_init_array+0x3c>)
 800edc2:	1b64      	subs	r4, r4, r5
 800edc4:	10a4      	asrs	r4, r4, #2
 800edc6:	2600      	movs	r6, #0
 800edc8:	42a6      	cmp	r6, r4
 800edca:	d109      	bne.n	800ede0 <__libc_init_array+0x24>
 800edcc:	4d0b      	ldr	r5, [pc, #44]	; (800edfc <__libc_init_array+0x40>)
 800edce:	4c0c      	ldr	r4, [pc, #48]	; (800ee00 <__libc_init_array+0x44>)
 800edd0:	f000 f826 	bl	800ee20 <_init>
 800edd4:	1b64      	subs	r4, r4, r5
 800edd6:	10a4      	asrs	r4, r4, #2
 800edd8:	2600      	movs	r6, #0
 800edda:	42a6      	cmp	r6, r4
 800eddc:	d105      	bne.n	800edea <__libc_init_array+0x2e>
 800edde:	bd70      	pop	{r4, r5, r6, pc}
 800ede0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ede4:	4798      	blx	r3
 800ede6:	3601      	adds	r6, #1
 800ede8:	e7ee      	b.n	800edc8 <__libc_init_array+0xc>
 800edea:	f855 3b04 	ldr.w	r3, [r5], #4
 800edee:	4798      	blx	r3
 800edf0:	3601      	adds	r6, #1
 800edf2:	e7f2      	b.n	800edda <__libc_init_array+0x1e>
 800edf4:	0800f0ec 	.word	0x0800f0ec
 800edf8:	0800f0ec 	.word	0x0800f0ec
 800edfc:	0800f0ec 	.word	0x0800f0ec
 800ee00:	0800f0f0 	.word	0x0800f0f0

0800ee04 <memcpy>:
 800ee04:	440a      	add	r2, r1
 800ee06:	4291      	cmp	r1, r2
 800ee08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee0c:	d100      	bne.n	800ee10 <memcpy+0xc>
 800ee0e:	4770      	bx	lr
 800ee10:	b510      	push	{r4, lr}
 800ee12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee1a:	4291      	cmp	r1, r2
 800ee1c:	d1f9      	bne.n	800ee12 <memcpy+0xe>
 800ee1e:	bd10      	pop	{r4, pc}

0800ee20 <_init>:
 800ee20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee22:	bf00      	nop
 800ee24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee26:	bc08      	pop	{r3}
 800ee28:	469e      	mov	lr, r3
 800ee2a:	4770      	bx	lr

0800ee2c <_fini>:
 800ee2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2e:	bf00      	nop
 800ee30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee32:	bc08      	pop	{r3}
 800ee34:	469e      	mov	lr, r3
 800ee36:	4770      	bx	lr
=======
 800f18a:	e009      	b.n	800f1a0 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	3301      	adds	r3, #1
 800f190:	60fb      	str	r3, [r7, #12]
 800f192:	4b0c      	ldr	r3, [pc, #48]	; (800f1c4 <HAL_UARTEx_RxEventCallback+0x10c>)
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	461a      	mov	r2, r3
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	4293      	cmp	r3, r2
 800f19c:	db97      	blt.n	800f0ce <HAL_UARTEx_RxEventCallback+0x16>
 800f19e:	e000      	b.n	800f1a2 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800f1a0:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d007      	beq.n	800f1b8 <HAL_UARTEx_RxEventCallback+0x100>
 800f1a8:	4b07      	ldr	r3, [pc, #28]	; (800f1c8 <HAL_UARTEx_RxEventCallback+0x110>)
 800f1aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1ae:	601a      	str	r2, [r3, #0]
 800f1b0:	f3bf 8f4f 	dsb	sy
 800f1b4:	f3bf 8f6f 	isb	sy
}
 800f1b8:	bf00      	nop
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	20002104 	.word	0x20002104
 800f1c4:	2000210c 	.word	0x2000210c
 800f1c8:	e000ed04 	.word	0xe000ed04

0800f1cc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800f1cc:	b480      	push	{r7}
 800f1ce:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800f1d0:	bf00      	nop
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d8:	4770      	bx	lr
	...

0800f1dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b086      	sub	sp, #24
 800f1e0:	af04      	add	r7, sp, #16
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800f1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ea:	9302      	str	r3, [sp, #8]
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	9301      	str	r3, [sp, #4]
 800f1f0:	1dfb      	adds	r3, r7, #7
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	2178      	movs	r1, #120	; 0x78
 800f1fa:	4803      	ldr	r0, [pc, #12]	; (800f208 <ssd1306_WriteCommand+0x2c>)
 800f1fc:	f7f4 ff84 	bl	8004108 <HAL_I2C_Mem_Write>
}
 800f200:	bf00      	nop
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	2000016c 	.word	0x2000016c

0800f20c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b086      	sub	sp, #24
 800f210:	af04      	add	r7, sp, #16
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	f04f 32ff 	mov.w	r2, #4294967295
 800f21e:	9202      	str	r2, [sp, #8]
 800f220:	9301      	str	r3, [sp, #4]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	9300      	str	r3, [sp, #0]
 800f226:	2301      	movs	r3, #1
 800f228:	2240      	movs	r2, #64	; 0x40
 800f22a:	2178      	movs	r1, #120	; 0x78
 800f22c:	4803      	ldr	r0, [pc, #12]	; (800f23c <ssd1306_WriteData+0x30>)
 800f22e:	f7f4 ff6b 	bl	8004108 <HAL_I2C_Mem_Write>
}
 800f232:	bf00      	nop
 800f234:	3708      	adds	r7, #8
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	2000016c 	.word	0x2000016c

0800f240 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800f240:	b580      	push	{r7, lr}
 800f242:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800f244:	f7ff ffc2 	bl	800f1cc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800f248:	2064      	movs	r0, #100	; 0x64
 800f24a:	f7f2 fc0b 	bl	8001a64 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800f24e:	2000      	movs	r0, #0
 800f250:	f000 f8c0 	bl	800f3d4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800f254:	2020      	movs	r0, #32
 800f256:	f7ff ffc1 	bl	800f1dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800f25a:	2000      	movs	r0, #0
 800f25c:	f7ff ffbe 	bl	800f1dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800f260:	20b0      	movs	r0, #176	; 0xb0
 800f262:	f7ff ffbb 	bl	800f1dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800f266:	20c8      	movs	r0, #200	; 0xc8
 800f268:	f7ff ffb8 	bl	800f1dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800f26c:	2000      	movs	r0, #0
 800f26e:	f7ff ffb5 	bl	800f1dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800f272:	2010      	movs	r0, #16
 800f274:	f7ff ffb2 	bl	800f1dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800f278:	2040      	movs	r0, #64	; 0x40
 800f27a:	f7ff ffaf 	bl	800f1dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800f27e:	20ff      	movs	r0, #255	; 0xff
 800f280:	f000 f894 	bl	800f3ac <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800f284:	20a1      	movs	r0, #161	; 0xa1
 800f286:	f7ff ffa9 	bl	800f1dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800f28a:	20a6      	movs	r0, #166	; 0xa6
 800f28c:	f7ff ffa6 	bl	800f1dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800f290:	20a8      	movs	r0, #168	; 0xa8
 800f292:	f7ff ffa3 	bl	800f1dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800f296:	203f      	movs	r0, #63	; 0x3f
 800f298:	f7ff ffa0 	bl	800f1dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800f29c:	20a4      	movs	r0, #164	; 0xa4
 800f29e:	f7ff ff9d 	bl	800f1dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800f2a2:	20d3      	movs	r0, #211	; 0xd3
 800f2a4:	f7ff ff9a 	bl	800f1dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	f7ff ff97 	bl	800f1dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800f2ae:	20d5      	movs	r0, #213	; 0xd5
 800f2b0:	f7ff ff94 	bl	800f1dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800f2b4:	20f0      	movs	r0, #240	; 0xf0
 800f2b6:	f7ff ff91 	bl	800f1dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800f2ba:	20d9      	movs	r0, #217	; 0xd9
 800f2bc:	f7ff ff8e 	bl	800f1dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800f2c0:	2022      	movs	r0, #34	; 0x22
 800f2c2:	f7ff ff8b 	bl	800f1dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800f2c6:	20da      	movs	r0, #218	; 0xda
 800f2c8:	f7ff ff88 	bl	800f1dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800f2cc:	2012      	movs	r0, #18
 800f2ce:	f7ff ff85 	bl	800f1dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800f2d2:	20db      	movs	r0, #219	; 0xdb
 800f2d4:	f7ff ff82 	bl	800f1dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800f2d8:	2020      	movs	r0, #32
 800f2da:	f7ff ff7f 	bl	800f1dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800f2de:	208d      	movs	r0, #141	; 0x8d
 800f2e0:	f7ff ff7c 	bl	800f1dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800f2e4:	2014      	movs	r0, #20
 800f2e6:	f7ff ff79 	bl	800f1dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800f2ea:	2001      	movs	r0, #1
 800f2ec:	f000 f872 	bl	800f3d4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	f000 f80f 	bl	800f314 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800f2f6:	f000 f831 	bl	800f35c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800f2fa:	4b05      	ldr	r3, [pc, #20]	; (800f310 <ssd1306_Init+0xd0>)
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800f300:	4b03      	ldr	r3, [pc, #12]	; (800f310 <ssd1306_Init+0xd0>)
 800f302:	2200      	movs	r2, #0
 800f304:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800f306:	4b02      	ldr	r3, [pc, #8]	; (800f310 <ssd1306_Init+0xd0>)
 800f308:	2201      	movs	r2, #1
 800f30a:	711a      	strb	r2, [r3, #4]
}
 800f30c:	bf00      	nop
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	20002510 	.word	0x20002510

0800f314 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800f314:	b480      	push	{r7}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
 800f31a:	4603      	mov	r3, r0
 800f31c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800f31e:	2300      	movs	r3, #0
 800f320:	60fb      	str	r3, [r7, #12]
 800f322:	e00d      	b.n	800f340 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800f324:	79fb      	ldrb	r3, [r7, #7]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d101      	bne.n	800f32e <ssd1306_Fill+0x1a>
 800f32a:	2100      	movs	r1, #0
 800f32c:	e000      	b.n	800f330 <ssd1306_Fill+0x1c>
 800f32e:	21ff      	movs	r1, #255	; 0xff
 800f330:	4a09      	ldr	r2, [pc, #36]	; (800f358 <ssd1306_Fill+0x44>)
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	4413      	add	r3, r2
 800f336:	460a      	mov	r2, r1
 800f338:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	3301      	adds	r3, #1
 800f33e:	60fb      	str	r3, [r7, #12]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f346:	d3ed      	bcc.n	800f324 <ssd1306_Fill+0x10>
    }
}
 800f348:	bf00      	nop
 800f34a:	bf00      	nop
 800f34c:	3714      	adds	r7, #20
 800f34e:	46bd      	mov	sp, r7
 800f350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop
 800f358:	20002110 	.word	0x20002110

0800f35c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800f362:	2300      	movs	r3, #0
 800f364:	71fb      	strb	r3, [r7, #7]
 800f366:	e016      	b.n	800f396 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800f368:	79fb      	ldrb	r3, [r7, #7]
 800f36a:	3b50      	subs	r3, #80	; 0x50
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	4618      	mov	r0, r3
 800f370:	f7ff ff34 	bl	800f1dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800f374:	2000      	movs	r0, #0
 800f376:	f7ff ff31 	bl	800f1dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800f37a:	2010      	movs	r0, #16
 800f37c:	f7ff ff2e 	bl	800f1dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800f380:	79fb      	ldrb	r3, [r7, #7]
 800f382:	01db      	lsls	r3, r3, #7
 800f384:	4a08      	ldr	r2, [pc, #32]	; (800f3a8 <ssd1306_UpdateScreen+0x4c>)
 800f386:	4413      	add	r3, r2
 800f388:	2180      	movs	r1, #128	; 0x80
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7ff ff3e 	bl	800f20c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800f390:	79fb      	ldrb	r3, [r7, #7]
 800f392:	3301      	adds	r3, #1
 800f394:	71fb      	strb	r3, [r7, #7]
 800f396:	79fb      	ldrb	r3, [r7, #7]
 800f398:	2b07      	cmp	r3, #7
 800f39a:	d9e5      	bls.n	800f368 <ssd1306_UpdateScreen+0xc>
    }
}
 800f39c:	bf00      	nop
 800f39e:	bf00      	nop
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	20002110 	.word	0x20002110

0800f3ac <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800f3b6:	2381      	movs	r3, #129	; 0x81
 800f3b8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800f3ba:	7bfb      	ldrb	r3, [r7, #15]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7ff ff0d 	bl	800f1dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800f3c2:	79fb      	ldrb	r3, [r7, #7]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7ff ff09 	bl	800f1dc <ssd1306_WriteCommand>
}
 800f3ca:	bf00      	nop
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
	...

0800f3d4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	4603      	mov	r3, r0
 800f3dc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800f3de:	79fb      	ldrb	r3, [r7, #7]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d005      	beq.n	800f3f0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800f3e4:	23af      	movs	r3, #175	; 0xaf
 800f3e6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800f3e8:	4b08      	ldr	r3, [pc, #32]	; (800f40c <ssd1306_SetDisplayOn+0x38>)
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	715a      	strb	r2, [r3, #5]
 800f3ee:	e004      	b.n	800f3fa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800f3f0:	23ae      	movs	r3, #174	; 0xae
 800f3f2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800f3f4:	4b05      	ldr	r3, [pc, #20]	; (800f40c <ssd1306_SetDisplayOn+0x38>)
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800f3fa:	7bfb      	ldrb	r3, [r7, #15]
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7ff feed 	bl	800f1dc <ssd1306_WriteCommand>
}
 800f402:	bf00      	nop
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	20002510 	.word	0x20002510

0800f410 <memset>:
 800f410:	4402      	add	r2, r0
 800f412:	4603      	mov	r3, r0
 800f414:	4293      	cmp	r3, r2
 800f416:	d100      	bne.n	800f41a <memset+0xa>
 800f418:	4770      	bx	lr
 800f41a:	f803 1b01 	strb.w	r1, [r3], #1
 800f41e:	e7f9      	b.n	800f414 <memset+0x4>

0800f420 <__libc_init_array>:
 800f420:	b570      	push	{r4, r5, r6, lr}
 800f422:	4d0d      	ldr	r5, [pc, #52]	; (800f458 <__libc_init_array+0x38>)
 800f424:	4c0d      	ldr	r4, [pc, #52]	; (800f45c <__libc_init_array+0x3c>)
 800f426:	1b64      	subs	r4, r4, r5
 800f428:	10a4      	asrs	r4, r4, #2
 800f42a:	2600      	movs	r6, #0
 800f42c:	42a6      	cmp	r6, r4
 800f42e:	d109      	bne.n	800f444 <__libc_init_array+0x24>
 800f430:	4d0b      	ldr	r5, [pc, #44]	; (800f460 <__libc_init_array+0x40>)
 800f432:	4c0c      	ldr	r4, [pc, #48]	; (800f464 <__libc_init_array+0x44>)
 800f434:	f000 f826 	bl	800f484 <_init>
 800f438:	1b64      	subs	r4, r4, r5
 800f43a:	10a4      	asrs	r4, r4, #2
 800f43c:	2600      	movs	r6, #0
 800f43e:	42a6      	cmp	r6, r4
 800f440:	d105      	bne.n	800f44e <__libc_init_array+0x2e>
 800f442:	bd70      	pop	{r4, r5, r6, pc}
 800f444:	f855 3b04 	ldr.w	r3, [r5], #4
 800f448:	4798      	blx	r3
 800f44a:	3601      	adds	r6, #1
 800f44c:	e7ee      	b.n	800f42c <__libc_init_array+0xc>
 800f44e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f452:	4798      	blx	r3
 800f454:	3601      	adds	r6, #1
 800f456:	e7f2      	b.n	800f43e <__libc_init_array+0x1e>
 800f458:	0800f714 	.word	0x0800f714
 800f45c:	0800f714 	.word	0x0800f714
 800f460:	0800f714 	.word	0x0800f714
 800f464:	0800f718 	.word	0x0800f718

0800f468 <memcpy>:
 800f468:	440a      	add	r2, r1
 800f46a:	4291      	cmp	r1, r2
 800f46c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f470:	d100      	bne.n	800f474 <memcpy+0xc>
 800f472:	4770      	bx	lr
 800f474:	b510      	push	{r4, lr}
 800f476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f47a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f47e:	4291      	cmp	r1, r2
 800f480:	d1f9      	bne.n	800f476 <memcpy+0xe>
 800f482:	bd10      	pop	{r4, pc}

0800f484 <_init>:
 800f484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f486:	bf00      	nop
 800f488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f48a:	bc08      	pop	{r3}
 800f48c:	469e      	mov	lr, r3
 800f48e:	4770      	bx	lr

0800f490 <_fini>:
 800f490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f492:	bf00      	nop
 800f494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f496:	bc08      	pop	{r3}
 800f498:	469e      	mov	lr, r3
 800f49a:	4770      	bx	lr
>>>>>>> 5ea67b44bedeb2c571ca773959e855f12553b2aa
