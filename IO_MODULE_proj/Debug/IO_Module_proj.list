
IO_Module_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e988  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800eac8  0800eac8  0001eac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ed28  0800ed28  0001ed28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ed30  0800ed30  0001ed30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ed34  0800ed34  0001ed34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000008  0800ed38  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000203c  20000080  0800edac  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200020bc  0800edac  000220bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c31f  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005884  00000000  00000000  0004c40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002840  00000000  00000000  00051c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f04  00000000  00000000  000544d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00027ba5  00000000  00000000  000563dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00029987  00000000  00000000  0007df81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fe237  00000000  00000000  000a7908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ad44  00000000  00000000  001a5b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  001b0884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	0800eab0 	.word	0x0800eab0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	0800eab0 	.word	0x0800eab0

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <ADC_Temp_Thread_Start>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */


void ADC_Temp_Thread_Start(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	TempCalcHandle = osThreadNew(CalculateTemp_Thread, NULL, &TempCalc_attributes);
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <ADC_Temp_Thread_Start+0x24>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <ADC_Temp_Thread_Start+0x28>)
 8000c22:	f008 fabb 	bl	800919c <osThreadNew>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <ADC_Temp_Thread_Start+0x2c>)
 8000c2a:	6013      	str	r3, [r2, #0]
	tempFlagsHandle = osEventFlagsNew(&tempFlags_attributes);
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <ADC_Temp_Thread_Start+0x30>)
 8000c2e:	f008 fb62 	bl	80092f6 <osEventFlagsNew>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <ADC_Temp_Thread_Start+0x34>)
 8000c36:	6013      	str	r3, [r2, #0]

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	0800ebb4 	.word	0x0800ebb4
 8000c40:	080011b1 	.word	0x080011b1
 8000c44:	200006f0 	.word	0x200006f0
 8000c48:	0800ebd8 	.word	0x0800ebd8
 8000c4c:	200006f4 	.word	0x200006f4

08000c50 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c60:	f023 0218 	bic.w	r2, r3, #24
 8000c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b085      	sub	sp, #20
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fdca 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f850 	bl	8000d8c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cec:	f000 f8c4 	bl	8000e78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf0:	f000 f9ee 	bl	80010d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf4:	f000 f9ca 	bl	800108c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000cf8:	f000 f954 	bl	8000fa4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000cfc:	f000 f99e 	bl	800103c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000d00:	f000 f8ec 	bl	8000edc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  ModbusH.uModbusType = MB_SLAVE;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <main+0x90>)
 8000d06:	2203      	movs	r2, #3
 8000d08:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <main+0x90>)
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <main+0x94>)
 8000d0e:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <main+0x90>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <main+0x90>)
 8000d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d1c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <main+0x90>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <main+0x98>)
 8000d24:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <main+0x90>)
 8000d28:	2208      	movs	r2, #8
 8000d2a:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regs = ModbusDATA;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <main+0x90>)
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <main+0x9c>)
 8000d30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <main+0x90>)
 8000d36:	2232      	movs	r2, #50	; 0x32
 8000d38:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
  ModbusH.xTypeHW = USART_HW_DMA;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <main+0x90>)
 8000d3e:	2204      	movs	r2, #4
 8000d40:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <main+0x90>)
 8000d46:	f00c fa01 	bl	800d14c <ModbusInit>

 //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000d4a:	4809      	ldr	r0, [pc, #36]	; (8000d70 <main+0x90>)
 8000d4c:	f00c faa0 	bl	800d290 <ModbusStart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d50:	f008 f9da 	bl	8009108 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <main+0xa0>)
 8000d56:	2100      	movs	r1, #0
 8000d58:	480a      	ldr	r0, [pc, #40]	; (8000d84 <main+0xa4>)
 8000d5a:	f008 fa1f 	bl	800919c <osThreadNew>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <main+0xa8>)
 8000d62:	6013      	str	r3, [r2, #0]
  ADC_Temp_Thread_Start();
 8000d64:	f7ff ff58 	bl	8000c18 <ADC_Temp_Thread_Start>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d68:	f008 f9f2 	bl	8009150 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <main+0x8c>
 8000d6e:	bf00      	nop
 8000d70:	200005ac 	.word	0x200005ac
 8000d74:	20000160 	.word	0x20000160
 8000d78:	48000800 	.word	0x48000800
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	0800eb90 	.word	0x0800eb90
 8000d84:	08001299 	.word	0x08001299
 8000d88:	200005a8 	.word	0x200005a8

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b09a      	sub	sp, #104	; 0x68
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	2248      	movs	r2, #72	; 0x48
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f00d fe4e 	bl	800ea3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dc0:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	f023 0303 	bic.w	r3, r3, #3
 8000dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dd6:	f003 f933 	bl	8004040 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff ff38 	bl	8000c50 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <SystemClock_Config+0xe8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000de8:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <SystemClock_Config+0xe8>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <SystemClock_Config+0xe8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000dfc:	2327      	movs	r3, #39	; 0x27
 8000dfe:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e06:	2301      	movs	r3, #1
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e10:	2301      	movs	r3, #1
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e1c:	2360      	movs	r3, #96	; 0x60
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fca9 	bl	8004780 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e34:	f000 fa4a 	bl	80012cc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000e38:	236f      	movs	r3, #111	; 0x6f
 8000e3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2101      	movs	r1, #1
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f004 f805 	bl	8004e68 <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000e64:	f000 fa32 	bl	80012cc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e68:	f004 fdf2 	bl	8005a50 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e6c:	bf00      	nop
 8000e6e:	3768      	adds	r7, #104	; 0x68
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	58000400 	.word	0x58000400

08000e78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	; 0x50
 8000e7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2250      	movs	r2, #80	; 0x50
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00d fdd9 	bl	800ea3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000e8a:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 8000e8e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000e90:	2318      	movs	r3, #24
 8000e92:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e9e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000ea0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ea4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000ea6:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8000eaa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000eac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000eb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f004 fc4e 	bl	8005764 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000ece:	f000 f9fd 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000ed2:	bf00      	nop
 8000ed4:	3750      	adds	r7, #80	; 0x50
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000ef4:	4a29      	ldr	r2, [pc, #164]	; (8000f9c <MX_ADC1_Init+0xc0>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f12:	2204      	movs	r2, #4
 8000f14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f52:	4811      	ldr	r0, [pc, #68]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f54:	f000 ff14 	bl	8001d80 <HAL_ADC_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000f5e:	f000 f9b5 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_ADC1_Init+0xc4>)
 8000f64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f66:	2306      	movs	r3, #6
 8000f68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f6e:	237f      	movs	r3, #127	; 0x7f
 8000f70:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f72:	2304      	movs	r3, #4
 8000f74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_ADC1_Init+0xbc>)
 8000f80:	f001 fb04 	bl	800258c <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f8a:	f000 f99f 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000009c 	.word	0x2000009c
 8000f9c:	50040000 	.word	0x50040000
 8000fa0:	14f00020 	.word	0x14f00020

08000fa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <MX_USART1_UART_Init+0x94>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fec:	4811      	ldr	r0, [pc, #68]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8000fee:	f005 f8c1 	bl	8006174 <HAL_UART_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ff8:	f000 f968 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8001000:	f007 fee3 	bl	8008dca <HAL_UARTEx_SetTxFifoThreshold>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800100a:	f000 f95f 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100e:	2100      	movs	r1, #0
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8001012:	f007 ff18 	bl	8008e46 <HAL_UARTEx_SetRxFifoThreshold>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800101c:	f000 f956 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_USART1_UART_Init+0x90>)
 8001022:	f007 fe99 	bl	8008d58 <HAL_UARTEx_DisableFifoMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800102c:	f000 f94e 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000160 	.word	0x20000160
 8001038:	40013800 	.word	0x40013800

0800103c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_USB_PCD_Init+0x48>)
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <MX_USB_PCD_Init+0x4c>)
 8001044:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_USB_PCD_Init+0x48>)
 8001048:	2208      	movs	r2, #8
 800104a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_USB_PCD_Init+0x48>)
 800104e:	2202      	movs	r2, #2
 8001050:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USB_PCD_Init+0x48>)
 8001054:	2202      	movs	r2, #2
 8001056:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_USB_PCD_Init+0x48>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USB_PCD_Init+0x48>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_USB_PCD_Init+0x48>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USB_PCD_Init+0x48>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_USB_PCD_Init+0x48>)
 8001072:	f002 fee1 	bl	8003e38 <HAL_PCD_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800107c:	f000 f926 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200002b4 	.word	0x200002b4
 8001088:	40006800 	.word	0x40006800

0800108c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001090:	2004      	movs	r0, #4
 8001092:	f7ff fdf3 	bl	8000c7c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff fdf0 	bl	8000c7c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2105      	movs	r1, #5
 80010a0:	200b      	movs	r0, #11
 80010a2:	f002 f9db 	bl	800345c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010a6:	200b      	movs	r0, #11
 80010a8:	f002 f9f2 	bl	8003490 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2105      	movs	r1, #5
 80010b0:	200c      	movs	r0, #12
 80010b2:	f002 f9d3 	bl	800345c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010b6:	200c      	movs	r0, #12
 80010b8:	f002 f9ea 	bl	8003490 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2105      	movs	r1, #5
 80010c0:	200d      	movs	r0, #13
 80010c2:	f002 f9cb 	bl	800345c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010c6:	200d      	movs	r0, #13
 80010c8:	f002 f9e2 	bl	8003490 <HAL_NVIC_EnableIRQ>

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e4:	2004      	movs	r0, #4
 80010e6:	f7ff fde2 	bl	8000cae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff fddf 	bl	8000cae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	2002      	movs	r0, #2
 80010f2:	f7ff fddc 	bl	8000cae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	2008      	movs	r0, #8
 80010f8:	f7ff fdd9 	bl	8000cae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2108      	movs	r1, #8
 8001100:	4827      	ldr	r0, [pc, #156]	; (80011a0 <MX_GPIO_Init+0xd0>)
 8001102:	f002 fe81 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2102      	movs	r1, #2
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f002 fe7b 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2123      	movs	r1, #35	; 0x23
 8001116:	4823      	ldr	r0, [pc, #140]	; (80011a4 <MX_GPIO_Init+0xd4>)
 8001118:	f002 fe76 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 800111c:	2308      	movs	r3, #8
 800111e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4619      	mov	r1, r3
 8001130:	481b      	ldr	r0, [pc, #108]	; (80011a0 <MX_GPIO_Init+0xd0>)
 8001132:	f002 fcf9 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001136:	2302      	movs	r3, #2
 8001138:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4619      	mov	r1, r3
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f002 fceb 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001152:	2310      	movs	r3, #16
 8001154:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	480f      	ldr	r0, [pc, #60]	; (80011a0 <MX_GPIO_Init+0xd0>)
 8001164:	f002 fce0 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001168:	2323      	movs	r3, #35	; 0x23
 800116a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <MX_GPIO_Init+0xd4>)
 800117e:	f002 fcd3 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001182:	2303      	movs	r3, #3
 8001184:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_GPIO_Init+0xd8>)
 8001194:	f002 fcc8 	bl	8003b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	48000800 	.word	0x48000800
 80011a4:	48000400 	.word	0x48000400
 80011a8:	48000c00 	.word	0x48000c00
 80011ac:	00000000 	.word	0x00000000

080011b0 <CalculateTemp_Thread>:

/* USER CODE BEGIN 4 */
void CalculateTemp_Thread(void *argument){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80011b8:	217f      	movs	r1, #127	; 0x7f
 80011ba:	4829      	ldr	r0, [pc, #164]	; (8001260 <CalculateTemp_Thread+0xb0>)
 80011bc:	f002 f802 	bl	80031c4 <HAL_ADCEx_Calibration_Start>

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	4928      	ldr	r1, [pc, #160]	; (8001264 <CalculateTemp_Thread+0xb4>)
 80011c4:	4826      	ldr	r0, [pc, #152]	; (8001260 <CalculateTemp_Thread+0xb0>)
 80011c6:	f000 ff27 	bl	8002018 <HAL_ADC_Start_DMA>
		osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
 80011ca:	4b27      	ldr	r3, [pc, #156]	; (8001268 <CalculateTemp_Thread+0xb8>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	2201      	movs	r2, #1
 80011d4:	2101      	movs	r1, #1
 80011d6:	f008 f911 	bl	80093fc <osEventFlagsWait>
		ADCvoltage = ADCrawReading * 0.00073242;
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <CalculateTemp_Thread+0xb4>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f91f 	bl	8000424 <__aeabi_i2d>
 80011e6:	a318      	add	r3, pc, #96	; (adr r3, 8001248 <CalculateTemp_Thread+0x98>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff f984 	bl	80004f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	491d      	ldr	r1, [pc, #116]	; (800126c <CalculateTemp_Thread+0xbc>)
 80011f6:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((ADCvoltage - 0.408)*100) / 2.04;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <CalculateTemp_Thread+0xbc>)
 80011fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001200:	a313      	add	r3, pc, #76	; (adr r3, 8001250 <CalculateTemp_Thread+0xa0>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7fe ffbf 	bl	8000188 <__aeabi_dsub>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <CalculateTemp_Thread+0xc0>)
 8001218:	f7ff f96e 	bl	80004f8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	a30c      	add	r3, pc, #48	; (adr r3, 8001258 <CalculateTemp_Thread+0xa8>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa8f 	bl	800074c <__aeabi_ddiv>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4910      	ldr	r1, [pc, #64]	; (8001274 <CalculateTemp_Thread+0xc4>)
 8001234:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <CalculateTemp_Thread+0xb0>)
 800123a:	f000 ff71 	bl	8002120 <HAL_ADC_Stop_DMA>
		osDelay(2);
 800123e:	2002      	movs	r0, #2
 8001240:	f008 f83e 	bl	80092c0 <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8001244:	e7bc      	b.n	80011c0 <CalculateTemp_Thread+0x10>
 8001246:	bf00      	nop
 8001248:	f9353597 	.word	0xf9353597
 800124c:	3f47fffb 	.word	0x3f47fffb
 8001250:	083126e9 	.word	0x083126e9
 8001254:	3fda1cac 	.word	0x3fda1cac
 8001258:	851eb852 	.word	0x851eb852
 800125c:	400051eb 	.word	0x400051eb
 8001260:	2000009c 	.word	0x2000009c
 8001264:	200006f8 	.word	0x200006f8
 8001268:	200006f4 	.word	0x200006f4
 800126c:	20000700 	.word	0x20000700
 8001270:	40590000 	.word	0x40590000
 8001274:	20000708 	.word	0x20000708

08001278 <HAL_ADC_ConvCpltCallback>:
	}

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

	osEventFlagsSet(tempFlagsHandle,0x01);
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f008 f874 	bl	8009374 <osEventFlagsSet>

}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200006f4 	.word	0x200006f4

08001298 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f008 f80d 	bl	80092c0 <osDelay>
 80012a6:	e7fb      	b.n	80012a0 <StartDefaultTask+0x8>

080012a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ba:	f000 faff 	bl	80018bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40014400 	.word	0x40014400

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <Error_Handler+0x8>

080012d6 <LL_AHB2_GRP1_EnableClock>:
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4013      	ands	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001314:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4313      	orrs	r3, r2
 800131e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001324:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800133a:	b480      	push	{r7}
 800133c:	b085      	sub	sp, #20
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001346:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001348:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4313      	orrs	r3, r2
 8001350:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001356:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4013      	ands	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	210f      	movs	r1, #15
 8001374:	f06f 0001 	mvn.w	r0, #1
 8001378:	f002 f870 	bl	800345c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a26      	ldr	r2, [pc, #152]	; (8001438 <HAL_ADC_MspInit+0xb8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d146      	bne.n	8001430 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013a6:	f7ff ff96 	bl	80012d6 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff ff93 	bl	80012d6 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013b0:	2301      	movs	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b4:	2303      	movs	r3, #3
 80013b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f002 fbaf 	bl	8003b28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <HAL_ADC_MspInit+0xbc>)
 80013cc:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_ADC_MspInit+0xc0>)
 80013ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_ADC_MspInit+0xbc>)
 80013d2:	2205      	movs	r2, #5
 80013d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_ADC_MspInit+0xbc>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_ADC_MspInit+0xbc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_ADC_MspInit+0xbc>)
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_ADC_MspInit+0xbc>)
 80013ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_ADC_MspInit+0xbc>)
 80013f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_ADC_MspInit+0xbc>)
 80013fa:	2220      	movs	r2, #32
 80013fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_ADC_MspInit+0xbc>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <HAL_ADC_MspInit+0xbc>)
 8001406:	f002 f851 	bl	80034ac <HAL_DMA_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001410:	f7ff ff5c 	bl	80012cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <HAL_ADC_MspInit+0xbc>)
 8001418:	64da      	str	r2, [r3, #76]	; 0x4c
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_ADC_MspInit+0xbc>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2105      	movs	r1, #5
 8001424:	2012      	movs	r0, #18
 8001426:	f002 f819 	bl	800345c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800142a:	2012      	movs	r0, #18
 800142c:	f002 f830 	bl	8003490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	50040000 	.word	0x50040000
 800143c:	20000100 	.word	0x20000100
 8001440:	40020030 	.word	0x40020030

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b09c      	sub	sp, #112	; 0x70
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2250      	movs	r2, #80	; 0x50
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f00d fae9 	bl	800ea3c <memset>
  if(huart->Instance==USART1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a43      	ldr	r2, [pc, #268]	; (800157c <HAL_UART_MspInit+0x138>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d17f      	bne.n	8001574 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001474:	2301      	movs	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4618      	mov	r0, r3
 8001482:	f004 f96f 	bl	8005764 <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800148c:	f7ff ff1e 	bl	80012cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001490:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001494:	f7ff ff51 	bl	800133a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	2002      	movs	r0, #2
 800149a:	f7ff ff1c 	bl	80012d6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800149e:	23c0      	movs	r3, #192	; 0xc0
 80014a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014ae:	2307      	movs	r3, #7
 80014b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014b6:	4619      	mov	r1, r3
 80014b8:	4831      	ldr	r0, [pc, #196]	; (8001580 <HAL_UART_MspInit+0x13c>)
 80014ba:	f002 fb35 	bl	8003b28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_UART_MspInit+0x140>)
 80014c0:	4a31      	ldr	r2, [pc, #196]	; (8001588 <HAL_UART_MspInit+0x144>)
 80014c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_UART_MspInit+0x140>)
 80014c6:	220e      	movs	r2, #14
 80014c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_UART_MspInit+0x140>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d0:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <HAL_UART_MspInit+0x140>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_UART_MspInit+0x140>)
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <HAL_UART_MspInit+0x140>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <HAL_UART_MspInit+0x140>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <HAL_UART_MspInit+0x140>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <HAL_UART_MspInit+0x140>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014f4:	4823      	ldr	r0, [pc, #140]	; (8001584 <HAL_UART_MspInit+0x140>)
 80014f6:	f001 ffd9 	bl	80034ac <HAL_DMA_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001500:	f7ff fee4 	bl	80012cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <HAL_UART_MspInit+0x140>)
 8001508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800150c:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_UART_MspInit+0x140>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_UART_MspInit+0x148>)
 8001514:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <HAL_UART_MspInit+0x14c>)
 8001516:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_UART_MspInit+0x148>)
 800151a:	220f      	movs	r2, #15
 800151c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_UART_MspInit+0x148>)
 8001520:	2210      	movs	r2, #16
 8001522:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_UART_MspInit+0x148>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_UART_MspInit+0x148>)
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_UART_MspInit+0x148>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_UART_MspInit+0x148>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_UART_MspInit+0x148>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_UART_MspInit+0x148>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001548:	4810      	ldr	r0, [pc, #64]	; (800158c <HAL_UART_MspInit+0x148>)
 800154a:	f001 ffaf 	bl	80034ac <HAL_DMA_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001554:	f7ff feba 	bl	80012cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a0c      	ldr	r2, [pc, #48]	; (800158c <HAL_UART_MspInit+0x148>)
 800155c:	67da      	str	r2, [r3, #124]	; 0x7c
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <HAL_UART_MspInit+0x148>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2105      	movs	r1, #5
 8001568:	2024      	movs	r0, #36	; 0x24
 800156a:	f001 ff77 	bl	800345c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800156e:	2024      	movs	r0, #36	; 0x24
 8001570:	f001 ff8e 	bl	8003490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001574:	bf00      	nop
 8001576:	3770      	adds	r7, #112	; 0x70
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40013800 	.word	0x40013800
 8001580:	48000400 	.word	0x48000400
 8001584:	200001f4 	.word	0x200001f4
 8001588:	40020008 	.word	0x40020008
 800158c:	20000254 	.word	0x20000254
 8001590:	4002001c 	.word	0x4002001c

08001594 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <HAL_PCD_MspInit+0x5c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d118      	bne.n	80015e8 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2001      	movs	r0, #1
 80015b8:	f7ff fe8d 	bl	80012d6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80015ce:	230a      	movs	r3, #10
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015dc:	f002 faa4 	bl	8003b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80015e0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80015e4:	f7ff fe90 	bl	8001308 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40006800 	.word	0x40006800

080015f4 <LL_APB2_GRP1_EnableClock>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80015fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001600:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4313      	orrs	r3, r2
 800160a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001610:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4013      	ands	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001618:	68fb      	ldr	r3, [r7, #12]
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	2019      	movs	r0, #25
 800163e:	f001 ff0d 	bl	800345c <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001642:	2019      	movs	r0, #25
 8001644:	f001 ff24 	bl	8003490 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001648:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800164c:	f7ff ffd2 	bl	80015f4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001650:	f107 0208 	add.w	r2, r7, #8
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fdf0 	bl	8005240 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001660:	f003 fdd8 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 8001664:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001668:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <HAL_InitTick+0x8c>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9b      	lsrs	r3, r3, #18
 8001670:	3b01      	subs	r3, #1
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_InitTick+0x90>)
 8001676:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_InitTick+0x94>)
 8001678:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_InitTick+0x90>)
 800167c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001680:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001682:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <HAL_InitTick+0x90>)
 8001684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001686:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_InitTick+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_InitTick+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <HAL_InitTick+0x90>)
 8001696:	f004 faf2 	bl	8005c7e <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d104      	bne.n	80016aa <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <HAL_InitTick+0x90>)
 80016a2:	f004 fb4d 	bl	8005d40 <HAL_TIM_Base_Start_IT>
 80016a6:	4603      	mov	r3, r0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3730      	adds	r7, #48	; 0x30
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	20000710 	.word	0x20000710
 80016bc:	40014400 	.word	0x40014400

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <NMI_Handler+0x4>

080016c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <MemManage_Handler+0x4>

080016d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <UsageFault_Handler+0x4>

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <DMA1_Channel1_IRQHandler+0x10>)
 80016f2:	f002 f8bc 	bl	800386e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200001f4 	.word	0x200001f4

08001700 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA1_Channel2_IRQHandler+0x10>)
 8001706:	f002 f8b2 	bl	800386e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000254 	.word	0x20000254

08001714 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <DMA1_Channel3_IRQHandler+0x10>)
 800171a:	f002 f8a8 	bl	800386e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000100 	.word	0x20000100

08001728 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <ADC1_IRQHandler+0x10>)
 800172e:	f000 fd58 	bl	80021e2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000009c 	.word	0x2000009c

0800173c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001742:	f004 fb4b 	bl	8005ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000710 	.word	0x20000710

08001750 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <USART1_IRQHandler+0x10>)
 8001756:	f005 f821 	bl	800679c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000160 	.word	0x20000160

08001764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <SystemInit+0x98>)
 800176a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176e:	4a23      	ldr	r2, [pc, #140]	; (80017fc <SystemInit+0x98>)
 8001770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001790:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <SystemInit+0x9c>)
 800179e:	4013      	ands	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ae:	f023 0305 	bic.w	r3, r3, #5
 80017b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80017b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ce:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <SystemInit+0xa0>)
 80017d0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80017d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <SystemInit+0xa0>)
 80017d8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	faf6fefb 	.word	0xfaf6fefb
 8001804:	22041000 	.word	0x22041000

08001808 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001808:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180c:	3304      	adds	r3, #4

0800180e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001810:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001812:	d3f9      	bcc.n	8001808 <CopyDataInit>
  bx lr
 8001814:	4770      	bx	lr

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001816:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001818:	3004      	adds	r0, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800181a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>
  bx lr
 800181e:	4770      	bx	lr

08001820 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001822:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001824:	f7ff ff9e 	bl	8001764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <LoopForever+0x6>)
 800182a:	490c      	ldr	r1, [pc, #48]	; (800185c <LoopForever+0xa>)
 800182c:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <LoopForever+0xe>)
 800182e:	2300      	movs	r3, #0
 8001830:	f7ff ffed 	bl	800180e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <LoopForever+0x12>)
 8001836:	490c      	ldr	r1, [pc, #48]	; (8001868 <LoopForever+0x16>)
 8001838:	4a0c      	ldr	r2, [pc, #48]	; (800186c <LoopForever+0x1a>)
 800183a:	2300      	movs	r3, #0
 800183c:	f7ff ffe7 	bl	800180e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <LoopForever+0x1e>)
 8001842:	490c      	ldr	r1, [pc, #48]	; (8001874 <LoopForever+0x22>)
 8001844:	2300      	movs	r3, #0
 8001846:	f7ff ffe8 	bl	800181a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800184a:	f00d f8ff 	bl	800ea4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800184e:	f7ff fa47 	bl	8000ce0 <main>

08001852 <LoopForever>:

LoopForever:
  b LoopForever
 8001852:	e7fe      	b.n	8001852 <LoopForever>
  ldr   r0, =_estack
 8001854:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001858:	20000008 	.word	0x20000008
 800185c:	2000007c 	.word	0x2000007c
 8001860:	0800ed38 	.word	0x0800ed38
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001864:	20030000 	.word	0x20030000
 8001868:	20030000 	.word	0x20030000
 800186c:	0800edac 	.word	0x0800edac
  INIT_BSS _sbss, _ebss
 8001870:	20000080 	.word	0x20000080
 8001874:	200020bc 	.word	0x200020bc

08001878 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <AES1_IRQHandler>
	...

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_Init+0x3c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_Init+0x3c>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001892:	2003      	movs	r0, #3
 8001894:	f001 fdd7 	bl	8003446 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001898:	200f      	movs	r0, #15
 800189a:	f7ff fec5 	bl	8001628 <HAL_InitTick>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	e001      	b.n	80018ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018aa:	f7ff fd5f 	bl	800136c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ae:	79fb      	ldrb	r3, [r7, #7]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	58004000 	.word	0x58004000

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000074 	.word	0x20000074
 80018e0:	2000075c 	.word	0x2000075c

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	2000075c 	.word	0x2000075c

080018fc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTickPrio+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000070 	.word	0x20000070

08001914 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	609a      	str	r2, [r3, #8]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3360      	adds	r3, #96	; 0x60
 800198e:	461a      	mov	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <LL_ADC_SetOffset+0x44>)
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	4313      	orrs	r3, r2
 80019ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019b4:	bf00      	nop
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	03fff000 	.word	0x03fff000

080019c4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3360      	adds	r3, #96	; 0x60
 80019d2:	461a      	mov	r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3360      	adds	r3, #96	; 0x60
 8001a00:	461a      	mov	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a3e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3330      	adds	r3, #48	; 0x30
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	4413      	add	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	211f      	movs	r1, #31
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	0e9b      	lsrs	r3, r3, #26
 8001a84:	f003 011f 	and.w	r1, r3, #31
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	431a      	orrs	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001a98:	bf00      	nop
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3314      	adds	r3, #20
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	0e5b      	lsrs	r3, r3, #25
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	0d1b      	lsrs	r3, r3, #20
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2107      	movs	r1, #7
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0d1b      	lsrs	r3, r3, #20
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001b30:	bf00      	nop
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0318 	and.w	r3, r3, #24
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b60:	40d9      	lsrs	r1, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	400b      	ands	r3, r1
 8001b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	0007ffff 	.word	0x0007ffff

08001b84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6093      	str	r3, [r2, #8]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c0c:	d101      	bne.n	8001c12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c5c:	f043 0202 	orr.w	r2, r3, #2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <LL_ADC_IsEnabled+0x18>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <LL_ADC_IsEnabled+0x1a>
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d101      	bne.n	8001cae <LL_ADC_IsDisableOngoing+0x18>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <LL_ADC_IsDisableOngoing+0x1a>
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ccc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cd0:	f043 0204 	orr.w	r2, r3, #4
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf8:	f043 0210 	orr.w	r2, r3, #16
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d101      	bne.n	8001d24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d46:	f043 0220 	orr.w	r2, r3, #32
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d101      	bne.n	8001d72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e12e      	b.n	8001ffc <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fae7 	bl	8001380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff feef 	bl	8001ba8 <LL_ADC_IsDeepPowerDownEnabled>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d004      	beq.n	8001dda <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fed5 	bl	8001b84 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff0a 	bl	8001bf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d115      	bne.n	8001e16 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff feee 	bl	8001bd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001df4:	4b83      	ldr	r3, [pc, #524]	; (8002004 <HAL_ADC_Init+0x284>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	4a83      	ldr	r2, [pc, #524]	; (8002008 <HAL_ADC_Init+0x288>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	099b      	lsrs	r3, r3, #6
 8001e02:	3301      	adds	r3, #1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e08:	e002      	b.n	8001e10 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f9      	bne.n	8001e0a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff feec 	bl	8001bf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10d      	bne.n	8001e42 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2a:	f043 0210 	orr.w	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff60 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 8001e4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 80c7 	bne.w	8001fea <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 80c3 	bne.w	8001fea <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e6c:	f043 0202 	orr.w	r2, r3, #2
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fef9 	bl	8001c70 <LL_ADC_IsEnabled>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10b      	bne.n	8001e9c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e84:	4861      	ldr	r0, [pc, #388]	; (800200c <HAL_ADC_Init+0x28c>)
 8001e86:	f7ff fef3 	bl	8001c70 <LL_ADC_IsEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4619      	mov	r1, r3
 8001e96:	485e      	ldr	r0, [pc, #376]	; (8002010 <HAL_ADC_Init+0x290>)
 8001e98:	f7ff fd3c 	bl	8001914 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7e5b      	ldrb	r3, [r3, #25]
 8001ea0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001eac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001eb2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eba:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001ebc:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d106      	bne.n	8001edc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	045b      	lsls	r3, r3, #17
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	4b45      	ldr	r3, [pc, #276]	; (8002014 <HAL_ADC_Init+0x294>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fefb 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 8001f16:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff1c 	bl	8001d5a <LL_ADC_INJ_IsConversionOngoing>
 8001f22:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d13d      	bne.n	8001fa6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d13a      	bne.n	8001fa6 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f34:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f3c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f4c:	f023 0302 	bic.w	r3, r3, #2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	69b9      	ldr	r1, [r7, #24]
 8001f56:	430b      	orrs	r3, r1
 8001f58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d118      	bne.n	8001f96 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f80:	4311      	orrs	r1, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f86:	430a      	orrs	r2, r1
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	611a      	str	r2, [r3, #16]
 8001f94:	e007      	b.n	8001fa6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d10c      	bne.n	8001fc8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f023 010f 	bic.w	r1, r3, #15
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	1e5a      	subs	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc6:	e007      	b.n	8001fd8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 020f 	bic.w	r2, r2, #15
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	f023 0303 	bic.w	r3, r3, #3
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54
 8001fe8:	e007      	b.n	8001ffa <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	f043 0210 	orr.w	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ffa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	2000006c 	.word	0x2000006c
 8002008:	053e2d63 	.word	0x053e2d63
 800200c:	50040000 	.word	0x50040000
 8002010:	50040300 	.word	0x50040300
 8002014:	fff0c007 	.word	0xfff0c007

08002018 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fe6f 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d167      	bne.n	8002104 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Start_DMA+0x2a>
 800203e:	2302      	movs	r3, #2
 8002040:	e063      	b.n	800210a <HAL_ADC_Start_DMA+0xf2>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 ff20 	bl	8002e90 <ADC_Enable>
 8002050:	4603      	mov	r3, r0
 8002052:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d14f      	bne.n	80020fa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f023 0206 	bic.w	r2, r3, #6
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	659a      	str	r2, [r3, #88]	; 0x58
 8002086:	e002      	b.n	800208e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_ADC_Start_DMA+0xfc>)
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_ADC_Start_DMA+0x100>)
 800209c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_ADC_Start_DMA+0x104>)
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	221c      	movs	r2, #28
 80020ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0210 	orr.w	r2, r2, #16
 80020c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3340      	adds	r3, #64	; 0x40
 80020e0:	4619      	mov	r1, r3
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f001 fa89 	bl	80035fc <HAL_DMA_Start_IT>
 80020ea:	4603      	mov	r3, r0
 80020ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fde2 	bl	8001cbc <LL_ADC_REG_StartConversion>
 80020f8:	e006      	b.n	8002108 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002102:	e001      	b.n	8002108 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002104:	2302      	movs	r3, #2
 8002106:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002108:	7dfb      	ldrb	r3, [r7, #23]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	08003043 	.word	0x08003043
 8002118:	0800311b 	.word	0x0800311b
 800211c:	08003137 	.word	0x08003137

08002120 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Stop_DMA+0x16>
 8002132:	2302      	movs	r3, #2
 8002134:	e051      	b.n	80021da <HAL_ADC_Stop_DMA+0xba>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800213e:	2103      	movs	r1, #3
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fde9 	bl	8002d18 <ADC_ConversionStop>
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d13f      	bne.n	80021d0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002164:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d10f      	bne.n	800218e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	4618      	mov	r0, r3
 8002174:	f001 fabd 	bl	80036f2 <HAL_DMA_Abort>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0210 	bic.w	r2, r2, #16
 800219c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 feed 	bl	8002f84 <ADC_Disable>
 80021aa:	4603      	mov	r3, r0
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	e002      	b.n	80021b6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fee7 	bl	8002f84 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d109      	bne.n	80021d0 <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b088      	sub	sp, #32
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d017      	beq.n	8002238 <HAL_ADC_IRQHandler+0x56>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d012      	beq.n	8002238 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f001 f854 	bl	80032d8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2202      	movs	r2, #2
 8002236:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <HAL_ADC_IRQHandler+0x6a>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002252:	2b00      	cmp	r3, #0
 8002254:	d05d      	beq.n	8002312 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d058      	beq.n	8002312 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fbd2 	bl	8001a26 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d03d      	beq.n	8002304 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002296:	d035      	beq.n	8002304 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d12e      	bne.n	8002304 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fd2e 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11a      	bne.n	80022ec <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 020c 	bic.w	r2, r2, #12
 80022c4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d112      	bne.n	8002304 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
 80022ea:	e00b      	b.n	8002304 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f043 0210 	orr.w	r2, r3, #16
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7fe ffb7 	bl	8001278 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	220c      	movs	r2, #12
 8002310:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_ADC_IRQHandler+0x144>
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800232c:	2b00      	cmp	r3, #0
 800232e:	d074      	beq.n	800241a <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d06f      	beq.n	800241a <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fbb2 	bl	8001ac0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800235c:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fb5f 	bl	8001a26 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002368:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d049      	beq.n	800240c <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_ADC_IRQHandler+0x1b0>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d041      	beq.n	800240c <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	d13c      	bne.n	800240c <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d135      	bne.n	800240c <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d12e      	bne.n	800240c <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fcd1 	bl	8001d5a <LL_ADC_INJ_IsConversionOngoing>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d11a      	bne.n	80023f4 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023cc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d112      	bne.n	800240c <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
 80023f2:	e00b      	b.n	800240c <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	f043 0210 	orr.w	r2, r3, #16
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 ff3b 	bl	8003288 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2260      	movs	r2, #96	; 0x60
 8002418:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b00      	cmp	r3, #0
 8002422:	d011      	beq.n	8002448 <HAL_ADC_IRQHandler+0x266>
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00c      	beq.n	8002448 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f891 	bl	8002562 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2280      	movs	r2, #128	; 0x80
 8002446:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d012      	beq.n	8002478 <HAL_ADC_IRQHandler+0x296>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00d      	beq.n	8002478 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 ff21 	bl	80032b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002476:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247e:	2b00      	cmp	r3, #0
 8002480:	d012      	beq.n	80024a8 <HAL_ADC_IRQHandler+0x2c6>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00d      	beq.n	80024a8 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 ff13 	bl	80032c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d02b      	beq.n	800250a <HAL_ADC_IRQHandler+0x328>
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d026      	beq.n	800250a <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80024c4:	2301      	movs	r3, #1
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	e009      	b.n	80024de <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fae8 	bl	8001aa4 <LL_ADC_REG_GetDMATransfer>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80024da:	2301      	movs	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d10e      	bne.n	8002502 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f043 0202 	orr.w	r2, r3, #2
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f83a 	bl	8002576 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2210      	movs	r2, #16
 8002508:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d018      	beq.n	8002546 <HAL_ADC_IRQHandler+0x364>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251a:	2b00      	cmp	r3, #0
 800251c:	d013      	beq.n	8002546 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252e:	f043 0208 	orr.w	r2, r3, #8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 feab 	bl	800329c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8002546:	bf00      	nop
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b0b6      	sub	sp, #216	; 0xd8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x22>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e39f      	b.n	8002cee <HAL_ADC_ConfigChannel+0x762>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fba6 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 8384 	bne.w	8002cd0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f7ff fa39 	bl	8001a4c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fb94 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 80025e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fbb4 	bl	8001d5a <LL_ADC_INJ_IsConversionOngoing>
 80025f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 81a6 	bne.w	800294c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 81a1 	bne.w	800294c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	461a      	mov	r2, r3
 8002618:	f7ff fa65 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	08db      	lsrs	r3, r3, #3
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d00a      	beq.n	8002654 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6919      	ldr	r1, [r3, #16]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800264e:	f7ff f995 	bl	800197c <LL_ADC_SetOffset>
 8002652:	e17b      	b.n	800294c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff f9b2 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_ADC_ConfigChannel+0xf4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff f9a7 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	f003 021f 	and.w	r2, r3, #31
 800267e:	e01e      	b.n	80026be <HAL_ADC_ConfigChannel+0x132>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff f99c 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800269e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e004      	b.n	80026bc <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80026b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x14a>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	e018      	b.n	8002708 <HAL_ADC_ConfigChannel+0x17c>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e004      	b.n	8002708 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80026fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff f96b 	bl	80019f0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff f94f 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x1ba>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f944 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	e01e      	b.n	8002784 <HAL_ADC_ConfigChannel+0x1f8>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f939 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002764:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800276c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	e004      	b.n	8002782 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002778:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <HAL_ADC_ConfigChannel+0x210>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0e9b      	lsrs	r3, r3, #26
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	e018      	b.n	80027ce <HAL_ADC_ConfigChannel+0x242>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e004      	b.n	80027ce <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80027c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d106      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	2101      	movs	r1, #1
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f908 	bl	80019f0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2102      	movs	r1, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f8ec 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <HAL_ADC_ConfigChannel+0x280>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2102      	movs	r1, #2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff f8e1 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	f003 021f 	and.w	r2, r3, #31
 800280a:	e01e      	b.n	800284a <HAL_ADC_ConfigChannel+0x2be>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2102      	movs	r1, #2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f8d6 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002818:	4603      	mov	r3, r0
 800281a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800282a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800282e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800283a:	2320      	movs	r3, #32
 800283c:	e004      	b.n	8002848 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800283e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x2d6>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0e9b      	lsrs	r3, r3, #26
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	e016      	b.n	8002890 <HAL_ADC_ConfigChannel+0x304>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002874:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800287a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e004      	b.n	8002890 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002886:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	429a      	cmp	r2, r3
 8002892:	d106      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2200      	movs	r2, #0
 800289a:	2102      	movs	r1, #2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f8a7 	bl	80019f0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2103      	movs	r1, #3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff f88b 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x342>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2103      	movs	r1, #3
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f880 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	0e9b      	lsrs	r3, r3, #26
 80028c8:	f003 021f 	and.w	r2, r3, #31
 80028cc:	e017      	b.n	80028fe <HAL_ADC_ConfigChannel+0x372>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2103      	movs	r1, #3
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff f875 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e003      	b.n	80028fc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80028f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x38a>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0e9b      	lsrs	r3, r3, #26
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	e011      	b.n	800293a <HAL_ADC_ConfigChannel+0x3ae>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002926:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800292e:	2320      	movs	r3, #32
 8002930:	e003      	b.n	800293a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	429a      	cmp	r2, r3
 800293c:	d106      	bne.n	800294c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	2103      	movs	r1, #3
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f852 	bl	80019f0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff f98d 	bl	8001c70 <LL_ADC_IsEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	f040 81c2 	bne.w	8002ce2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	461a      	mov	r2, r3
 800296c:	f7ff f8e6 	bl	8001b3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a8e      	ldr	r2, [pc, #568]	; (8002bb0 <HAL_ADC_ConfigChannel+0x624>)
 8002976:	4293      	cmp	r3, r2
 8002978:	f040 8130 	bne.w	8002bdc <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10b      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x418>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	3301      	adds	r3, #1
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2b09      	cmp	r3, #9
 800299a:	bf94      	ite	ls
 800299c:	2301      	movls	r3, #1
 800299e:	2300      	movhi	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e019      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x44c>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80029bc:	2320      	movs	r3, #32
 80029be:	e003      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80029c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	bf94      	ite	ls
 80029d2:	2301      	movls	r3, #1
 80029d4:	2300      	movhi	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d079      	beq.n	8002ad0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x46c>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0e9b      	lsrs	r3, r3, #26
 80029ee:	3301      	adds	r3, #1
 80029f0:	069b      	lsls	r3, r3, #26
 80029f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029f6:	e015      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x498>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a08:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a10:	2320      	movs	r3, #32
 8002a12:	e003      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	069b      	lsls	r3, r3, #26
 8002a20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x4b8>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	3301      	adds	r3, #1
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	e017      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x4e8>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	e003      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	ea42 0103 	orr.w	r1, r2, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x50e>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	051b      	lsls	r3, r3, #20
 8002a98:	e018      	b.n	8002acc <HAL_ADC_ConfigChannel+0x540>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e003      	b.n	8002abe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002acc:	430b      	orrs	r3, r1
 8002ace:	e080      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d107      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x560>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	0e9b      	lsrs	r3, r3, #26
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	069b      	lsls	r3, r3, #26
 8002ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aea:	e015      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x58c>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002b04:	2320      	movs	r3, #32
 8002b06:	e003      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	069b      	lsls	r3, r3, #26
 8002b14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x5ac>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	2101      	movs	r1, #1
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	e017      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x5dc>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	61fb      	str	r3, [r7, #28]
  return result;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002b50:	2320      	movs	r3, #32
 8002b52:	e003      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	ea42 0103 	orr.w	r1, r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10d      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x608>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	3b1e      	subs	r3, #30
 8002b8c:	051b      	lsls	r3, r3, #20
 8002b8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b92:	e01d      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x644>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	613b      	str	r3, [r7, #16]
  return result;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d103      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e005      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x630>
 8002bb0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f003 021f 	and.w	r2, r3, #31
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b1e      	subs	r3, #30
 8002bca:	051b      	lsls	r3, r3, #20
 8002bcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f7fe ff85 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b45      	ldr	r3, [pc, #276]	; (8002cf8 <HAL_ADC_ConfigChannel+0x76c>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d07c      	beq.n	8002ce2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002be8:	4844      	ldr	r0, [pc, #272]	; (8002cfc <HAL_ADC_ConfigChannel+0x770>)
 8002bea:	f7fe feb9 	bl	8001960 <LL_ADC_GetCommonPathInternalCh>
 8002bee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bf2:	4843      	ldr	r0, [pc, #268]	; (8002d00 <HAL_ADC_ConfigChannel+0x774>)
 8002bf4:	f7ff f83c 	bl	8001c70 <LL_ADC_IsEnabled>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d15e      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a40      	ldr	r2, [pc, #256]	; (8002d04 <HAL_ADC_ConfigChannel+0x778>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d127      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x6cc>
 8002c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d121      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a39      	ldr	r2, [pc, #228]	; (8002d00 <HAL_ADC_ConfigChannel+0x774>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d161      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c26:	4619      	mov	r1, r3
 8002c28:	4834      	ldr	r0, [pc, #208]	; (8002cfc <HAL_ADC_ConfigChannel+0x770>)
 8002c2a:	f7fe fe86 	bl	800193a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c2e:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <HAL_ADC_ConfigChannel+0x77c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	4a35      	ldr	r2, [pc, #212]	; (8002d0c <HAL_ADC_ConfigChannel+0x780>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002c48:	e002      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f9      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c56:	e044      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2c      	ldr	r2, [pc, #176]	; (8002d10 <HAL_ADC_ConfigChannel+0x784>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d113      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x6fe>
 8002c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10d      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_ADC_ConfigChannel+0x774>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d134      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c80:	4619      	mov	r1, r3
 8002c82:	481e      	ldr	r0, [pc, #120]	; (8002cfc <HAL_ADC_ConfigChannel+0x770>)
 8002c84:	f7fe fe59 	bl	800193a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c88:	e02b      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a21      	ldr	r2, [pc, #132]	; (8002d14 <HAL_ADC_ConfigChannel+0x788>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d126      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x756>
 8002c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d120      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <HAL_ADC_ConfigChannel+0x774>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4811      	ldr	r0, [pc, #68]	; (8002cfc <HAL_ADC_ConfigChannel+0x770>)
 8002cb6:	f7fe fe40 	bl	800193a <LL_ADC_SetCommonPathInternalCh>
 8002cba:	e012      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002cce:	e008      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002cea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	37d8      	adds	r7, #216	; 0xd8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	80080000 	.word	0x80080000
 8002cfc:	50040300 	.word	0x50040300
 8002d00:	50040000 	.word	0x50040000
 8002d04:	c7520000 	.word	0xc7520000
 8002d08:	2000006c 	.word	0x2000006c
 8002d0c:	053e2d63 	.word	0x053e2d63
 8002d10:	cb840000 	.word	0xcb840000
 8002d14:	80000001 	.word	0x80000001

08002d18 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe ffec 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 8002d34:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff f80d 	bl	8001d5a <LL_ADC_INJ_IsConversionOngoing>
 8002d40:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8098 	beq.w	8002e80 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02a      	beq.n	8002db4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7e5b      	ldrb	r3, [r3, #25]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d126      	bne.n	8002db4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7e1b      	ldrb	r3, [r3, #24]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d122      	bne.n	8002db4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d72:	e014      	b.n	8002d9e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	4a45      	ldr	r2, [pc, #276]	; (8002e8c <ADC_ConversionStop+0x174>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d90d      	bls.n	8002d98 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e074      	b.n	8002e82 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d1e3      	bne.n	8002d74 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2240      	movs	r2, #64	; 0x40
 8002db2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d014      	beq.n	8002de4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe ffa4 	bl	8001d0c <LL_ADC_REG_IsConversionOngoing>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00c      	beq.n	8002de4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe ff61 	bl	8001c96 <LL_ADC_IsDisableOngoing>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe ff80 	bl	8001ce4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d014      	beq.n	8002e14 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe ffb3 	bl	8001d5a <LL_ADC_INJ_IsConversionOngoing>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00c      	beq.n	8002e14 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe ff49 	bl	8001c96 <LL_ADC_IsDisableOngoing>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d104      	bne.n	8002e14 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe ff8f 	bl	8001d32 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d005      	beq.n	8002e26 <ADC_ConversionStop+0x10e>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d105      	bne.n	8002e2c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e20:	230c      	movs	r3, #12
 8002e22:	617b      	str	r3, [r7, #20]
        break;
 8002e24:	e005      	b.n	8002e32 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e26:	2308      	movs	r3, #8
 8002e28:	617b      	str	r3, [r7, #20]
        break;
 8002e2a:	e002      	b.n	8002e32 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	617b      	str	r3, [r7, #20]
        break;
 8002e30:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e32:	f7fe fd57 	bl	80018e4 <HAL_GetTick>
 8002e36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e38:	e01b      	b.n	8002e72 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e3a:	f7fe fd53 	bl	80018e4 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d914      	bls.n	8002e72 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f043 0210 	orr.w	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e007      	b.n	8002e82 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1dc      	bne.n	8002e3a <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	a33fffff 	.word	0xa33fffff

08002e90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe fee5 	bl	8001c70 <LL_ADC_IsEnabled>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d15e      	bne.n	8002f6a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <ADC_Enable+0xe4>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	f043 0210 	orr.w	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e04a      	b.n	8002f6c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fea0 	bl	8001c20 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ee0:	4825      	ldr	r0, [pc, #148]	; (8002f78 <ADC_Enable+0xe8>)
 8002ee2:	f7fe fd3d 	bl	8001960 <LL_ADC_GetCommonPathInternalCh>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00f      	beq.n	8002f10 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <ADC_Enable+0xec>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	099b      	lsrs	r3, r3, #6
 8002ef6:	4a22      	ldr	r2, [pc, #136]	; (8002f80 <ADC_Enable+0xf0>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	3301      	adds	r3, #1
 8002f00:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f02:	e002      	b.n	8002f0a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f9      	bne.n	8002f04 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002f10:	f7fe fce8 	bl	80018e4 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f16:	e021      	b.n	8002f5c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fea7 	bl	8001c70 <LL_ADC_IsEnabled>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe fe77 	bl	8001c20 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f32:	f7fe fcd7 	bl	80018e4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d90d      	bls.n	8002f5c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	f043 0210 	orr.w	r2, r3, #16
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e007      	b.n	8002f6c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d1d6      	bne.n	8002f18 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	8000003f 	.word	0x8000003f
 8002f78:	50040300 	.word	0x50040300
 8002f7c:	2000006c 	.word	0x2000006c
 8002f80:	053e2d63 	.word	0x053e2d63

08002f84 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe fe80 	bl	8001c96 <LL_ADC_IsDisableOngoing>
 8002f96:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe fe67 	bl	8001c70 <LL_ADC_IsEnabled>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d047      	beq.n	8003038 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d144      	bne.n	8003038 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030d 	and.w	r3, r3, #13
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d10c      	bne.n	8002fd6 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fe41 	bl	8001c48 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fce:	f7fe fc89 	bl	80018e4 <HAL_GetTick>
 8002fd2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fd4:	e029      	b.n	800302a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	f043 0210 	orr.w	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e023      	b.n	800303a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ff2:	f7fe fc77 	bl	80018e4 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d914      	bls.n	800302a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	f043 0210 	orr.w	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e007      	b.n	800303a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1dc      	bne.n	8002ff2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003058:	2b00      	cmp	r3, #0
 800305a:	d14b      	bne.n	80030f4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d021      	beq.n	80030ba <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fcd3 	bl	8001a26 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d032      	beq.n	80030ec <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d12b      	bne.n	80030ec <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d11f      	bne.n	80030ec <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f043 0201 	orr.w	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
 80030b8:	e018      	b.n	80030ec <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d111      	bne.n	80030ec <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7fe f8c3 	bl	8001278 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030f2:	e00e      	b.n	8003112 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7ff fa38 	bl	8002576 <HAL_ADC_ErrorCallback>
}
 8003106:	e004      	b.n	8003112 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff fa10 	bl	800254e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	f043 0204 	orr.w	r2, r3, #4
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fa0a 	bl	8002576 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <LL_ADC_StartCalibration>:
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800317c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003186:	4313      	orrs	r3, r2
 8003188:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	609a      	str	r2, [r3, #8]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_ADC_IsCalibrationOnGoing>:
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031b0:	d101      	bne.n	80031b6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80031dc:	2302      	movs	r3, #2
 80031de:	e04d      	b.n	800327c <HAL_ADCEx_Calibration_Start+0xb8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff fecb 	bl	8002f84 <ADC_Disable>
 80031ee:	4603      	mov	r3, r0
 80031f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d136      	bne.n	8003266 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003200:	f023 0302 	bic.w	r3, r3, #2
 8003204:	f043 0202 	orr.w	r2, r3, #2
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6839      	ldr	r1, [r7, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff ffa9 	bl	800316a <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003218:	e014      	b.n	8003244 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	3301      	adds	r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4a18      	ldr	r2, [pc, #96]	; (8003284 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d90d      	bls.n	8003244 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	f023 0312 	bic.w	r3, r3, #18
 8003230:	f043 0210 	orr.w	r2, r3, #16
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e01b      	b.n	800327c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ffa7 	bl	800319c <LL_ADC_IsCalibrationOnGoing>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e2      	bne.n	800321a <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	f023 0303 	bic.w	r3, r3, #3
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
 8003264:	e005      	b.n	8003272 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	f043 0210 	orr.w	r2, r3, #16
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	00026aaa 	.word	0x00026aaa

08003288 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331e:	4a04      	ldr	r2, [pc, #16]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	60d3      	str	r3, [r2, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ff4c 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800346a:	f7ff ff63 	bl	8003334 <__NVIC_GetPriorityGrouping>
 800346e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	6978      	ldr	r0, [r7, #20]
 8003476:	f7ff ffb3 	bl	80033e0 <NVIC_EncodePriority>
 800347a:	4602      	mov	r2, r0
 800347c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ff82 	bl	800338c <__NVIC_SetPriority>
}
 8003488:	bf00      	nop
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff56 	bl	8003350 <__NVIC_EnableIRQ>
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e08e      	b.n	80035dc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_DMA_Init+0x138>)
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d80f      	bhi.n	80034ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	4b45      	ldr	r3, [pc, #276]	; (80035e8 <HAL_DMA_Init+0x13c>)
 80034d2:	4413      	add	r3, r2
 80034d4:	4a45      	ldr	r2, [pc, #276]	; (80035ec <HAL_DMA_Init+0x140>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	009a      	lsls	r2, r3, #2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a42      	ldr	r2, [pc, #264]	; (80035f0 <HAL_DMA_Init+0x144>)
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
 80034e8:	e00e      	b.n	8003508 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <HAL_DMA_Init+0x148>)
 80034f2:	4413      	add	r3, r2
 80034f4:	4a3d      	ldr	r2, [pc, #244]	; (80035ec <HAL_DMA_Init+0x140>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	009a      	lsls	r2, r3, #2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a3c      	ldr	r2, [pc, #240]	; (80035f8 <HAL_DMA_Init+0x14c>)
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800352c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa80 	bl	8003a60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003568:	d102      	bne.n	8003570 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003578:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800357c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003586:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d010      	beq.n	80035b2 <HAL_DMA_Init+0x106>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b04      	cmp	r3, #4
 8003596:	d80c      	bhi.n	80035b2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fa9f 	bl	8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	e008      	b.n	80035c4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40020407 	.word	0x40020407
 80035e8:	bffdfff8 	.word	0xbffdfff8
 80035ec:	cccccccd 	.word	0xcccccccd
 80035f0:	40020000 	.word	0x40020000
 80035f4:	bffdfbf8 	.word	0xbffdfbf8
 80035f8:	40020400 	.word	0x40020400

080035fc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_DMA_Start_IT+0x20>
 8003618:	2302      	movs	r3, #2
 800361a:	e066      	b.n	80036ea <HAL_DMA_Start_IT+0xee>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d155      	bne.n	80036dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f9c5 	bl	80039e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 020e 	orr.w	r2, r2, #14
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e00f      	b.n	8003694 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0204 	bic.w	r2, r2, #4
 8003682:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 020a 	orr.w	r2, r2, #10
 8003692:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e005      	b.n	80036e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
 80036e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e04f      	b.n	80037a4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d008      	beq.n	8003722 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2204      	movs	r2, #4
 8003714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e040      	b.n	80037a4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 020e 	bic.w	r2, r2, #14
 8003730:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003740:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f003 021c 	and.w	r2, r3, #28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2101      	movs	r1, #1
 8003760:	fa01 f202 	lsl.w	r2, r1, r2
 8003764:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800376e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00c      	beq.n	8003792 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003786:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003790:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d005      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2204      	movs	r2, #4
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	e047      	b.n	8003864 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 020e 	bic.w	r2, r2, #14
 80037e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	f003 021c 	and.w	r2, r3, #28
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	2101      	movs	r1, #1
 8003812:	fa01 f202 	lsl.w	r2, r1, r2
 8003816:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003820:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003838:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003842:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
    }
  }
  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f003 031c 	and.w	r3, r3, #28
 800388e:	2204      	movs	r2, #4
 8003890:	409a      	lsls	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d026      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x7a>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d021      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d107      	bne.n	80038c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0204 	bic.w	r2, r2, #4
 80038c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f003 021c 	and.w	r2, r3, #28
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2104      	movs	r1, #4
 80038d0:	fa01 f202 	lsl.w	r2, r1, r2
 80038d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d071      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038e6:	e06c      	b.n	80039c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ec:	f003 031c 	and.w	r3, r3, #28
 80038f0:	2202      	movs	r2, #2
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d02e      	beq.n	800395a <HAL_DMA_IRQHandler+0xec>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d029      	beq.n	800395a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10b      	bne.n	800392c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 020a 	bic.w	r2, r2, #10
 8003922:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f003 021c 	and.w	r2, r3, #28
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	2102      	movs	r1, #2
 800393a:	fa01 f202 	lsl.w	r2, r1, r2
 800393e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d038      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003958:	e033      	b.n	80039c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f003 031c 	and.w	r3, r3, #28
 8003962:	2208      	movs	r2, #8
 8003964:	409a      	lsls	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02a      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x156>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d025      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 020e 	bic.w	r2, r2, #14
 8003986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	f003 021c 	and.w	r2, r3, #28
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	2101      	movs	r1, #1
 8003996:	fa01 f202 	lsl.w	r2, r1, r2
 800399a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d004      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
}
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f003 021c 	and.w	r2, r3, #28
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d108      	bne.n	8003a44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a42:	e007      	b.n	8003a54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b17      	ldr	r3, [pc, #92]	; (8003acc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d80a      	bhi.n	8003a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a80:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6493      	str	r3, [r2, #72]	; 0x48
 8003a88:	e007      	b.n	8003a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	009a      	lsls	r2, r3, #2
 8003a92:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a94:	4413      	add	r3, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	3b08      	subs	r3, #8
 8003aa2:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ab0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2201      	movs	r2, #1
 8003aba:	409a      	lsls	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40020407 	.word	0x40020407
 8003ad0:	4002081c 	.word	0x4002081c
 8003ad4:	cccccccd 	.word	0xcccccccd
 8003ad8:	40020880 	.word	0x40020880

08003adc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	461a      	mov	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003b00:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	1000823f 	.word	0x1000823f
 8003b24:	40020940 	.word	0x40020940

08003b28 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b36:	e14c      	b.n	8003dd2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	4013      	ands	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 813e 	beq.w	8003dcc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d005      	beq.n	8003b68 <HAL_GPIO_Init+0x40>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d130      	bne.n	8003bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	2203      	movs	r2, #3
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 0201 	and.w	r2, r3, #1
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d017      	beq.n	8003c06 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	2203      	movs	r2, #3
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d123      	bne.n	8003c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	08da      	lsrs	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3208      	adds	r2, #8
 8003c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	220f      	movs	r2, #15
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	08da      	lsrs	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3208      	adds	r2, #8
 8003c54:	6939      	ldr	r1, [r7, #16]
 8003c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	2203      	movs	r2, #3
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 0203 	and.w	r2, r3, #3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8098 	beq.w	8003dcc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003c9c:	4a54      	ldr	r2, [pc, #336]	; (8003df0 <HAL_GPIO_Init+0x2c8>)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	220f      	movs	r2, #15
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cc6:	d019      	beq.n	8003cfc <HAL_GPIO_Init+0x1d4>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a4a      	ldr	r2, [pc, #296]	; (8003df4 <HAL_GPIO_Init+0x2cc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <HAL_GPIO_Init+0x1d0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a49      	ldr	r2, [pc, #292]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_GPIO_Init+0x1cc>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a48      	ldr	r2, [pc, #288]	; (8003dfc <HAL_GPIO_Init+0x2d4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d007      	beq.n	8003cf0 <HAL_GPIO_Init+0x1c8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a47      	ldr	r2, [pc, #284]	; (8003e00 <HAL_GPIO_Init+0x2d8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_GPIO_Init+0x1c4>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	e008      	b.n	8003cfe <HAL_GPIO_Init+0x1d6>
 8003cec:	2307      	movs	r3, #7
 8003cee:	e006      	b.n	8003cfe <HAL_GPIO_Init+0x1d6>
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e004      	b.n	8003cfe <HAL_GPIO_Init+0x1d6>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e002      	b.n	8003cfe <HAL_GPIO_Init+0x1d6>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <HAL_GPIO_Init+0x1d6>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	f002 0203 	and.w	r2, r2, #3
 8003d04:	0092      	lsls	r2, r2, #2
 8003d06:	4093      	lsls	r3, r2
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d0e:	4938      	ldr	r1, [pc, #224]	; (8003df0 <HAL_GPIO_Init+0x2c8>)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	089b      	lsrs	r3, r3, #2
 8003d14:	3302      	adds	r3, #2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d1c:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <HAL_GPIO_Init+0x2dc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d40:	4a30      	ldr	r2, [pc, #192]	; (8003e04 <HAL_GPIO_Init+0x2dc>)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d46:	4b2f      	ldr	r3, [pc, #188]	; (8003e04 <HAL_GPIO_Init+0x2dc>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d6a:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <HAL_GPIO_Init+0x2dc>)
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d70:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_GPIO_Init+0x2dc>)
 8003d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d96:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <HAL_GPIO_Init+0x2dc>)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003d9e:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_GPIO_Init+0x2dc>)
 8003da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dc4:	4a0f      	ldr	r2, [pc, #60]	; (8003e04 <HAL_GPIO_Init+0x2dc>)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f47f aeab 	bne.w	8003b38 <HAL_GPIO_Init+0x10>
  }
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40010000 	.word	0x40010000
 8003df4:	48000400 	.word	0x48000400
 8003df8:	48000800 	.word	0x48000800
 8003dfc:	48000c00 	.word	0x48000c00
 8003e00:	48001000 	.word	0x48001000
 8003e04:	58000800 	.word	0x58000800

08003e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
 8003e14:	4613      	mov	r3, r2
 8003e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e18:	787b      	ldrb	r3, [r7, #1]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e1e:	887a      	ldrh	r2, [r7, #2]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e24:	e002      	b.n	8003e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e26:	887a      	ldrh	r2, [r7, #2]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3a:	b08b      	sub	sp, #44	; 0x2c
 8003e3c:	af06      	add	r7, sp, #24
 8003e3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0cb      	b.n	8003fe2 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd fb98 	bl	8001594 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2203      	movs	r2, #3
 8003e68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f005 f8c9 	bl	8009008 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	e040      	b.n	8003efe <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	2201      	movs	r2, #1
 8003e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	440b      	add	r3, r1
 8003ea2:	7bfa      	ldrb	r2, [r7, #15]
 8003ea4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3303      	adds	r3, #3
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ebc:	7bfa      	ldrb	r2, [r7, #15]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	440b      	add	r3, r1
 8003eca:	3338      	adds	r3, #56	; 0x38
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	440b      	add	r3, r1
 8003ede:	333c      	adds	r3, #60	; 0x3c
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3340      	adds	r3, #64	; 0x40
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	3301      	adds	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
 8003efe:	7bfa      	ldrb	r2, [r7, #15]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d3b9      	bcc.n	8003e7c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	e044      	b.n	8003f98 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003f20:	2200      	movs	r2, #0
 8003f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f24:	7bfa      	ldrb	r2, [r7, #15]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	440b      	add	r3, r1
 8003f32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f3a:	7bfa      	ldrb	r2, [r7, #15]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	440b      	add	r3, r1
 8003f48:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	440b      	add	r3, r1
 8003f5e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	440b      	add	r3, r1
 8003f8a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	3301      	adds	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3b5      	bcc.n	8003f0e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	687e      	ldr	r6, [r7, #4]
 8003faa:	466d      	mov	r5, sp
 8003fac:	f106 0410 	add.w	r4, r6, #16
 8003fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	602b      	str	r3, [r5, #0]
 8003fb8:	1d33      	adds	r3, r6, #4
 8003fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fbc:	6838      	ldr	r0, [r7, #0]
 8003fbe:	f005 f83e 	bl	800903e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d102      	bne.n	8003fe0 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f805 	bl	8003fea <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800400e:	b29b      	uxth	r3, r3
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004022:	b29b      	uxth	r3, r3
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800404a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404e:	6013      	str	r3, [r2, #0]
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	58000400 	.word	0x58000400

08004060 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004064:	4b04      	ldr	r3, [pc, #16]	; (8004078 <HAL_PWREx_GetVoltageRange+0x18>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	58000400 	.word	0x58000400

0800407c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800408a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408e:	d101      	bne.n	8004094 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_HSE_Enable>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80040a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b2:	6013      	str	r3, [r2, #0]
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <LL_RCC_HSE_Disable>:
{
 80040be:	b480      	push	{r7}
 80040c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80040c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d0:	6013      	str	r3, [r2, #0]
}
 80040d2:	bf00      	nop
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_RCC_HSE_IsReady>:
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80040e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ee:	d101      	bne.n	80040f4 <LL_RCC_HSE_IsReady+0x18>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <LL_RCC_HSE_IsReady+0x1a>
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_RCC_HSI_Enable>:
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800410e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004112:	6013      	str	r3, [r2, #0]
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_RCC_HSI_Disable>:
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004130:	6013      	str	r3, [r2, #0]
}
 8004132:	bf00      	nop
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <LL_RCC_HSI_IsReady>:
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414e:	d101      	bne.n	8004154 <LL_RCC_HSI_IsReady+0x18>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <LL_RCC_HSI_IsReady+0x1a>
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <LL_RCC_HSI48_Enable>:
{
 800418a:	b480      	push	{r7}
 800418c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800418e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80041a2:	bf00      	nop
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <LL_RCC_HSI48_Disable>:
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80041b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <LL_RCC_HSI48_IsReady>:
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80041d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d101      	bne.n	80041e6 <LL_RCC_HSI48_IsReady+0x18>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <LL_RCC_HSI48_IsReady+0x1a>
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_RCC_LSE_Enable>:
{
 80041f2:	b480      	push	{r7}
 80041f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800420a:	bf00      	nop
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_RCC_LSE_Disable>:
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <LL_RCC_LSE_EnableBypass>:
{
 8004236:	b480      	push	{r7}
 8004238:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004246:	f043 0304 	orr.w	r3, r3, #4
 800424a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_RCC_LSE_DisableBypass>:
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004268:	f023 0304 	bic.w	r3, r3, #4
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800427e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b02      	cmp	r3, #2
 800428c:	d101      	bne.n	8004292 <LL_RCC_LSE_IsReady+0x18>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <LL_RCC_LSE_IsReady+0x1a>
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80042b6:	bf00      	nop
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80042c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80042e2:	b480      	push	{r7}
 80042e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80042e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d101      	bne.n	80042fa <LL_RCC_LSI1_IsReady+0x18>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <LL_RCC_LSI1_IsReady+0x1a>
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004306:	b480      	push	{r7}
 8004308:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800430a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004312:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004316:	f043 0304 	orr.w	r3, r3, #4
 800431a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800431e:	bf00      	nop
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800432c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004338:	f023 0304 	bic.w	r3, r3, #4
 800433c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800434a:	b480      	push	{r7}
 800434c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800434e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b08      	cmp	r3, #8
 800435c:	d101      	bne.n	8004362 <LL_RCC_LSI2_IsReady+0x18>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <LL_RCC_LSI2_IsReady+0x1a>
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80043a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6013      	str	r3, [r2, #0]
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80043be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	6013      	str	r3, [r2, #0]
}
 80043ce:	bf00      	nop
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80043dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d101      	bne.n	80043ee <LL_RCC_MSI_IsReady+0x16>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <LL_RCC_MSI_IsReady+0x18>
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800440c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004432:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2bb0      	cmp	r3, #176	; 0xb0
 8004438:	d901      	bls.n	800443e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800443a:	23b0      	movs	r3, #176	; 0xb0
 800443c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800443e:	687b      	ldr	r3, [r7, #4]
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004466:	4313      	orrs	r3, r2
 8004468:	604b      	str	r3, [r1, #4]
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800447e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f023 0203 	bic.w	r2, r3, #3
 8004488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 030c 	and.w	r3, r3, #12
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80044e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004516:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800451a:	f023 020f 	bic.w	r2, r3, #15
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800454a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4313      	orrs	r3, r2
 8004552:	608b      	str	r3, [r1, #8]
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4313      	orrs	r3, r2
 800457a:	608b      	str	r3, [r1, #8]
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800458c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80045a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80045ba:	b480      	push	{r7}
 80045bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80045be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80045d6:	b480      	push	{r7}
 80045d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80045da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004606:	b480      	push	{r7}
 8004608:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800460a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004614:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004618:	6013      	str	r3, [r2, #0]
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004636:	6013      	str	r3, [r2, #0]
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004654:	d101      	bne.n	800465a <LL_RCC_PLL_IsReady+0x18>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <LL_RCC_PLL_IsReady+0x1a>
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004666:	b480      	push	{r7}
 8004668:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	0a1b      	lsrs	r3, r3, #8
 8004672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004676:	4618      	mov	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800468e:	4618      	mov	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80046b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0303 	and.w	r3, r3, #3
}
 80046be:	4618      	mov	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80046cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046da:	d101      	bne.n	80046e0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004700:	d101      	bne.n	8004706 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004712:	b480      	push	{r7}
 8004714:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800471e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004726:	d101      	bne.n	800472c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800473c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800474a:	d101      	bne.n	8004750 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800476e:	d101      	bne.n	8004774 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b08d      	sub	sp, #52	; 0x34
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e363      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 808d 	beq.w	80048ba <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047a0:	f7ff fe7d 	bl	800449e <LL_RCC_GetSysClkSource>
 80047a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a6:	f7ff ff83 	bl	80046b0 <LL_RCC_PLL_GetMainSource>
 80047aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_RCC_OscConfig+0x3e>
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	d147      	bne.n	8004848 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d144      	bne.n	8004848 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e347      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80047ce:	f7ff fe28 	bl	8004422 <LL_RCC_MSI_GetRange>
 80047d2:	4603      	mov	r3, r0
 80047d4:	429c      	cmp	r4, r3
 80047d6:	d914      	bls.n	8004802 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fd61 	bl	80052a4 <RCC_SetFlashLatencyFromMSIRange>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e336      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff fe02 	bl	80043fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fe26 	bl	800444c <LL_RCC_MSI_SetCalibTrimming>
 8004800:	e013      	b.n	800482a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fdf7 	bl	80043fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fe1b 	bl	800444c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fd42 	bl	80052a4 <RCC_SetFlashLatencyFromMSIRange>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e317      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800482a:	f000 fcc9 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 800482e:	4603      	mov	r3, r0
 8004830:	4aa4      	ldr	r2, [pc, #656]	; (8004ac4 <HAL_RCC_OscConfig+0x344>)
 8004832:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004834:	4ba4      	ldr	r3, [pc, #656]	; (8004ac8 <HAL_RCC_OscConfig+0x348>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7fc fef5 	bl	8001628 <HAL_InitTick>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d039      	beq.n	80048b8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e308      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01e      	beq.n	800488e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004850:	f7ff fda4 	bl	800439c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004854:	f7fd f846 	bl	80018e4 <HAL_GetTick>
 8004858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800485c:	f7fd f842 	bl	80018e4 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e2f5      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800486e:	f7ff fdb3 	bl	80043d8 <LL_RCC_MSI_IsReady>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f1      	beq.n	800485c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fdbc 	bl	80043fa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fde0 	bl	800444c <LL_RCC_MSI_SetCalibTrimming>
 800488c:	e015      	b.n	80048ba <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800488e:	f7ff fd94 	bl	80043ba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004892:	f7fd f827 	bl	80018e4 <HAL_GetTick>
 8004896:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800489a:	f7fd f823 	bl	80018e4 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e2d6      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80048ac:	f7ff fd94 	bl	80043d8 <LL_RCC_MSI_IsReady>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f1      	bne.n	800489a <HAL_RCC_OscConfig+0x11a>
 80048b6:	e000      	b.n	80048ba <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048b8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d047      	beq.n	8004956 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c6:	f7ff fdea 	bl	800449e <LL_RCC_GetSysClkSource>
 80048ca:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048cc:	f7ff fef0 	bl	80046b0 <LL_RCC_PLL_GetMainSource>
 80048d0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_OscConfig+0x164>
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d108      	bne.n	80048f0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d105      	bne.n	80048f0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d134      	bne.n	8004956 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e2b4      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d102      	bne.n	8004900 <HAL_RCC_OscConfig+0x180>
 80048fa:	f7ff fbd1 	bl	80040a0 <LL_RCC_HSE_Enable>
 80048fe:	e001      	b.n	8004904 <HAL_RCC_OscConfig+0x184>
 8004900:	f7ff fbdd 	bl	80040be <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d012      	beq.n	8004932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fc ffea 	bl	80018e4 <HAL_GetTick>
 8004910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004914:	f7fc ffe6 	bl	80018e4 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	; 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e299      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004926:	f7ff fbd9 	bl	80040dc <LL_RCC_HSE_IsReady>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f1      	beq.n	8004914 <HAL_RCC_OscConfig+0x194>
 8004930:	e011      	b.n	8004956 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004932:	f7fc ffd7 	bl	80018e4 <HAL_GetTick>
 8004936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493a:	f7fc ffd3 	bl	80018e4 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b64      	cmp	r3, #100	; 0x64
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e286      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800494c:	f7ff fbc6 	bl	80040dc <LL_RCC_HSE_IsReady>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f1      	bne.n	800493a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04c      	beq.n	80049fc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004962:	f7ff fd9c 	bl	800449e <LL_RCC_GetSysClkSource>
 8004966:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004968:	f7ff fea2 	bl	80046b0 <LL_RCC_PLL_GetMainSource>
 800496c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b04      	cmp	r3, #4
 8004972:	d005      	beq.n	8004980 <HAL_RCC_OscConfig+0x200>
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b0c      	cmp	r3, #12
 8004978:	d10e      	bne.n	8004998 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d10b      	bne.n	8004998 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e266      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff fbe5 	bl	8004160 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004996:	e031      	b.n	80049fc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d019      	beq.n	80049d4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a0:	f7ff fbae 	bl	8004100 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fc ff9e 	bl	80018e4 <HAL_GetTick>
 80049a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ac:	f7fc ff9a 	bl	80018e4 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e24d      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80049be:	f7ff fbbd 	bl	800413c <LL_RCC_HSI_IsReady>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f1      	beq.n	80049ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fbc7 	bl	8004160 <LL_RCC_HSI_SetCalibTrimming>
 80049d2:	e013      	b.n	80049fc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d4:	f7ff fba3 	bl	800411e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fc ff84 	bl	80018e4 <HAL_GetTick>
 80049dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e0:	f7fc ff80 	bl	80018e4 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e233      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80049f2:	f7ff fba3 	bl	800413c <LL_RCC_HSI_IsReady>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f1      	bne.n	80049e0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80a3 	beq.w	8004b5c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d076      	beq.n	8004b0c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d046      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004a2a:	f7ff fc5a 	bl	80042e2 <LL_RCC_LSI1_IsReady>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d113      	bne.n	8004a5c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004a34:	f7ff fc33 	bl	800429e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a38:	f7fc ff54 	bl	80018e4 <HAL_GetTick>
 8004a3c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a40:	f7fc ff50 	bl	80018e4 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e203      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a52:	f7ff fc46 	bl	80042e2 <LL_RCC_LSI1_IsReady>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f1      	beq.n	8004a40 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004a5c:	f7ff fc53 	bl	8004306 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fc ff40 	bl	80018e4 <HAL_GetTick>
 8004a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004a68:	f7fc ff3c 	bl	80018e4 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e1ef      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a7a:	f7ff fc66 	bl	800434a <LL_RCC_LSI2_IsReady>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f1      	beq.n	8004a68 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fc70 	bl	800436e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004a8e:	f7ff fc17 	bl	80042c0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fc ff27 	bl	80018e4 <HAL_GetTick>
 8004a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a9a:	f7fc ff23 	bl	80018e4 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e1d6      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004aac:	f7ff fc19 	bl	80042e2 <LL_RCC_LSI1_IsReady>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f1      	bne.n	8004a9a <HAL_RCC_OscConfig+0x31a>
 8004ab6:	e051      	b.n	8004b5c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004ab8:	f7ff fbf1 	bl	800429e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fc ff12 	bl	80018e4 <HAL_GetTick>
 8004ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004ac2:	e00c      	b.n	8004ade <HAL_RCC_OscConfig+0x35e>
 8004ac4:	2000006c 	.word	0x2000006c
 8004ac8:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004acc:	f7fc ff0a 	bl	80018e4 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e1bd      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004ade:	f7ff fc00 	bl	80042e2 <LL_RCC_LSI1_IsReady>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f1      	beq.n	8004acc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004ae8:	f7ff fc1e 	bl	8004328 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004aee:	f7fc fef9 	bl	80018e4 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e1ac      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004b00:	f7ff fc23 	bl	800434a <LL_RCC_LSI2_IsReady>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f1      	bne.n	8004aee <HAL_RCC_OscConfig+0x36e>
 8004b0a:	e027      	b.n	8004b5c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004b0c:	f7ff fc0c 	bl	8004328 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fc fee8 	bl	80018e4 <HAL_GetTick>
 8004b14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b18:	f7fc fee4 	bl	80018e4 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e197      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004b2a:	f7ff fc0e 	bl	800434a <LL_RCC_LSI2_IsReady>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f1      	bne.n	8004b18 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004b34:	f7ff fbc4 	bl	80042c0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b38:	f7fc fed4 	bl	80018e4 <HAL_GetTick>
 8004b3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b40:	f7fc fed0 	bl	80018e4 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e183      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b52:	f7ff fbc6 	bl	80042e2 <LL_RCC_LSI1_IsReady>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f1      	bne.n	8004b40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d05b      	beq.n	8004c20 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b68:	4ba7      	ldr	r3, [pc, #668]	; (8004e08 <HAL_RCC_OscConfig+0x688>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d114      	bne.n	8004b9e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004b74:	f7ff fa64 	bl	8004040 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b78:	f7fc feb4 	bl	80018e4 <HAL_GetTick>
 8004b7c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b80:	f7fc feb0 	bl	80018e4 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e163      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b92:	4b9d      	ldr	r3, [pc, #628]	; (8004e08 <HAL_RCC_OscConfig+0x688>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d102      	bne.n	8004bac <HAL_RCC_OscConfig+0x42c>
 8004ba6:	f7ff fb24 	bl	80041f2 <LL_RCC_LSE_Enable>
 8004baa:	e00c      	b.n	8004bc6 <HAL_RCC_OscConfig+0x446>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b05      	cmp	r3, #5
 8004bb2:	d104      	bne.n	8004bbe <HAL_RCC_OscConfig+0x43e>
 8004bb4:	f7ff fb3f 	bl	8004236 <LL_RCC_LSE_EnableBypass>
 8004bb8:	f7ff fb1b 	bl	80041f2 <LL_RCC_LSE_Enable>
 8004bbc:	e003      	b.n	8004bc6 <HAL_RCC_OscConfig+0x446>
 8004bbe:	f7ff fb29 	bl	8004214 <LL_RCC_LSE_Disable>
 8004bc2:	f7ff fb49 	bl	8004258 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d014      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bce:	f7fc fe89 	bl	80018e4 <HAL_GetTick>
 8004bd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004bd4:	e00a      	b.n	8004bec <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd6:	f7fc fe85 	bl	80018e4 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e136      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004bec:	f7ff fb45 	bl	800427a <LL_RCC_LSE_IsReady>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0ef      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x456>
 8004bf6:	e013      	b.n	8004c20 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fc fe74 	bl	80018e4 <HAL_GetTick>
 8004bfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c00:	f7fc fe70 	bl	80018e4 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e121      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c16:	f7ff fb30 	bl	800427a <LL_RCC_LSE_IsReady>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ef      	bne.n	8004c00 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d02c      	beq.n	8004c86 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d014      	beq.n	8004c5e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c34:	f7ff faa9 	bl	800418a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c38:	f7fc fe54 	bl	80018e4 <HAL_GetTick>
 8004c3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c40:	f7fc fe50 	bl	80018e4 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e103      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c52:	f7ff fabc 	bl	80041ce <LL_RCC_HSI48_IsReady>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f1      	beq.n	8004c40 <HAL_RCC_OscConfig+0x4c0>
 8004c5c:	e013      	b.n	8004c86 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c5e:	f7ff faa5 	bl	80041ac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c62:	f7fc fe3f 	bl	80018e4 <HAL_GetTick>
 8004c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c6a:	f7fc fe3b 	bl	80018e4 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e0ee      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004c7c:	f7ff faa7 	bl	80041ce <LL_RCC_HSI48_IsReady>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f1      	bne.n	8004c6a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80e4 	beq.w	8004e58 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c90:	f7ff fc05 	bl	800449e <LL_RCC_GetSysClkSource>
 8004c94:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	f040 80b4 	bne.w	8004e10 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 0203 	and.w	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d123      	bne.n	8004cfe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d11c      	bne.n	8004cfe <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d114      	bne.n	8004cfe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d10d      	bne.n	8004cfe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d106      	bne.n	8004cfe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d05d      	beq.n	8004dba <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	d058      	beq.n	8004db6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e0a1      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d16:	f7ff fc85 	bl	8004624 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d1a:	f7fc fde3 	bl	80018e4 <HAL_GetTick>
 8004d1e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fc fddf 	bl	80018e4 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e092      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1ef      	bne.n	8004d22 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <HAL_RCC_OscConfig+0x68c>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d54:	4311      	orrs	r1, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d5a:	0212      	lsls	r2, r2, #8
 8004d5c:	4311      	orrs	r1, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d62:	4311      	orrs	r1, r2
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d68:	4311      	orrs	r1, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d78:	f7ff fc45 	bl	8004606 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d8c:	f7fc fdaa 	bl	80018e4 <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fc fda6 	bl	80018e4 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e059      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0ef      	beq.n	8004d94 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db4:	e050      	b.n	8004e58 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e04f      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d147      	bne.n	8004e58 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004dc8:	f7ff fc1d 	bl	8004606 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ddc:	f7fc fd82 	bl	80018e4 <HAL_GetTick>
 8004de0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de4:	f7fc fd7e 	bl	80018e4 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e031      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0ef      	beq.n	8004de4 <HAL_RCC_OscConfig+0x664>
 8004e04:	e028      	b.n	8004e58 <HAL_RCC_OscConfig+0x6d8>
 8004e06:	bf00      	nop
 8004e08:	58000400 	.word	0x58000400
 8004e0c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	2b0c      	cmp	r3, #12
 8004e14:	d01e      	beq.n	8004e54 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e16:	f7ff fc05 	bl	8004624 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1a:	f7fc fd63 	bl	80018e4 <HAL_GetTick>
 8004e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e22:	f7fc fd5f 	bl	80018e4 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e012      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1ef      	bne.n	8004e22 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_OscConfig+0x6e4>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	60cb      	str	r3, [r1, #12]
 8004e52:	e001      	b.n	8004e58 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e000      	b.n	8004e5a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3734      	adds	r7, #52	; 0x34
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd90      	pop	{r4, r7, pc}
 8004e62:	bf00      	nop
 8004e64:	eefefffc 	.word	0xeefefffc

08004e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e12d      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e7c:	4b98      	ldr	r3, [pc, #608]	; (80050e0 <HAL_RCC_ClockConfig+0x278>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d91b      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8a:	4b95      	ldr	r3, [pc, #596]	; (80050e0 <HAL_RCC_ClockConfig+0x278>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 0207 	bic.w	r2, r3, #7
 8004e92:	4993      	ldr	r1, [pc, #588]	; (80050e0 <HAL_RCC_ClockConfig+0x278>)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9a:	f7fc fd23 	bl	80018e4 <HAL_GetTick>
 8004e9e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ea2:	f7fc fd1f 	bl	80018e4 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e111      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb4:	4b8a      	ldr	r3, [pc, #552]	; (80050e0 <HAL_RCC_ClockConfig+0x278>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d1ef      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d016      	beq.n	8004efc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff faef 	bl	80044b6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ed8:	f7fc fd04 	bl	80018e4 <HAL_GetTick>
 8004edc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ee0:	f7fc fd00 	bl	80018e4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e0f2      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ef2:	f7ff fbe9 	bl	80046c8 <LL_RCC_IsActiveFlag_HPRE>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f1      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d016      	beq.n	8004f36 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fae6 	bl	80044de <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f12:	f7fc fce7 	bl	80018e4 <HAL_GetTick>
 8004f16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f1a:	f7fc fce3 	bl	80018e4 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e0d5      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004f2c:	f7ff fbde 	bl	80046ec <LL_RCC_IsActiveFlag_C2HPRE>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f1      	beq.n	8004f1a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d016      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff fadf 	bl	800450a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f4c:	f7fc fcca 	bl	80018e4 <HAL_GetTick>
 8004f50:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f54:	f7fc fcc6 	bl	80018e4 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e0b8      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f66:	f7ff fbd4 	bl	8004712 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f1      	beq.n	8004f54 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d016      	beq.n	8004faa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff fad9 	bl	8004538 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f86:	f7fc fcad 	bl	80018e4 <HAL_GetTick>
 8004f8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f8e:	f7fc fca9 	bl	80018e4 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e09b      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004fa0:	f7ff fbca 	bl	8004738 <LL_RCC_IsActiveFlag_PPRE1>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f1      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d017      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff facf 	bl	8004560 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fc2:	f7fc fc8f 	bl	80018e4 <HAL_GetTick>
 8004fc6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fca:	f7fc fc8b 	bl	80018e4 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e07d      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004fdc:	f7ff fbbe 	bl	800475c <LL_RCC_IsActiveFlag_PPRE2>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f1      	beq.n	8004fca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d043      	beq.n	800507a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d106      	bne.n	8005008 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004ffa:	f7ff f86f 	bl	80040dc <LL_RCC_HSE_IsReady>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11e      	bne.n	8005042 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e067      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b03      	cmp	r3, #3
 800500e:	d106      	bne.n	800501e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005010:	f7ff fb17 	bl	8004642 <LL_RCC_PLL_IsReady>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d113      	bne.n	8005042 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e05c      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005026:	f7ff f9d7 	bl	80043d8 <LL_RCC_MSI_IsReady>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d108      	bne.n	8005042 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e051      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005034:	f7ff f882 	bl	800413c <LL_RCC_HSI_IsReady>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e04a      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fa15 	bl	8004476 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504c:	f7fc fc4a 	bl	80018e4 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005052:	e00a      	b.n	800506a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005054:	f7fc fc46 	bl	80018e4 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e036      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506a:	f7ff fa18 	bl	800449e <LL_RCC_GetSysClkSource>
 800506e:	4602      	mov	r2, r0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	429a      	cmp	r2, r3
 8005078:	d1ec      	bne.n	8005054 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800507a:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <HAL_RCC_ClockConfig+0x278>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d21b      	bcs.n	80050c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005088:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_RCC_ClockConfig+0x278>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f023 0207 	bic.w	r2, r3, #7
 8005090:	4913      	ldr	r1, [pc, #76]	; (80050e0 <HAL_RCC_ClockConfig+0x278>)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	4313      	orrs	r3, r2
 8005096:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005098:	f7fc fc24 	bl	80018e4 <HAL_GetTick>
 800509c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050a0:	f7fc fc20 	bl	80018e4 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e012      	b.n	80050d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b2:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_RCC_ClockConfig+0x278>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1ef      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050c0:	f000 f87e 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4a07      	ldr	r2, [pc, #28]	; (80050e4 <HAL_RCC_ClockConfig+0x27c>)
 80050c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80050ca:	f7fc fc17 	bl	80018fc <HAL_GetTickPrio>
 80050ce:	4603      	mov	r3, r0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fc faa9 	bl	8001628 <HAL_InitTick>
 80050d6:	4603      	mov	r3, r0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	58004000 	.word	0x58004000
 80050e4:	2000006c 	.word	0x2000006c

080050e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ee:	f7ff f9d6 	bl	800449e <LL_RCC_GetSysClkSource>
 80050f2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80050fa:	f7ff f992 	bl	8004422 <LL_RCC_MSI_GetRange>
 80050fe:	4603      	mov	r3, r0
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	4a2b      	ldr	r2, [pc, #172]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e04b      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b04      	cmp	r3, #4
 8005114:	d102      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005116:	4b28      	ldr	r3, [pc, #160]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e045      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b08      	cmp	r3, #8
 8005120:	d10a      	bne.n	8005138 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005122:	f7fe ffab 	bl	800407c <LL_RCC_HSE_IsEnabledDiv2>
 8005126:	4603      	mov	r3, r0
 8005128:	2b01      	cmp	r3, #1
 800512a:	d102      	bne.n	8005132 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800512c:	4b22      	ldr	r3, [pc, #136]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e03a      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005132:	4b22      	ldr	r3, [pc, #136]	; (80051bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	e037      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005138:	f7ff faba 	bl	80046b0 <LL_RCC_PLL_GetMainSource>
 800513c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d003      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0x64>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b03      	cmp	r3, #3
 8005148:	d003      	beq.n	8005152 <HAL_RCC_GetSysClockFreq+0x6a>
 800514a:	e00d      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800514c:	4b1a      	ldr	r3, [pc, #104]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800514e:	60bb      	str	r3, [r7, #8]
        break;
 8005150:	e015      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005152:	f7fe ff93 	bl	800407c <LL_RCC_HSE_IsEnabledDiv2>
 8005156:	4603      	mov	r3, r0
 8005158:	2b01      	cmp	r3, #1
 800515a:	d102      	bne.n	8005162 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800515c:	4b16      	ldr	r3, [pc, #88]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800515e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005160:	e00d      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005162:	4b16      	ldr	r3, [pc, #88]	; (80051bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005164:	60bb      	str	r3, [r7, #8]
        break;
 8005166:	e00a      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005168:	f7ff f95b 	bl	8004422 <LL_RCC_MSI_GetRange>
 800516c:	4603      	mov	r3, r0
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800517a:	60bb      	str	r3, [r7, #8]
        break;
 800517c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800517e:	f7ff fa72 	bl	8004666 <LL_RCC_PLL_GetN>
 8005182:	4602      	mov	r2, r0
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	fb03 f402 	mul.w	r4, r3, r2
 800518a:	f7ff fa85 	bl	8004698 <LL_RCC_PLL_GetDivider>
 800518e:	4603      	mov	r3, r0
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	3301      	adds	r3, #1
 8005194:	fbb4 f4f3 	udiv	r4, r4, r3
 8005198:	f7ff fa72 	bl	8004680 <LL_RCC_PLL_GetR>
 800519c:	4603      	mov	r3, r0
 800519e:	0f5b      	lsrs	r3, r3, #29
 80051a0:	3301      	adds	r3, #1
 80051a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80051a6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80051a8:	68fb      	ldr	r3, [r7, #12]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd90      	pop	{r4, r7, pc}
 80051b2:	bf00      	nop
 80051b4:	0800ec48 	.word	0x0800ec48
 80051b8:	00f42400 	.word	0x00f42400
 80051bc:	01e84800 	.word	0x01e84800

080051c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c0:	b598      	push	{r3, r4, r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80051c4:	f7ff ff90 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 80051c8:	4604      	mov	r4, r0
 80051ca:	f7ff f9dd 	bl	8004588 <LL_RCC_GetAHBPrescaler>
 80051ce:	4603      	mov	r3, r0
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	4a03      	ldr	r2, [pc, #12]	; (80051e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80051d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	bd98      	pop	{r3, r4, r7, pc}
 80051e4:	0800ebe8 	.word	0x0800ebe8

080051e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e8:	b598      	push	{r3, r4, r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80051ec:	f7ff ffe8 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 80051f0:	4604      	mov	r4, r0
 80051f2:	f7ff f9f0 	bl	80045d6 <LL_RCC_GetAPB1Prescaler>
 80051f6:	4603      	mov	r3, r0
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	4a04      	ldr	r2, [pc, #16]	; (8005210 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	fa24 f303 	lsr.w	r3, r4, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	bd98      	pop	{r3, r4, r7, pc}
 8005210:	0800ec28 	.word	0x0800ec28

08005214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005214:	b598      	push	{r3, r4, r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005218:	f7ff ffd2 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 800521c:	4604      	mov	r4, r0
 800521e:	f7ff f9e6 	bl	80045ee <LL_RCC_GetAPB2Prescaler>
 8005222:	4603      	mov	r3, r0
 8005224:	0adb      	lsrs	r3, r3, #11
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	4a04      	ldr	r2, [pc, #16]	; (800523c <HAL_RCC_GetPCLK2Freq+0x28>)
 800522c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	bd98      	pop	{r3, r4, r7, pc}
 800523c:	0800ec28 	.word	0x0800ec28

08005240 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	226f      	movs	r2, #111	; 0x6f
 800524e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005250:	f7ff f925 	bl	800449e <LL_RCC_GetSysClkSource>
 8005254:	4602      	mov	r2, r0
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800525a:	f7ff f995 	bl	8004588 <LL_RCC_GetAHBPrescaler>
 800525e:	4602      	mov	r2, r0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005264:	f7ff f9b7 	bl	80045d6 <LL_RCC_GetAPB1Prescaler>
 8005268:	4602      	mov	r2, r0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800526e:	f7ff f9be 	bl	80045ee <LL_RCC_GetAPB2Prescaler>
 8005272:	4602      	mov	r2, r0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005278:	f7ff f992 	bl	80045a0 <LL_C2_RCC_GetAHBPrescaler>
 800527c:	4602      	mov	r2, r0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005282:	f7ff f99a 	bl	80045ba <LL_RCC_GetAHB4Prescaler>
 8005286:	4602      	mov	r2, r0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800528c:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <HAL_RCC_GetClockConfig+0x60>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0207 	and.w	r2, r3, #7
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	601a      	str	r2, [r3, #0]
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	58004000 	.word	0x58004000

080052a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80052a4:	b590      	push	{r4, r7, lr}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2bb0      	cmp	r3, #176	; 0xb0
 80052b0:	d903      	bls.n	80052ba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80052b2:	4b15      	ldr	r3, [pc, #84]	; (8005308 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e007      	b.n	80052ca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	4a11      	ldr	r2, [pc, #68]	; (8005308 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80052c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80052ca:	f7ff f976 	bl	80045ba <LL_RCC_GetAHB4Prescaler>
 80052ce:	4603      	mov	r3, r0
 80052d0:	091b      	lsrs	r3, r3, #4
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	4a0d      	ldr	r2, [pc, #52]	; (800530c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80052d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	0c9c      	lsrs	r4, r3, #18
 80052ee:	f7fe feb7 	bl	8004060 <HAL_PWREx_GetVoltageRange>
 80052f2:	4603      	mov	r3, r0
 80052f4:	4619      	mov	r1, r3
 80052f6:	4620      	mov	r0, r4
 80052f8:	f000 f80c 	bl	8005314 <RCC_SetFlashLatency>
 80052fc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	bd90      	pop	{r4, r7, pc}
 8005306:	bf00      	nop
 8005308:	0800ec48 	.word	0x0800ec48
 800530c:	0800ebe8 	.word	0x0800ebe8
 8005310:	431bde83 	.word	0x431bde83

08005314 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005314:	b590      	push	{r4, r7, lr}
 8005316:	b093      	sub	sp, #76	; 0x4c
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800531e:	4b37      	ldr	r3, [pc, #220]	; (80053fc <RCC_SetFlashLatency+0xe8>)
 8005320:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005324:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005326:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800532a:	4a35      	ldr	r2, [pc, #212]	; (8005400 <RCC_SetFlashLatency+0xec>)
 800532c:	f107 031c 	add.w	r3, r7, #28
 8005330:	ca07      	ldmia	r2, {r0, r1, r2}
 8005332:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005336:	4b33      	ldr	r3, [pc, #204]	; (8005404 <RCC_SetFlashLatency+0xf0>)
 8005338:	f107 040c 	add.w	r4, r7, #12
 800533c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800533e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005342:	2300      	movs	r3, #0
 8005344:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534c:	d11a      	bne.n	8005384 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800534e:	2300      	movs	r3, #0
 8005350:	643b      	str	r3, [r7, #64]	; 0x40
 8005352:	e013      	b.n	800537c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	3348      	adds	r3, #72	; 0x48
 800535a:	443b      	add	r3, r7
 800535c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	d807      	bhi.n	8005376 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	3348      	adds	r3, #72	; 0x48
 800536c:	443b      	add	r3, r7
 800536e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005372:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005374:	e020      	b.n	80053b8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005378:	3301      	adds	r3, #1
 800537a:	643b      	str	r3, [r7, #64]	; 0x40
 800537c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537e:	2b03      	cmp	r3, #3
 8005380:	d9e8      	bls.n	8005354 <RCC_SetFlashLatency+0x40>
 8005382:	e019      	b.n	80053b8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005384:	2300      	movs	r3, #0
 8005386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005388:	e013      	b.n	80053b2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800538a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	3348      	adds	r3, #72	; 0x48
 8005390:	443b      	add	r3, r7
 8005392:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	429a      	cmp	r2, r3
 800539a:	d807      	bhi.n	80053ac <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800539c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	3348      	adds	r3, #72	; 0x48
 80053a2:	443b      	add	r3, r7
 80053a4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80053a8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80053aa:	e005      	b.n	80053b8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80053ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ae:	3301      	adds	r3, #1
 80053b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d9e8      	bls.n	800538a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80053b8:	4b13      	ldr	r3, [pc, #76]	; (8005408 <RCC_SetFlashLatency+0xf4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f023 0207 	bic.w	r2, r3, #7
 80053c0:	4911      	ldr	r1, [pc, #68]	; (8005408 <RCC_SetFlashLatency+0xf4>)
 80053c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053c8:	f7fc fa8c 	bl	80018e4 <HAL_GetTick>
 80053cc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80053ce:	e008      	b.n	80053e2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80053d0:	f7fc fa88 	bl	80018e4 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e007      	b.n	80053f2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <RCC_SetFlashLatency+0xf4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d1ef      	bne.n	80053d0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	374c      	adds	r7, #76	; 0x4c
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd90      	pop	{r4, r7, pc}
 80053fa:	bf00      	nop
 80053fc:	0800eaec 	.word	0x0800eaec
 8005400:	0800eafc 	.word	0x0800eafc
 8005404:	0800eb08 	.word	0x0800eb08
 8005408:	58004000 	.word	0x58004000

0800540c <LL_RCC_LSE_IsEnabled>:
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <LL_RCC_LSE_IsEnabled+0x18>
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <LL_RCC_LSE_IsEnabled+0x1a>
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <LL_RCC_LSE_IsReady>:
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b02      	cmp	r3, #2
 8005442:	d101      	bne.n	8005448 <LL_RCC_LSE_IsReady+0x18>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <LL_RCC_LSE_IsReady+0x1a>
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <LL_RCC_MSI_EnablePLLMode>:
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005462:	f043 0304 	orr.w	r3, r3, #4
 8005466:	6013      	str	r3, [r2, #0]
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <LL_RCC_SetRFWKPClockSource>:
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800547a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005482:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <LL_RCC_SetSMPSClockSource>:
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	f023 0203 	bic.w	r2, r3, #3
 80054b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <LL_RCC_SetSMPSPrescaler>:
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80054ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4313      	orrs	r3, r2
 80054e0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <LL_RCC_SetUSARTClockSource>:
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80054f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fe:	f023 0203 	bic.w	r2, r3, #3
 8005502:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <LL_RCC_SetLPUARTClockSource>:
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800552e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <LL_RCC_SetI2CClockSource>:
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800554e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005552:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800555e:	43db      	mvns	r3, r3
 8005560:	401a      	ands	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800556a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <LL_RCC_SetLPTIMClockSource>:
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	0c1b      	lsrs	r3, r3, #16
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	43db      	mvns	r3, r3
 8005598:	401a      	ands	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <LL_RCC_SetSAIClockSource>:
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80055bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <LL_RCC_SetRNGClockSource>:
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80055e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80055f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <LL_RCC_SetCLK48ClockSource>:
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <LL_RCC_SetUSBClockSource>:
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff ffe3 	bl	800560c <LL_RCC_SetCLK48ClockSource>
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <LL_RCC_SetADCClockSource>:
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <LL_RCC_SetRTCClockSource>:
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800568e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <LL_RCC_GetRTCClockSource>:
{
 80056a6:	b480      	push	{r7}
 80056a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80056aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <LL_RCC_ForceBackupDomainReset>:
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80056c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056d8:	bf00      	nop
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80056e2:	b480      	push	{r7}
 80056e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80056e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056fa:	bf00      	nop
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <LL_RCC_PLLSAI1_Enable>:
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005712:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005716:	6013      	str	r3, [r2, #0]
}
 8005718:	bf00      	nop
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <LL_RCC_PLLSAI1_Disable>:
{
 8005722:	b480      	push	{r7}
 8005724:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005730:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005734:	6013      	str	r3, [r2, #0]
}
 8005736:	bf00      	nop
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <LL_RCC_PLLSAI1_IsReady>:
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800574e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005752:	d101      	bne.n	8005758 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800576c:	2300      	movs	r3, #0
 800576e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005770:	2300      	movs	r3, #0
 8005772:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d034      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005788:	d021      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800578a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800578e:	d81b      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005790:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005794:	d01d      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005796:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800579a:	d815      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80057a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a4:	d110      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80057a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80057b6:	e00d      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 f94d 	bl	8005a5c <RCCEx_PLLSAI1_ConfigNP>
 80057c2:	4603      	mov	r3, r0
 80057c4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057c6:	e005      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	77fb      	strb	r3, [r7, #31]
        break;
 80057cc:	e002      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80057ce:	bf00      	nop
 80057d0:	e000      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80057d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d4:	7ffb      	ldrb	r3, [r7, #31]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d105      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fee8 	bl	80055b4 <LL_RCC_SetSAIClockSource>
 80057e4:	e001      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e6:	7ffb      	ldrb	r3, [r7, #31]
 80057e8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d046      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80057f6:	f7ff ff56 	bl	80056a6 <LL_RCC_GetRTCClockSource>
 80057fa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	429a      	cmp	r2, r3
 8005804:	d03c      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005806:	f7fe fc1b 	bl	8004040 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff ff30 	bl	800567a <LL_RCC_SetRTCClockSource>
 800581a:	e02e      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800581c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005824:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005826:	f7ff ff4b 	bl	80056c0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800582a:	f7ff ff5a 	bl	80056e2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800583c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005846:	f7ff fde1 	bl	800540c <LL_RCC_LSE_IsEnabled>
 800584a:	4603      	mov	r3, r0
 800584c:	2b01      	cmp	r3, #1
 800584e:	d114      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005850:	f7fc f848 	bl	80018e4 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005856:	e00b      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005858:	f7fc f844 	bl	80018e4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	; 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d902      	bls.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	77fb      	strb	r3, [r7, #31]
              break;
 800586e:	e004      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005870:	f7ff fdde 	bl	8005430 <LL_RCC_LSE_IsReady>
 8005874:	4603      	mov	r3, r0
 8005876:	2b01      	cmp	r3, #1
 8005878:	d1ee      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800587a:	7ffb      	ldrb	r3, [r7, #31]
 800587c:	77bb      	strb	r3, [r7, #30]
 800587e:	e001      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	7ffb      	ldrb	r3, [r7, #31]
 8005882:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fe2a 	bl	80054ee <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fe35 	bl	800551a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fe5d 	bl	8005580 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fe52 	bl	8005580 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d004      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fe2a 	bl	8005546 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff fe1f 	bl	8005546 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d022      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fe8d 	bl	8005638 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005926:	d107      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005936:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005940:	d10b      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3304      	adds	r3, #4
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f8e3 	bl	8005b12 <RCCEx_PLLSAI1_ConfigNQ>
 800594c:	4603      	mov	r3, r0
 800594e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005950:	7ffb      	ldrb	r3, [r7, #31]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005956:	7ffb      	ldrb	r3, [r7, #31]
 8005958:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005962:	2b00      	cmp	r3, #0
 8005964:	d02b      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596e:	d008      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005978:	d003      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	2b00      	cmp	r3, #0
 8005980:	d105      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fe2a 	bl	80055e0 <LL_RCC_SetRNGClockSource>
 800598c:	e00a      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	2000      	movs	r0, #0
 800599a:	f7ff fe21 	bl	80055e0 <LL_RCC_SetRNGClockSource>
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f7ff fe34 	bl	800560c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80059ac:	d107      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80059ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d022      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff fe3d 	bl	800564e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059dc:	d107      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ec:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059f6:	d10b      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 f8e3 	bl	8005bc8 <RCCEx_PLLSAI1_ConfigNR>
 8005a02:	4603      	mov	r3, r0
 8005a04:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a06:	7ffb      	ldrb	r3, [r7, #31]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005a0c:	7ffb      	ldrb	r3, [r7, #31]
 8005a0e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fd26 	bl	8005472 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d009      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fd45 	bl	80054c6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff fd2c 	bl	800549e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005a46:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005a54:	f7ff fcfe 	bl	8005454 <LL_RCC_MSI_EnablePLLMode>
}
 8005a58:	bf00      	nop
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a68:	f7ff fe5b 	bl	8005722 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a6c:	f7fb ff3a 	bl	80018e4 <HAL_GetTick>
 8005a70:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a72:	e009      	b.n	8005a88 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a74:	f7fb ff36 	bl	80018e4 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d902      	bls.n	8005a88 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	73fb      	strb	r3, [r7, #15]
      break;
 8005a86:	e004      	b.n	8005a92 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a88:	f7ff fe5a 	bl	8005740 <LL_RCC_PLLSAI1_IsReady>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d137      	bne.n	8005b08 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aac:	4313      	orrs	r3, r2
 8005aae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ac6:	f7ff fe1d 	bl	8005704 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aca:	f7fb ff0b 	bl	80018e4 <HAL_GetTick>
 8005ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ad0:	e009      	b.n	8005ae6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ad2:	f7fb ff07 	bl	80018e4 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d902      	bls.n	8005ae6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	73fb      	strb	r3, [r7, #15]
        break;
 8005ae4:	e004      	b.n	8005af0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ae6:	f7ff fe2b 	bl	8005740 <LL_RCC_PLLSAI1_IsReady>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d1f0      	bne.n	8005ad2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d108      	bne.n	8005b08 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b04:	4313      	orrs	r3, r2
 8005b06:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005b1e:	f7ff fe00 	bl	8005722 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b22:	f7fb fedf 	bl	80018e4 <HAL_GetTick>
 8005b26:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b28:	e009      	b.n	8005b3e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b2a:	f7fb fedb 	bl	80018e4 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d902      	bls.n	8005b3e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b3c:	e004      	b.n	8005b48 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b3e:	f7ff fdff 	bl	8005740 <LL_RCC_PLLSAI1_IsReady>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f0      	bne.n	8005b2a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d137      	bne.n	8005bbe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b62:	4313      	orrs	r3, r2
 8005b64:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005b7c:	f7ff fdc2 	bl	8005704 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b80:	f7fb feb0 	bl	80018e4 <HAL_GetTick>
 8005b84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b86:	e009      	b.n	8005b9c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b88:	f7fb feac 	bl	80018e4 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d902      	bls.n	8005b9c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	73fb      	strb	r3, [r7, #15]
        break;
 8005b9a:	e004      	b.n	8005ba6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b9c:	f7ff fdd0 	bl	8005740 <LL_RCC_PLLSAI1_IsReady>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d1f0      	bne.n	8005b88 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d108      	bne.n	8005bbe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005bd4:	f7ff fda5 	bl	8005722 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bd8:	f7fb fe84 	bl	80018e4 <HAL_GetTick>
 8005bdc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bde:	e009      	b.n	8005bf4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005be0:	f7fb fe80 	bl	80018e4 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d902      	bls.n	8005bf4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf2:	e004      	b.n	8005bfe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bf4:	f7ff fda4 	bl	8005740 <LL_RCC_PLLSAI1_IsReady>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f0      	bne.n	8005be0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d137      	bne.n	8005c74 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c32:	f7ff fd67 	bl	8005704 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c36:	f7fb fe55 	bl	80018e4 <HAL_GetTick>
 8005c3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c3c:	e009      	b.n	8005c52 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c3e:	f7fb fe51 	bl	80018e4 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d902      	bls.n	8005c52 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	73fb      	strb	r3, [r7, #15]
        break;
 8005c50:	e004      	b.n	8005c5c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c52:	f7ff fd75 	bl	8005740 <LL_RCC_PLLSAI1_IsReady>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d1f0      	bne.n	8005c3e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d108      	bne.n	8005c74 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c70:	4313      	orrs	r3, r2
 8005c72:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e049      	b.n	8005d24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d106      	bne.n	8005caa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f841 	bl	8005d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2202      	movs	r2, #2
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f000 f9b7 	bl	8006030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d001      	beq.n	8005d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e036      	b.n	8005dc6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <HAL_TIM_Base_Start_IT+0x94>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x44>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d82:	d115      	bne.n	8005db0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <HAL_TIM_Base_Start_IT+0x98>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d015      	beq.n	8005dc2 <HAL_TIM_Base_Start_IT+0x82>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9c:	d011      	beq.n	8005dc2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dae:	e008      	b.n	8005dc2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e000      	b.n	8005dc4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	00010007 	.word	0x00010007

08005ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d020      	beq.n	8005e40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01b      	beq.n	8005e40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0202 	mvn.w	r2, #2
 8005e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f8e4 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f8d6 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8e7 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d020      	beq.n	8005e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01b      	beq.n	8005e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0204 	mvn.w	r2, #4
 8005e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2202      	movs	r2, #2
 8005e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f8be 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005e78:	e005      	b.n	8005e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8b0 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f8c1 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d020      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01b      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0208 	mvn.w	r2, #8
 8005ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2204      	movs	r2, #4
 8005eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f898 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f88a 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f89b 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f003 0310 	and.w	r3, r3, #16
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d020      	beq.n	8005f24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01b      	beq.n	8005f24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0210 	mvn.w	r2, #16
 8005ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2208      	movs	r2, #8
 8005efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f872 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005f10:	e005      	b.n	8005f1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f864 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f875 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00c      	beq.n	8005f48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d007      	beq.n	8005f48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0201 	mvn.w	r2, #1
 8005f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fb f9b0 	bl	80012a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00c      	beq.n	8005f6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f8d0 	bl	800610c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00c      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f8c8 	bl	8006120 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00c      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d007      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f834 	bl	800601c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00c      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 0320 	and.w	r3, r3, #32
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0220 	mvn.w	r2, #32
 8005fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f890 	bl	80060f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a2a      	ldr	r2, [pc, #168]	; (80060ec <TIM_Base_SetConfig+0xbc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0x20>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604e:	d108      	bne.n	8006062 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a21      	ldr	r2, [pc, #132]	; (80060ec <TIM_Base_SetConfig+0xbc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00b      	beq.n	8006082 <TIM_Base_SetConfig+0x52>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0x52>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a1e      	ldr	r2, [pc, #120]	; (80060f0 <TIM_Base_SetConfig+0xc0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0x52>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <TIM_Base_SetConfig+0xc4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d108      	bne.n	8006094 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a0c      	ldr	r2, [pc, #48]	; (80060ec <TIM_Base_SetConfig+0xbc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d007      	beq.n	80060d0 <TIM_Base_SetConfig+0xa0>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a0b      	ldr	r2, [pc, #44]	; (80060f0 <TIM_Base_SetConfig+0xc0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d003      	beq.n	80060d0 <TIM_Base_SetConfig+0xa0>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a0a      	ldr	r2, [pc, #40]	; (80060f4 <TIM_Base_SetConfig+0xc4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d103      	bne.n	80060d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	615a      	str	r2, [r3, #20]
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800

080060f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <LL_RCC_GetUSARTClockSource>:
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800613c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006140:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4013      	ands	r3, r2
}
 8006148:	4618      	mov	r0, r3
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <LL_RCC_GetLPUARTClockSource>:
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800615c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006160:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4013      	ands	r3, r2
}
 8006168:	4618      	mov	r0, r3
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e042      	b.n	800620c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fb f953 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2224      	movs	r2, #36	; 0x24
 80061a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 f914 	bl	80073ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fee9 	bl	8006f9c <UART_SetConfig>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e01b      	b.n	800620c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 f993 	bl	8007530 <UART_CheckIdleState>
 800620a:	4603      	mov	r3, r0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006214:	b480      	push	{r7}
 8006216:	b091      	sub	sp, #68	; 0x44
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	4613      	mov	r3, r2
 8006220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006228:	2b20      	cmp	r3, #32
 800622a:	d178      	bne.n	800631e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_UART_Transmit_IT+0x24>
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e071      	b.n	8006320 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	88fa      	ldrh	r2, [r7, #6]
 800624e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2221      	movs	r2, #33	; 0x21
 8006264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800626c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006270:	d12a      	bne.n	80062c8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627a:	d107      	bne.n	800628c <HAL_UART_Transmit_IT+0x78>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d103      	bne.n	800628c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4a29      	ldr	r2, [pc, #164]	; (800632c <HAL_UART_Transmit_IT+0x118>)
 8006288:	679a      	str	r2, [r3, #120]	; 0x78
 800628a:	e002      	b.n	8006292 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4a28      	ldr	r2, [pc, #160]	; (8006330 <HAL_UART_Transmit_IT+0x11c>)
 8006290:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3308      	adds	r3, #8
 8006298:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b2:	637a      	str	r2, [r7, #52]	; 0x34
 80062b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <HAL_UART_Transmit_IT+0x7e>
 80062c6:	e028      	b.n	800631a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d0:	d107      	bne.n	80062e2 <HAL_UART_Transmit_IT+0xce>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d103      	bne.n	80062e2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4a15      	ldr	r2, [pc, #84]	; (8006334 <HAL_UART_Transmit_IT+0x120>)
 80062de:	679a      	str	r2, [r3, #120]	; 0x78
 80062e0:	e002      	b.n	80062e8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a14      	ldr	r2, [pc, #80]	; (8006338 <HAL_UART_Transmit_IT+0x124>)
 80062e6:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	613b      	str	r3, [r7, #16]
   return(result);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006306:	623b      	str	r3, [r7, #32]
 8006308:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	69f9      	ldr	r1, [r7, #28]
 800630c:	6a3a      	ldr	r2, [r7, #32]
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	61bb      	str	r3, [r7, #24]
   return(result);
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e6      	bne.n	80062e8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	e000      	b.n	8006320 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800631e:	2302      	movs	r3, #2
  }
}
 8006320:	4618      	mov	r0, r3
 8006322:	3744      	adds	r7, #68	; 0x44
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	080081a3 	.word	0x080081a3
 8006330:	080080c3 	.word	0x080080c3
 8006334:	08008001 	.word	0x08008001
 8006338:	08007f49 	.word	0x08007f49

0800633c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006350:	2b20      	cmp	r3, #32
 8006352:	d137      	bne.n	80063c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <HAL_UART_Receive_IT+0x24>
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e030      	b.n	80063c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <HAL_UART_Receive_IT+0x94>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d01f      	beq.n	80063b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d018      	beq.n	80063b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	613b      	str	r3, [r7, #16]
   return(result);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	623b      	str	r3, [r7, #32]
 80063a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	6a3a      	ldr	r2, [r7, #32]
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e6      	bne.n	8006382 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063b4:	88fb      	ldrh	r3, [r7, #6]
 80063b6:	461a      	mov	r2, r3
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f001 f9ca 	bl	8007754 <UART_Start_Receive_IT>
 80063c0:	4603      	mov	r3, r0
 80063c2:	e000      	b.n	80063c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063c4:	2302      	movs	r3, #2
  }
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3728      	adds	r7, #40	; 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40008000 	.word	0x40008000

080063d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08a      	sub	sp, #40	; 0x28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d167      	bne.n	80064bc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_UART_Transmit_DMA+0x24>
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e060      	b.n	80064be <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	88fa      	ldrh	r2, [r7, #6]
 800640e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2221      	movs	r2, #33	; 0x21
 800641e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d028      	beq.n	800647c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800642e:	4a26      	ldr	r2, [pc, #152]	; (80064c8 <HAL_UART_Transmit_DMA+0xf4>)
 8006430:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006436:	4a25      	ldr	r2, [pc, #148]	; (80064cc <HAL_UART_Transmit_DMA+0xf8>)
 8006438:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800643e:	4a24      	ldr	r2, [pc, #144]	; (80064d0 <HAL_UART_Transmit_DMA+0xfc>)
 8006440:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006446:	2200      	movs	r2, #0
 8006448:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006452:	4619      	mov	r1, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3328      	adds	r3, #40	; 0x28
 800645a:	461a      	mov	r2, r3
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	f7fd f8cd 	bl	80035fc <HAL_DMA_Start_IT>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d009      	beq.n	800647c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2210      	movs	r2, #16
 800646c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2220      	movs	r2, #32
 8006474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e020      	b.n	80064be <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2240      	movs	r2, #64	; 0x40
 8006482:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3308      	adds	r3, #8
 800648a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	613b      	str	r3, [r7, #16]
   return(result);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3308      	adds	r3, #8
 80064a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a4:	623a      	str	r2, [r7, #32]
 80064a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	69f9      	ldr	r1, [r7, #28]
 80064aa:	6a3a      	ldr	r2, [r7, #32]
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e5      	bne.n	8006484 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3728      	adds	r7, #40	; 0x28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	08007c33 	.word	0x08007c33
 80064cc:	08007ccd 	.word	0x08007ccd
 80064d0:	08007e53 	.word	0x08007e53

080064d4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b090      	sub	sp, #64	; 0x40
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b80      	cmp	r3, #128	; 0x80
 80064f8:	d139      	bne.n	800656e <HAL_UART_DMAStop+0x9a>
 80064fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fc:	2b21      	cmp	r3, #33	; 0x21
 80064fe:	d136      	bne.n	800656e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3308      	adds	r3, #8
 8006506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006516:	637b      	str	r3, [r7, #52]	; 0x34
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3308      	adds	r3, #8
 800651e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006520:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e5      	bne.n	8006500 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d015      	beq.n	8006568 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006540:	4618      	mov	r0, r3
 8006542:	f7fd f8d6 	bl	80036f2 <HAL_DMA_Abort>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00d      	beq.n	8006568 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006550:	4618      	mov	r0, r3
 8006552:	f7fd fa3b 	bl	80039cc <HAL_DMA_GetError>
 8006556:	4603      	mov	r3, r0
 8006558:	2b20      	cmp	r3, #32
 800655a:	d105      	bne.n	8006568 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2210      	movs	r2, #16
 8006560:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e047      	b.n	80065f8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fabb 	bl	8007ae4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d13c      	bne.n	80065f6 <HAL_UART_DMAStop+0x122>
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	2b22      	cmp	r3, #34	; 0x22
 8006580:	d139      	bne.n	80065f6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3308      	adds	r3, #8
 8006588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	60bb      	str	r3, [r7, #8]
   return(result);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006598:	633b      	str	r3, [r7, #48]	; 0x30
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a2:	61ba      	str	r2, [r7, #24]
 80065a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6979      	ldr	r1, [r7, #20]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	613b      	str	r3, [r7, #16]
   return(result);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e5      	bne.n	8006582 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d017      	beq.n	80065f0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fd f893 	bl	80036f2 <HAL_DMA_Abort>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00e      	beq.n	80065f0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fd f9f7 	bl	80039cc <HAL_DMA_GetError>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d105      	bne.n	80065f0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2210      	movs	r2, #16
 80065e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e003      	b.n	80065f8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f001 fab8 	bl	8007b66 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3740      	adds	r7, #64	; 0x40
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b09a      	sub	sp, #104	; 0x68
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800661c:	667b      	str	r3, [r7, #100]	; 0x64
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006626:	657b      	str	r3, [r7, #84]	; 0x54
 8006628:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800662c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e6      	bne.n	8006608 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3308      	adds	r3, #8
 8006640:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	663b      	str	r3, [r7, #96]	; 0x60
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3308      	adds	r3, #8
 800665c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800665e:	643a      	str	r2, [r7, #64]	; 0x40
 8006660:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e3      	bne.n	800663a <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006676:	2b01      	cmp	r3, #1
 8006678:	d118      	bne.n	80066ac <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	61fb      	str	r3, [r7, #28]
   return(result);
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f023 0310 	bic.w	r3, r3, #16
 800668e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800669a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800669e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e6      	bne.n	800667a <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	d154      	bne.n	8006764 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3308      	adds	r3, #8
 80066c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3308      	adds	r3, #8
 80066d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066da:	61ba      	str	r2, [r7, #24]
 80066dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6979      	ldr	r1, [r7, #20]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	613b      	str	r3, [r7, #16]
   return(result);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e5      	bne.n	80066ba <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d017      	beq.n	8006728 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066fe:	4a26      	ldr	r2, [pc, #152]	; (8006798 <HAL_UART_AbortReceive_IT+0x198>)
 8006700:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006708:	4618      	mov	r0, r3
 800670a:	f7fd f851 	bl	80037b0 <HAL_DMA_Abort_IT>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d03c      	beq.n	800678e <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006722:	4610      	mov	r0, r2
 8006724:	4798      	blx	r3
 8006726:	e032      	b.n	800678e <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	220f      	movs	r2, #15
 800673c:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	699a      	ldr	r2, [r3, #24]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0208 	orr.w	r2, r2, #8
 800674c:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fb55 	bl	8006e0c <HAL_UART_AbortReceiveCpltCallback>
 8006762:	e014      	b.n	800678e <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	220f      	movs	r2, #15
 8006778:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fb3f 	bl	8006e0c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3768      	adds	r7, #104	; 0x68
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	08007eff 	.word	0x08007eff

0800679c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b0ba      	sub	sp, #232	; 0xe8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80067c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80067ca:	4013      	ands	r3, r2
 80067cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80067d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d11b      	bne.n	8006810 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067dc:	f003 0320 	and.w	r3, r3, #32
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d015      	beq.n	8006810 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d105      	bne.n	80067fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d009      	beq.n	8006810 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 82e3 	beq.w	8006dcc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
      }
      return;
 800680e:	e2dd      	b.n	8006dcc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006810:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8123 	beq.w	8006a60 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800681a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800681e:	4b8d      	ldr	r3, [pc, #564]	; (8006a54 <HAL_UART_IRQHandler+0x2b8>)
 8006820:	4013      	ands	r3, r2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006826:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800682a:	4b8b      	ldr	r3, [pc, #556]	; (8006a58 <HAL_UART_IRQHandler+0x2bc>)
 800682c:	4013      	ands	r3, r2
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 8116 	beq.w	8006a60 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d011      	beq.n	8006864 <HAL_UART_IRQHandler+0xc8>
 8006840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00b      	beq.n	8006864 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2201      	movs	r2, #1
 8006852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f043 0201 	orr.w	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d011      	beq.n	8006894 <HAL_UART_IRQHandler+0xf8>
 8006870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2202      	movs	r2, #2
 8006882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688a:	f043 0204 	orr.w	r2, r3, #4
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d011      	beq.n	80068c4 <HAL_UART_IRQHandler+0x128>
 80068a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2204      	movs	r2, #4
 80068b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ba:	f043 0202 	orr.w	r2, r3, #2
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d017      	beq.n	8006900 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80068e0:	4b5c      	ldr	r3, [pc, #368]	; (8006a54 <HAL_UART_IRQHandler+0x2b8>)
 80068e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00b      	beq.n	8006900 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2208      	movs	r2, #8
 80068ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f6:	f043 0208 	orr.w	r2, r3, #8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006908:	2b00      	cmp	r3, #0
 800690a:	d012      	beq.n	8006932 <HAL_UART_IRQHandler+0x196>
 800690c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00c      	beq.n	8006932 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8249 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d013      	beq.n	8006972 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800694a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800695a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d005      	beq.n	8006996 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800698a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800698e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006992:	2b00      	cmp	r3, #0
 8006994:	d054      	beq.n	8006a40 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 f8e5 	bl	8007b66 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d146      	bne.n	8006a38 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3308      	adds	r3, #8
 80069d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1d9      	bne.n	80069aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d017      	beq.n	8006a30 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a06:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <HAL_UART_IRQHandler+0x2c0>)
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fc fecd 	bl	80037b0 <HAL_DMA_Abort_IT>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d019      	beq.n	8006a50 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a2e:	e00f      	b.n	8006a50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f007 ff1f 	bl	800e874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a36:	e00b      	b.n	8006a50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f007 ff1b 	bl	800e874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3e:	e007      	b.n	8006a50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f007 ff17 	bl	800e874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006a4e:	e1bf      	b.n	8006dd0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	bf00      	nop
    return;
 8006a52:	e1bd      	b.n	8006dd0 <HAL_UART_IRQHandler+0x634>
 8006a54:	10000001 	.word	0x10000001
 8006a58:	04000120 	.word	0x04000120
 8006a5c:	08007ed3 	.word	0x08007ed3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	f040 8153 	bne.w	8006d10 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a6e:	f003 0310 	and.w	r3, r3, #16
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 814c 	beq.w	8006d10 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8145 	beq.w	8006d10 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2210      	movs	r2, #16
 8006a8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a98:	2b40      	cmp	r3, #64	; 0x40
 8006a9a:	f040 80bb 	bne.w	8006c14 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006aac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 818f 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006abc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	f080 8187 	bcs.w	8006dd4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006acc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 8087 	bne.w	8006bf2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1da      	bne.n	8006ae4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3308      	adds	r3, #8
 8006b34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e1      	bne.n	8006b2e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e3      	bne.n	8006b6a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc0:	f023 0310 	bic.w	r3, r3, #16
 8006bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e4      	bne.n	8006bb0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fc fd80 	bl	80036f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f007 fe8b 	bl	800e928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c12:	e0df      	b.n	8006dd4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80d1 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006c36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80cc 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c62:	647b      	str	r3, [r7, #68]	; 0x44
 8006c64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e4      	bne.n	8006c40 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	623b      	str	r3, [r7, #32]
   return(result);
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e1      	bne.n	8006c76 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0310 	bic.w	r3, r3, #16
 8006cda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	69b9      	ldr	r1, [r7, #24]
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e4      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f007 fe0d 	bl	800e928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d0e:	e063      	b.n	8006dd8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00e      	beq.n	8006d3a <HAL_UART_IRQHandler+0x59e>
 8006d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fff2 	bl	8008d1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d38:	e051      	b.n	8006dde <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d014      	beq.n	8006d70 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d105      	bne.n	8006d5e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d008      	beq.n	8006d70 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d03a      	beq.n	8006ddc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
    }
    return;
 8006d6e:	e035      	b.n	8006ddc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d009      	beq.n	8006d90 <HAL_UART_IRQHandler+0x5f4>
 8006d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 fa7f 	bl	800828c <UART_EndTransmit_IT>
    return;
 8006d8e:	e026      	b.n	8006dde <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d009      	beq.n	8006db0 <HAL_UART_IRQHandler+0x614>
 8006d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 ffcb 	bl	8008d44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dae:	e016      	b.n	8006dde <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d010      	beq.n	8006dde <HAL_UART_IRQHandler+0x642>
 8006dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	da0c      	bge.n	8006dde <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 ffb3 	bl	8008d30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dca:	e008      	b.n	8006dde <HAL_UART_IRQHandler+0x642>
      return;
 8006dcc:	bf00      	nop
 8006dce:	e006      	b.n	8006dde <HAL_UART_IRQHandler+0x642>
    return;
 8006dd0:	bf00      	nop
 8006dd2:	e004      	b.n	8006dde <HAL_UART_IRQHandler+0x642>
      return;
 8006dd4:	bf00      	nop
 8006dd6:	e002      	b.n	8006dde <HAL_UART_IRQHandler+0x642>
      return;
 8006dd8:	bf00      	nop
 8006dda:	e000      	b.n	8006dde <HAL_UART_IRQHandler+0x642>
    return;
 8006ddc:	bf00      	nop
  }
}
 8006dde:	37e8      	adds	r7, #232	; 0xe8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b08f      	sub	sp, #60	; 0x3c
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e042      	b.n	8006ebc <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2224      	movs	r2, #36	; 0x24
 8006e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f023 030c 	bic.w	r3, r3, #12
 8006e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e66:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e6      	bne.n	8006e46 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f043 0308 	orr.w	r3, r3, #8
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6979      	ldr	r1, [r7, #20]
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e6      	bne.n	8006e78 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	373c      	adds	r7, #60	; 0x3c
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b08f      	sub	sp, #60	; 0x3c
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <HAL_HalfDuplex_EnableReceiver+0x16>
 8006eda:	2302      	movs	r3, #2
 8006edc:	e042      	b.n	8006f64 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2224      	movs	r2, #36	; 0x24
 8006eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	f023 030c 	bic.w	r3, r3, #12
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f0e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e6      	bne.n	8006eee <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f043 0304 	orr.w	r3, r3, #4
 8006f34:	633b      	str	r3, [r7, #48]	; 0x30
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	61bb      	str	r3, [r7, #24]
 8006f40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	6979      	ldr	r1, [r7, #20]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e6      	bne.n	8006f20 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	373c      	adds	r7, #60	; 0x3c
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f86:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	4313      	orrs	r3, r2
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa0:	b08c      	sub	sp, #48	; 0x30
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	4baf      	ldr	r3, [pc, #700]	; (8007288 <UART_SetConfig+0x2ec>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4aa4      	ldr	r2, [pc, #656]	; (800728c <UART_SetConfig+0x2f0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d004      	beq.n	8007008 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007004:	4313      	orrs	r3, r2
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007012:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800701c:	430b      	orrs	r3, r1
 800701e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	f023 010f 	bic.w	r1, r3, #15
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a95      	ldr	r2, [pc, #596]	; (8007290 <UART_SetConfig+0x2f4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d125      	bne.n	800708c <UART_SetConfig+0xf0>
 8007040:	2003      	movs	r0, #3
 8007042:	f7ff f877 	bl	8006134 <LL_RCC_GetUSARTClockSource>
 8007046:	4603      	mov	r3, r0
 8007048:	2b03      	cmp	r3, #3
 800704a:	d81b      	bhi.n	8007084 <UART_SetConfig+0xe8>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <UART_SetConfig+0xb8>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	08007065 	.word	0x08007065
 8007058:	08007075 	.word	0x08007075
 800705c:	0800706d 	.word	0x0800706d
 8007060:	0800707d 	.word	0x0800707d
 8007064:	2301      	movs	r3, #1
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800706a:	e042      	b.n	80070f2 <UART_SetConfig+0x156>
 800706c:	2302      	movs	r3, #2
 800706e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007072:	e03e      	b.n	80070f2 <UART_SetConfig+0x156>
 8007074:	2304      	movs	r3, #4
 8007076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800707a:	e03a      	b.n	80070f2 <UART_SetConfig+0x156>
 800707c:	2308      	movs	r3, #8
 800707e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007082:	e036      	b.n	80070f2 <UART_SetConfig+0x156>
 8007084:	2310      	movs	r3, #16
 8007086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708a:	e032      	b.n	80070f2 <UART_SetConfig+0x156>
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a7e      	ldr	r2, [pc, #504]	; (800728c <UART_SetConfig+0x2f0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d12a      	bne.n	80070ec <UART_SetConfig+0x150>
 8007096:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800709a:	f7ff f85b 	bl	8006154 <LL_RCC_GetLPUARTClockSource>
 800709e:	4603      	mov	r3, r0
 80070a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070a4:	d01a      	beq.n	80070dc <UART_SetConfig+0x140>
 80070a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070aa:	d81b      	bhi.n	80070e4 <UART_SetConfig+0x148>
 80070ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b0:	d00c      	beq.n	80070cc <UART_SetConfig+0x130>
 80070b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b6:	d815      	bhi.n	80070e4 <UART_SetConfig+0x148>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <UART_SetConfig+0x128>
 80070bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c0:	d008      	beq.n	80070d4 <UART_SetConfig+0x138>
 80070c2:	e00f      	b.n	80070e4 <UART_SetConfig+0x148>
 80070c4:	2300      	movs	r3, #0
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ca:	e012      	b.n	80070f2 <UART_SetConfig+0x156>
 80070cc:	2302      	movs	r3, #2
 80070ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070d2:	e00e      	b.n	80070f2 <UART_SetConfig+0x156>
 80070d4:	2304      	movs	r3, #4
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070da:	e00a      	b.n	80070f2 <UART_SetConfig+0x156>
 80070dc:	2308      	movs	r3, #8
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e2:	e006      	b.n	80070f2 <UART_SetConfig+0x156>
 80070e4:	2310      	movs	r3, #16
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ea:	e002      	b.n	80070f2 <UART_SetConfig+0x156>
 80070ec:	2310      	movs	r3, #16
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a65      	ldr	r2, [pc, #404]	; (800728c <UART_SetConfig+0x2f0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	f040 8097 	bne.w	800722c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007102:	2b08      	cmp	r3, #8
 8007104:	d823      	bhi.n	800714e <UART_SetConfig+0x1b2>
 8007106:	a201      	add	r2, pc, #4	; (adr r2, 800710c <UART_SetConfig+0x170>)
 8007108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710c:	08007131 	.word	0x08007131
 8007110:	0800714f 	.word	0x0800714f
 8007114:	08007139 	.word	0x08007139
 8007118:	0800714f 	.word	0x0800714f
 800711c:	0800713f 	.word	0x0800713f
 8007120:	0800714f 	.word	0x0800714f
 8007124:	0800714f 	.word	0x0800714f
 8007128:	0800714f 	.word	0x0800714f
 800712c:	08007147 	.word	0x08007147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007130:	f7fe f85a 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8007134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007136:	e010      	b.n	800715a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007138:	4b56      	ldr	r3, [pc, #344]	; (8007294 <UART_SetConfig+0x2f8>)
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800713c:	e00d      	b.n	800715a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800713e:	f7fd ffd3 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 8007142:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007144:	e009      	b.n	800715a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800714c:	e005      	b.n	800715a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007158:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 812b 	beq.w	80073b8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	4a4c      	ldr	r2, [pc, #304]	; (8007298 <UART_SetConfig+0x2fc>)
 8007168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800716c:	461a      	mov	r2, r3
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	fbb3 f3f2 	udiv	r3, r3, r2
 8007174:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	4613      	mov	r3, r2
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	4413      	add	r3, r2
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	429a      	cmp	r2, r3
 8007184:	d305      	bcc.n	8007192 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	429a      	cmp	r2, r3
 8007190:	d903      	bls.n	800719a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007198:	e10e      	b.n	80073b8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	2200      	movs	r2, #0
 800719e:	60bb      	str	r3, [r7, #8]
 80071a0:	60fa      	str	r2, [r7, #12]
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	4a3c      	ldr	r2, [pc, #240]	; (8007298 <UART_SetConfig+0x2fc>)
 80071a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2200      	movs	r2, #0
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071bc:	f7f9 fbae 	bl	800091c <__aeabi_uldivmod>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4610      	mov	r0, r2
 80071c6:	4619      	mov	r1, r3
 80071c8:	f04f 0200 	mov.w	r2, #0
 80071cc:	f04f 0300 	mov.w	r3, #0
 80071d0:	020b      	lsls	r3, r1, #8
 80071d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80071d6:	0202      	lsls	r2, r0, #8
 80071d8:	6979      	ldr	r1, [r7, #20]
 80071da:	6849      	ldr	r1, [r1, #4]
 80071dc:	0849      	lsrs	r1, r1, #1
 80071de:	2000      	movs	r0, #0
 80071e0:	460c      	mov	r4, r1
 80071e2:	4605      	mov	r5, r0
 80071e4:	eb12 0804 	adds.w	r8, r2, r4
 80071e8:	eb43 0905 	adc.w	r9, r3, r5
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	469a      	mov	sl, r3
 80071f4:	4693      	mov	fp, r2
 80071f6:	4652      	mov	r2, sl
 80071f8:	465b      	mov	r3, fp
 80071fa:	4640      	mov	r0, r8
 80071fc:	4649      	mov	r1, r9
 80071fe:	f7f9 fb8d 	bl	800091c <__aeabi_uldivmod>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4613      	mov	r3, r2
 8007208:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007210:	d308      	bcc.n	8007224 <UART_SetConfig+0x288>
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007218:	d204      	bcs.n	8007224 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6a3a      	ldr	r2, [r7, #32]
 8007220:	60da      	str	r2, [r3, #12]
 8007222:	e0c9      	b.n	80073b8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800722a:	e0c5      	b.n	80073b8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007234:	d16d      	bne.n	8007312 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800723a:	3b01      	subs	r3, #1
 800723c:	2b07      	cmp	r3, #7
 800723e:	d82d      	bhi.n	800729c <UART_SetConfig+0x300>
 8007240:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <UART_SetConfig+0x2ac>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	08007269 	.word	0x08007269
 800724c:	08007271 	.word	0x08007271
 8007250:	0800729d 	.word	0x0800729d
 8007254:	08007277 	.word	0x08007277
 8007258:	0800729d 	.word	0x0800729d
 800725c:	0800729d 	.word	0x0800729d
 8007260:	0800729d 	.word	0x0800729d
 8007264:	0800727f 	.word	0x0800727f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007268:	f7fd ffd4 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 800726c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800726e:	e01b      	b.n	80072a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007270:	4b08      	ldr	r3, [pc, #32]	; (8007294 <UART_SetConfig+0x2f8>)
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007274:	e018      	b.n	80072a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007276:	f7fd ff37 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 800727a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800727c:	e014      	b.n	80072a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800727e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007284:	e010      	b.n	80072a8 <UART_SetConfig+0x30c>
 8007286:	bf00      	nop
 8007288:	cfff69f3 	.word	0xcfff69f3
 800728c:	40008000 	.word	0x40008000
 8007290:	40013800 	.word	0x40013800
 8007294:	00f42400 	.word	0x00f42400
 8007298:	0800ec88 	.word	0x0800ec88
      default:
        pclk = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80072a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8084 	beq.w	80073b8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	4a4b      	ldr	r2, [pc, #300]	; (80073e4 <UART_SetConfig+0x448>)
 80072b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ba:	461a      	mov	r2, r3
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	fbb3 f3f2 	udiv	r3, r3, r2
 80072c2:	005a      	lsls	r2, r3, #1
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	085b      	lsrs	r3, r3, #1
 80072ca:	441a      	add	r2, r3
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	2b0f      	cmp	r3, #15
 80072da:	d916      	bls.n	800730a <UART_SetConfig+0x36e>
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e2:	d212      	bcs.n	800730a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f023 030f 	bic.w	r3, r3, #15
 80072ec:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	8bfb      	ldrh	r3, [r7, #30]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	8bfa      	ldrh	r2, [r7, #30]
 8007306:	60da      	str	r2, [r3, #12]
 8007308:	e056      	b.n	80073b8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007310:	e052      	b.n	80073b8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007316:	3b01      	subs	r3, #1
 8007318:	2b07      	cmp	r3, #7
 800731a:	d822      	bhi.n	8007362 <UART_SetConfig+0x3c6>
 800731c:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <UART_SetConfig+0x388>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	08007345 	.word	0x08007345
 8007328:	0800734d 	.word	0x0800734d
 800732c:	08007363 	.word	0x08007363
 8007330:	08007353 	.word	0x08007353
 8007334:	08007363 	.word	0x08007363
 8007338:	08007363 	.word	0x08007363
 800733c:	08007363 	.word	0x08007363
 8007340:	0800735b 	.word	0x0800735b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007344:	f7fd ff66 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 8007348:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800734a:	e010      	b.n	800736e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800734c:	4b26      	ldr	r3, [pc, #152]	; (80073e8 <UART_SetConfig+0x44c>)
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007350:	e00d      	b.n	800736e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007352:	f7fd fec9 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 8007356:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007358:	e009      	b.n	800736e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800735a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007360:	e005      	b.n	800736e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800736c:	bf00      	nop
    }

    if (pclk != 0U)
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d021      	beq.n	80073b8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	4a1a      	ldr	r2, [pc, #104]	; (80073e4 <UART_SetConfig+0x448>)
 800737a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800737e:	461a      	mov	r2, r3
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	fbb3 f2f2 	udiv	r2, r3, r2
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	441a      	add	r2, r3
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	fbb2 f3f3 	udiv	r3, r2, r3
 8007396:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	2b0f      	cmp	r3, #15
 800739c:	d909      	bls.n	80073b2 <UART_SetConfig+0x416>
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a4:	d205      	bcs.n	80073b2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	60da      	str	r2, [r3, #12]
 80073b0:	e002      	b.n	80073b8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2200      	movs	r2, #0
 80073cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2200      	movs	r2, #0
 80073d2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80073d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3730      	adds	r7, #48	; 0x30
 80073dc:	46bd      	mov	sp, r7
 80073de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073e2:	bf00      	nop
 80073e4:	0800ec88 	.word	0x0800ec88
 80073e8:	00f42400 	.word	0x00f42400

080073ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00a      	beq.n	800749e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01a      	beq.n	8007502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ea:	d10a      	bne.n	8007502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	605a      	str	r2, [r3, #4]
  }
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b098      	sub	sp, #96	; 0x60
 8007534:	af02      	add	r7, sp, #8
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007540:	f7fa f9d0 	bl	80018e4 <HAL_GetTick>
 8007544:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0308 	and.w	r3, r3, #8
 8007550:	2b08      	cmp	r3, #8
 8007552:	d12f      	bne.n	80075b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800755c:	2200      	movs	r2, #0
 800755e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f88e 	bl	8007684 <UART_WaitOnFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d022      	beq.n	80075b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800757c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007582:	653b      	str	r3, [r7, #80]	; 0x50
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	461a      	mov	r2, r3
 800758a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800758c:	647b      	str	r3, [r7, #68]	; 0x44
 800758e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007594:	e841 2300 	strex	r3, r2, [r1]
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800759a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e6      	bne.n	800756e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2220      	movs	r2, #32
 80075a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e063      	b.n	800767c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d149      	bne.n	8007656 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ca:	2200      	movs	r2, #0
 80075cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f857 	bl	8007684 <UART_WaitOnFlagUntilTimeout>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d03c      	beq.n	8007656 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	623b      	str	r3, [r7, #32]
   return(result);
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fa:	633b      	str	r3, [r7, #48]	; 0x30
 80075fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e6      	bne.n	80075dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	60fb      	str	r3, [r7, #12]
   return(result);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	64bb      	str	r3, [r7, #72]	; 0x48
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800762e:	61fa      	str	r2, [r7, #28]
 8007630:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	69b9      	ldr	r1, [r7, #24]
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	617b      	str	r3, [r7, #20]
   return(result);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e5      	bne.n	800760e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e012      	b.n	800767c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2220      	movs	r2, #32
 8007662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3758      	adds	r7, #88	; 0x58
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	4613      	mov	r3, r2
 8007692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007694:	e049      	b.n	800772a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d045      	beq.n	800772a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800769e:	f7fa f921 	bl	80018e4 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d302      	bcc.n	80076b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e048      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d031      	beq.n	800772a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	f003 0308 	and.w	r3, r3, #8
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d110      	bne.n	80076f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2208      	movs	r2, #8
 80076da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fa42 	bl	8007b66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2208      	movs	r2, #8
 80076e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e029      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007704:	d111      	bne.n	800772a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800770e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fa28 	bl	8007b66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e00f      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69da      	ldr	r2, [r3, #28]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	4013      	ands	r3, r2
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	429a      	cmp	r2, r3
 8007738:	bf0c      	ite	eq
 800773a:	2301      	moveq	r3, #1
 800773c:	2300      	movne	r3, #0
 800773e:	b2db      	uxtb	r3, r3
 8007740:	461a      	mov	r2, r3
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	429a      	cmp	r2, r3
 8007746:	d0a6      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007754:	b480      	push	{r7}
 8007756:	b0a3      	sub	sp, #140	; 0x8c
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	88fa      	ldrh	r2, [r7, #6]
 800776c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	88fa      	ldrh	r2, [r7, #6]
 8007774:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007786:	d10e      	bne.n	80077a6 <UART_Start_Receive_IT+0x52>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <UART_Start_Receive_IT+0x48>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007796:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800779a:	e02d      	b.n	80077f8 <UART_Start_Receive_IT+0xa4>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	22ff      	movs	r2, #255	; 0xff
 80077a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077a4:	e028      	b.n	80077f8 <UART_Start_Receive_IT+0xa4>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10d      	bne.n	80077ca <UART_Start_Receive_IT+0x76>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d104      	bne.n	80077c0 <UART_Start_Receive_IT+0x6c>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	22ff      	movs	r2, #255	; 0xff
 80077ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077be:	e01b      	b.n	80077f8 <UART_Start_Receive_IT+0xa4>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	227f      	movs	r2, #127	; 0x7f
 80077c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077c8:	e016      	b.n	80077f8 <UART_Start_Receive_IT+0xa4>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077d2:	d10d      	bne.n	80077f0 <UART_Start_Receive_IT+0x9c>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <UART_Start_Receive_IT+0x92>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	227f      	movs	r2, #127	; 0x7f
 80077e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077e4:	e008      	b.n	80077f8 <UART_Start_Receive_IT+0xa4>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	223f      	movs	r2, #63	; 0x3f
 80077ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077ee:	e003      	b.n	80077f8 <UART_Start_Receive_IT+0xa4>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2222      	movs	r2, #34	; 0x22
 8007804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3308      	adds	r3, #8
 800780e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800781a:	f043 0301 	orr.w	r3, r3, #1
 800781e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3308      	adds	r3, #8
 8007828:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800782c:	673a      	str	r2, [r7, #112]	; 0x70
 800782e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007832:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800783a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e3      	bne.n	8007808 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007848:	d14f      	bne.n	80078ea <UART_Start_Receive_IT+0x196>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007850:	88fa      	ldrh	r2, [r7, #6]
 8007852:	429a      	cmp	r2, r3
 8007854:	d349      	bcc.n	80078ea <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785e:	d107      	bne.n	8007870 <UART_Start_Receive_IT+0x11c>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4a47      	ldr	r2, [pc, #284]	; (8007988 <UART_Start_Receive_IT+0x234>)
 800786c:	675a      	str	r2, [r3, #116]	; 0x74
 800786e:	e002      	b.n	8007876 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4a46      	ldr	r2, [pc, #280]	; (800798c <UART_Start_Receive_IT+0x238>)
 8007874:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d01a      	beq.n	80078b4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800788c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007892:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078a2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e4      	bne.n	800787e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3308      	adds	r3, #8
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3308      	adds	r3, #8
 80078d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80078d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80078d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e5      	bne.n	80078b4 <UART_Start_Receive_IT+0x160>
 80078e8:	e046      	b.n	8007978 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f2:	d107      	bne.n	8007904 <UART_Start_Receive_IT+0x1b0>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d103      	bne.n	8007904 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4a24      	ldr	r2, [pc, #144]	; (8007990 <UART_Start_Receive_IT+0x23c>)
 8007900:	675a      	str	r2, [r3, #116]	; 0x74
 8007902:	e002      	b.n	800790a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4a23      	ldr	r2, [pc, #140]	; (8007994 <UART_Start_Receive_IT+0x240>)
 8007908:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d019      	beq.n	8007946 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007926:	677b      	str	r3, [r7, #116]	; 0x74
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007930:	637b      	str	r3, [r7, #52]	; 0x34
 8007932:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e6      	bne.n	8007912 <UART_Start_Receive_IT+0x1be>
 8007944:	e018      	b.n	8007978 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	613b      	str	r3, [r7, #16]
   return(result);
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f043 0320 	orr.w	r3, r3, #32
 800795a:	67bb      	str	r3, [r7, #120]	; 0x78
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007964:	623b      	str	r3, [r7, #32]
 8007966:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	69f9      	ldr	r1, [r7, #28]
 800796a:	6a3a      	ldr	r2, [r7, #32]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	61bb      	str	r3, [r7, #24]
   return(result);
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	378c      	adds	r7, #140	; 0x8c
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	080089b5 	.word	0x080089b5
 800798c:	08008655 	.word	0x08008655
 8007990:	0800849d 	.word	0x0800849d
 8007994:	080082e5 	.word	0x080082e5

08007998 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b096      	sub	sp, #88	; 0x58
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	88fa      	ldrh	r2, [r7, #6]
 80079b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2222      	movs	r2, #34	; 0x22
 80079c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d02d      	beq.n	8007a2a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079d4:	4a40      	ldr	r2, [pc, #256]	; (8007ad8 <UART_Start_Receive_DMA+0x140>)
 80079d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079de:	4a3f      	ldr	r2, [pc, #252]	; (8007adc <UART_Start_Receive_DMA+0x144>)
 80079e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e8:	4a3d      	ldr	r2, [pc, #244]	; (8007ae0 <UART_Start_Receive_DMA+0x148>)
 80079ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f2:	2200      	movs	r2, #0
 80079f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3324      	adds	r3, #36	; 0x24
 8007a02:	4619      	mov	r1, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a08:	461a      	mov	r2, r3
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	f7fb fdf6 	bl	80035fc <HAL_DMA_Start_IT>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2210      	movs	r2, #16
 8007a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e051      	b.n	8007ace <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d018      	beq.n	8007a64 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a46:	657b      	str	r3, [r7, #84]	; 0x54
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a52:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a58:	e841 2300 	strex	r3, r2, [r1]
 8007a5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e6      	bne.n	8007a32 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3308      	adds	r3, #8
 8007a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	f043 0301 	orr.w	r3, r3, #1
 8007a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3308      	adds	r3, #8
 8007a82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a84:	637a      	str	r2, [r7, #52]	; 0x34
 8007a86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e5      	bne.n	8007a64 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ab8:	623a      	str	r2, [r7, #32]
 8007aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	69f9      	ldr	r1, [r7, #28]
 8007abe:	6a3a      	ldr	r2, [r7, #32]
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e5      	bne.n	8007a98 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3758      	adds	r7, #88	; 0x58
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	08007ce9 	.word	0x08007ce9
 8007adc:	08007e15 	.word	0x08007e15
 8007ae0:	08007e53 	.word	0x08007e53

08007ae4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b08f      	sub	sp, #60	; 0x3c
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b00:	637b      	str	r3, [r7, #52]	; 0x34
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b0c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e6      	bne.n	8007aec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3308      	adds	r3, #8
 8007b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b34:	633b      	str	r3, [r7, #48]	; 0x30
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3e:	61ba      	str	r2, [r7, #24]
 8007b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6979      	ldr	r1, [r7, #20]
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e5      	bne.n	8007b1e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007b5a:	bf00      	nop
 8007b5c:	373c      	adds	r7, #60	; 0x3c
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b095      	sub	sp, #84	; 0x54
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e6      	bne.n	8007b6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e3      	bne.n	8007ba0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d118      	bne.n	8007c12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f023 0310 	bic.w	r3, r3, #16
 8007bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bfe:	61bb      	str	r3, [r7, #24]
 8007c00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6979      	ldr	r1, [r7, #20]
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e6      	bne.n	8007be0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c26:	bf00      	nop
 8007c28:	3754      	adds	r7, #84	; 0x54
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b090      	sub	sp, #64	; 0x40
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d137      	bne.n	8007cbe <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	623b      	str	r3, [r7, #32]
   return(result);
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3308      	adds	r3, #8
 8007c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c76:	633a      	str	r2, [r7, #48]	; 0x30
 8007c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e5      	bne.n	8007c56 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca8:	61fb      	str	r3, [r7, #28]
 8007caa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	69b9      	ldr	r1, [r7, #24]
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e6      	bne.n	8007c8a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cbc:	e002      	b.n	8007cc4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007cbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007cc0:	f006 fd30 	bl	800e724 <HAL_UART_TxCpltCallback>
}
 8007cc4:	bf00      	nop
 8007cc6:	3740      	adds	r7, #64	; 0x40
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff f882 	bl	8006de4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b09c      	sub	sp, #112	; 0x70
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d171      	bne.n	8007de8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e6      	bne.n	8007d0c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d50:	f023 0301 	bic.w	r3, r3, #1
 8007d54:	667b      	str	r3, [r7, #100]	; 0x64
 8007d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d5e:	647a      	str	r2, [r7, #68]	; 0x44
 8007d60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e5      	bne.n	8007d3e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3308      	adds	r3, #8
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	623b      	str	r3, [r7, #32]
   return(result);
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d88:	663b      	str	r3, [r7, #96]	; 0x60
 8007d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3308      	adds	r3, #8
 8007d90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d92:	633a      	str	r2, [r7, #48]	; 0x30
 8007d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e5      	bne.n	8007d72 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da8:	2220      	movs	r2, #32
 8007daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d118      	bne.n	8007de8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	e853 3f00 	ldrex	r3, [r3]
 8007dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0310 	bic.w	r3, r3, #16
 8007dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dd4:	61fb      	str	r3, [r7, #28]
 8007dd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	69b9      	ldr	r1, [r7, #24]
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	e841 2300 	strex	r3, r2, [r1]
 8007de0:	617b      	str	r3, [r7, #20]
   return(result);
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e6      	bne.n	8007db6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dea:	2200      	movs	r2, #0
 8007dec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d107      	bne.n	8007e06 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e00:	f006 fd92 	bl	800e928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e04:	e002      	b.n	8007e0c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007e06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e08:	f006 fcca 	bl	800e7a0 <HAL_UART_RxCpltCallback>
}
 8007e0c:	bf00      	nop
 8007e0e:	3770      	adds	r7, #112	; 0x70
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d109      	bne.n	8007e44 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e36:	085b      	lsrs	r3, r3, #1
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f006 fd73 	bl	800e928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e42:	e002      	b.n	8007e4a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f7fe ffd7 	bl	8006df8 <HAL_UART_RxHalfCpltCallback>
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b086      	sub	sp, #24
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e66:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	2b80      	cmp	r3, #128	; 0x80
 8007e7c:	d109      	bne.n	8007e92 <UART_DMAError+0x40>
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b21      	cmp	r3, #33	; 0x21
 8007e82:	d106      	bne.n	8007e92 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007e8c:	6978      	ldr	r0, [r7, #20]
 8007e8e:	f7ff fe29 	bl	8007ae4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9c:	2b40      	cmp	r3, #64	; 0x40
 8007e9e:	d109      	bne.n	8007eb4 <UART_DMAError+0x62>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b22      	cmp	r3, #34	; 0x22
 8007ea4:	d106      	bne.n	8007eb4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007eae:	6978      	ldr	r0, [r7, #20]
 8007eb0:	f7ff fe59 	bl	8007b66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eba:	f043 0210 	orr.w	r2, r3, #16
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ec4:	6978      	ldr	r0, [r7, #20]
 8007ec6:	f006 fcd5 	bl	800e874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eca:	bf00      	nop
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f006 fcbf 	bl	800e874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ef6:	bf00      	nop
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	220f      	movs	r2, #15
 8007f1a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699a      	ldr	r2, [r3, #24]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0208 	orr.w	r2, r2, #8
 8007f2a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7fe ff66 	bl	8006e0c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b08f      	sub	sp, #60	; 0x3c
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f56:	2b21      	cmp	r3, #33	; 0x21
 8007f58:	d14c      	bne.n	8007ff4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d132      	bne.n	8007fcc <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f86:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e6      	bne.n	8007f66 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fac:	633b      	str	r3, [r7, #48]	; 0x30
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	61bb      	str	r3, [r7, #24]
 8007fb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6979      	ldr	r1, [r7, #20]
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e6      	bne.n	8007f98 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007fca:	e013      	b.n	8007ff4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd0:	781a      	ldrb	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	3b01      	subs	r3, #1
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007ff4:	bf00      	nop
 8007ff6:	373c      	adds	r7, #60	; 0x3c
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b091      	sub	sp, #68	; 0x44
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800e:	2b21      	cmp	r3, #33	; 0x21
 8008010:	d151      	bne.n	80080b6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008018:	b29b      	uxth	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d132      	bne.n	8008084 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	623b      	str	r3, [r7, #32]
   return(result);
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008032:	63bb      	str	r3, [r7, #56]	; 0x38
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	633b      	str	r3, [r7, #48]	; 0x30
 800803e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e6      	bne.n	800801e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	60fb      	str	r3, [r7, #12]
   return(result);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806e:	61fb      	str	r3, [r7, #28]
 8008070:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	69b9      	ldr	r1, [r7, #24]
 8008074:	69fa      	ldr	r2, [r7, #28]
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	617b      	str	r3, [r7, #20]
   return(result);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e6      	bne.n	8008050 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008082:	e018      	b.n	80080b6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008088:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800808a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008098:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809e:	1c9a      	adds	r2, r3, #2
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	3b01      	subs	r3, #1
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80080b6:	bf00      	nop
 80080b8:	3744      	adds	r7, #68	; 0x44
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b091      	sub	sp, #68	; 0x44
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d0:	2b21      	cmp	r3, #33	; 0x21
 80080d2:	d160      	bne.n	8008196 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080da:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80080dc:	e057      	b.n	800818e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d133      	bne.n	8008152 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3308      	adds	r3, #8
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	623b      	str	r3, [r7, #32]
   return(result);
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008100:	63bb      	str	r3, [r7, #56]	; 0x38
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800810a:	633a      	str	r2, [r7, #48]	; 0x30
 800810c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e5      	bne.n	80080ea <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	60fb      	str	r3, [r7, #12]
   return(result);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	461a      	mov	r2, r3
 800813a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813c:	61fb      	str	r3, [r7, #28]
 800813e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	69b9      	ldr	r1, [r7, #24]
 8008142:	69fa      	ldr	r2, [r7, #28]
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	617b      	str	r3, [r7, #20]
   return(result);
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e6      	bne.n	800811e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008150:	e021      	b.n	8008196 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69db      	ldr	r3, [r3, #28]
 8008158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815c:	2b00      	cmp	r3, #0
 800815e:	d013      	beq.n	8008188 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008164:	781a      	ldrb	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008188:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800818a:	3b01      	subs	r3, #1
 800818c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800818e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1a4      	bne.n	80080de <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008194:	e7ff      	b.n	8008196 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008196:	bf00      	nop
 8008198:	3744      	adds	r7, #68	; 0x44
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b091      	sub	sp, #68	; 0x44
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b0:	2b21      	cmp	r3, #33	; 0x21
 80081b2:	d165      	bne.n	8008280 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081bc:	e05c      	b.n	8008278 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d133      	bne.n	8008232 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3308      	adds	r3, #8
 80081d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80081e0:	637b      	str	r3, [r7, #52]	; 0x34
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e5      	bne.n	80081ca <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	60bb      	str	r3, [r7, #8]
   return(result);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008212:	633b      	str	r3, [r7, #48]	; 0x30
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	461a      	mov	r2, r3
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	61bb      	str	r3, [r7, #24]
 800821e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	6979      	ldr	r1, [r7, #20]
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	e841 2300 	strex	r3, r2, [r1]
 8008228:	613b      	str	r3, [r7, #16]
   return(result);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1e6      	bne.n	80081fe <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008230:	e026      	b.n	8008280 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800823c:	2b00      	cmp	r3, #0
 800823e:	d018      	beq.n	8008272 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008244:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008254:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825a:	1c9a      	adds	r2, r3, #2
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008266:	b29b      	uxth	r3, r3
 8008268:	3b01      	subs	r3, #1
 800826a:	b29a      	uxth	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008272:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008274:	3b01      	subs	r3, #1
 8008276:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008278:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800827a:	2b00      	cmp	r3, #0
 800827c:	d19f      	bne.n	80081be <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800827e:	e7ff      	b.n	8008280 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008280:	bf00      	nop
 8008282:	3744      	adds	r7, #68	; 0x44
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a8:	61fb      	str	r3, [r7, #28]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	61bb      	str	r3, [r7, #24]
 80082b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6979      	ldr	r1, [r7, #20]
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	613b      	str	r3, [r7, #16]
   return(result);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e6      	bne.n	8008294 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f006 fa25 	bl	800e724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082da:	bf00      	nop
 80082dc:	3720      	adds	r7, #32
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b09c      	sub	sp, #112	; 0x70
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fc:	2b22      	cmp	r3, #34	; 0x22
 80082fe:	f040 80be 	bne.w	800847e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800830c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008310:	b2d9      	uxtb	r1, r3
 8008312:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008316:	b2da      	uxtb	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831c:	400a      	ands	r2, r1
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008332:	b29b      	uxth	r3, r3
 8008334:	3b01      	subs	r3, #1
 8008336:	b29a      	uxth	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008344:	b29b      	uxth	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	f040 80a1 	bne.w	800848e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800835a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800835c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008360:	66bb      	str	r3, [r7, #104]	; 0x68
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800836a:	65bb      	str	r3, [r7, #88]	; 0x58
 800836c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e6      	bne.n	800834c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	667b      	str	r3, [r7, #100]	; 0x64
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800839e:	647a      	str	r2, [r7, #68]	; 0x44
 80083a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e5      	bne.n	800837e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a33      	ldr	r2, [pc, #204]	; (8008498 <UART_RxISR_8BIT+0x1b4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d01f      	beq.n	8008410 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d018      	beq.n	8008410 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	623b      	str	r3, [r7, #32]
   return(result);
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083f2:	663b      	str	r3, [r7, #96]	; 0x60
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083fc:	633b      	str	r3, [r7, #48]	; 0x30
 80083fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e6      	bne.n	80083de <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008414:	2b01      	cmp	r3, #1
 8008416:	d12e      	bne.n	8008476 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	e853 3f00 	ldrex	r3, [r3]
 800842a:	60fb      	str	r3, [r7, #12]
   return(result);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0310 	bic.w	r3, r3, #16
 8008432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008440:	69b9      	ldr	r1, [r7, #24]
 8008442:	69fa      	ldr	r2, [r7, #28]
 8008444:	e841 2300 	strex	r3, r2, [r1]
 8008448:	617b      	str	r3, [r7, #20]
   return(result);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e6      	bne.n	800841e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	f003 0310 	and.w	r3, r3, #16
 800845a:	2b10      	cmp	r3, #16
 800845c:	d103      	bne.n	8008466 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2210      	movs	r2, #16
 8008464:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f006 fa5a 	bl	800e928 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008474:	e00b      	b.n	800848e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f006 f992 	bl	800e7a0 <HAL_UART_RxCpltCallback>
}
 800847c:	e007      	b.n	800848e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	699a      	ldr	r2, [r3, #24]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f042 0208 	orr.w	r2, r2, #8
 800848c:	619a      	str	r2, [r3, #24]
}
 800848e:	bf00      	nop
 8008490:	3770      	adds	r7, #112	; 0x70
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	40008000 	.word	0x40008000

0800849c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b09c      	sub	sp, #112	; 0x70
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b4:	2b22      	cmp	r3, #34	; 0x22
 80084b6:	f040 80be 	bne.w	8008636 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80084ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80084ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80084d2:	4013      	ands	r3, r2
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084de:	1c9a      	adds	r2, r3, #2
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f040 80a1 	bne.w	8008646 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008518:	667b      	str	r3, [r7, #100]	; 0x64
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008522:	657b      	str	r3, [r7, #84]	; 0x54
 8008524:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008528:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e6      	bne.n	8008504 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3308      	adds	r3, #8
 800853c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	f023 0301 	bic.w	r3, r3, #1
 800854c:	663b      	str	r3, [r7, #96]	; 0x60
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3308      	adds	r3, #8
 8008554:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008556:	643a      	str	r2, [r7, #64]	; 0x40
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800855c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e5      	bne.n	8008536 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a33      	ldr	r2, [pc, #204]	; (8008650 <UART_RxISR_16BIT+0x1b4>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d01f      	beq.n	80085c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d018      	beq.n	80085c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	e853 3f00 	ldrex	r3, [r3]
 80085a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085bc:	e841 2300 	strex	r3, r2, [r1]
 80085c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e6      	bne.n	8008596 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d12e      	bne.n	800862e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f023 0310 	bic.w	r3, r3, #16
 80085ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085f4:	61bb      	str	r3, [r7, #24]
 80085f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6979      	ldr	r1, [r7, #20]
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	613b      	str	r3, [r7, #16]
   return(result);
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e6      	bne.n	80085d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f003 0310 	and.w	r3, r3, #16
 8008612:	2b10      	cmp	r3, #16
 8008614:	d103      	bne.n	800861e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2210      	movs	r2, #16
 800861c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f006 f97e 	bl	800e928 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800862c:	e00b      	b.n	8008646 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f006 f8b6 	bl	800e7a0 <HAL_UART_RxCpltCallback>
}
 8008634:	e007      	b.n	8008646 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	699a      	ldr	r2, [r3, #24]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f042 0208 	orr.w	r2, r2, #8
 8008644:	619a      	str	r2, [r3, #24]
}
 8008646:	bf00      	nop
 8008648:	3770      	adds	r7, #112	; 0x70
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	40008000 	.word	0x40008000

08008654 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b0ac      	sub	sp, #176	; 0xb0
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008662:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800868a:	2b22      	cmp	r3, #34	; 0x22
 800868c:	f040 8182 	bne.w	8008994 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008696:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800869a:	e125      	b.n	80088e8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80086aa:	b2d9      	uxtb	r1, r3
 80086ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b6:	400a      	ands	r2, r1
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d053      	beq.n	8008796 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d011      	beq.n	800871e <UART_RxISR_8BIT_FIFOEN+0xca>
 80086fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00b      	beq.n	800871e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2201      	movs	r2, #1
 800870c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008714:	f043 0201 	orr.w	r2, r3, #1
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800871e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b00      	cmp	r3, #0
 8008728:	d011      	beq.n	800874e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800872a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2202      	movs	r2, #2
 800873c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008744:	f043 0204 	orr.w	r2, r3, #4
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800874e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008752:	f003 0304 	and.w	r3, r3, #4
 8008756:	2b00      	cmp	r3, #0
 8008758:	d011      	beq.n	800877e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800875a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2204      	movs	r2, #4
 800876c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008774:	f043 0202 	orr.w	r2, r3, #2
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008784:	2b00      	cmp	r3, #0
 8008786:	d006      	beq.n	8008796 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f006 f873 	bl	800e874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800879c:	b29b      	uxth	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f040 80a2 	bne.w	80088e8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80087b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087c8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80087cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80087d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e4      	bne.n	80087a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80087ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087f0:	f023 0301 	bic.w	r3, r3, #1
 80087f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3308      	adds	r3, #8
 80087fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008802:	66ba      	str	r2, [r7, #104]	; 0x68
 8008804:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008808:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e1      	bne.n	80087da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a5f      	ldr	r2, [pc, #380]	; (80089ac <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d021      	beq.n	8008878 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d01a      	beq.n	8008878 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800884a:	e853 3f00 	ldrex	r3, [r3]
 800884e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008852:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008864:	657b      	str	r3, [r7, #84]	; 0x54
 8008866:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008868:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800886a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800886c:	e841 2300 	strex	r3, r2, [r1]
 8008870:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1e4      	bne.n	8008842 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887c:	2b01      	cmp	r3, #1
 800887e:	d130      	bne.n	80088e2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888e:	e853 3f00 	ldrex	r3, [r3]
 8008892:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	f023 0310 	bic.w	r3, r3, #16
 800889a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088a8:	643b      	str	r3, [r7, #64]	; 0x40
 80088aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e4      	bne.n	8008886 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	f003 0310 	and.w	r3, r3, #16
 80088c6:	2b10      	cmp	r3, #16
 80088c8:	d103      	bne.n	80088d2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2210      	movs	r2, #16
 80088d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f006 f824 	bl	800e928 <HAL_UARTEx_RxEventCallback>
 80088e0:	e002      	b.n	80088e8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f005 ff5c 	bl	800e7a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088e8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d006      	beq.n	80088fe <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80088f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f47f aecf 	bne.w	800869c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008904:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008908:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800890c:	2b00      	cmp	r3, #0
 800890e:	d049      	beq.n	80089a4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008916:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800891a:	429a      	cmp	r2, r3
 800891c:	d242      	bcs.n	80089a4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3308      	adds	r3, #8
 8008924:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	61fb      	str	r3, [r7, #28]
   return(result);
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3308      	adds	r3, #8
 800893e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008944:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e3      	bne.n	800891e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a15      	ldr	r2, [pc, #84]	; (80089b0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800895a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	60bb      	str	r3, [r7, #8]
   return(result);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f043 0320 	orr.w	r3, r3, #32
 8008970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800897e:	61bb      	str	r3, [r7, #24]
 8008980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	6979      	ldr	r1, [r7, #20]
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	613b      	str	r3, [r7, #16]
   return(result);
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e4      	bne.n	800895c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008992:	e007      	b.n	80089a4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699a      	ldr	r2, [r3, #24]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0208 	orr.w	r2, r2, #8
 80089a2:	619a      	str	r2, [r3, #24]
}
 80089a4:	bf00      	nop
 80089a6:	37b0      	adds	r7, #176	; 0xb0
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	40008000 	.word	0x40008000
 80089b0:	080082e5 	.word	0x080082e5

080089b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b0ae      	sub	sp, #184	; 0xb8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089c2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ea:	2b22      	cmp	r3, #34	; 0x22
 80089ec:	f040 8186 	bne.w	8008cfc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089f6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089fa:	e129      	b.n	8008c50 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a0e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008a12:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008a16:	4013      	ands	r3, r2
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a24:	1c9a      	adds	r2, r3, #2
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	3b01      	subs	r3, #1
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d053      	beq.n	8008afa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d011      	beq.n	8008a82 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00b      	beq.n	8008a82 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a78:	f043 0201 	orr.w	r2, r3, #1
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d011      	beq.n	8008ab2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008a8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00b      	beq.n	8008ab2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa8:	f043 0204 	orr.w	r2, r3, #4
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ab6:	f003 0304 	and.w	r3, r3, #4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d011      	beq.n	8008ae2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008abe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00b      	beq.n	8008ae2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2204      	movs	r2, #4
 8008ad0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad8:	f043 0202 	orr.w	r2, r3, #2
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d006      	beq.n	8008afa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f005 fec1 	bl	800e874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f040 80a4 	bne.w	8008c50 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b2e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e2      	bne.n	8008b08 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b58:	f023 0301 	bic.w	r3, r3, #1
 8008b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3308      	adds	r3, #8
 8008b66:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008b6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b72:	e841 2300 	strex	r3, r2, [r1]
 8008b76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1e1      	bne.n	8008b42 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2220      	movs	r2, #32
 8008b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a5f      	ldr	r2, [pc, #380]	; (8008d14 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d021      	beq.n	8008be0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d01a      	beq.n	8008be0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb2:	e853 3f00 	ldrex	r3, [r3]
 8008bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e4      	bne.n	8008baa <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d130      	bne.n	8008c4a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfe:	f023 0310 	bic.w	r3, r3, #16
 8008c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c10:	647b      	str	r3, [r7, #68]	; 0x44
 8008c12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e4      	bne.n	8008bee <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	f003 0310 	and.w	r3, r3, #16
 8008c2e:	2b10      	cmp	r3, #16
 8008c30:	d103      	bne.n	8008c3a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2210      	movs	r2, #16
 8008c38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f005 fe70 	bl	800e928 <HAL_UARTEx_RxEventCallback>
 8008c48:	e002      	b.n	8008c50 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f005 fda8 	bl	800e7a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c50:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d006      	beq.n	8008c66 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008c58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c5c:	f003 0320 	and.w	r3, r3, #32
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f47f aecb 	bne.w	80089fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c6c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c70:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d049      	beq.n	8008d0c <UART_RxISR_16BIT_FIFOEN+0x358>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c7e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d242      	bcs.n	8008d0c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	e853 3f00 	ldrex	r3, [r3]
 8008c94:	623b      	str	r3, [r7, #32]
   return(result);
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008caa:	633a      	str	r2, [r7, #48]	; 0x30
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cb2:	e841 2300 	strex	r3, r2, [r1]
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1e3      	bne.n	8008c86 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a15      	ldr	r2, [pc, #84]	; (8008d18 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008cc2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f043 0320 	orr.w	r3, r3, #32
 8008cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ce6:	61fb      	str	r3, [r7, #28]
 8008ce8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	69b9      	ldr	r1, [r7, #24]
 8008cec:	69fa      	ldr	r2, [r7, #28]
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	617b      	str	r3, [r7, #20]
   return(result);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e4      	bne.n	8008cc4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cfa:	e007      	b.n	8008d0c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	699a      	ldr	r2, [r3, #24]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f042 0208 	orr.w	r2, r2, #8
 8008d0a:	619a      	str	r2, [r3, #24]
}
 8008d0c:	bf00      	nop
 8008d0e:	37b8      	adds	r7, #184	; 0xb8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	40008000 	.word	0x40008000
 8008d18:	0800849d 	.word	0x0800849d

08008d1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d101      	bne.n	8008d6e <HAL_UARTEx_DisableFifoMode+0x16>
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	e027      	b.n	8008dbe <HAL_UARTEx_DisableFifoMode+0x66>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2224      	movs	r2, #36	; 0x24
 8008d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0201 	bic.w	r2, r2, #1
 8008d94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e02d      	b.n	8008e3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2224      	movs	r2, #36	; 0x24
 8008dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f022 0201 	bic.w	r2, r2, #1
 8008e08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f8a4 	bl	8008f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d101      	bne.n	8008e5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	e02d      	b.n	8008eba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2224      	movs	r2, #36	; 0x24
 8008e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f022 0201 	bic.w	r2, r2, #1
 8008e84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f866 	bl	8008f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b08c      	sub	sp, #48	; 0x30
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	d142      	bne.n	8008f60 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008ee0:	88fb      	ldrh	r3, [r7, #6]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e03b      	b.n	8008f62 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2201      	movs	r2, #1
 8008eee:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008ef6:	88fb      	ldrh	r3, [r7, #6]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7fe fd4b 	bl	8007998 <UART_Start_Receive_DMA>
 8008f02:	4603      	mov	r3, r0
 8008f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008f08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d124      	bne.n	8008f5a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d11d      	bne.n	8008f54 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2210      	movs	r2, #16
 8008f1e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f043 0310 	orr.w	r3, r3, #16
 8008f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f40:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f42:	6a39      	ldr	r1, [r7, #32]
 8008f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1e6      	bne.n	8008f20 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008f52:	e002      	b.n	8008f5a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f5e:	e000      	b.n	8008f62 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008f60:	2302      	movs	r3, #2
  }
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3730      	adds	r7, #48	; 0x30
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d108      	bne.n	8008f8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f8c:	e031      	b.n	8008ff2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f8e:	2308      	movs	r3, #8
 8008f90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f92:	2308      	movs	r3, #8
 8008f94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	0e5b      	lsrs	r3, r3, #25
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	f003 0307 	and.w	r3, r3, #7
 8008fa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	0f5b      	lsrs	r3, r3, #29
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	f003 0307 	and.w	r3, r3, #7
 8008fb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fb6:	7bbb      	ldrb	r3, [r7, #14]
 8008fb8:	7b3a      	ldrb	r2, [r7, #12]
 8008fba:	4911      	ldr	r1, [pc, #68]	; (8009000 <UARTEx_SetNbDataToProcess+0x94>)
 8008fbc:	5c8a      	ldrb	r2, [r1, r2]
 8008fbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fc2:	7b3a      	ldrb	r2, [r7, #12]
 8008fc4:	490f      	ldr	r1, [pc, #60]	; (8009004 <UARTEx_SetNbDataToProcess+0x98>)
 8008fc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	7b7a      	ldrb	r2, [r7, #13]
 8008fd8:	4909      	ldr	r1, [pc, #36]	; (8009000 <UARTEx_SetNbDataToProcess+0x94>)
 8008fda:	5c8a      	ldrb	r2, [r1, r2]
 8008fdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fe0:	7b7a      	ldrb	r2, [r7, #13]
 8008fe2:	4908      	ldr	r1, [pc, #32]	; (8009004 <UARTEx_SetNbDataToProcess+0x98>)
 8008fe4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fe6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ff2:	bf00      	nop
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	0800eca0 	.word	0x0800eca0
 8009004:	0800eca8 	.word	0x0800eca8

08009008 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009010:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009014:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800901c:	b29a      	uxth	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	b29b      	uxth	r3, r3
 8009022:	43db      	mvns	r3, r3
 8009024:	b29b      	uxth	r3, r3
 8009026:	4013      	ands	r3, r2
 8009028:	b29a      	uxth	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800903e:	b084      	sub	sp, #16
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	f107 0014 	add.w	r0, r7, #20
 800904c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	b004      	add	sp, #16
 800907e:	4770      	bx	lr

08009080 <__NVIC_SetPriority>:
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	4603      	mov	r3, r0
 8009088:	6039      	str	r1, [r7, #0]
 800908a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800908c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009090:	2b00      	cmp	r3, #0
 8009092:	db0a      	blt.n	80090aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	b2da      	uxtb	r2, r3
 8009098:	490c      	ldr	r1, [pc, #48]	; (80090cc <__NVIC_SetPriority+0x4c>)
 800909a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800909e:	0112      	lsls	r2, r2, #4
 80090a0:	b2d2      	uxtb	r2, r2
 80090a2:	440b      	add	r3, r1
 80090a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80090a8:	e00a      	b.n	80090c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	4908      	ldr	r1, [pc, #32]	; (80090d0 <__NVIC_SetPriority+0x50>)
 80090b0:	79fb      	ldrb	r3, [r7, #7]
 80090b2:	f003 030f 	and.w	r3, r3, #15
 80090b6:	3b04      	subs	r3, #4
 80090b8:	0112      	lsls	r2, r2, #4
 80090ba:	b2d2      	uxtb	r2, r2
 80090bc:	440b      	add	r3, r1
 80090be:	761a      	strb	r2, [r3, #24]
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	e000e100 	.word	0xe000e100
 80090d0:	e000ed00 	.word	0xe000ed00

080090d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80090d8:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <SysTick_Handler+0x1c>)
 80090da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80090dc:	f002 fb96 	bl	800b80c <xTaskGetSchedulerState>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d001      	beq.n	80090ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80090e6:	f003 fcef 	bl	800cac8 <xPortSysTickHandler>
  }
}
 80090ea:	bf00      	nop
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	e000e010 	.word	0xe000e010

080090f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80090f8:	2100      	movs	r1, #0
 80090fa:	f06f 0004 	mvn.w	r0, #4
 80090fe:	f7ff ffbf 	bl	8009080 <__NVIC_SetPriority>
#endif
}
 8009102:	bf00      	nop
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800910e:	f3ef 8305 	mrs	r3, IPSR
 8009112:	603b      	str	r3, [r7, #0]
  return(result);
 8009114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800911a:	f06f 0305 	mvn.w	r3, #5
 800911e:	607b      	str	r3, [r7, #4]
 8009120:	e00c      	b.n	800913c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009122:	4b0a      	ldr	r3, [pc, #40]	; (800914c <osKernelInitialize+0x44>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d105      	bne.n	8009136 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800912a:	4b08      	ldr	r3, [pc, #32]	; (800914c <osKernelInitialize+0x44>)
 800912c:	2201      	movs	r2, #1
 800912e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009130:	2300      	movs	r3, #0
 8009132:	607b      	str	r3, [r7, #4]
 8009134:	e002      	b.n	800913c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009136:	f04f 33ff 	mov.w	r3, #4294967295
 800913a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800913c:	687b      	ldr	r3, [r7, #4]
}
 800913e:	4618      	mov	r0, r3
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	20000760 	.word	0x20000760

08009150 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009156:	f3ef 8305 	mrs	r3, IPSR
 800915a:	603b      	str	r3, [r7, #0]
  return(result);
 800915c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009162:	f06f 0305 	mvn.w	r3, #5
 8009166:	607b      	str	r3, [r7, #4]
 8009168:	e010      	b.n	800918c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800916a:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <osKernelStart+0x48>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d109      	bne.n	8009186 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009172:	f7ff ffbf 	bl	80090f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009176:	4b08      	ldr	r3, [pc, #32]	; (8009198 <osKernelStart+0x48>)
 8009178:	2202      	movs	r2, #2
 800917a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800917c:	f001 fe4e 	bl	800ae1c <vTaskStartScheduler>
      stat = osOK;
 8009180:	2300      	movs	r3, #0
 8009182:	607b      	str	r3, [r7, #4]
 8009184:	e002      	b.n	800918c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009186:	f04f 33ff 	mov.w	r3, #4294967295
 800918a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800918c:	687b      	ldr	r3, [r7, #4]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20000760 	.word	0x20000760

0800919c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800919c:	b580      	push	{r7, lr}
 800919e:	b08e      	sub	sp, #56	; 0x38
 80091a0:	af04      	add	r7, sp, #16
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ac:	f3ef 8305 	mrs	r3, IPSR
 80091b0:	617b      	str	r3, [r7, #20]
  return(result);
 80091b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d17e      	bne.n	80092b6 <osThreadNew+0x11a>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d07b      	beq.n	80092b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091be:	2380      	movs	r3, #128	; 0x80
 80091c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091c2:	2318      	movs	r3, #24
 80091c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80091ca:	f04f 33ff 	mov.w	r3, #4294967295
 80091ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d045      	beq.n	8009262 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <osThreadNew+0x48>
        name = attr->name;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d008      	beq.n	800920a <osThreadNew+0x6e>
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	2b38      	cmp	r3, #56	; 0x38
 80091fc:	d805      	bhi.n	800920a <osThreadNew+0x6e>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <osThreadNew+0x72>
        return (NULL);
 800920a:	2300      	movs	r3, #0
 800920c:	e054      	b.n	80092b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	089b      	lsrs	r3, r3, #2
 800921c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00e      	beq.n	8009244 <osThreadNew+0xa8>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	2b5b      	cmp	r3, #91	; 0x5b
 800922c:	d90a      	bls.n	8009244 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009232:	2b00      	cmp	r3, #0
 8009234:	d006      	beq.n	8009244 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <osThreadNew+0xa8>
        mem = 1;
 800923e:	2301      	movs	r3, #1
 8009240:	61bb      	str	r3, [r7, #24]
 8009242:	e010      	b.n	8009266 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10c      	bne.n	8009266 <osThreadNew+0xca>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d108      	bne.n	8009266 <osThreadNew+0xca>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d104      	bne.n	8009266 <osThreadNew+0xca>
          mem = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	61bb      	str	r3, [r7, #24]
 8009260:	e001      	b.n	8009266 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d110      	bne.n	800928e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009274:	9202      	str	r2, [sp, #8]
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	6a3a      	ldr	r2, [r7, #32]
 8009280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f001 fbf4 	bl	800aa70 <xTaskCreateStatic>
 8009288:	4603      	mov	r3, r0
 800928a:	613b      	str	r3, [r7, #16]
 800928c:	e013      	b.n	80092b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d110      	bne.n	80092b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	b29a      	uxth	r2, r3
 8009298:	f107 0310 	add.w	r3, r7, #16
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f001 fc3f 	bl	800ab2a <xTaskCreate>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d001      	beq.n	80092b6 <osThreadNew+0x11a>
            hTask = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092b6:	693b      	ldr	r3, [r7, #16]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3728      	adds	r7, #40	; 0x28
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c8:	f3ef 8305 	mrs	r3, IPSR
 80092cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80092ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d003      	beq.n	80092dc <osDelay+0x1c>
    stat = osErrorISR;
 80092d4:	f06f 0305 	mvn.w	r3, #5
 80092d8:	60fb      	str	r3, [r7, #12]
 80092da:	e007      	b.n	80092ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d002      	beq.n	80092ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 fd64 	bl	800adb4 <vTaskDelay>
    }
  }

  return (stat);
 80092ec:	68fb      	ldr	r3, [r7, #12]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b086      	sub	sp, #24
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009302:	f3ef 8305 	mrs	r3, IPSR
 8009306:	60fb      	str	r3, [r7, #12]
  return(result);
 8009308:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800930a:	2b00      	cmp	r3, #0
 800930c:	d12d      	bne.n	800936a <osEventFlagsNew+0x74>
    mem = -1;
 800930e:	f04f 33ff 	mov.w	r3, #4294967295
 8009312:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d015      	beq.n	8009346 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d006      	beq.n	8009330 <osEventFlagsNew+0x3a>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	2b1f      	cmp	r3, #31
 8009328:	d902      	bls.n	8009330 <osEventFlagsNew+0x3a>
        mem = 1;
 800932a:	2301      	movs	r3, #1
 800932c:	613b      	str	r3, [r7, #16]
 800932e:	e00c      	b.n	800934a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d108      	bne.n	800934a <osEventFlagsNew+0x54>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d104      	bne.n	800934a <osEventFlagsNew+0x54>
          mem = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	613b      	str	r3, [r7, #16]
 8009344:	e001      	b.n	800934a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d106      	bne.n	800935e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	4618      	mov	r0, r3
 8009356:	f000 f9e7 	bl	8009728 <xEventGroupCreateStatic>
 800935a:	6178      	str	r0, [r7, #20]
 800935c:	e005      	b.n	800936a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d102      	bne.n	800936a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009364:	f000 fa17 	bl	8009796 <xEventGroupCreate>
 8009368:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800936a:	697b      	ldr	r3, [r7, #20]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <osEventFlagsSet+0x1e>
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8009392:	f06f 0303 	mvn.w	r3, #3
 8009396:	617b      	str	r3, [r7, #20]
 8009398:	e028      	b.n	80093ec <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800939a:	f3ef 8305 	mrs	r3, IPSR
 800939e:	60fb      	str	r3, [r7, #12]
  return(result);
 80093a0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01d      	beq.n	80093e2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80093aa:	f107 0308 	add.w	r3, r7, #8
 80093ae:	461a      	mov	r2, r3
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6938      	ldr	r0, [r7, #16]
 80093b4:	f000 fb92 	bl	8009adc <xEventGroupSetBitsFromISR>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d103      	bne.n	80093c6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80093be:	f06f 0302 	mvn.w	r3, #2
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	e012      	b.n	80093ec <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00d      	beq.n	80093ec <osEventFlagsSet+0x78>
 80093d0:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <osEventFlagsSet+0x84>)
 80093d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d6:	601a      	str	r2, [r3, #0]
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	e004      	b.n	80093ec <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6938      	ldr	r0, [r7, #16]
 80093e6:	f000 fabf 	bl	8009968 <xEventGroupSetBits>
 80093ea:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80093ec:	697b      	ldr	r3, [r7, #20]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	e000ed04 	.word	0xe000ed04

080093fc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08c      	sub	sp, #48	; 0x30
 8009400:	af02      	add	r7, sp, #8
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d004      	beq.n	800941e <osEventFlagsWait+0x22>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800941e:	f06f 0303 	mvn.w	r3, #3
 8009422:	61fb      	str	r3, [r7, #28]
 8009424:	e04b      	b.n	80094be <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009426:	f3ef 8305 	mrs	r3, IPSR
 800942a:	617b      	str	r3, [r7, #20]
  return(result);
 800942c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8009432:	f06f 0305 	mvn.w	r3, #5
 8009436:	61fb      	str	r3, [r7, #28]
 8009438:	e041      	b.n	80094be <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8009444:	2301      	movs	r3, #1
 8009446:	627b      	str	r3, [r7, #36]	; 0x24
 8009448:	e001      	b.n	800944e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800944a:	2300      	movs	r3, #0
 800944c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8009458:	2300      	movs	r3, #0
 800945a:	623b      	str	r3, [r7, #32]
 800945c:	e001      	b.n	8009462 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800945e:	2301      	movs	r3, #1
 8009460:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	6a3a      	ldr	r2, [r7, #32]
 800946a:	68b9      	ldr	r1, [r7, #8]
 800946c:	69b8      	ldr	r0, [r7, #24]
 800946e:	f000 f9ad 	bl	80097cc <xEventGroupWaitBits>
 8009472:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b00      	cmp	r3, #0
 800947c:	d010      	beq.n	80094a0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	4013      	ands	r3, r2
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	429a      	cmp	r2, r3
 8009488:	d019      	beq.n	80094be <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d003      	beq.n	8009498 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8009490:	f06f 0301 	mvn.w	r3, #1
 8009494:	61fb      	str	r3, [r7, #28]
 8009496:	e012      	b.n	80094be <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009498:	f06f 0302 	mvn.w	r3, #2
 800949c:	61fb      	str	r3, [r7, #28]
 800949e:	e00e      	b.n	80094be <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	4013      	ands	r3, r2
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d109      	bne.n	80094be <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80094b0:	f06f 0301 	mvn.w	r3, #1
 80094b4:	61fb      	str	r3, [r7, #28]
 80094b6:	e002      	b.n	80094be <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80094b8:	f06f 0302 	mvn.w	r3, #2
 80094bc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80094be:	69fb      	ldr	r3, [r7, #28]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3728      	adds	r7, #40	; 0x28
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08a      	sub	sp, #40	; 0x28
 80094cc:	af02      	add	r7, sp, #8
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094d8:	f3ef 8305 	mrs	r3, IPSR
 80094dc:	613b      	str	r3, [r7, #16]
  return(result);
 80094de:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d175      	bne.n	80095d0 <osSemaphoreNew+0x108>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d072      	beq.n	80095d0 <osSemaphoreNew+0x108>
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d86e      	bhi.n	80095d0 <osSemaphoreNew+0x108>
    mem = -1;
 80094f2:	f04f 33ff 	mov.w	r3, #4294967295
 80094f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d015      	beq.n	800952a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d006      	beq.n	8009514 <osSemaphoreNew+0x4c>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	2b4f      	cmp	r3, #79	; 0x4f
 800950c:	d902      	bls.n	8009514 <osSemaphoreNew+0x4c>
        mem = 1;
 800950e:	2301      	movs	r3, #1
 8009510:	61bb      	str	r3, [r7, #24]
 8009512:	e00c      	b.n	800952e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d108      	bne.n	800952e <osSemaphoreNew+0x66>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d104      	bne.n	800952e <osSemaphoreNew+0x66>
          mem = 0;
 8009524:	2300      	movs	r3, #0
 8009526:	61bb      	str	r3, [r7, #24]
 8009528:	e001      	b.n	800952e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009534:	d04c      	beq.n	80095d0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d128      	bne.n	800958e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d10a      	bne.n	8009558 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	2203      	movs	r2, #3
 8009548:	9200      	str	r2, [sp, #0]
 800954a:	2200      	movs	r2, #0
 800954c:	2100      	movs	r1, #0
 800954e:	2001      	movs	r0, #1
 8009550:	f000 fbf4 	bl	8009d3c <xQueueGenericCreateStatic>
 8009554:	61f8      	str	r0, [r7, #28]
 8009556:	e005      	b.n	8009564 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009558:	2203      	movs	r2, #3
 800955a:	2100      	movs	r1, #0
 800955c:	2001      	movs	r0, #1
 800955e:	f000 fc65 	bl	8009e2c <xQueueGenericCreate>
 8009562:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d022      	beq.n	80095b0 <osSemaphoreNew+0xe8>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01f      	beq.n	80095b0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009570:	2300      	movs	r3, #0
 8009572:	2200      	movs	r2, #0
 8009574:	2100      	movs	r1, #0
 8009576:	69f8      	ldr	r0, [r7, #28]
 8009578:	f000 fd20 	bl	8009fbc <xQueueGenericSend>
 800957c:	4603      	mov	r3, r0
 800957e:	2b01      	cmp	r3, #1
 8009580:	d016      	beq.n	80095b0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009582:	69f8      	ldr	r0, [r7, #28]
 8009584:	f001 f8a0 	bl	800a6c8 <vQueueDelete>
            hSemaphore = NULL;
 8009588:	2300      	movs	r3, #0
 800958a:	61fb      	str	r3, [r7, #28]
 800958c:	e010      	b.n	80095b0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d108      	bne.n	80095a6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	461a      	mov	r2, r3
 800959a:	68b9      	ldr	r1, [r7, #8]
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fca2 	bl	8009ee6 <xQueueCreateCountingSemaphoreStatic>
 80095a2:	61f8      	str	r0, [r7, #28]
 80095a4:	e004      	b.n	80095b0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80095a6:	68b9      	ldr	r1, [r7, #8]
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fcd3 	bl	8009f54 <xQueueCreateCountingSemaphore>
 80095ae:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00c      	beq.n	80095d0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <osSemaphoreNew+0xfc>
          name = attr->name;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	e001      	b.n	80095c8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80095c4:	2300      	movs	r3, #0
 80095c6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80095c8:	6979      	ldr	r1, [r7, #20]
 80095ca:	69f8      	ldr	r0, [r7, #28]
 80095cc:	f001 f9c8 	bl	800a960 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80095d0:	69fb      	ldr	r3, [r7, #28]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3720      	adds	r7, #32
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80095da:	b580      	push	{r7, lr}
 80095dc:	b08a      	sub	sp, #40	; 0x28
 80095de:	af02      	add	r7, sp, #8
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ea:	f3ef 8305 	mrs	r3, IPSR
 80095ee:	613b      	str	r3, [r7, #16]
  return(result);
 80095f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d15f      	bne.n	80096b6 <osMessageQueueNew+0xdc>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d05c      	beq.n	80096b6 <osMessageQueueNew+0xdc>
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d059      	beq.n	80096b6 <osMessageQueueNew+0xdc>
    mem = -1;
 8009602:	f04f 33ff 	mov.w	r3, #4294967295
 8009606:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d029      	beq.n	8009662 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d012      	beq.n	800963c <osMessageQueueNew+0x62>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	2b4f      	cmp	r3, #79	; 0x4f
 800961c:	d90e      	bls.n	800963c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00a      	beq.n	800963c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	695a      	ldr	r2, [r3, #20]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	fb01 f303 	mul.w	r3, r1, r3
 8009632:	429a      	cmp	r2, r3
 8009634:	d302      	bcc.n	800963c <osMessageQueueNew+0x62>
        mem = 1;
 8009636:	2301      	movs	r3, #1
 8009638:	61bb      	str	r3, [r7, #24]
 800963a:	e014      	b.n	8009666 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d110      	bne.n	8009666 <osMessageQueueNew+0x8c>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10c      	bne.n	8009666 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009650:	2b00      	cmp	r3, #0
 8009652:	d108      	bne.n	8009666 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d104      	bne.n	8009666 <osMessageQueueNew+0x8c>
          mem = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	61bb      	str	r3, [r7, #24]
 8009660:	e001      	b.n	8009666 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d10b      	bne.n	8009684 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691a      	ldr	r2, [r3, #16]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	2100      	movs	r1, #0
 8009676:	9100      	str	r1, [sp, #0]
 8009678:	68b9      	ldr	r1, [r7, #8]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 fb5e 	bl	8009d3c <xQueueGenericCreateStatic>
 8009680:	61f8      	str	r0, [r7, #28]
 8009682:	e008      	b.n	8009696 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d105      	bne.n	8009696 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800968a:	2200      	movs	r2, #0
 800968c:	68b9      	ldr	r1, [r7, #8]
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 fbcc 	bl	8009e2c <xQueueGenericCreate>
 8009694:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00c      	beq.n	80096b6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <osMessageQueueNew+0xd0>
        name = attr->name;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	e001      	b.n	80096ae <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80096aa:	2300      	movs	r3, #0
 80096ac:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80096ae:	6979      	ldr	r1, [r7, #20]
 80096b0:	69f8      	ldr	r0, [r7, #28]
 80096b2:	f001 f955 	bl	800a960 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80096b6:	69fb      	ldr	r3, [r7, #28]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3720      	adds	r7, #32
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4a07      	ldr	r2, [pc, #28]	; (80096ec <vApplicationGetIdleTaskMemory+0x2c>)
 80096d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	4a06      	ldr	r2, [pc, #24]	; (80096f0 <vApplicationGetIdleTaskMemory+0x30>)
 80096d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2280      	movs	r2, #128	; 0x80
 80096dc:	601a      	str	r2, [r3, #0]
}
 80096de:	bf00      	nop
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	20000764 	.word	0x20000764
 80096f0:	200007c0 	.word	0x200007c0

080096f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4a07      	ldr	r2, [pc, #28]	; (8009720 <vApplicationGetTimerTaskMemory+0x2c>)
 8009704:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	4a06      	ldr	r2, [pc, #24]	; (8009724 <vApplicationGetTimerTaskMemory+0x30>)
 800970a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009712:	601a      	str	r2, [r3, #0]
}
 8009714:	bf00      	nop
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	200009c0 	.word	0x200009c0
 8009724:	20000a1c 	.word	0x20000a1c

08009728 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10a      	bne.n	800974c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009748:	bf00      	nop
 800974a:	e7fe      	b.n	800974a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800974c:	2320      	movs	r3, #32
 800974e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b20      	cmp	r3, #32
 8009754:	d00a      	beq.n	800976c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	60fb      	str	r3, [r7, #12]
}
 8009768:	bf00      	nop
 800976a:	e7fe      	b.n	800976a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00a      	beq.n	800978c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	3304      	adds	r3, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f000 f9bf 	bl	8009b04 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2201      	movs	r2, #1
 800978a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800978c:	697b      	ldr	r3, [r7, #20]
	}
 800978e:	4618      	mov	r0, r3
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009796:	b580      	push	{r7, lr}
 8009798:	b082      	sub	sp, #8
 800979a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800979c:	2020      	movs	r0, #32
 800979e:	f003 fa23 	bl	800cbe8 <pvPortMalloc>
 80097a2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3304      	adds	r3, #4
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 f9a5 	bl	8009b04 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80097c0:	687b      	ldr	r3, [r7, #4]
	}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
	...

080097cc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b090      	sub	sp, #64	; 0x40
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80097de:	2300      	movs	r3, #0
 80097e0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80097e2:	2300      	movs	r3, #0
 80097e4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10a      	bne.n	8009802 <xEventGroupWaitBits+0x36>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	623b      	str	r3, [r7, #32]
}
 80097fe:	bf00      	nop
 8009800:	e7fe      	b.n	8009800 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <xEventGroupWaitBits+0x56>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	61fb      	str	r3, [r7, #28]
}
 800981e:	bf00      	nop
 8009820:	e7fe      	b.n	8009820 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10a      	bne.n	800983e <xEventGroupWaitBits+0x72>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	61bb      	str	r3, [r7, #24]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800983e:	f001 ffe5 	bl	800b80c <xTaskGetSchedulerState>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <xEventGroupWaitBits+0x82>
 8009848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <xEventGroupWaitBits+0x86>
 800984e:	2301      	movs	r3, #1
 8009850:	e000      	b.n	8009854 <xEventGroupWaitBits+0x88>
 8009852:	2300      	movs	r3, #0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10a      	bne.n	800986e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	617b      	str	r3, [r7, #20]
}
 800986a:	bf00      	nop
 800986c:	e7fe      	b.n	800986c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800986e:	f001 fb3b 	bl	800aee8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	68b9      	ldr	r1, [r7, #8]
 800987c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800987e:	f000 f90b 	bl	8009a98 <prvTestWaitCondition>
 8009882:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8009884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00e      	beq.n	80098a8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800988a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800988e:	2300      	movs	r3, #0
 8009890:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d028      	beq.n	80098ea <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	43db      	mvns	r3, r3
 80098a0:	401a      	ands	r2, r3
 80098a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a4:	601a      	str	r2, [r3, #0]
 80098a6:	e020      	b.n	80098ea <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80098a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d104      	bne.n	80098b8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80098b2:	2301      	movs	r3, #1
 80098b4:	633b      	str	r3, [r7, #48]	; 0x30
 80098b6:	e018      	b.n	80098ea <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80098be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098c4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80098cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098d2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80098d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d6:	1d18      	adds	r0, r3, #4
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098dc:	4313      	orrs	r3, r2
 80098de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098e0:	4619      	mov	r1, r3
 80098e2:	f001 fd0b 	bl	800b2fc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80098ea:	f001 fb0b 	bl	800af04 <xTaskResumeAll>
 80098ee:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80098f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d031      	beq.n	800995a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d107      	bne.n	800990c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80098fc:	4b19      	ldr	r3, [pc, #100]	; (8009964 <xEventGroupWaitBits+0x198>)
 80098fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800990c:	f002 f8f4 	bl	800baf8 <uxTaskResetEventItemValue>
 8009910:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8009912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d11a      	bne.n	8009952 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800991c:	f003 f842 	bl	800c9a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	68b9      	ldr	r1, [r7, #8]
 800992a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800992c:	f000 f8b4 	bl	8009a98 <prvTestWaitCondition>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d009      	beq.n	800994a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d006      	beq.n	800994a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800993c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	43db      	mvns	r3, r3
 8009944:	401a      	ands	r2, r3
 8009946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009948:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800994a:	2301      	movs	r3, #1
 800994c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800994e:	f003 f859 	bl	800ca04 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009954:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009958:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800995a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800995c:	4618      	mov	r0, r3
 800995e:	3740      	adds	r7, #64	; 0x40
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	e000ed04 	.word	0xe000ed04

08009968 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08e      	sub	sp, #56	; 0x38
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009972:	2300      	movs	r3, #0
 8009974:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800997a:	2300      	movs	r3, #0
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10a      	bne.n	800999a <xEventGroupSetBits+0x32>
	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	613b      	str	r3, [r7, #16]
}
 8009996:	bf00      	nop
 8009998:	e7fe      	b.n	8009998 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00a      	beq.n	80099ba <xEventGroupSetBits+0x52>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	60fb      	str	r3, [r7, #12]
}
 80099b6:	bf00      	nop
 80099b8:	e7fe      	b.n	80099b8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	3304      	adds	r3, #4
 80099be:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	3308      	adds	r3, #8
 80099c4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80099c6:	f001 fa8f 	bl	800aee8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	431a      	orrs	r2, r3
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80099dc:	e03c      	b.n	8009a58 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80099de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80099e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80099ea:	2300      	movs	r3, #0
 80099ec:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80099f4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80099fc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d108      	bne.n	8009a1a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00b      	beq.n	8009a2c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8009a14:	2301      	movs	r3, #1
 8009a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a18:	e008      	b.n	8009a2c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8009a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	4013      	ands	r3, r2
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d101      	bne.n	8009a2c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d010      	beq.n	8009a54 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009a50:	f001 fd20 	bl	800b494 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8009a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d1be      	bne.n	80099de <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a66:	43db      	mvns	r3, r3
 8009a68:	401a      	ands	r2, r3
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8009a6e:	f001 fa49 	bl	800af04 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	681b      	ldr	r3, [r3, #0]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3738      	adds	r7, #56	; 0x38
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b082      	sub	sp, #8
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff ff6c 	bl	8009968 <xEventGroupSetBits>
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d107      	bne.n	8009abe <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00a      	beq.n	8009ace <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	e007      	b.n	8009ace <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d101      	bne.n	8009ace <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009aca:	2301      	movs	r3, #1
 8009acc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009ace:	697b      	ldr	r3, [r7, #20]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	371c      	adds	r7, #28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	68f9      	ldr	r1, [r7, #12]
 8009aee:	4804      	ldr	r0, [pc, #16]	; (8009b00 <xEventGroupSetBitsFromISR+0x24>)
 8009af0:	f002 fe08 	bl	800c704 <xTimerPendFunctionCallFromISR>
 8009af4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8009af6:	697b      	ldr	r3, [r7, #20]
	}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	08009a7f 	.word	0x08009a7f

08009b04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f103 0208 	add.w	r2, r3, #8
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f103 0208 	add.w	r2, r3, #8
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f103 0208 	add.w	r2, r3, #8
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b085      	sub	sp, #20
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	601a      	str	r2, [r3, #0]
}
 8009b9a:	bf00      	nop
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbc:	d103      	bne.n	8009bc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	e00c      	b.n	8009be0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	e002      	b.n	8009bd4 <vListInsert+0x2e>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d2f6      	bcs.n	8009bce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	601a      	str	r2, [r3, #0]
}
 8009c0c:	bf00      	nop
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	6892      	ldr	r2, [r2, #8]
 8009c2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	6852      	ldr	r2, [r2, #4]
 8009c38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d103      	bne.n	8009c4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	1e5a      	subs	r2, r3, #1
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10a      	bne.n	8009c96 <xQueueGenericReset+0x2a>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	60bb      	str	r3, [r7, #8]
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c96:	f002 fe85 	bl	800c9a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca2:	68f9      	ldr	r1, [r7, #12]
 8009ca4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ca6:	fb01 f303 	mul.w	r3, r1, r3
 8009caa:	441a      	add	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	68f9      	ldr	r1, [r7, #12]
 8009cca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ccc:	fb01 f303 	mul.w	r3, r1, r3
 8009cd0:	441a      	add	r2, r3
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	22ff      	movs	r2, #255	; 0xff
 8009cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	22ff      	movs	r2, #255	; 0xff
 8009ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d114      	bne.n	8009d16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d01a      	beq.n	8009d2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3310      	adds	r3, #16
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 fb67 	bl	800b3cc <xTaskRemoveFromEventList>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d012      	beq.n	8009d2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d04:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <xQueueGenericReset+0xcc>)
 8009d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	e009      	b.n	8009d2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3310      	adds	r3, #16
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff fef2 	bl	8009b04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	3324      	adds	r3, #36	; 0x24
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff feed 	bl	8009b04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d2a:	f002 fe6b 	bl	800ca04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d2e:	2301      	movs	r3, #1
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	e000ed04 	.word	0xe000ed04

08009d3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08e      	sub	sp, #56	; 0x38
 8009d40:	af02      	add	r7, sp, #8
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10a      	bne.n	8009d66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10a      	bne.n	8009d82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d7e:	bf00      	nop
 8009d80:	e7fe      	b.n	8009d80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <xQueueGenericCreateStatic+0x52>
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <xQueueGenericCreateStatic+0x56>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e000      	b.n	8009d94 <xQueueGenericCreateStatic+0x58>
 8009d92:	2300      	movs	r3, #0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10a      	bne.n	8009dae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	623b      	str	r3, [r7, #32]
}
 8009daa:	bf00      	nop
 8009dac:	e7fe      	b.n	8009dac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d102      	bne.n	8009dba <xQueueGenericCreateStatic+0x7e>
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <xQueueGenericCreateStatic+0x82>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e000      	b.n	8009dc0 <xQueueGenericCreateStatic+0x84>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10a      	bne.n	8009dda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	61fb      	str	r3, [r7, #28]
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009dda:	2350      	movs	r3, #80	; 0x50
 8009ddc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b50      	cmp	r3, #80	; 0x50
 8009de2:	d00a      	beq.n	8009dfa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	61bb      	str	r3, [r7, #24]
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009dfa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00d      	beq.n	8009e22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	4613      	mov	r3, r2
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	68b9      	ldr	r1, [r7, #8]
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 f83f 	bl	8009ea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3730      	adds	r7, #48	; 0x30
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08a      	sub	sp, #40	; 0x28
 8009e30:	af02      	add	r7, sp, #8
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10a      	bne.n	8009e56 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	613b      	str	r3, [r7, #16]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	fb02 f303 	mul.w	r3, r2, r3
 8009e5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	3350      	adds	r3, #80	; 0x50
 8009e64:	4618      	mov	r0, r3
 8009e66:	f002 febf 	bl	800cbe8 <pvPortMalloc>
 8009e6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d011      	beq.n	8009e96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	3350      	adds	r3, #80	; 0x50
 8009e7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e84:	79fa      	ldrb	r2, [r7, #7]
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f805 	bl	8009ea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e96:	69bb      	ldr	r3, [r7, #24]
	}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3720      	adds	r7, #32
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d103      	bne.n	8009ebc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	e002      	b.n	8009ec2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ece:	2101      	movs	r1, #1
 8009ed0:	69b8      	ldr	r0, [r7, #24]
 8009ed2:	f7ff fecb 	bl	8009c6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	78fa      	ldrb	r2, [r7, #3]
 8009eda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ede:	bf00      	nop
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b08a      	sub	sp, #40	; 0x28
 8009eea:	af02      	add	r7, sp, #8
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	61bb      	str	r3, [r7, #24]
}
 8009f0a:	bf00      	nop
 8009f0c:	e7fe      	b.n	8009f0c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d90a      	bls.n	8009f2c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	617b      	str	r3, [r7, #20]
}
 8009f28:	bf00      	nop
 8009f2a:	e7fe      	b.n	8009f2a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	2100      	movs	r1, #0
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f7ff ff00 	bl	8009d3c <xQueueGenericCreateStatic>
 8009f3c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f4a:	69fb      	ldr	r3, [r7, #28]
	}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10a      	bne.n	8009f7a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	613b      	str	r3, [r7, #16]
}
 8009f76:	bf00      	nop
 8009f78:	e7fe      	b.n	8009f78 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d90a      	bls.n	8009f98 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	60fb      	str	r3, [r7, #12]
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f98:	2202      	movs	r2, #2
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff ff45 	bl	8009e2c <xQueueGenericCreate>
 8009fa2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009fb0:	697b      	ldr	r3, [r7, #20]
	}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08e      	sub	sp, #56	; 0x38
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10a      	bne.n	8009fee <xQueueGenericSend+0x32>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fea:	bf00      	nop
 8009fec:	e7fe      	b.n	8009fec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d103      	bne.n	8009ffc <xQueueGenericSend+0x40>
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <xQueueGenericSend+0x44>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e000      	b.n	800a002 <xQueueGenericSend+0x46>
 800a000:	2300      	movs	r3, #0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10a      	bne.n	800a01c <xQueueGenericSend+0x60>
	__asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a018:	bf00      	nop
 800a01a:	e7fe      	b.n	800a01a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d103      	bne.n	800a02a <xQueueGenericSend+0x6e>
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a026:	2b01      	cmp	r3, #1
 800a028:	d101      	bne.n	800a02e <xQueueGenericSend+0x72>
 800a02a:	2301      	movs	r3, #1
 800a02c:	e000      	b.n	800a030 <xQueueGenericSend+0x74>
 800a02e:	2300      	movs	r3, #0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10a      	bne.n	800a04a <xQueueGenericSend+0x8e>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	623b      	str	r3, [r7, #32]
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a04a:	f001 fbdf 	bl	800b80c <xTaskGetSchedulerState>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <xQueueGenericSend+0x9e>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <xQueueGenericSend+0xa2>
 800a05a:	2301      	movs	r3, #1
 800a05c:	e000      	b.n	800a060 <xQueueGenericSend+0xa4>
 800a05e:	2300      	movs	r3, #0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10a      	bne.n	800a07a <xQueueGenericSend+0xbe>
	__asm volatile
 800a064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a068:	f383 8811 	msr	BASEPRI, r3
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	61fb      	str	r3, [r7, #28]
}
 800a076:	bf00      	nop
 800a078:	e7fe      	b.n	800a078 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a07a:	f002 fc93 	bl	800c9a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a086:	429a      	cmp	r2, r3
 800a088:	d302      	bcc.n	800a090 <xQueueGenericSend+0xd4>
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d129      	bne.n	800a0e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	68b9      	ldr	r1, [r7, #8]
 800a094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a096:	f000 fb52 	bl	800a73e <prvCopyDataToQueue>
 800a09a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d010      	beq.n	800a0c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	3324      	adds	r3, #36	; 0x24
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f001 f98f 	bl	800b3cc <xTaskRemoveFromEventList>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d013      	beq.n	800a0dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0b4:	4b3f      	ldr	r3, [pc, #252]	; (800a1b4 <xQueueGenericSend+0x1f8>)
 800a0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	e00a      	b.n	800a0dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d007      	beq.n	800a0dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0cc:	4b39      	ldr	r3, [pc, #228]	; (800a1b4 <xQueueGenericSend+0x1f8>)
 800a0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0dc:	f002 fc92 	bl	800ca04 <vPortExitCritical>
				return pdPASS;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e063      	b.n	800a1ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d103      	bne.n	800a0f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0ea:	f002 fc8b 	bl	800ca04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	e05c      	b.n	800a1ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d106      	bne.n	800a106 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0f8:	f107 0314 	add.w	r3, r7, #20
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 fa2b 	bl	800b558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a102:	2301      	movs	r3, #1
 800a104:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a106:	f002 fc7d 	bl	800ca04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a10a:	f000 feed 	bl	800aee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a10e:	f002 fc49 	bl	800c9a4 <vPortEnterCritical>
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a118:	b25b      	sxtb	r3, r3
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11e:	d103      	bne.n	800a128 <xQueueGenericSend+0x16c>
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a12e:	b25b      	sxtb	r3, r3
 800a130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a134:	d103      	bne.n	800a13e <xQueueGenericSend+0x182>
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a13e:	f002 fc61 	bl	800ca04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a142:	1d3a      	adds	r2, r7, #4
 800a144:	f107 0314 	add.w	r3, r7, #20
 800a148:	4611      	mov	r1, r2
 800a14a:	4618      	mov	r0, r3
 800a14c:	f001 fa1a 	bl	800b584 <xTaskCheckForTimeOut>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d124      	bne.n	800a1a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a158:	f000 fbe9 	bl	800a92e <prvIsQueueFull>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d018      	beq.n	800a194 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	3310      	adds	r3, #16
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	4611      	mov	r1, r2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f001 f8a2 	bl	800b2b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a172:	f000 fb74 	bl	800a85e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a176:	f000 fec5 	bl	800af04 <xTaskResumeAll>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f47f af7c 	bne.w	800a07a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a182:	4b0c      	ldr	r3, [pc, #48]	; (800a1b4 <xQueueGenericSend+0x1f8>)
 800a184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	e772      	b.n	800a07a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a196:	f000 fb62 	bl	800a85e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a19a:	f000 feb3 	bl	800af04 <xTaskResumeAll>
 800a19e:	e76c      	b.n	800a07a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a2:	f000 fb5c 	bl	800a85e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1a6:	f000 fead 	bl	800af04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3738      	adds	r7, #56	; 0x38
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	e000ed04 	.word	0xe000ed04

0800a1b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b090      	sub	sp, #64	; 0x40
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
 800a1c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10a      	bne.n	800a1e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1e2:	bf00      	nop
 800a1e4:	e7fe      	b.n	800a1e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d103      	bne.n	800a1f4 <xQueueGenericSendFromISR+0x3c>
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <xQueueGenericSendFromISR+0x40>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e000      	b.n	800a1fa <xQueueGenericSendFromISR+0x42>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10a      	bne.n	800a214 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a210:	bf00      	nop
 800a212:	e7fe      	b.n	800a212 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b02      	cmp	r3, #2
 800a218:	d103      	bne.n	800a222 <xQueueGenericSendFromISR+0x6a>
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d101      	bne.n	800a226 <xQueueGenericSendFromISR+0x6e>
 800a222:	2301      	movs	r3, #1
 800a224:	e000      	b.n	800a228 <xQueueGenericSendFromISR+0x70>
 800a226:	2300      	movs	r3, #0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10a      	bne.n	800a242 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	623b      	str	r3, [r7, #32]
}
 800a23e:	bf00      	nop
 800a240:	e7fe      	b.n	800a240 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a242:	f002 fc91 	bl	800cb68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a246:	f3ef 8211 	mrs	r2, BASEPRI
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	61fa      	str	r2, [r7, #28]
 800a25c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a25e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a260:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d302      	bcc.n	800a274 <xQueueGenericSendFromISR+0xbc>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d12f      	bne.n	800a2d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a282:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a28a:	f000 fa58 	bl	800a73e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a28e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a296:	d112      	bne.n	800a2be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d016      	beq.n	800a2ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	3324      	adds	r3, #36	; 0x24
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 f891 	bl	800b3cc <xTaskRemoveFromEventList>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00e      	beq.n	800a2ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00b      	beq.n	800a2ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	e007      	b.n	800a2ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	b25a      	sxtb	r2, r3
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a2d2:	e001      	b.n	800a2d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3740      	adds	r7, #64	; 0x40
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
	...

0800a2f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08c      	sub	sp, #48	; 0x30
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10a      	bne.n	800a320 <xQueueReceive+0x30>
	__asm volatile
 800a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	623b      	str	r3, [r7, #32]
}
 800a31c:	bf00      	nop
 800a31e:	e7fe      	b.n	800a31e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d103      	bne.n	800a32e <xQueueReceive+0x3e>
 800a326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <xQueueReceive+0x42>
 800a32e:	2301      	movs	r3, #1
 800a330:	e000      	b.n	800a334 <xQueueReceive+0x44>
 800a332:	2300      	movs	r3, #0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10a      	bne.n	800a34e <xQueueReceive+0x5e>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	61fb      	str	r3, [r7, #28]
}
 800a34a:	bf00      	nop
 800a34c:	e7fe      	b.n	800a34c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a34e:	f001 fa5d 	bl	800b80c <xTaskGetSchedulerState>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d102      	bne.n	800a35e <xQueueReceive+0x6e>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <xQueueReceive+0x72>
 800a35e:	2301      	movs	r3, #1
 800a360:	e000      	b.n	800a364 <xQueueReceive+0x74>
 800a362:	2300      	movs	r3, #0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10a      	bne.n	800a37e <xQueueReceive+0x8e>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	61bb      	str	r3, [r7, #24]
}
 800a37a:	bf00      	nop
 800a37c:	e7fe      	b.n	800a37c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a37e:	f002 fb11 	bl	800c9a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a386:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d01f      	beq.n	800a3ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a38e:	68b9      	ldr	r1, [r7, #8]
 800a390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a392:	f000 fa3e 	bl	800a812 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	1e5a      	subs	r2, r3, #1
 800a39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00f      	beq.n	800a3c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a8:	3310      	adds	r3, #16
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f001 f80e 	bl	800b3cc <xTaskRemoveFromEventList>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d007      	beq.n	800a3c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3b6:	4b3d      	ldr	r3, [pc, #244]	; (800a4ac <xQueueReceive+0x1bc>)
 800a3b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3c6:	f002 fb1d 	bl	800ca04 <vPortExitCritical>
				return pdPASS;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e069      	b.n	800a4a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d103      	bne.n	800a3dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3d4:	f002 fb16 	bl	800ca04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e062      	b.n	800a4a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d106      	bne.n	800a3f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3e2:	f107 0310 	add.w	r3, r7, #16
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f001 f8b6 	bl	800b558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3f0:	f002 fb08 	bl	800ca04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3f4:	f000 fd78 	bl	800aee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3f8:	f002 fad4 	bl	800c9a4 <vPortEnterCritical>
 800a3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a402:	b25b      	sxtb	r3, r3
 800a404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a408:	d103      	bne.n	800a412 <xQueueReceive+0x122>
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a418:	b25b      	sxtb	r3, r3
 800a41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41e:	d103      	bne.n	800a428 <xQueueReceive+0x138>
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	2200      	movs	r2, #0
 800a424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a428:	f002 faec 	bl	800ca04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a42c:	1d3a      	adds	r2, r7, #4
 800a42e:	f107 0310 	add.w	r3, r7, #16
 800a432:	4611      	mov	r1, r2
 800a434:	4618      	mov	r0, r3
 800a436:	f001 f8a5 	bl	800b584 <xTaskCheckForTimeOut>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d123      	bne.n	800a488 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a442:	f000 fa5e 	bl	800a902 <prvIsQueueEmpty>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d017      	beq.n	800a47c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	3324      	adds	r3, #36	; 0x24
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f000 ff2d 	bl	800b2b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a45a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a45c:	f000 f9ff 	bl	800a85e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a460:	f000 fd50 	bl	800af04 <xTaskResumeAll>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d189      	bne.n	800a37e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a46a:	4b10      	ldr	r3, [pc, #64]	; (800a4ac <xQueueReceive+0x1bc>)
 800a46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a470:	601a      	str	r2, [r3, #0]
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	e780      	b.n	800a37e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a47c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a47e:	f000 f9ee 	bl	800a85e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a482:	f000 fd3f 	bl	800af04 <xTaskResumeAll>
 800a486:	e77a      	b.n	800a37e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a48a:	f000 f9e8 	bl	800a85e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a48e:	f000 fd39 	bl	800af04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a494:	f000 fa35 	bl	800a902 <prvIsQueueEmpty>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f43f af6f 	beq.w	800a37e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3730      	adds	r7, #48	; 0x30
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	e000ed04 	.word	0xe000ed04

0800a4b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08e      	sub	sp, #56	; 0x38
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10a      	bne.n	800a4e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	623b      	str	r3, [r7, #32]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00a      	beq.n	800a500 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	61fb      	str	r3, [r7, #28]
}
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a500:	f001 f984 	bl	800b80c <xTaskGetSchedulerState>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d102      	bne.n	800a510 <xQueueSemaphoreTake+0x60>
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <xQueueSemaphoreTake+0x64>
 800a510:	2301      	movs	r3, #1
 800a512:	e000      	b.n	800a516 <xQueueSemaphoreTake+0x66>
 800a514:	2300      	movs	r3, #0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10a      	bne.n	800a530 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51e:	f383 8811 	msr	BASEPRI, r3
 800a522:	f3bf 8f6f 	isb	sy
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	61bb      	str	r3, [r7, #24]
}
 800a52c:	bf00      	nop
 800a52e:	e7fe      	b.n	800a52e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a530:	f002 fa38 	bl	800c9a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a538:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d024      	beq.n	800a58a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	1e5a      	subs	r2, r3, #1
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a550:	f001 faea 	bl	800bb28 <pvTaskIncrementMutexHeldCount>
 800a554:	4602      	mov	r2, r0
 800a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a558:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00f      	beq.n	800a582 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a564:	3310      	adds	r3, #16
 800a566:	4618      	mov	r0, r3
 800a568:	f000 ff30 	bl	800b3cc <xTaskRemoveFromEventList>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d007      	beq.n	800a582 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a572:	4b54      	ldr	r3, [pc, #336]	; (800a6c4 <xQueueSemaphoreTake+0x214>)
 800a574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a582:	f002 fa3f 	bl	800ca04 <vPortExitCritical>
				return pdPASS;
 800a586:	2301      	movs	r3, #1
 800a588:	e097      	b.n	800a6ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d111      	bne.n	800a5b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59a:	f383 8811 	msr	BASEPRI, r3
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	617b      	str	r3, [r7, #20]
}
 800a5a8:	bf00      	nop
 800a5aa:	e7fe      	b.n	800a5aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a5ac:	f002 fa2a 	bl	800ca04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e082      	b.n	800a6ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d106      	bne.n	800a5c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5ba:	f107 030c 	add.w	r3, r7, #12
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 ffca 	bl	800b558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5c8:	f002 fa1c 	bl	800ca04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5cc:	f000 fc8c 	bl	800aee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5d0:	f002 f9e8 	bl	800c9a4 <vPortEnterCritical>
 800a5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5da:	b25b      	sxtb	r3, r3
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e0:	d103      	bne.n	800a5ea <xQueueSemaphoreTake+0x13a>
 800a5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5f0:	b25b      	sxtb	r3, r3
 800a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f6:	d103      	bne.n	800a600 <xQueueSemaphoreTake+0x150>
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a600:	f002 fa00 	bl	800ca04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a604:	463a      	mov	r2, r7
 800a606:	f107 030c 	add.w	r3, r7, #12
 800a60a:	4611      	mov	r1, r2
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 ffb9 	bl	800b584 <xTaskCheckForTimeOut>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d132      	bne.n	800a67e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a61a:	f000 f972 	bl	800a902 <prvIsQueueEmpty>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d026      	beq.n	800a672 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d109      	bne.n	800a640 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a62c:	f002 f9ba 	bl	800c9a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	4618      	mov	r0, r3
 800a636:	f001 f907 	bl	800b848 <xTaskPriorityInherit>
 800a63a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a63c:	f002 f9e2 	bl	800ca04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a642:	3324      	adds	r3, #36	; 0x24
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	4611      	mov	r1, r2
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 fe33 	bl	800b2b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a64e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a650:	f000 f905 	bl	800a85e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a654:	f000 fc56 	bl	800af04 <xTaskResumeAll>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f47f af68 	bne.w	800a530 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a660:	4b18      	ldr	r3, [pc, #96]	; (800a6c4 <xQueueSemaphoreTake+0x214>)
 800a662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	e75e      	b.n	800a530 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a672:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a674:	f000 f8f3 	bl	800a85e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a678:	f000 fc44 	bl	800af04 <xTaskResumeAll>
 800a67c:	e758      	b.n	800a530 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a67e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a680:	f000 f8ed 	bl	800a85e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a684:	f000 fc3e 	bl	800af04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a68a:	f000 f93a 	bl	800a902 <prvIsQueueEmpty>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	f43f af4d 	beq.w	800a530 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00d      	beq.n	800a6b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a69c:	f002 f982 	bl	800c9a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a6a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6a2:	f000 f834 	bl	800a70e <prvGetDisinheritPriorityAfterTimeout>
 800a6a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f001 f9a0 	bl	800b9f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6b4:	f002 f9a6 	bl	800ca04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3738      	adds	r7, #56	; 0x38
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	e000ed04 	.word	0xe000ed04

0800a6c8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10a      	bne.n	800a6f0 <vQueueDelete+0x28>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	60bb      	str	r3, [r7, #8]
}
 800a6ec:	bf00      	nop
 800a6ee:	e7fe      	b.n	800a6ee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 f95f 	bl	800a9b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d102      	bne.n	800a706 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f002 fb3d 	bl	800cd80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a706:	bf00      	nop
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a70e:	b480      	push	{r7}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d006      	beq.n	800a72c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	e001      	b.n	800a730 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a72c:	2300      	movs	r3, #0
 800a72e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a730:	68fb      	ldr	r3, [r7, #12]
	}
 800a732:	4618      	mov	r0, r3
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b086      	sub	sp, #24
 800a742:	af00      	add	r7, sp, #0
 800a744:	60f8      	str	r0, [r7, #12]
 800a746:	60b9      	str	r1, [r7, #8]
 800a748:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a74a:	2300      	movs	r3, #0
 800a74c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a752:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10d      	bne.n	800a778 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d14d      	bne.n	800a800 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	4618      	mov	r0, r3
 800a76a:	f001 f8d5 	bl	800b918 <xTaskPriorityDisinherit>
 800a76e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	609a      	str	r2, [r3, #8]
 800a776:	e043      	b.n	800a800 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d119      	bne.n	800a7b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6858      	ldr	r0, [r3, #4]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a786:	461a      	mov	r2, r3
 800a788:	68b9      	ldr	r1, [r7, #8]
 800a78a:	f004 f983 	bl	800ea94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	441a      	add	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d32b      	bcc.n	800a800 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	605a      	str	r2, [r3, #4]
 800a7b0:	e026      	b.n	800a800 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	68d8      	ldr	r0, [r3, #12]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	68b9      	ldr	r1, [r7, #8]
 800a7be:	f004 f969 	bl	800ea94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	68da      	ldr	r2, [r3, #12]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	425b      	negs	r3, r3
 800a7cc:	441a      	add	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d207      	bcs.n	800a7ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e6:	425b      	negs	r3, r3
 800a7e8:	441a      	add	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d105      	bne.n	800a800 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	1c5a      	adds	r2, r3, #1
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a808:	697b      	ldr	r3, [r7, #20]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a820:	2b00      	cmp	r3, #0
 800a822:	d018      	beq.n	800a856 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68da      	ldr	r2, [r3, #12]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82c:	441a      	add	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d303      	bcc.n	800a846 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68d9      	ldr	r1, [r3, #12]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	461a      	mov	r2, r3
 800a850:	6838      	ldr	r0, [r7, #0]
 800a852:	f004 f91f 	bl	800ea94 <memcpy>
	}
}
 800a856:	bf00      	nop
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a866:	f002 f89d 	bl	800c9a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a870:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a872:	e011      	b.n	800a898 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d012      	beq.n	800a8a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	3324      	adds	r3, #36	; 0x24
 800a880:	4618      	mov	r0, r3
 800a882:	f000 fda3 	bl	800b3cc <xTaskRemoveFromEventList>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a88c:	f000 fedc 	bl	800b648 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a890:	7bfb      	ldrb	r3, [r7, #15]
 800a892:	3b01      	subs	r3, #1
 800a894:	b2db      	uxtb	r3, r3
 800a896:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	dce9      	bgt.n	800a874 <prvUnlockQueue+0x16>
 800a8a0:	e000      	b.n	800a8a4 <prvUnlockQueue+0x46>
					break;
 800a8a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	22ff      	movs	r2, #255	; 0xff
 800a8a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a8ac:	f002 f8aa 	bl	800ca04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8b0:	f002 f878 	bl	800c9a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8bc:	e011      	b.n	800a8e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d012      	beq.n	800a8ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3310      	adds	r3, #16
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fd7e 	bl	800b3cc <xTaskRemoveFromEventList>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8d6:	f000 feb7 	bl	800b648 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	dce9      	bgt.n	800a8be <prvUnlockQueue+0x60>
 800a8ea:	e000      	b.n	800a8ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	22ff      	movs	r2, #255	; 0xff
 800a8f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a8f6:	f002 f885 	bl	800ca04 <vPortExitCritical>
}
 800a8fa:	bf00      	nop
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a90a:	f002 f84b 	bl	800c9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a912:	2b00      	cmp	r3, #0
 800a914:	d102      	bne.n	800a91c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a916:	2301      	movs	r3, #1
 800a918:	60fb      	str	r3, [r7, #12]
 800a91a:	e001      	b.n	800a920 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a920:	f002 f870 	bl	800ca04 <vPortExitCritical>

	return xReturn;
 800a924:	68fb      	ldr	r3, [r7, #12]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b084      	sub	sp, #16
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a936:	f002 f835 	bl	800c9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a942:	429a      	cmp	r2, r3
 800a944:	d102      	bne.n	800a94c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a946:	2301      	movs	r3, #1
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	e001      	b.n	800a950 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a950:	f002 f858 	bl	800ca04 <vPortExitCritical>

	return xReturn;
 800a954:	68fb      	ldr	r3, [r7, #12]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	e014      	b.n	800a99a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a970:	4a0f      	ldr	r2, [pc, #60]	; (800a9b0 <vQueueAddToRegistry+0x50>)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10b      	bne.n	800a994 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a97c:	490c      	ldr	r1, [pc, #48]	; (800a9b0 <vQueueAddToRegistry+0x50>)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a986:	4a0a      	ldr	r2, [pc, #40]	; (800a9b0 <vQueueAddToRegistry+0x50>)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	00db      	lsls	r3, r3, #3
 800a98c:	4413      	add	r3, r2
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a992:	e006      	b.n	800a9a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	3301      	adds	r3, #1
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2b07      	cmp	r3, #7
 800a99e:	d9e7      	bls.n	800a970 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9a0:	bf00      	nop
 800a9a2:	bf00      	nop
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	20000e1c 	.word	0x20000e1c

0800a9b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	e016      	b.n	800a9f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a9c2:	4a10      	ldr	r2, [pc, #64]	; (800aa04 <vQueueUnregisterQueue+0x50>)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	00db      	lsls	r3, r3, #3
 800a9c8:	4413      	add	r3, r2
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d10b      	bne.n	800a9ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a9d2:	4a0c      	ldr	r2, [pc, #48]	; (800aa04 <vQueueUnregisterQueue+0x50>)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a9dc:	4a09      	ldr	r2, [pc, #36]	; (800aa04 <vQueueUnregisterQueue+0x50>)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	00db      	lsls	r3, r3, #3
 800a9e2:	4413      	add	r3, r2
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	605a      	str	r2, [r3, #4]
				break;
 800a9e8:	e006      	b.n	800a9f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b07      	cmp	r3, #7
 800a9f4:	d9e5      	bls.n	800a9c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a9f6:	bf00      	nop
 800a9f8:	bf00      	nop
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	20000e1c 	.word	0x20000e1c

0800aa08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa18:	f001 ffc4 	bl	800c9a4 <vPortEnterCritical>
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa22:	b25b      	sxtb	r3, r3
 800aa24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa28:	d103      	bne.n	800aa32 <vQueueWaitForMessageRestricted+0x2a>
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa38:	b25b      	sxtb	r3, r3
 800aa3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3e:	d103      	bne.n	800aa48 <vQueueWaitForMessageRestricted+0x40>
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa48:	f001 ffdc 	bl	800ca04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d106      	bne.n	800aa62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	3324      	adds	r3, #36	; 0x24
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	68b9      	ldr	r1, [r7, #8]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 fc89 	bl	800b374 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa62:	6978      	ldr	r0, [r7, #20]
 800aa64:	f7ff fefb 	bl	800a85e <prvUnlockQueue>
	}
 800aa68:	bf00      	nop
 800aa6a:	3718      	adds	r7, #24
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b08e      	sub	sp, #56	; 0x38
 800aa74:	af04      	add	r7, sp, #16
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
 800aa7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10a      	bne.n	800aa9a <xTaskCreateStatic+0x2a>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	623b      	str	r3, [r7, #32]
}
 800aa96:	bf00      	nop
 800aa98:	e7fe      	b.n	800aa98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10a      	bne.n	800aab6 <xTaskCreateStatic+0x46>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	61fb      	str	r3, [r7, #28]
}
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aab6:	235c      	movs	r3, #92	; 0x5c
 800aab8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	2b5c      	cmp	r3, #92	; 0x5c
 800aabe:	d00a      	beq.n	800aad6 <xTaskCreateStatic+0x66>
	__asm volatile
 800aac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	61bb      	str	r3, [r7, #24]
}
 800aad2:	bf00      	nop
 800aad4:	e7fe      	b.n	800aad4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aad6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d01e      	beq.n	800ab1c <xTaskCreateStatic+0xac>
 800aade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d01b      	beq.n	800ab1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	9303      	str	r3, [sp, #12]
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	9302      	str	r3, [sp, #8]
 800aafe:	f107 0314 	add.w	r3, r7, #20
 800ab02:	9301      	str	r3, [sp, #4]
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	68b9      	ldr	r1, [r7, #8]
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f000 f850 	bl	800abb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab16:	f000 f8dd 	bl	800acd4 <prvAddNewTaskToReadyList>
 800ab1a:	e001      	b.n	800ab20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab20:	697b      	ldr	r3, [r7, #20]
	}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3728      	adds	r7, #40	; 0x28
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b08c      	sub	sp, #48	; 0x30
 800ab2e:	af04      	add	r7, sp, #16
 800ab30:	60f8      	str	r0, [r7, #12]
 800ab32:	60b9      	str	r1, [r7, #8]
 800ab34:	603b      	str	r3, [r7, #0]
 800ab36:	4613      	mov	r3, r2
 800ab38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab3a:	88fb      	ldrh	r3, [r7, #6]
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f002 f852 	bl	800cbe8 <pvPortMalloc>
 800ab44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00e      	beq.n	800ab6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab4c:	205c      	movs	r0, #92	; 0x5c
 800ab4e:	f002 f84b 	bl	800cbe8 <pvPortMalloc>
 800ab52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d003      	beq.n	800ab62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	697a      	ldr	r2, [r7, #20]
 800ab5e:	631a      	str	r2, [r3, #48]	; 0x30
 800ab60:	e005      	b.n	800ab6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab62:	6978      	ldr	r0, [r7, #20]
 800ab64:	f002 f90c 	bl	800cd80 <vPortFree>
 800ab68:	e001      	b.n	800ab6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d017      	beq.n	800aba4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab7c:	88fa      	ldrh	r2, [r7, #6]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9303      	str	r3, [sp, #12]
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	9302      	str	r3, [sp, #8]
 800ab86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab88:	9301      	str	r3, [sp, #4]
 800ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68b9      	ldr	r1, [r7, #8]
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f000 f80e 	bl	800abb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab98:	69f8      	ldr	r0, [r7, #28]
 800ab9a:	f000 f89b 	bl	800acd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	61bb      	str	r3, [r7, #24]
 800aba2:	e002      	b.n	800abaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aba4:	f04f 33ff 	mov.w	r3, #4294967295
 800aba8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abaa:	69bb      	ldr	r3, [r7, #24]
	}
 800abac:	4618      	mov	r0, r3
 800abae:	3720      	adds	r7, #32
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b088      	sub	sp, #32
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
 800abc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	461a      	mov	r2, r3
 800abcc:	21a5      	movs	r1, #165	; 0xa5
 800abce:	f003 ff35 	bl	800ea3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800abdc:	3b01      	subs	r3, #1
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	f023 0307 	bic.w	r3, r3, #7
 800abea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	f003 0307 	and.w	r3, r3, #7
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00a      	beq.n	800ac0c <prvInitialiseNewTask+0x58>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	617b      	str	r3, [r7, #20]
}
 800ac08:	bf00      	nop
 800ac0a:	e7fe      	b.n	800ac0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d01f      	beq.n	800ac52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac12:	2300      	movs	r3, #0
 800ac14:	61fb      	str	r3, [r7, #28]
 800ac16:	e012      	b.n	800ac3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	7819      	ldrb	r1, [r3, #0]
 800ac20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	4413      	add	r3, r2
 800ac26:	3334      	adds	r3, #52	; 0x34
 800ac28:	460a      	mov	r2, r1
 800ac2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	4413      	add	r3, r2
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d006      	beq.n	800ac46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	61fb      	str	r3, [r7, #28]
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	2b0f      	cmp	r3, #15
 800ac42:	d9e9      	bls.n	800ac18 <prvInitialiseNewTask+0x64>
 800ac44:	e000      	b.n	800ac48 <prvInitialiseNewTask+0x94>
			{
				break;
 800ac46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac50:	e003      	b.n	800ac5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5c:	2b37      	cmp	r3, #55	; 0x37
 800ac5e:	d901      	bls.n	800ac64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac60:	2337      	movs	r3, #55	; 0x37
 800ac62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac72:	2200      	movs	r2, #0
 800ac74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	3304      	adds	r3, #4
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7fe ff62 	bl	8009b44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac82:	3318      	adds	r3, #24
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fe ff5d 	bl	8009b44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca2:	2200      	movs	r2, #0
 800aca4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	68f9      	ldr	r1, [r7, #12]
 800acb2:	69b8      	ldr	r0, [r7, #24]
 800acb4:	f001 fd46 	bl	800c744 <pxPortInitialiseStack>
 800acb8:	4602      	mov	r2, r0
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acca:	bf00      	nop
 800accc:	3720      	adds	r7, #32
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
	...

0800acd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800acdc:	f001 fe62 	bl	800c9a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ace0:	4b2d      	ldr	r3, [pc, #180]	; (800ad98 <prvAddNewTaskToReadyList+0xc4>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3301      	adds	r3, #1
 800ace6:	4a2c      	ldr	r2, [pc, #176]	; (800ad98 <prvAddNewTaskToReadyList+0xc4>)
 800ace8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800acea:	4b2c      	ldr	r3, [pc, #176]	; (800ad9c <prvAddNewTaskToReadyList+0xc8>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d109      	bne.n	800ad06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acf2:	4a2a      	ldr	r2, [pc, #168]	; (800ad9c <prvAddNewTaskToReadyList+0xc8>)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acf8:	4b27      	ldr	r3, [pc, #156]	; (800ad98 <prvAddNewTaskToReadyList+0xc4>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d110      	bne.n	800ad22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad00:	f000 fcc6 	bl	800b690 <prvInitialiseTaskLists>
 800ad04:	e00d      	b.n	800ad22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad06:	4b26      	ldr	r3, [pc, #152]	; (800ada0 <prvAddNewTaskToReadyList+0xcc>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d109      	bne.n	800ad22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad0e:	4b23      	ldr	r3, [pc, #140]	; (800ad9c <prvAddNewTaskToReadyList+0xc8>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d802      	bhi.n	800ad22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad1c:	4a1f      	ldr	r2, [pc, #124]	; (800ad9c <prvAddNewTaskToReadyList+0xc8>)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad22:	4b20      	ldr	r3, [pc, #128]	; (800ada4 <prvAddNewTaskToReadyList+0xd0>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3301      	adds	r3, #1
 800ad28:	4a1e      	ldr	r2, [pc, #120]	; (800ada4 <prvAddNewTaskToReadyList+0xd0>)
 800ad2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad2c:	4b1d      	ldr	r3, [pc, #116]	; (800ada4 <prvAddNewTaskToReadyList+0xd0>)
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad38:	4b1b      	ldr	r3, [pc, #108]	; (800ada8 <prvAddNewTaskToReadyList+0xd4>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d903      	bls.n	800ad48 <prvAddNewTaskToReadyList+0x74>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad44:	4a18      	ldr	r2, [pc, #96]	; (800ada8 <prvAddNewTaskToReadyList+0xd4>)
 800ad46:	6013      	str	r3, [r2, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4a15      	ldr	r2, [pc, #84]	; (800adac <prvAddNewTaskToReadyList+0xd8>)
 800ad56:	441a      	add	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3304      	adds	r3, #4
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	4610      	mov	r0, r2
 800ad60:	f7fe fefd 	bl	8009b5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad64:	f001 fe4e 	bl	800ca04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad68:	4b0d      	ldr	r3, [pc, #52]	; (800ada0 <prvAddNewTaskToReadyList+0xcc>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00e      	beq.n	800ad8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad70:	4b0a      	ldr	r3, [pc, #40]	; (800ad9c <prvAddNewTaskToReadyList+0xc8>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d207      	bcs.n	800ad8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad7e:	4b0c      	ldr	r3, [pc, #48]	; (800adb0 <prvAddNewTaskToReadyList+0xdc>)
 800ad80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad84:	601a      	str	r2, [r3, #0]
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad8e:	bf00      	nop
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	20001330 	.word	0x20001330
 800ad9c:	20000e5c 	.word	0x20000e5c
 800ada0:	2000133c 	.word	0x2000133c
 800ada4:	2000134c 	.word	0x2000134c
 800ada8:	20001338 	.word	0x20001338
 800adac:	20000e60 	.word	0x20000e60
 800adb0:	e000ed04 	.word	0xe000ed04

0800adb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d017      	beq.n	800adf6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800adc6:	4b13      	ldr	r3, [pc, #76]	; (800ae14 <vTaskDelay+0x60>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00a      	beq.n	800ade4 <vTaskDelay+0x30>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	60bb      	str	r3, [r7, #8]
}
 800ade0:	bf00      	nop
 800ade2:	e7fe      	b.n	800ade2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ade4:	f000 f880 	bl	800aee8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ade8:	2100      	movs	r1, #0
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f001 f88c 	bl	800bf08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800adf0:	f000 f888 	bl	800af04 <xTaskResumeAll>
 800adf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d107      	bne.n	800ae0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800adfc:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <vTaskDelay+0x64>)
 800adfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae0c:	bf00      	nop
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	20001358 	.word	0x20001358
 800ae18:	e000ed04 	.word	0xe000ed04

0800ae1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08a      	sub	sp, #40	; 0x28
 800ae20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae2a:	463a      	mov	r2, r7
 800ae2c:	1d39      	adds	r1, r7, #4
 800ae2e:	f107 0308 	add.w	r3, r7, #8
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe fc44 	bl	80096c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	9202      	str	r2, [sp, #8]
 800ae40:	9301      	str	r3, [sp, #4]
 800ae42:	2300      	movs	r3, #0
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	2300      	movs	r3, #0
 800ae48:	460a      	mov	r2, r1
 800ae4a:	4921      	ldr	r1, [pc, #132]	; (800aed0 <vTaskStartScheduler+0xb4>)
 800ae4c:	4821      	ldr	r0, [pc, #132]	; (800aed4 <vTaskStartScheduler+0xb8>)
 800ae4e:	f7ff fe0f 	bl	800aa70 <xTaskCreateStatic>
 800ae52:	4603      	mov	r3, r0
 800ae54:	4a20      	ldr	r2, [pc, #128]	; (800aed8 <vTaskStartScheduler+0xbc>)
 800ae56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae58:	4b1f      	ldr	r3, [pc, #124]	; (800aed8 <vTaskStartScheduler+0xbc>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae60:	2301      	movs	r3, #1
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	e001      	b.n	800ae6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d102      	bne.n	800ae76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae70:	f001 f89e 	bl	800bfb0 <xTimerCreateTimerTask>
 800ae74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d116      	bne.n	800aeaa <vTaskStartScheduler+0x8e>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	613b      	str	r3, [r7, #16]
}
 800ae8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae90:	4b12      	ldr	r3, [pc, #72]	; (800aedc <vTaskStartScheduler+0xc0>)
 800ae92:	f04f 32ff 	mov.w	r2, #4294967295
 800ae96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae98:	4b11      	ldr	r3, [pc, #68]	; (800aee0 <vTaskStartScheduler+0xc4>)
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae9e:	4b11      	ldr	r3, [pc, #68]	; (800aee4 <vTaskStartScheduler+0xc8>)
 800aea0:	2200      	movs	r2, #0
 800aea2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aea4:	f001 fcdc 	bl	800c860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aea8:	e00e      	b.n	800aec8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb0:	d10a      	bne.n	800aec8 <vTaskStartScheduler+0xac>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	60fb      	str	r3, [r7, #12]
}
 800aec4:	bf00      	nop
 800aec6:	e7fe      	b.n	800aec6 <vTaskStartScheduler+0xaa>
}
 800aec8:	bf00      	nop
 800aeca:	3718      	adds	r7, #24
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	0800eb18 	.word	0x0800eb18
 800aed4:	0800b661 	.word	0x0800b661
 800aed8:	20001354 	.word	0x20001354
 800aedc:	20001350 	.word	0x20001350
 800aee0:	2000133c 	.word	0x2000133c
 800aee4:	20001334 	.word	0x20001334

0800aee8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aee8:	b480      	push	{r7}
 800aeea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aeec:	4b04      	ldr	r3, [pc, #16]	; (800af00 <vTaskSuspendAll+0x18>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3301      	adds	r3, #1
 800aef2:	4a03      	ldr	r2, [pc, #12]	; (800af00 <vTaskSuspendAll+0x18>)
 800aef4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aef6:	bf00      	nop
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr
 800af00:	20001358 	.word	0x20001358

0800af04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af0e:	2300      	movs	r3, #0
 800af10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af12:	4b42      	ldr	r3, [pc, #264]	; (800b01c <xTaskResumeAll+0x118>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10a      	bne.n	800af30 <xTaskResumeAll+0x2c>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	603b      	str	r3, [r7, #0]
}
 800af2c:	bf00      	nop
 800af2e:	e7fe      	b.n	800af2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af30:	f001 fd38 	bl	800c9a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af34:	4b39      	ldr	r3, [pc, #228]	; (800b01c <xTaskResumeAll+0x118>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3b01      	subs	r3, #1
 800af3a:	4a38      	ldr	r2, [pc, #224]	; (800b01c <xTaskResumeAll+0x118>)
 800af3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af3e:	4b37      	ldr	r3, [pc, #220]	; (800b01c <xTaskResumeAll+0x118>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d162      	bne.n	800b00c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af46:	4b36      	ldr	r3, [pc, #216]	; (800b020 <xTaskResumeAll+0x11c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d05e      	beq.n	800b00c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af4e:	e02f      	b.n	800afb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af50:	4b34      	ldr	r3, [pc, #208]	; (800b024 <xTaskResumeAll+0x120>)
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	3318      	adds	r3, #24
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fe fe5b 	bl	8009c18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3304      	adds	r3, #4
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe fe56 	bl	8009c18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af70:	4b2d      	ldr	r3, [pc, #180]	; (800b028 <xTaskResumeAll+0x124>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d903      	bls.n	800af80 <xTaskResumeAll+0x7c>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	4a2a      	ldr	r2, [pc, #168]	; (800b028 <xTaskResumeAll+0x124>)
 800af7e:	6013      	str	r3, [r2, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4a27      	ldr	r2, [pc, #156]	; (800b02c <xTaskResumeAll+0x128>)
 800af8e:	441a      	add	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3304      	adds	r3, #4
 800af94:	4619      	mov	r1, r3
 800af96:	4610      	mov	r0, r2
 800af98:	f7fe fde1 	bl	8009b5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa0:	4b23      	ldr	r3, [pc, #140]	; (800b030 <xTaskResumeAll+0x12c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d302      	bcc.n	800afb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800afaa:	4b22      	ldr	r3, [pc, #136]	; (800b034 <xTaskResumeAll+0x130>)
 800afac:	2201      	movs	r2, #1
 800afae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afb0:	4b1c      	ldr	r3, [pc, #112]	; (800b024 <xTaskResumeAll+0x120>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1cb      	bne.n	800af50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800afbe:	f000 fc05 	bl	800b7cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800afc2:	4b1d      	ldr	r3, [pc, #116]	; (800b038 <xTaskResumeAll+0x134>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d010      	beq.n	800aff0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800afce:	f000 f859 	bl	800b084 <xTaskIncrementTick>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d002      	beq.n	800afde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800afd8:	4b16      	ldr	r3, [pc, #88]	; (800b034 <xTaskResumeAll+0x130>)
 800afda:	2201      	movs	r2, #1
 800afdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1f1      	bne.n	800afce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <xTaskResumeAll+0x134>)
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aff0:	4b10      	ldr	r3, [pc, #64]	; (800b034 <xTaskResumeAll+0x130>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d009      	beq.n	800b00c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aff8:	2301      	movs	r3, #1
 800affa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800affc:	4b0f      	ldr	r3, [pc, #60]	; (800b03c <xTaskResumeAll+0x138>)
 800affe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b00c:	f001 fcfa 	bl	800ca04 <vPortExitCritical>

	return xAlreadyYielded;
 800b010:	68bb      	ldr	r3, [r7, #8]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	20001358 	.word	0x20001358
 800b020:	20001330 	.word	0x20001330
 800b024:	200012f0 	.word	0x200012f0
 800b028:	20001338 	.word	0x20001338
 800b02c:	20000e60 	.word	0x20000e60
 800b030:	20000e5c 	.word	0x20000e5c
 800b034:	20001344 	.word	0x20001344
 800b038:	20001340 	.word	0x20001340
 800b03c:	e000ed04 	.word	0xe000ed04

0800b040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b046:	4b05      	ldr	r3, [pc, #20]	; (800b05c <xTaskGetTickCount+0x1c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b04c:	687b      	ldr	r3, [r7, #4]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	20001334 	.word	0x20001334

0800b060 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b066:	f001 fd7f 	bl	800cb68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b06a:	2300      	movs	r3, #0
 800b06c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b06e:	4b04      	ldr	r3, [pc, #16]	; (800b080 <xTaskGetTickCountFromISR+0x20>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b074:	683b      	ldr	r3, [r7, #0]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20001334 	.word	0x20001334

0800b084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b08a:	2300      	movs	r3, #0
 800b08c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b08e:	4b4f      	ldr	r3, [pc, #316]	; (800b1cc <xTaskIncrementTick+0x148>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	f040 808f 	bne.w	800b1b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b098:	4b4d      	ldr	r3, [pc, #308]	; (800b1d0 <xTaskIncrementTick+0x14c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	3301      	adds	r3, #1
 800b09e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0a0:	4a4b      	ldr	r2, [pc, #300]	; (800b1d0 <xTaskIncrementTick+0x14c>)
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d120      	bne.n	800b0ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0ac:	4b49      	ldr	r3, [pc, #292]	; (800b1d4 <xTaskIncrementTick+0x150>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00a      	beq.n	800b0cc <xTaskIncrementTick+0x48>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	603b      	str	r3, [r7, #0]
}
 800b0c8:	bf00      	nop
 800b0ca:	e7fe      	b.n	800b0ca <xTaskIncrementTick+0x46>
 800b0cc:	4b41      	ldr	r3, [pc, #260]	; (800b1d4 <xTaskIncrementTick+0x150>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	4b41      	ldr	r3, [pc, #260]	; (800b1d8 <xTaskIncrementTick+0x154>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a3f      	ldr	r2, [pc, #252]	; (800b1d4 <xTaskIncrementTick+0x150>)
 800b0d8:	6013      	str	r3, [r2, #0]
 800b0da:	4a3f      	ldr	r2, [pc, #252]	; (800b1d8 <xTaskIncrementTick+0x154>)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	4b3e      	ldr	r3, [pc, #248]	; (800b1dc <xTaskIncrementTick+0x158>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	4a3d      	ldr	r2, [pc, #244]	; (800b1dc <xTaskIncrementTick+0x158>)
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	f000 fb6f 	bl	800b7cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0ee:	4b3c      	ldr	r3, [pc, #240]	; (800b1e0 <xTaskIncrementTick+0x15c>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d349      	bcc.n	800b18c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0f8:	4b36      	ldr	r3, [pc, #216]	; (800b1d4 <xTaskIncrementTick+0x150>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d104      	bne.n	800b10c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b102:	4b37      	ldr	r3, [pc, #220]	; (800b1e0 <xTaskIncrementTick+0x15c>)
 800b104:	f04f 32ff 	mov.w	r2, #4294967295
 800b108:	601a      	str	r2, [r3, #0]
					break;
 800b10a:	e03f      	b.n	800b18c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b10c:	4b31      	ldr	r3, [pc, #196]	; (800b1d4 <xTaskIncrementTick+0x150>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	429a      	cmp	r2, r3
 800b122:	d203      	bcs.n	800b12c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b124:	4a2e      	ldr	r2, [pc, #184]	; (800b1e0 <xTaskIncrementTick+0x15c>)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b12a:	e02f      	b.n	800b18c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	3304      	adds	r3, #4
 800b130:	4618      	mov	r0, r3
 800b132:	f7fe fd71 	bl	8009c18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d004      	beq.n	800b148 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	3318      	adds	r3, #24
 800b142:	4618      	mov	r0, r3
 800b144:	f7fe fd68 	bl	8009c18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14c:	4b25      	ldr	r3, [pc, #148]	; (800b1e4 <xTaskIncrementTick+0x160>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d903      	bls.n	800b15c <xTaskIncrementTick+0xd8>
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	4a22      	ldr	r2, [pc, #136]	; (800b1e4 <xTaskIncrementTick+0x160>)
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b160:	4613      	mov	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4a1f      	ldr	r2, [pc, #124]	; (800b1e8 <xTaskIncrementTick+0x164>)
 800b16a:	441a      	add	r2, r3
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	3304      	adds	r3, #4
 800b170:	4619      	mov	r1, r3
 800b172:	4610      	mov	r0, r2
 800b174:	f7fe fcf3 	bl	8009b5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17c:	4b1b      	ldr	r3, [pc, #108]	; (800b1ec <xTaskIncrementTick+0x168>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b182:	429a      	cmp	r2, r3
 800b184:	d3b8      	bcc.n	800b0f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b186:	2301      	movs	r3, #1
 800b188:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b18a:	e7b5      	b.n	800b0f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b18c:	4b17      	ldr	r3, [pc, #92]	; (800b1ec <xTaskIncrementTick+0x168>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b192:	4915      	ldr	r1, [pc, #84]	; (800b1e8 <xTaskIncrementTick+0x164>)
 800b194:	4613      	mov	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4413      	add	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	440b      	add	r3, r1
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d901      	bls.n	800b1a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1a8:	4b11      	ldr	r3, [pc, #68]	; (800b1f0 <xTaskIncrementTick+0x16c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d007      	beq.n	800b1c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	617b      	str	r3, [r7, #20]
 800b1b4:	e004      	b.n	800b1c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1b6:	4b0f      	ldr	r3, [pc, #60]	; (800b1f4 <xTaskIncrementTick+0x170>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	4a0d      	ldr	r2, [pc, #52]	; (800b1f4 <xTaskIncrementTick+0x170>)
 800b1be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1c0:	697b      	ldr	r3, [r7, #20]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3718      	adds	r7, #24
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	20001358 	.word	0x20001358
 800b1d0:	20001334 	.word	0x20001334
 800b1d4:	200012e8 	.word	0x200012e8
 800b1d8:	200012ec 	.word	0x200012ec
 800b1dc:	20001348 	.word	0x20001348
 800b1e0:	20001350 	.word	0x20001350
 800b1e4:	20001338 	.word	0x20001338
 800b1e8:	20000e60 	.word	0x20000e60
 800b1ec:	20000e5c 	.word	0x20000e5c
 800b1f0:	20001344 	.word	0x20001344
 800b1f4:	20001340 	.word	0x20001340

0800b1f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1fe:	4b28      	ldr	r3, [pc, #160]	; (800b2a0 <vTaskSwitchContext+0xa8>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d003      	beq.n	800b20e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b206:	4b27      	ldr	r3, [pc, #156]	; (800b2a4 <vTaskSwitchContext+0xac>)
 800b208:	2201      	movs	r2, #1
 800b20a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b20c:	e041      	b.n	800b292 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b20e:	4b25      	ldr	r3, [pc, #148]	; (800b2a4 <vTaskSwitchContext+0xac>)
 800b210:	2200      	movs	r2, #0
 800b212:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b214:	4b24      	ldr	r3, [pc, #144]	; (800b2a8 <vTaskSwitchContext+0xb0>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	60fb      	str	r3, [r7, #12]
 800b21a:	e010      	b.n	800b23e <vTaskSwitchContext+0x46>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10a      	bne.n	800b238 <vTaskSwitchContext+0x40>
	__asm volatile
 800b222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b226:	f383 8811 	msr	BASEPRI, r3
 800b22a:	f3bf 8f6f 	isb	sy
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	607b      	str	r3, [r7, #4]
}
 800b234:	bf00      	nop
 800b236:	e7fe      	b.n	800b236 <vTaskSwitchContext+0x3e>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3b01      	subs	r3, #1
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	491b      	ldr	r1, [pc, #108]	; (800b2ac <vTaskSwitchContext+0xb4>)
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4613      	mov	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4413      	add	r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	440b      	add	r3, r1
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d0e4      	beq.n	800b21c <vTaskSwitchContext+0x24>
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4a13      	ldr	r2, [pc, #76]	; (800b2ac <vTaskSwitchContext+0xb4>)
 800b25e:	4413      	add	r3, r2
 800b260:	60bb      	str	r3, [r7, #8]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	685a      	ldr	r2, [r3, #4]
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	605a      	str	r2, [r3, #4]
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	3308      	adds	r3, #8
 800b274:	429a      	cmp	r2, r3
 800b276:	d104      	bne.n	800b282 <vTaskSwitchContext+0x8a>
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	605a      	str	r2, [r3, #4]
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	4a09      	ldr	r2, [pc, #36]	; (800b2b0 <vTaskSwitchContext+0xb8>)
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	4a06      	ldr	r2, [pc, #24]	; (800b2a8 <vTaskSwitchContext+0xb0>)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6013      	str	r3, [r2, #0]
}
 800b292:	bf00      	nop
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	20001358 	.word	0x20001358
 800b2a4:	20001344 	.word	0x20001344
 800b2a8:	20001338 	.word	0x20001338
 800b2ac:	20000e60 	.word	0x20000e60
 800b2b0:	20000e5c 	.word	0x20000e5c

0800b2b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10a      	bne.n	800b2da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	60fb      	str	r3, [r7, #12]
}
 800b2d6:	bf00      	nop
 800b2d8:	e7fe      	b.n	800b2d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2da:	4b07      	ldr	r3, [pc, #28]	; (800b2f8 <vTaskPlaceOnEventList+0x44>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3318      	adds	r3, #24
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7fe fc5f 	bl	8009ba6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2e8:	2101      	movs	r1, #1
 800b2ea:	6838      	ldr	r0, [r7, #0]
 800b2ec:	f000 fe0c 	bl	800bf08 <prvAddCurrentTaskToDelayedList>
}
 800b2f0:	bf00      	nop
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	20000e5c 	.word	0x20000e5c

0800b2fc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b086      	sub	sp, #24
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10a      	bne.n	800b324 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	617b      	str	r3, [r7, #20]
}
 800b320:	bf00      	nop
 800b322:	e7fe      	b.n	800b322 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b324:	4b11      	ldr	r3, [pc, #68]	; (800b36c <vTaskPlaceOnUnorderedEventList+0x70>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10a      	bne.n	800b342 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	613b      	str	r3, [r7, #16]
}
 800b33e:	bf00      	nop
 800b340:	e7fe      	b.n	800b340 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b342:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68ba      	ldr	r2, [r7, #8]
 800b348:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b34c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b34e:	4b08      	ldr	r3, [pc, #32]	; (800b370 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	3318      	adds	r3, #24
 800b354:	4619      	mov	r1, r3
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f7fe fc01 	bl	8009b5e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b35c:	2101      	movs	r1, #1
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fdd2 	bl	800bf08 <prvAddCurrentTaskToDelayedList>
}
 800b364:	bf00      	nop
 800b366:	3718      	adds	r7, #24
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20001358 	.word	0x20001358
 800b370:	20000e5c 	.word	0x20000e5c

0800b374 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10a      	bne.n	800b39c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	617b      	str	r3, [r7, #20]
}
 800b398:	bf00      	nop
 800b39a:	e7fe      	b.n	800b39a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b39c:	4b0a      	ldr	r3, [pc, #40]	; (800b3c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3318      	adds	r3, #24
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f7fe fbda 	bl	8009b5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3b6:	6879      	ldr	r1, [r7, #4]
 800b3b8:	68b8      	ldr	r0, [r7, #8]
 800b3ba:	f000 fda5 	bl	800bf08 <prvAddCurrentTaskToDelayedList>
	}
 800b3be:	bf00      	nop
 800b3c0:	3718      	adds	r7, #24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20000e5c 	.word	0x20000e5c

0800b3cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10a      	bne.n	800b3f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	60fb      	str	r3, [r7, #12]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	3318      	adds	r3, #24
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fe fc0b 	bl	8009c18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b402:	4b1e      	ldr	r3, [pc, #120]	; (800b47c <xTaskRemoveFromEventList+0xb0>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d11d      	bne.n	800b446 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	3304      	adds	r3, #4
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fe fc02 	bl	8009c18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b418:	4b19      	ldr	r3, [pc, #100]	; (800b480 <xTaskRemoveFromEventList+0xb4>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d903      	bls.n	800b428 <xTaskRemoveFromEventList+0x5c>
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b424:	4a16      	ldr	r2, [pc, #88]	; (800b480 <xTaskRemoveFromEventList+0xb4>)
 800b426:	6013      	str	r3, [r2, #0]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42c:	4613      	mov	r3, r2
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	4413      	add	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4a13      	ldr	r2, [pc, #76]	; (800b484 <xTaskRemoveFromEventList+0xb8>)
 800b436:	441a      	add	r2, r3
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4619      	mov	r1, r3
 800b43e:	4610      	mov	r0, r2
 800b440:	f7fe fb8d 	bl	8009b5e <vListInsertEnd>
 800b444:	e005      	b.n	800b452 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	3318      	adds	r3, #24
 800b44a:	4619      	mov	r1, r3
 800b44c:	480e      	ldr	r0, [pc, #56]	; (800b488 <xTaskRemoveFromEventList+0xbc>)
 800b44e:	f7fe fb86 	bl	8009b5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b456:	4b0d      	ldr	r3, [pc, #52]	; (800b48c <xTaskRemoveFromEventList+0xc0>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d905      	bls.n	800b46c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b460:	2301      	movs	r3, #1
 800b462:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b464:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <xTaskRemoveFromEventList+0xc4>)
 800b466:	2201      	movs	r2, #1
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	e001      	b.n	800b470 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b470:	697b      	ldr	r3, [r7, #20]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	20001358 	.word	0x20001358
 800b480:	20001338 	.word	0x20001338
 800b484:	20000e60 	.word	0x20000e60
 800b488:	200012f0 	.word	0x200012f0
 800b48c:	20000e5c 	.word	0x20000e5c
 800b490:	20001344 	.word	0x20001344

0800b494 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b49e:	4b29      	ldr	r3, [pc, #164]	; (800b544 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10a      	bne.n	800b4bc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	613b      	str	r3, [r7, #16]
}
 800b4b8:	bf00      	nop
 800b4ba:	e7fe      	b.n	800b4ba <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10a      	bne.n	800b4e8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	60fb      	str	r3, [r7, #12]
}
 800b4e4:	bf00      	nop
 800b4e6:	e7fe      	b.n	800b4e6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7fe fb95 	bl	8009c18 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fe fb90 	bl	8009c18 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fc:	4b12      	ldr	r3, [pc, #72]	; (800b548 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	429a      	cmp	r2, r3
 800b502:	d903      	bls.n	800b50c <vTaskRemoveFromUnorderedEventList+0x78>
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b508:	4a0f      	ldr	r2, [pc, #60]	; (800b548 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b50a:	6013      	str	r3, [r2, #0]
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b510:	4613      	mov	r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4413      	add	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4a0c      	ldr	r2, [pc, #48]	; (800b54c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b51a:	441a      	add	r2, r3
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	3304      	adds	r3, #4
 800b520:	4619      	mov	r1, r3
 800b522:	4610      	mov	r0, r2
 800b524:	f7fe fb1b 	bl	8009b5e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52c:	4b08      	ldr	r3, [pc, #32]	; (800b550 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b532:	429a      	cmp	r2, r3
 800b534:	d902      	bls.n	800b53c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b536:	4b07      	ldr	r3, [pc, #28]	; (800b554 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b538:	2201      	movs	r2, #1
 800b53a:	601a      	str	r2, [r3, #0]
	}
}
 800b53c:	bf00      	nop
 800b53e:	3718      	adds	r7, #24
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	20001358 	.word	0x20001358
 800b548:	20001338 	.word	0x20001338
 800b54c:	20000e60 	.word	0x20000e60
 800b550:	20000e5c 	.word	0x20000e5c
 800b554:	20001344 	.word	0x20001344

0800b558 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b560:	4b06      	ldr	r3, [pc, #24]	; (800b57c <vTaskInternalSetTimeOutState+0x24>)
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b568:	4b05      	ldr	r3, [pc, #20]	; (800b580 <vTaskInternalSetTimeOutState+0x28>)
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	605a      	str	r2, [r3, #4]
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	20001348 	.word	0x20001348
 800b580:	20001334 	.word	0x20001334

0800b584 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10a      	bne.n	800b5aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	613b      	str	r3, [r7, #16]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10a      	bne.n	800b5c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	60fb      	str	r3, [r7, #12]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b5c6:	f001 f9ed 	bl	800c9a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5ca:	4b1d      	ldr	r3, [pc, #116]	; (800b640 <xTaskCheckForTimeOut+0xbc>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	69ba      	ldr	r2, [r7, #24]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e2:	d102      	bne.n	800b5ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	61fb      	str	r3, [r7, #28]
 800b5e8:	e023      	b.n	800b632 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	4b15      	ldr	r3, [pc, #84]	; (800b644 <xTaskCheckForTimeOut+0xc0>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d007      	beq.n	800b606 <xTaskCheckForTimeOut+0x82>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	69ba      	ldr	r2, [r7, #24]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d302      	bcc.n	800b606 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b600:	2301      	movs	r3, #1
 800b602:	61fb      	str	r3, [r7, #28]
 800b604:	e015      	b.n	800b632 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	697a      	ldr	r2, [r7, #20]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d20b      	bcs.n	800b628 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	1ad2      	subs	r2, r2, r3
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff ff9b 	bl	800b558 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b622:	2300      	movs	r3, #0
 800b624:	61fb      	str	r3, [r7, #28]
 800b626:	e004      	b.n	800b632 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	2200      	movs	r2, #0
 800b62c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b62e:	2301      	movs	r3, #1
 800b630:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b632:	f001 f9e7 	bl	800ca04 <vPortExitCritical>

	return xReturn;
 800b636:	69fb      	ldr	r3, [r7, #28]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3720      	adds	r7, #32
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	20001334 	.word	0x20001334
 800b644:	20001348 	.word	0x20001348

0800b648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b648:	b480      	push	{r7}
 800b64a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b64c:	4b03      	ldr	r3, [pc, #12]	; (800b65c <vTaskMissedYield+0x14>)
 800b64e:	2201      	movs	r2, #1
 800b650:	601a      	str	r2, [r3, #0]
}
 800b652:	bf00      	nop
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	20001344 	.word	0x20001344

0800b660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b668:	f000 f852 	bl	800b710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <prvIdleTask+0x28>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d9f9      	bls.n	800b668 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b674:	4b05      	ldr	r3, [pc, #20]	; (800b68c <prvIdleTask+0x2c>)
 800b676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b684:	e7f0      	b.n	800b668 <prvIdleTask+0x8>
 800b686:	bf00      	nop
 800b688:	20000e60 	.word	0x20000e60
 800b68c:	e000ed04 	.word	0xe000ed04

0800b690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b696:	2300      	movs	r3, #0
 800b698:	607b      	str	r3, [r7, #4]
 800b69a:	e00c      	b.n	800b6b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4a12      	ldr	r2, [pc, #72]	; (800b6f0 <prvInitialiseTaskLists+0x60>)
 800b6a8:	4413      	add	r3, r2
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fe fa2a 	bl	8009b04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	607b      	str	r3, [r7, #4]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b37      	cmp	r3, #55	; 0x37
 800b6ba:	d9ef      	bls.n	800b69c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6bc:	480d      	ldr	r0, [pc, #52]	; (800b6f4 <prvInitialiseTaskLists+0x64>)
 800b6be:	f7fe fa21 	bl	8009b04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6c2:	480d      	ldr	r0, [pc, #52]	; (800b6f8 <prvInitialiseTaskLists+0x68>)
 800b6c4:	f7fe fa1e 	bl	8009b04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6c8:	480c      	ldr	r0, [pc, #48]	; (800b6fc <prvInitialiseTaskLists+0x6c>)
 800b6ca:	f7fe fa1b 	bl	8009b04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6ce:	480c      	ldr	r0, [pc, #48]	; (800b700 <prvInitialiseTaskLists+0x70>)
 800b6d0:	f7fe fa18 	bl	8009b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6d4:	480b      	ldr	r0, [pc, #44]	; (800b704 <prvInitialiseTaskLists+0x74>)
 800b6d6:	f7fe fa15 	bl	8009b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6da:	4b0b      	ldr	r3, [pc, #44]	; (800b708 <prvInitialiseTaskLists+0x78>)
 800b6dc:	4a05      	ldr	r2, [pc, #20]	; (800b6f4 <prvInitialiseTaskLists+0x64>)
 800b6de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6e0:	4b0a      	ldr	r3, [pc, #40]	; (800b70c <prvInitialiseTaskLists+0x7c>)
 800b6e2:	4a05      	ldr	r2, [pc, #20]	; (800b6f8 <prvInitialiseTaskLists+0x68>)
 800b6e4:	601a      	str	r2, [r3, #0]
}
 800b6e6:	bf00      	nop
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20000e60 	.word	0x20000e60
 800b6f4:	200012c0 	.word	0x200012c0
 800b6f8:	200012d4 	.word	0x200012d4
 800b6fc:	200012f0 	.word	0x200012f0
 800b700:	20001304 	.word	0x20001304
 800b704:	2000131c 	.word	0x2000131c
 800b708:	200012e8 	.word	0x200012e8
 800b70c:	200012ec 	.word	0x200012ec

0800b710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b716:	e019      	b.n	800b74c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b718:	f001 f944 	bl	800c9a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b71c:	4b10      	ldr	r3, [pc, #64]	; (800b760 <prvCheckTasksWaitingTermination+0x50>)
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3304      	adds	r3, #4
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe fa75 	bl	8009c18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b72e:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <prvCheckTasksWaitingTermination+0x54>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	3b01      	subs	r3, #1
 800b734:	4a0b      	ldr	r2, [pc, #44]	; (800b764 <prvCheckTasksWaitingTermination+0x54>)
 800b736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b738:	4b0b      	ldr	r3, [pc, #44]	; (800b768 <prvCheckTasksWaitingTermination+0x58>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	4a0a      	ldr	r2, [pc, #40]	; (800b768 <prvCheckTasksWaitingTermination+0x58>)
 800b740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b742:	f001 f95f 	bl	800ca04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f810 	bl	800b76c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b74c:	4b06      	ldr	r3, [pc, #24]	; (800b768 <prvCheckTasksWaitingTermination+0x58>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1e1      	bne.n	800b718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	20001304 	.word	0x20001304
 800b764:	20001330 	.word	0x20001330
 800b768:	20001318 	.word	0x20001318

0800b76c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d108      	bne.n	800b790 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b782:	4618      	mov	r0, r3
 800b784:	f001 fafc 	bl	800cd80 <vPortFree>
				vPortFree( pxTCB );
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f001 faf9 	bl	800cd80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b78e:	e018      	b.n	800b7c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b796:	2b01      	cmp	r3, #1
 800b798:	d103      	bne.n	800b7a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f001 faf0 	bl	800cd80 <vPortFree>
	}
 800b7a0:	e00f      	b.n	800b7c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d00a      	beq.n	800b7c2 <prvDeleteTCB+0x56>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	60fb      	str	r3, [r7, #12]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <prvDeleteTCB+0x54>
	}
 800b7c2:	bf00      	nop
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
	...

0800b7cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7d2:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <prvResetNextTaskUnblockTime+0x38>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d104      	bne.n	800b7e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7dc:	4b0a      	ldr	r3, [pc, #40]	; (800b808 <prvResetNextTaskUnblockTime+0x3c>)
 800b7de:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7e4:	e008      	b.n	800b7f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7e6:	4b07      	ldr	r3, [pc, #28]	; (800b804 <prvResetNextTaskUnblockTime+0x38>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	4a04      	ldr	r2, [pc, #16]	; (800b808 <prvResetNextTaskUnblockTime+0x3c>)
 800b7f6:	6013      	str	r3, [r2, #0]
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	200012e8 	.word	0x200012e8
 800b808:	20001350 	.word	0x20001350

0800b80c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b812:	4b0b      	ldr	r3, [pc, #44]	; (800b840 <xTaskGetSchedulerState+0x34>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d102      	bne.n	800b820 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b81a:	2301      	movs	r3, #1
 800b81c:	607b      	str	r3, [r7, #4]
 800b81e:	e008      	b.n	800b832 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b820:	4b08      	ldr	r3, [pc, #32]	; (800b844 <xTaskGetSchedulerState+0x38>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d102      	bne.n	800b82e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b828:	2302      	movs	r3, #2
 800b82a:	607b      	str	r3, [r7, #4]
 800b82c:	e001      	b.n	800b832 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b82e:	2300      	movs	r3, #0
 800b830:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b832:	687b      	ldr	r3, [r7, #4]
	}
 800b834:	4618      	mov	r0, r3
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	2000133c 	.word	0x2000133c
 800b844:	20001358 	.word	0x20001358

0800b848 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b854:	2300      	movs	r3, #0
 800b856:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d051      	beq.n	800b902 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b862:	4b2a      	ldr	r3, [pc, #168]	; (800b90c <xTaskPriorityInherit+0xc4>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b868:	429a      	cmp	r2, r3
 800b86a:	d241      	bcs.n	800b8f0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	2b00      	cmp	r3, #0
 800b872:	db06      	blt.n	800b882 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b874:	4b25      	ldr	r3, [pc, #148]	; (800b90c <xTaskPriorityInherit+0xc4>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	6959      	ldr	r1, [r3, #20]
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88a:	4613      	mov	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	4413      	add	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4a1f      	ldr	r2, [pc, #124]	; (800b910 <xTaskPriorityInherit+0xc8>)
 800b894:	4413      	add	r3, r2
 800b896:	4299      	cmp	r1, r3
 800b898:	d122      	bne.n	800b8e0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	3304      	adds	r3, #4
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fe f9ba 	bl	8009c18 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b8a4:	4b19      	ldr	r3, [pc, #100]	; (800b90c <xTaskPriorityInherit+0xc4>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b2:	4b18      	ldr	r3, [pc, #96]	; (800b914 <xTaskPriorityInherit+0xcc>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d903      	bls.n	800b8c2 <xTaskPriorityInherit+0x7a>
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8be:	4a15      	ldr	r2, [pc, #84]	; (800b914 <xTaskPriorityInherit+0xcc>)
 800b8c0:	6013      	str	r3, [r2, #0]
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	4413      	add	r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4a10      	ldr	r2, [pc, #64]	; (800b910 <xTaskPriorityInherit+0xc8>)
 800b8d0:	441a      	add	r2, r3
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4610      	mov	r0, r2
 800b8da:	f7fe f940 	bl	8009b5e <vListInsertEnd>
 800b8de:	e004      	b.n	800b8ea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b8e0:	4b0a      	ldr	r3, [pc, #40]	; (800b90c <xTaskPriorityInherit+0xc4>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	60fb      	str	r3, [r7, #12]
 800b8ee:	e008      	b.n	800b902 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8f4:	4b05      	ldr	r3, [pc, #20]	; (800b90c <xTaskPriorityInherit+0xc4>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d201      	bcs.n	800b902 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b8fe:	2301      	movs	r3, #1
 800b900:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b902:	68fb      	ldr	r3, [r7, #12]
	}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	20000e5c 	.word	0x20000e5c
 800b910:	20000e60 	.word	0x20000e60
 800b914:	20001338 	.word	0x20001338

0800b918 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b924:	2300      	movs	r3, #0
 800b926:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d056      	beq.n	800b9dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b92e:	4b2e      	ldr	r3, [pc, #184]	; (800b9e8 <xTaskPriorityDisinherit+0xd0>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	429a      	cmp	r2, r3
 800b936:	d00a      	beq.n	800b94e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	60fb      	str	r3, [r7, #12]
}
 800b94a:	bf00      	nop
 800b94c:	e7fe      	b.n	800b94c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10a      	bne.n	800b96c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	60bb      	str	r3, [r7, #8]
}
 800b968:	bf00      	nop
 800b96a:	e7fe      	b.n	800b96a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b970:	1e5a      	subs	r2, r3, #1
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b97e:	429a      	cmp	r2, r3
 800b980:	d02c      	beq.n	800b9dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b986:	2b00      	cmp	r3, #0
 800b988:	d128      	bne.n	800b9dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	3304      	adds	r3, #4
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fe f942 	bl	8009c18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ac:	4b0f      	ldr	r3, [pc, #60]	; (800b9ec <xTaskPriorityDisinherit+0xd4>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d903      	bls.n	800b9bc <xTaskPriorityDisinherit+0xa4>
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	4a0c      	ldr	r2, [pc, #48]	; (800b9ec <xTaskPriorityDisinherit+0xd4>)
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4a09      	ldr	r2, [pc, #36]	; (800b9f0 <xTaskPriorityDisinherit+0xd8>)
 800b9ca:	441a      	add	r2, r3
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4610      	mov	r0, r2
 800b9d4:	f7fe f8c3 	bl	8009b5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9dc:	697b      	ldr	r3, [r7, #20]
	}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20000e5c 	.word	0x20000e5c
 800b9ec:	20001338 	.word	0x20001338
 800b9f0:	20000e60 	.word	0x20000e60

0800b9f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b088      	sub	sp, #32
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba02:	2301      	movs	r3, #1
 800ba04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d06a      	beq.n	800bae2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10a      	bne.n	800ba2a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ba14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba18:	f383 8811 	msr	BASEPRI, r3
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	60fb      	str	r3, [r7, #12]
}
 800ba26:	bf00      	nop
 800ba28:	e7fe      	b.n	800ba28 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d902      	bls.n	800ba3a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	61fb      	str	r3, [r7, #28]
 800ba38:	e002      	b.n	800ba40 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba3e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba44:	69fa      	ldr	r2, [r7, #28]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d04b      	beq.n	800bae2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d146      	bne.n	800bae2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ba54:	4b25      	ldr	r3, [pc, #148]	; (800baec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	69ba      	ldr	r2, [r7, #24]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d10a      	bne.n	800ba74 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	60bb      	str	r3, [r7, #8]
}
 800ba70:	bf00      	nop
 800ba72:	e7fe      	b.n	800ba72 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	69fa      	ldr	r2, [r7, #28]
 800ba7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	db04      	blt.n	800ba92 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	6959      	ldr	r1, [r3, #20]
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4a13      	ldr	r2, [pc, #76]	; (800baf0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800baa2:	4413      	add	r3, r2
 800baa4:	4299      	cmp	r1, r3
 800baa6:	d11c      	bne.n	800bae2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	3304      	adds	r3, #4
 800baac:	4618      	mov	r0, r3
 800baae:	f7fe f8b3 	bl	8009c18 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab6:	4b0f      	ldr	r3, [pc, #60]	; (800baf4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	429a      	cmp	r2, r3
 800babc:	d903      	bls.n	800bac6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac2:	4a0c      	ldr	r2, [pc, #48]	; (800baf4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bac4:	6013      	str	r3, [r2, #0]
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baca:	4613      	mov	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4a07      	ldr	r2, [pc, #28]	; (800baf0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bad4:	441a      	add	r2, r3
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	3304      	adds	r3, #4
 800bada:	4619      	mov	r1, r3
 800badc:	4610      	mov	r0, r2
 800bade:	f7fe f83e 	bl	8009b5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bae2:	bf00      	nop
 800bae4:	3720      	adds	r7, #32
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	20000e5c 	.word	0x20000e5c
 800baf0:	20000e60 	.word	0x20000e60
 800baf4:	20001338 	.word	0x20001338

0800baf8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bafe:	4b09      	ldr	r3, [pc, #36]	; (800bb24 <uxTaskResetEventItemValue+0x2c>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb06:	4b07      	ldr	r3, [pc, #28]	; (800bb24 <uxTaskResetEventItemValue+0x2c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0c:	4b05      	ldr	r3, [pc, #20]	; (800bb24 <uxTaskResetEventItemValue+0x2c>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bb14:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800bb16:	687b      	ldr	r3, [r7, #4]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	20000e5c 	.word	0x20000e5c

0800bb28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb28:	b480      	push	{r7}
 800bb2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb2c:	4b07      	ldr	r3, [pc, #28]	; (800bb4c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d004      	beq.n	800bb3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bb34:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb3a:	3201      	adds	r2, #1
 800bb3c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bb3e:	4b03      	ldr	r3, [pc, #12]	; (800bb4c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb40:	681b      	ldr	r3, [r3, #0]
	}
 800bb42:	4618      	mov	r0, r3
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr
 800bb4c:	20000e5c 	.word	0x20000e5c

0800bb50 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bb5a:	f000 ff23 	bl	800c9a4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bb5e:	4b1e      	ldr	r3, [pc, #120]	; (800bbd8 <ulTaskNotifyTake+0x88>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d113      	bne.n	800bb90 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bb68:	4b1b      	ldr	r3, [pc, #108]	; (800bbd8 <ulTaskNotifyTake+0x88>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00b      	beq.n	800bb90 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb78:	2101      	movs	r1, #1
 800bb7a:	6838      	ldr	r0, [r7, #0]
 800bb7c:	f000 f9c4 	bl	800bf08 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bb80:	4b16      	ldr	r3, [pc, #88]	; (800bbdc <ulTaskNotifyTake+0x8c>)
 800bb82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb86:	601a      	str	r2, [r3, #0]
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bb90:	f000 ff38 	bl	800ca04 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bb94:	f000 ff06 	bl	800c9a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bb98:	4b0f      	ldr	r3, [pc, #60]	; (800bbd8 <ulTaskNotifyTake+0x88>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00c      	beq.n	800bbc0 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d004      	beq.n	800bbb6 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bbac:	4b0a      	ldr	r3, [pc, #40]	; (800bbd8 <ulTaskNotifyTake+0x88>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	655a      	str	r2, [r3, #84]	; 0x54
 800bbb4:	e004      	b.n	800bbc0 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bbb6:	4b08      	ldr	r3, [pc, #32]	; (800bbd8 <ulTaskNotifyTake+0x88>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	3a01      	subs	r2, #1
 800bbbe:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bbc0:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <ulTaskNotifyTake+0x88>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bbca:	f000 ff1b 	bl	800ca04 <vPortExitCritical>

		return ulReturn;
 800bbce:	68fb      	ldr	r3, [r7, #12]
	}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	20000e5c 	.word	0x20000e5c
 800bbdc:	e000ed04 	.word	0xe000ed04

0800bbe0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b08a      	sub	sp, #40	; 0x28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	603b      	str	r3, [r7, #0]
 800bbec:	4613      	mov	r3, r2
 800bbee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10a      	bne.n	800bc10 <xTaskGenericNotify+0x30>
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	61bb      	str	r3, [r7, #24]
}
 800bc0c:	bf00      	nop
 800bc0e:	e7fe      	b.n	800bc0e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bc14:	f000 fec6 	bl	800c9a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d003      	beq.n	800bc26 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bc1e:	6a3b      	ldr	r3, [r7, #32]
 800bc20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bc26:	6a3b      	ldr	r3, [r7, #32]
 800bc28:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bc2c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bc2e:	6a3b      	ldr	r3, [r7, #32]
 800bc30:	2202      	movs	r2, #2
 800bc32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800bc36:	79fb      	ldrb	r3, [r7, #7]
 800bc38:	2b04      	cmp	r3, #4
 800bc3a:	d828      	bhi.n	800bc8e <xTaskGenericNotify+0xae>
 800bc3c:	a201      	add	r2, pc, #4	; (adr r2, 800bc44 <xTaskGenericNotify+0x64>)
 800bc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc42:	bf00      	nop
 800bc44:	0800bcaf 	.word	0x0800bcaf
 800bc48:	0800bc59 	.word	0x0800bc59
 800bc4c:	0800bc67 	.word	0x0800bc67
 800bc50:	0800bc73 	.word	0x0800bc73
 800bc54:	0800bc7b 	.word	0x0800bc7b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	431a      	orrs	r2, r3
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bc64:	e026      	b.n	800bcb4 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc6a:	1c5a      	adds	r2, r3, #1
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bc70:	e020      	b.n	800bcb4 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bc72:	6a3b      	ldr	r3, [r7, #32]
 800bc74:	68ba      	ldr	r2, [r7, #8]
 800bc76:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bc78:	e01c      	b.n	800bcb4 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bc7a:	7ffb      	ldrb	r3, [r7, #31]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d003      	beq.n	800bc88 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bc86:	e015      	b.n	800bcb4 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bc8c:	e012      	b.n	800bcb4 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bc8e:	6a3b      	ldr	r3, [r7, #32]
 800bc90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc96:	d00c      	beq.n	800bcb2 <xTaskGenericNotify+0xd2>
	__asm volatile
 800bc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9c:	f383 8811 	msr	BASEPRI, r3
 800bca0:	f3bf 8f6f 	isb	sy
 800bca4:	f3bf 8f4f 	dsb	sy
 800bca8:	617b      	str	r3, [r7, #20]
}
 800bcaa:	bf00      	nop
 800bcac:	e7fe      	b.n	800bcac <xTaskGenericNotify+0xcc>
					break;
 800bcae:	bf00      	nop
 800bcb0:	e000      	b.n	800bcb4 <xTaskGenericNotify+0xd4>

					break;
 800bcb2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bcb4:	7ffb      	ldrb	r3, [r7, #31]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d13a      	bne.n	800bd30 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fd ffaa 	bl	8009c18 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcc8:	4b1d      	ldr	r3, [pc, #116]	; (800bd40 <xTaskGenericNotify+0x160>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d903      	bls.n	800bcd8 <xTaskGenericNotify+0xf8>
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd4:	4a1a      	ldr	r2, [pc, #104]	; (800bd40 <xTaskGenericNotify+0x160>)
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcdc:	4613      	mov	r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4a17      	ldr	r2, [pc, #92]	; (800bd44 <xTaskGenericNotify+0x164>)
 800bce6:	441a      	add	r2, r3
 800bce8:	6a3b      	ldr	r3, [r7, #32]
 800bcea:	3304      	adds	r3, #4
 800bcec:	4619      	mov	r1, r3
 800bcee:	4610      	mov	r0, r2
 800bcf0:	f7fd ff35 	bl	8009b5e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00a      	beq.n	800bd12 <xTaskGenericNotify+0x132>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	613b      	str	r3, [r7, #16]
}
 800bd0e:	bf00      	nop
 800bd10:	e7fe      	b.n	800bd10 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd12:	6a3b      	ldr	r3, [r7, #32]
 800bd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd16:	4b0c      	ldr	r3, [pc, #48]	; (800bd48 <xTaskGenericNotify+0x168>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d907      	bls.n	800bd30 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bd20:	4b0a      	ldr	r3, [pc, #40]	; (800bd4c <xTaskGenericNotify+0x16c>)
 800bd22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bd30:	f000 fe68 	bl	800ca04 <vPortExitCritical>

		return xReturn;
 800bd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3728      	adds	r7, #40	; 0x28
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20001338 	.word	0x20001338
 800bd44:	20000e60 	.word	0x20000e60
 800bd48:	20000e5c 	.word	0x20000e5c
 800bd4c:	e000ed04 	.word	0xe000ed04

0800bd50 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08e      	sub	sp, #56	; 0x38
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	603b      	str	r3, [r7, #0]
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bd60:	2301      	movs	r3, #1
 800bd62:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10a      	bne.n	800bd80 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd7c:	bf00      	nop
 800bd7e:	e7fe      	b.n	800bd7e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd80:	f000 fef2 	bl	800cb68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800bd88:	f3ef 8211 	mrs	r2, BASEPRI
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	623a      	str	r2, [r7, #32]
 800bd9e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bda0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bda2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bdb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800bdc4:	79fb      	ldrb	r3, [r7, #7]
 800bdc6:	2b04      	cmp	r3, #4
 800bdc8:	d828      	bhi.n	800be1c <xTaskGenericNotifyFromISR+0xcc>
 800bdca:	a201      	add	r2, pc, #4	; (adr r2, 800bdd0 <xTaskGenericNotifyFromISR+0x80>)
 800bdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd0:	0800be3d 	.word	0x0800be3d
 800bdd4:	0800bde5 	.word	0x0800bde5
 800bdd8:	0800bdf3 	.word	0x0800bdf3
 800bddc:	0800bdff 	.word	0x0800bdff
 800bde0:	0800be07 	.word	0x0800be07
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	431a      	orrs	r2, r3
 800bdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bdf0:	e027      	b.n	800be42 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bdfc:	e021      	b.n	800be42 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800be04:	e01d      	b.n	800be42 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800be06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d003      	beq.n	800be16 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800be0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800be14:	e015      	b.n	800be42 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800be16:	2300      	movs	r3, #0
 800be18:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800be1a:	e012      	b.n	800be42 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be24:	d00c      	beq.n	800be40 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	61bb      	str	r3, [r7, #24]
}
 800be38:	bf00      	nop
 800be3a:	e7fe      	b.n	800be3a <xTaskGenericNotifyFromISR+0xea>
					break;
 800be3c:	bf00      	nop
 800be3e:	e000      	b.n	800be42 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800be40:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800be42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be46:	2b01      	cmp	r3, #1
 800be48:	d146      	bne.n	800bed8 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00a      	beq.n	800be68 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800be52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	617b      	str	r3, [r7, #20]
}
 800be64:	bf00      	nop
 800be66:	e7fe      	b.n	800be66 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be68:	4b21      	ldr	r3, [pc, #132]	; (800bef0 <xTaskGenericNotifyFromISR+0x1a0>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d11d      	bne.n	800beac <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be72:	3304      	adds	r3, #4
 800be74:	4618      	mov	r0, r3
 800be76:	f7fd fecf 	bl	8009c18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7e:	4b1d      	ldr	r3, [pc, #116]	; (800bef4 <xTaskGenericNotifyFromISR+0x1a4>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	429a      	cmp	r2, r3
 800be84:	d903      	bls.n	800be8e <xTaskGenericNotifyFromISR+0x13e>
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8a:	4a1a      	ldr	r2, [pc, #104]	; (800bef4 <xTaskGenericNotifyFromISR+0x1a4>)
 800be8c:	6013      	str	r3, [r2, #0]
 800be8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be92:	4613      	mov	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4a17      	ldr	r2, [pc, #92]	; (800bef8 <xTaskGenericNotifyFromISR+0x1a8>)
 800be9c:	441a      	add	r2, r3
 800be9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea0:	3304      	adds	r3, #4
 800bea2:	4619      	mov	r1, r3
 800bea4:	4610      	mov	r0, r2
 800bea6:	f7fd fe5a 	bl	8009b5e <vListInsertEnd>
 800beaa:	e005      	b.n	800beb8 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800beac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beae:	3318      	adds	r3, #24
 800beb0:	4619      	mov	r1, r3
 800beb2:	4812      	ldr	r0, [pc, #72]	; (800befc <xTaskGenericNotifyFromISR+0x1ac>)
 800beb4:	f7fd fe53 	bl	8009b5e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bebc:	4b10      	ldr	r3, [pc, #64]	; (800bf00 <xTaskGenericNotifyFromISR+0x1b0>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d908      	bls.n	800bed8 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800bec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800becc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bece:	2201      	movs	r2, #1
 800bed0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800bed2:	4b0c      	ldr	r3, [pc, #48]	; (800bf04 <xTaskGenericNotifyFromISR+0x1b4>)
 800bed4:	2201      	movs	r2, #1
 800bed6:	601a      	str	r2, [r3, #0]
 800bed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beda:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	f383 8811 	msr	BASEPRI, r3
}
 800bee2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800bee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3738      	adds	r7, #56	; 0x38
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	20001358 	.word	0x20001358
 800bef4:	20001338 	.word	0x20001338
 800bef8:	20000e60 	.word	0x20000e60
 800befc:	200012f0 	.word	0x200012f0
 800bf00:	20000e5c 	.word	0x20000e5c
 800bf04:	20001344 	.word	0x20001344

0800bf08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf12:	4b21      	ldr	r3, [pc, #132]	; (800bf98 <prvAddCurrentTaskToDelayedList+0x90>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf18:	4b20      	ldr	r3, [pc, #128]	; (800bf9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7fd fe7a 	bl	8009c18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2a:	d10a      	bne.n	800bf42 <prvAddCurrentTaskToDelayedList+0x3a>
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d007      	beq.n	800bf42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf32:	4b1a      	ldr	r3, [pc, #104]	; (800bf9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	3304      	adds	r3, #4
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4819      	ldr	r0, [pc, #100]	; (800bfa0 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf3c:	f7fd fe0f 	bl	8009b5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf40:	e026      	b.n	800bf90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4413      	add	r3, r2
 800bf48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf4a:	4b14      	ldr	r3, [pc, #80]	; (800bf9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf52:	68ba      	ldr	r2, [r7, #8]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d209      	bcs.n	800bf6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf5a:	4b12      	ldr	r3, [pc, #72]	; (800bfa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	4b0f      	ldr	r3, [pc, #60]	; (800bf9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	3304      	adds	r3, #4
 800bf64:	4619      	mov	r1, r3
 800bf66:	4610      	mov	r0, r2
 800bf68:	f7fd fe1d 	bl	8009ba6 <vListInsert>
}
 800bf6c:	e010      	b.n	800bf90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf6e:	4b0e      	ldr	r3, [pc, #56]	; (800bfa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	4b0a      	ldr	r3, [pc, #40]	; (800bf9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	3304      	adds	r3, #4
 800bf78:	4619      	mov	r1, r3
 800bf7a:	4610      	mov	r0, r2
 800bf7c:	f7fd fe13 	bl	8009ba6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf80:	4b0a      	ldr	r3, [pc, #40]	; (800bfac <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d202      	bcs.n	800bf90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf8a:	4a08      	ldr	r2, [pc, #32]	; (800bfac <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	6013      	str	r3, [r2, #0]
}
 800bf90:	bf00      	nop
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	20001334 	.word	0x20001334
 800bf9c:	20000e5c 	.word	0x20000e5c
 800bfa0:	2000131c 	.word	0x2000131c
 800bfa4:	200012ec 	.word	0x200012ec
 800bfa8:	200012e8 	.word	0x200012e8
 800bfac:	20001350 	.word	0x20001350

0800bfb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08a      	sub	sp, #40	; 0x28
 800bfb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bfba:	f000 fb63 	bl	800c684 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bfbe:	4b1c      	ldr	r3, [pc, #112]	; (800c030 <xTimerCreateTimerTask+0x80>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d021      	beq.n	800c00a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bfce:	1d3a      	adds	r2, r7, #4
 800bfd0:	f107 0108 	add.w	r1, r7, #8
 800bfd4:	f107 030c 	add.w	r3, r7, #12
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fd fb8b 	bl	80096f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfde:	6879      	ldr	r1, [r7, #4]
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	9202      	str	r2, [sp, #8]
 800bfe6:	9301      	str	r3, [sp, #4]
 800bfe8:	2302      	movs	r3, #2
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	2300      	movs	r3, #0
 800bfee:	460a      	mov	r2, r1
 800bff0:	4910      	ldr	r1, [pc, #64]	; (800c034 <xTimerCreateTimerTask+0x84>)
 800bff2:	4811      	ldr	r0, [pc, #68]	; (800c038 <xTimerCreateTimerTask+0x88>)
 800bff4:	f7fe fd3c 	bl	800aa70 <xTaskCreateStatic>
 800bff8:	4603      	mov	r3, r0
 800bffa:	4a10      	ldr	r2, [pc, #64]	; (800c03c <xTimerCreateTimerTask+0x8c>)
 800bffc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bffe:	4b0f      	ldr	r3, [pc, #60]	; (800c03c <xTimerCreateTimerTask+0x8c>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d001      	beq.n	800c00a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c006:	2301      	movs	r3, #1
 800c008:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10a      	bne.n	800c026 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	613b      	str	r3, [r7, #16]
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c026:	697b      	ldr	r3, [r7, #20]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3718      	adds	r7, #24
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	2000138c 	.word	0x2000138c
 800c034:	0800eb20 	.word	0x0800eb20
 800c038:	0800c22d 	.word	0x0800c22d
 800c03c:	20001390 	.word	0x20001390

0800c040 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c040:	b580      	push	{r7, lr}
 800c042:	b088      	sub	sp, #32
 800c044:	af02      	add	r7, sp, #8
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c04e:	202c      	movs	r0, #44	; 0x2c
 800c050:	f000 fdca 	bl	800cbe8 <pvPortMalloc>
 800c054:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00d      	beq.n	800c078 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	9301      	str	r3, [sp, #4]
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	68b9      	ldr	r1, [r7, #8]
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f000 f805 	bl	800c082 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c078:	697b      	ldr	r3, [r7, #20]
	}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3718      	adds	r7, #24
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b086      	sub	sp, #24
 800c086:	af00      	add	r7, sp, #0
 800c088:	60f8      	str	r0, [r7, #12]
 800c08a:	60b9      	str	r1, [r7, #8]
 800c08c:	607a      	str	r2, [r7, #4]
 800c08e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10a      	bne.n	800c0ac <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	617b      	str	r3, [r7, #20]
}
 800c0a8:	bf00      	nop
 800c0aa:	e7fe      	b.n	800c0aa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d01e      	beq.n	800c0f0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c0b2:	f000 fae7 	bl	800c684 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	68ba      	ldr	r2, [r7, #8]
 800c0c0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	6a3a      	ldr	r2, [r7, #32]
 800c0cc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fd fd36 	bl	8009b44 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d008      	beq.n	800c0f0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0e4:	f043 0304 	orr.w	r3, r3, #4
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c0f0:	bf00      	nop
 800c0f2:	3718      	adds	r7, #24
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08a      	sub	sp, #40	; 0x28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
 800c104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c106:	2300      	movs	r3, #0
 800c108:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10a      	bne.n	800c126 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	623b      	str	r3, [r7, #32]
}
 800c122:	bf00      	nop
 800c124:	e7fe      	b.n	800c124 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c126:	4b1a      	ldr	r3, [pc, #104]	; (800c190 <xTimerGenericCommand+0x98>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d02a      	beq.n	800c184 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2b05      	cmp	r3, #5
 800c13e:	dc18      	bgt.n	800c172 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c140:	f7ff fb64 	bl	800b80c <xTaskGetSchedulerState>
 800c144:	4603      	mov	r3, r0
 800c146:	2b02      	cmp	r3, #2
 800c148:	d109      	bne.n	800c15e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c14a:	4b11      	ldr	r3, [pc, #68]	; (800c190 <xTimerGenericCommand+0x98>)
 800c14c:	6818      	ldr	r0, [r3, #0]
 800c14e:	f107 0110 	add.w	r1, r7, #16
 800c152:	2300      	movs	r3, #0
 800c154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c156:	f7fd ff31 	bl	8009fbc <xQueueGenericSend>
 800c15a:	6278      	str	r0, [r7, #36]	; 0x24
 800c15c:	e012      	b.n	800c184 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c15e:	4b0c      	ldr	r3, [pc, #48]	; (800c190 <xTimerGenericCommand+0x98>)
 800c160:	6818      	ldr	r0, [r3, #0]
 800c162:	f107 0110 	add.w	r1, r7, #16
 800c166:	2300      	movs	r3, #0
 800c168:	2200      	movs	r2, #0
 800c16a:	f7fd ff27 	bl	8009fbc <xQueueGenericSend>
 800c16e:	6278      	str	r0, [r7, #36]	; 0x24
 800c170:	e008      	b.n	800c184 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c172:	4b07      	ldr	r3, [pc, #28]	; (800c190 <xTimerGenericCommand+0x98>)
 800c174:	6818      	ldr	r0, [r3, #0]
 800c176:	f107 0110 	add.w	r1, r7, #16
 800c17a:	2300      	movs	r3, #0
 800c17c:	683a      	ldr	r2, [r7, #0]
 800c17e:	f7fe f81b 	bl	800a1b8 <xQueueGenericSendFromISR>
 800c182:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c186:	4618      	mov	r0, r3
 800c188:	3728      	adds	r7, #40	; 0x28
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	2000138c 	.word	0x2000138c

0800c194 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af02      	add	r7, sp, #8
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c19e:	4b22      	ldr	r3, [pc, #136]	; (800c228 <prvProcessExpiredTimer+0x94>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fd fd33 	bl	8009c18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1b8:	f003 0304 	and.w	r3, r3, #4
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d022      	beq.n	800c206 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	699a      	ldr	r2, [r3, #24]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	18d1      	adds	r1, r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	6978      	ldr	r0, [r7, #20]
 800c1ce:	f000 f8d1 	bl	800c374 <prvInsertTimerInActiveList>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d01f      	beq.n	800c218 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1d8:	2300      	movs	r3, #0
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	2300      	movs	r3, #0
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	6978      	ldr	r0, [r7, #20]
 800c1e4:	f7ff ff88 	bl	800c0f8 <xTimerGenericCommand>
 800c1e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d113      	bne.n	800c218 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	60fb      	str	r3, [r7, #12]
}
 800c202:	bf00      	nop
 800c204:	e7fe      	b.n	800c204 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c20c:	f023 0301 	bic.w	r3, r3, #1
 800c210:	b2da      	uxtb	r2, r3
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	6a1b      	ldr	r3, [r3, #32]
 800c21c:	6978      	ldr	r0, [r7, #20]
 800c21e:	4798      	blx	r3
}
 800c220:	bf00      	nop
 800c222:	3718      	adds	r7, #24
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	20001384 	.word	0x20001384

0800c22c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c234:	f107 0308 	add.w	r3, r7, #8
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 f857 	bl	800c2ec <prvGetNextExpireTime>
 800c23e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	4619      	mov	r1, r3
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f000 f803 	bl	800c250 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c24a:	f000 f8d5 	bl	800c3f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c24e:	e7f1      	b.n	800c234 <prvTimerTask+0x8>

0800c250 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c25a:	f7fe fe45 	bl	800aee8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c25e:	f107 0308 	add.w	r3, r7, #8
 800c262:	4618      	mov	r0, r3
 800c264:	f000 f866 	bl	800c334 <prvSampleTimeNow>
 800c268:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d130      	bne.n	800c2d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10a      	bne.n	800c28c <prvProcessTimerOrBlockTask+0x3c>
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d806      	bhi.n	800c28c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c27e:	f7fe fe41 	bl	800af04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c282:	68f9      	ldr	r1, [r7, #12]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f7ff ff85 	bl	800c194 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c28a:	e024      	b.n	800c2d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d008      	beq.n	800c2a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c292:	4b13      	ldr	r3, [pc, #76]	; (800c2e0 <prvProcessTimerOrBlockTask+0x90>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <prvProcessTimerOrBlockTask+0x50>
 800c29c:	2301      	movs	r3, #1
 800c29e:	e000      	b.n	800c2a2 <prvProcessTimerOrBlockTask+0x52>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2a4:	4b0f      	ldr	r3, [pc, #60]	; (800c2e4 <prvProcessTimerOrBlockTask+0x94>)
 800c2a6:	6818      	ldr	r0, [r3, #0]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	f7fe fba9 	bl	800aa08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2b6:	f7fe fe25 	bl	800af04 <xTaskResumeAll>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10a      	bne.n	800c2d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c2c0:	4b09      	ldr	r3, [pc, #36]	; (800c2e8 <prvProcessTimerOrBlockTask+0x98>)
 800c2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c6:	601a      	str	r2, [r3, #0]
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	f3bf 8f6f 	isb	sy
}
 800c2d0:	e001      	b.n	800c2d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c2d2:	f7fe fe17 	bl	800af04 <xTaskResumeAll>
}
 800c2d6:	bf00      	nop
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	20001388 	.word	0x20001388
 800c2e4:	2000138c 	.word	0x2000138c
 800c2e8:	e000ed04 	.word	0xe000ed04

0800c2ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2f4:	4b0e      	ldr	r3, [pc, #56]	; (800c330 <prvGetNextExpireTime+0x44>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d101      	bne.n	800c302 <prvGetNextExpireTime+0x16>
 800c2fe:	2201      	movs	r2, #1
 800c300:	e000      	b.n	800c304 <prvGetNextExpireTime+0x18>
 800c302:	2200      	movs	r2, #0
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d105      	bne.n	800c31c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c310:	4b07      	ldr	r3, [pc, #28]	; (800c330 <prvGetNextExpireTime+0x44>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	60fb      	str	r3, [r7, #12]
 800c31a:	e001      	b.n	800c320 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c31c:	2300      	movs	r3, #0
 800c31e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c320:	68fb      	ldr	r3, [r7, #12]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	20001384 	.word	0x20001384

0800c334 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c33c:	f7fe fe80 	bl	800b040 <xTaskGetTickCount>
 800c340:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c342:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <prvSampleTimeNow+0x3c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d205      	bcs.n	800c358 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c34c:	f000 f936 	bl	800c5bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2201      	movs	r2, #1
 800c354:	601a      	str	r2, [r3, #0]
 800c356:	e002      	b.n	800c35e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c35e:	4a04      	ldr	r2, [pc, #16]	; (800c370 <prvSampleTimeNow+0x3c>)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c364:	68fb      	ldr	r3, [r7, #12]
}
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	20001394 	.word	0x20001394

0800c374 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c382:	2300      	movs	r3, #0
 800c384:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c392:	68ba      	ldr	r2, [r7, #8]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	429a      	cmp	r2, r3
 800c398:	d812      	bhi.n	800c3c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	1ad2      	subs	r2, r2, r3
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	699b      	ldr	r3, [r3, #24]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d302      	bcc.n	800c3ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	617b      	str	r3, [r7, #20]
 800c3ac:	e01b      	b.n	800c3e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3ae:	4b10      	ldr	r3, [pc, #64]	; (800c3f0 <prvInsertTimerInActiveList+0x7c>)
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	f7fd fbf4 	bl	8009ba6 <vListInsert>
 800c3be:	e012      	b.n	800c3e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d206      	bcs.n	800c3d6 <prvInsertTimerInActiveList+0x62>
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d302      	bcc.n	800c3d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	617b      	str	r3, [r7, #20]
 800c3d4:	e007      	b.n	800c3e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3d6:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <prvInsertTimerInActiveList+0x80>)
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3304      	adds	r3, #4
 800c3de:	4619      	mov	r1, r3
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	f7fd fbe0 	bl	8009ba6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c3e6:	697b      	ldr	r3, [r7, #20]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20001388 	.word	0x20001388
 800c3f4:	20001384 	.word	0x20001384

0800c3f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08e      	sub	sp, #56	; 0x38
 800c3fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3fe:	e0ca      	b.n	800c596 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	da18      	bge.n	800c438 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c406:	1d3b      	adds	r3, r7, #4
 800c408:	3304      	adds	r3, #4
 800c40a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10a      	bne.n	800c428 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	61fb      	str	r3, [r7, #28]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c42e:	6850      	ldr	r0, [r2, #4]
 800c430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c432:	6892      	ldr	r2, [r2, #8]
 800c434:	4611      	mov	r1, r2
 800c436:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f2c0 80ab 	blt.w	800c596 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d004      	beq.n	800c456 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44e:	3304      	adds	r3, #4
 800c450:	4618      	mov	r0, r3
 800c452:	f7fd fbe1 	bl	8009c18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c456:	463b      	mov	r3, r7
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff ff6b 	bl	800c334 <prvSampleTimeNow>
 800c45e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b09      	cmp	r3, #9
 800c464:	f200 8096 	bhi.w	800c594 <prvProcessReceivedCommands+0x19c>
 800c468:	a201      	add	r2, pc, #4	; (adr r2, 800c470 <prvProcessReceivedCommands+0x78>)
 800c46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46e:	bf00      	nop
 800c470:	0800c499 	.word	0x0800c499
 800c474:	0800c499 	.word	0x0800c499
 800c478:	0800c499 	.word	0x0800c499
 800c47c:	0800c50d 	.word	0x0800c50d
 800c480:	0800c521 	.word	0x0800c521
 800c484:	0800c56b 	.word	0x0800c56b
 800c488:	0800c499 	.word	0x0800c499
 800c48c:	0800c499 	.word	0x0800c499
 800c490:	0800c50d 	.word	0x0800c50d
 800c494:	0800c521 	.word	0x0800c521
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c49e:	f043 0301 	orr.w	r3, r3, #1
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ae:	699b      	ldr	r3, [r3, #24]
 800c4b0:	18d1      	adds	r1, r2, r3
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b8:	f7ff ff5c 	bl	800c374 <prvInsertTimerInActiveList>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d069      	beq.n	800c596 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c4:	6a1b      	ldr	r3, [r3, #32]
 800c4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4d0:	f003 0304 	and.w	r3, r3, #4
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d05e      	beq.n	800c596 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4dc:	699b      	ldr	r3, [r3, #24]
 800c4de:	441a      	add	r2, r3
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4ea:	f7ff fe05 	bl	800c0f8 <xTimerGenericCommand>
 800c4ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c4f0:	6a3b      	ldr	r3, [r7, #32]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d14f      	bne.n	800c596 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	61bb      	str	r3, [r7, #24]
}
 800c508:	bf00      	nop
 800c50a:	e7fe      	b.n	800c50a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c512:	f023 0301 	bic.w	r3, r3, #1
 800c516:	b2da      	uxtb	r2, r3
 800c518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c51e:	e03a      	b.n	800c596 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c526:	f043 0301 	orr.w	r3, r3, #1
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c532:	68ba      	ldr	r2, [r7, #8]
 800c534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c536:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	699b      	ldr	r3, [r3, #24]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10a      	bne.n	800c556 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	617b      	str	r3, [r7, #20]
}
 800c552:	bf00      	nop
 800c554:	e7fe      	b.n	800c554 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c558:	699a      	ldr	r2, [r3, #24]
 800c55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55c:	18d1      	adds	r1, r2, r3
 800c55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c564:	f7ff ff06 	bl	800c374 <prvInsertTimerInActiveList>
					break;
 800c568:	e015      	b.n	800c596 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c570:	f003 0302 	and.w	r3, r3, #2
 800c574:	2b00      	cmp	r3, #0
 800c576:	d103      	bne.n	800c580 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c57a:	f000 fc01 	bl	800cd80 <vPortFree>
 800c57e:	e00a      	b.n	800c596 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c586:	f023 0301 	bic.w	r3, r3, #1
 800c58a:	b2da      	uxtb	r2, r3
 800c58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c592:	e000      	b.n	800c596 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c594:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c596:	4b08      	ldr	r3, [pc, #32]	; (800c5b8 <prvProcessReceivedCommands+0x1c0>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	1d39      	adds	r1, r7, #4
 800c59c:	2200      	movs	r2, #0
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fd fea6 	bl	800a2f0 <xQueueReceive>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f47f af2a 	bne.w	800c400 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c5ac:	bf00      	nop
 800c5ae:	bf00      	nop
 800c5b0:	3730      	adds	r7, #48	; 0x30
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	2000138c 	.word	0x2000138c

0800c5bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b088      	sub	sp, #32
 800c5c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5c2:	e048      	b.n	800c656 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5c4:	4b2d      	ldr	r3, [pc, #180]	; (800c67c <prvSwitchTimerLists+0xc0>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5ce:	4b2b      	ldr	r3, [pc, #172]	; (800c67c <prvSwitchTimerLists+0xc0>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	3304      	adds	r3, #4
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fd fb1b 	bl	8009c18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6a1b      	ldr	r3, [r3, #32]
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5f0:	f003 0304 	and.w	r3, r3, #4
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d02e      	beq.n	800c656 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	4413      	add	r3, r2
 800c600:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c602:	68ba      	ldr	r2, [r7, #8]
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	429a      	cmp	r2, r3
 800c608:	d90e      	bls.n	800c628 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c616:	4b19      	ldr	r3, [pc, #100]	; (800c67c <prvSwitchTimerLists+0xc0>)
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3304      	adds	r3, #4
 800c61e:	4619      	mov	r1, r3
 800c620:	4610      	mov	r0, r2
 800c622:	f7fd fac0 	bl	8009ba6 <vListInsert>
 800c626:	e016      	b.n	800c656 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c628:	2300      	movs	r3, #0
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	2300      	movs	r3, #0
 800c62e:	693a      	ldr	r2, [r7, #16]
 800c630:	2100      	movs	r1, #0
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7ff fd60 	bl	800c0f8 <xTimerGenericCommand>
 800c638:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d10a      	bne.n	800c656 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	603b      	str	r3, [r7, #0]
}
 800c652:	bf00      	nop
 800c654:	e7fe      	b.n	800c654 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c656:	4b09      	ldr	r3, [pc, #36]	; (800c67c <prvSwitchTimerLists+0xc0>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1b1      	bne.n	800c5c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c660:	4b06      	ldr	r3, [pc, #24]	; (800c67c <prvSwitchTimerLists+0xc0>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c666:	4b06      	ldr	r3, [pc, #24]	; (800c680 <prvSwitchTimerLists+0xc4>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a04      	ldr	r2, [pc, #16]	; (800c67c <prvSwitchTimerLists+0xc0>)
 800c66c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c66e:	4a04      	ldr	r2, [pc, #16]	; (800c680 <prvSwitchTimerLists+0xc4>)
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	6013      	str	r3, [r2, #0]
}
 800c674:	bf00      	nop
 800c676:	3718      	adds	r7, #24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	20001384 	.word	0x20001384
 800c680:	20001388 	.word	0x20001388

0800c684 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c68a:	f000 f98b 	bl	800c9a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c68e:	4b15      	ldr	r3, [pc, #84]	; (800c6e4 <prvCheckForValidListAndQueue+0x60>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d120      	bne.n	800c6d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c696:	4814      	ldr	r0, [pc, #80]	; (800c6e8 <prvCheckForValidListAndQueue+0x64>)
 800c698:	f7fd fa34 	bl	8009b04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c69c:	4813      	ldr	r0, [pc, #76]	; (800c6ec <prvCheckForValidListAndQueue+0x68>)
 800c69e:	f7fd fa31 	bl	8009b04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6a2:	4b13      	ldr	r3, [pc, #76]	; (800c6f0 <prvCheckForValidListAndQueue+0x6c>)
 800c6a4:	4a10      	ldr	r2, [pc, #64]	; (800c6e8 <prvCheckForValidListAndQueue+0x64>)
 800c6a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6a8:	4b12      	ldr	r3, [pc, #72]	; (800c6f4 <prvCheckForValidListAndQueue+0x70>)
 800c6aa:	4a10      	ldr	r2, [pc, #64]	; (800c6ec <prvCheckForValidListAndQueue+0x68>)
 800c6ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	4b11      	ldr	r3, [pc, #68]	; (800c6f8 <prvCheckForValidListAndQueue+0x74>)
 800c6b4:	4a11      	ldr	r2, [pc, #68]	; (800c6fc <prvCheckForValidListAndQueue+0x78>)
 800c6b6:	2110      	movs	r1, #16
 800c6b8:	200a      	movs	r0, #10
 800c6ba:	f7fd fb3f 	bl	8009d3c <xQueueGenericCreateStatic>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	4a08      	ldr	r2, [pc, #32]	; (800c6e4 <prvCheckForValidListAndQueue+0x60>)
 800c6c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c6c4:	4b07      	ldr	r3, [pc, #28]	; (800c6e4 <prvCheckForValidListAndQueue+0x60>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d005      	beq.n	800c6d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c6cc:	4b05      	ldr	r3, [pc, #20]	; (800c6e4 <prvCheckForValidListAndQueue+0x60>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	490b      	ldr	r1, [pc, #44]	; (800c700 <prvCheckForValidListAndQueue+0x7c>)
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fe f944 	bl	800a960 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6d8:	f000 f994 	bl	800ca04 <vPortExitCritical>
}
 800c6dc:	bf00      	nop
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	2000138c 	.word	0x2000138c
 800c6e8:	2000135c 	.word	0x2000135c
 800c6ec:	20001370 	.word	0x20001370
 800c6f0:	20001384 	.word	0x20001384
 800c6f4:	20001388 	.word	0x20001388
 800c6f8:	20001438 	.word	0x20001438
 800c6fc:	20001398 	.word	0x20001398
 800c700:	0800eb28 	.word	0x0800eb28

0800c704 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08a      	sub	sp, #40	; 0x28
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
 800c710:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c712:	f06f 0301 	mvn.w	r3, #1
 800c716:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c724:	4b06      	ldr	r3, [pc, #24]	; (800c740 <xTimerPendFunctionCallFromISR+0x3c>)
 800c726:	6818      	ldr	r0, [r3, #0]
 800c728:	f107 0114 	add.w	r1, r7, #20
 800c72c:	2300      	movs	r3, #0
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	f7fd fd42 	bl	800a1b8 <xQueueGenericSendFromISR>
 800c734:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c738:	4618      	mov	r0, r3
 800c73a:	3728      	adds	r7, #40	; 0x28
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	2000138c 	.word	0x2000138c

0800c744 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3b04      	subs	r3, #4
 800c754:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c75c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	3b04      	subs	r3, #4
 800c762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	f023 0201 	bic.w	r2, r3, #1
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3b04      	subs	r3, #4
 800c772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c774:	4a0c      	ldr	r2, [pc, #48]	; (800c7a8 <pxPortInitialiseStack+0x64>)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	3b14      	subs	r3, #20
 800c77e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	3b04      	subs	r3, #4
 800c78a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f06f 0202 	mvn.w	r2, #2
 800c792:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	3b20      	subs	r3, #32
 800c798:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c79a:	68fb      	ldr	r3, [r7, #12]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3714      	adds	r7, #20
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr
 800c7a8:	0800c7ad 	.word	0x0800c7ad

0800c7ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7b6:	4b12      	ldr	r3, [pc, #72]	; (800c800 <prvTaskExitError+0x54>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7be:	d00a      	beq.n	800c7d6 <prvTaskExitError+0x2a>
	__asm volatile
 800c7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	60fb      	str	r3, [r7, #12]
}
 800c7d2:	bf00      	nop
 800c7d4:	e7fe      	b.n	800c7d4 <prvTaskExitError+0x28>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	60bb      	str	r3, [r7, #8]
}
 800c7e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7ea:	bf00      	nop
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d0fc      	beq.n	800c7ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7f2:	bf00      	nop
 800c7f4:	bf00      	nop
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	20000078 	.word	0x20000078
	...

0800c810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <pxCurrentTCBConst2>)
 800c812:	6819      	ldr	r1, [r3, #0]
 800c814:	6808      	ldr	r0, [r1, #0]
 800c816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81a:	f380 8809 	msr	PSP, r0
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f04f 0000 	mov.w	r0, #0
 800c826:	f380 8811 	msr	BASEPRI, r0
 800c82a:	4770      	bx	lr
 800c82c:	f3af 8000 	nop.w

0800c830 <pxCurrentTCBConst2>:
 800c830:	20000e5c 	.word	0x20000e5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop

0800c838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c838:	4808      	ldr	r0, [pc, #32]	; (800c85c <prvPortStartFirstTask+0x24>)
 800c83a:	6800      	ldr	r0, [r0, #0]
 800c83c:	6800      	ldr	r0, [r0, #0]
 800c83e:	f380 8808 	msr	MSP, r0
 800c842:	f04f 0000 	mov.w	r0, #0
 800c846:	f380 8814 	msr	CONTROL, r0
 800c84a:	b662      	cpsie	i
 800c84c:	b661      	cpsie	f
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	df00      	svc	0
 800c858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c85a:	bf00      	nop
 800c85c:	e000ed08 	.word	0xe000ed08

0800c860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b086      	sub	sp, #24
 800c864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c866:	4b46      	ldr	r3, [pc, #280]	; (800c980 <xPortStartScheduler+0x120>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a46      	ldr	r2, [pc, #280]	; (800c984 <xPortStartScheduler+0x124>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d10a      	bne.n	800c886 <xPortStartScheduler+0x26>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	613b      	str	r3, [r7, #16]
}
 800c882:	bf00      	nop
 800c884:	e7fe      	b.n	800c884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c886:	4b3e      	ldr	r3, [pc, #248]	; (800c980 <xPortStartScheduler+0x120>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a3f      	ldr	r2, [pc, #252]	; (800c988 <xPortStartScheduler+0x128>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d10a      	bne.n	800c8a6 <xPortStartScheduler+0x46>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	60fb      	str	r3, [r7, #12]
}
 800c8a2:	bf00      	nop
 800c8a4:	e7fe      	b.n	800c8a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8a6:	4b39      	ldr	r3, [pc, #228]	; (800c98c <xPortStartScheduler+0x12c>)
 800c8a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	22ff      	movs	r2, #255	; 0xff
 800c8b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8c0:	78fb      	ldrb	r3, [r7, #3]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	4b31      	ldr	r3, [pc, #196]	; (800c990 <xPortStartScheduler+0x130>)
 800c8cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8ce:	4b31      	ldr	r3, [pc, #196]	; (800c994 <xPortStartScheduler+0x134>)
 800c8d0:	2207      	movs	r2, #7
 800c8d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8d4:	e009      	b.n	800c8ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c8d6:	4b2f      	ldr	r3, [pc, #188]	; (800c994 <xPortStartScheduler+0x134>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	4a2d      	ldr	r2, [pc, #180]	; (800c994 <xPortStartScheduler+0x134>)
 800c8de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8ea:	78fb      	ldrb	r3, [r7, #3]
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8f2:	2b80      	cmp	r3, #128	; 0x80
 800c8f4:	d0ef      	beq.n	800c8d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8f6:	4b27      	ldr	r3, [pc, #156]	; (800c994 <xPortStartScheduler+0x134>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f1c3 0307 	rsb	r3, r3, #7
 800c8fe:	2b04      	cmp	r3, #4
 800c900:	d00a      	beq.n	800c918 <xPortStartScheduler+0xb8>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	60bb      	str	r3, [r7, #8]
}
 800c914:	bf00      	nop
 800c916:	e7fe      	b.n	800c916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c918:	4b1e      	ldr	r3, [pc, #120]	; (800c994 <xPortStartScheduler+0x134>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	021b      	lsls	r3, r3, #8
 800c91e:	4a1d      	ldr	r2, [pc, #116]	; (800c994 <xPortStartScheduler+0x134>)
 800c920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c922:	4b1c      	ldr	r3, [pc, #112]	; (800c994 <xPortStartScheduler+0x134>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c92a:	4a1a      	ldr	r2, [pc, #104]	; (800c994 <xPortStartScheduler+0x134>)
 800c92c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	b2da      	uxtb	r2, r3
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c936:	4b18      	ldr	r3, [pc, #96]	; (800c998 <xPortStartScheduler+0x138>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a17      	ldr	r2, [pc, #92]	; (800c998 <xPortStartScheduler+0x138>)
 800c93c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c942:	4b15      	ldr	r3, [pc, #84]	; (800c998 <xPortStartScheduler+0x138>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a14      	ldr	r2, [pc, #80]	; (800c998 <xPortStartScheduler+0x138>)
 800c948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c94c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c94e:	f000 f8dd 	bl	800cb0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c952:	4b12      	ldr	r3, [pc, #72]	; (800c99c <xPortStartScheduler+0x13c>)
 800c954:	2200      	movs	r2, #0
 800c956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c958:	f000 f8fc 	bl	800cb54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c95c:	4b10      	ldr	r3, [pc, #64]	; (800c9a0 <xPortStartScheduler+0x140>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a0f      	ldr	r2, [pc, #60]	; (800c9a0 <xPortStartScheduler+0x140>)
 800c962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c968:	f7ff ff66 	bl	800c838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c96c:	f7fe fc44 	bl	800b1f8 <vTaskSwitchContext>
	prvTaskExitError();
 800c970:	f7ff ff1c 	bl	800c7ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	e000ed00 	.word	0xe000ed00
 800c984:	410fc271 	.word	0x410fc271
 800c988:	410fc270 	.word	0x410fc270
 800c98c:	e000e400 	.word	0xe000e400
 800c990:	20001488 	.word	0x20001488
 800c994:	2000148c 	.word	0x2000148c
 800c998:	e000ed20 	.word	0xe000ed20
 800c99c:	20000078 	.word	0x20000078
 800c9a0:	e000ef34 	.word	0xe000ef34

0800c9a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
	__asm volatile
 800c9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	607b      	str	r3, [r7, #4]
}
 800c9bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9be:	4b0f      	ldr	r3, [pc, #60]	; (800c9fc <vPortEnterCritical+0x58>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	4a0d      	ldr	r2, [pc, #52]	; (800c9fc <vPortEnterCritical+0x58>)
 800c9c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9c8:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <vPortEnterCritical+0x58>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d10f      	bne.n	800c9f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ca00 <vPortEnterCritical+0x5c>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00a      	beq.n	800c9f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	603b      	str	r3, [r7, #0]
}
 800c9ec:	bf00      	nop
 800c9ee:	e7fe      	b.n	800c9ee <vPortEnterCritical+0x4a>
	}
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	20000078 	.word	0x20000078
 800ca00:	e000ed04 	.word	0xe000ed04

0800ca04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca0a:	4b12      	ldr	r3, [pc, #72]	; (800ca54 <vPortExitCritical+0x50>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10a      	bne.n	800ca28 <vPortExitCritical+0x24>
	__asm volatile
 800ca12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	607b      	str	r3, [r7, #4]
}
 800ca24:	bf00      	nop
 800ca26:	e7fe      	b.n	800ca26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca28:	4b0a      	ldr	r3, [pc, #40]	; (800ca54 <vPortExitCritical+0x50>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	4a09      	ldr	r2, [pc, #36]	; (800ca54 <vPortExitCritical+0x50>)
 800ca30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca32:	4b08      	ldr	r3, [pc, #32]	; (800ca54 <vPortExitCritical+0x50>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d105      	bne.n	800ca46 <vPortExitCritical+0x42>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	f383 8811 	msr	BASEPRI, r3
}
 800ca44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca46:	bf00      	nop
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	20000078 	.word	0x20000078
	...

0800ca60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca60:	f3ef 8009 	mrs	r0, PSP
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	4b15      	ldr	r3, [pc, #84]	; (800cac0 <pxCurrentTCBConst>)
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	f01e 0f10 	tst.w	lr, #16
 800ca70:	bf08      	it	eq
 800ca72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7a:	6010      	str	r0, [r2, #0]
 800ca7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca84:	f380 8811 	msr	BASEPRI, r0
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f7fe fbb2 	bl	800b1f8 <vTaskSwitchContext>
 800ca94:	f04f 0000 	mov.w	r0, #0
 800ca98:	f380 8811 	msr	BASEPRI, r0
 800ca9c:	bc09      	pop	{r0, r3}
 800ca9e:	6819      	ldr	r1, [r3, #0]
 800caa0:	6808      	ldr	r0, [r1, #0]
 800caa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa6:	f01e 0f10 	tst.w	lr, #16
 800caaa:	bf08      	it	eq
 800caac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cab0:	f380 8809 	msr	PSP, r0
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	f3af 8000 	nop.w

0800cac0 <pxCurrentTCBConst>:
 800cac0:	20000e5c 	.word	0x20000e5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cac4:	bf00      	nop
 800cac6:	bf00      	nop

0800cac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	607b      	str	r3, [r7, #4]
}
 800cae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cae2:	f7fe facf 	bl	800b084 <xTaskIncrementTick>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d003      	beq.n	800caf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800caec:	4b06      	ldr	r3, [pc, #24]	; (800cb08 <xPortSysTickHandler+0x40>)
 800caee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	2300      	movs	r3, #0
 800caf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	f383 8811 	msr	BASEPRI, r3
}
 800cafe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb00:	bf00      	nop
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	e000ed04 	.word	0xe000ed04

0800cb0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb10:	4b0b      	ldr	r3, [pc, #44]	; (800cb40 <vPortSetupTimerInterrupt+0x34>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb16:	4b0b      	ldr	r3, [pc, #44]	; (800cb44 <vPortSetupTimerInterrupt+0x38>)
 800cb18:	2200      	movs	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb1c:	4b0a      	ldr	r3, [pc, #40]	; (800cb48 <vPortSetupTimerInterrupt+0x3c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a0a      	ldr	r2, [pc, #40]	; (800cb4c <vPortSetupTimerInterrupt+0x40>)
 800cb22:	fba2 2303 	umull	r2, r3, r2, r3
 800cb26:	099b      	lsrs	r3, r3, #6
 800cb28:	4a09      	ldr	r2, [pc, #36]	; (800cb50 <vPortSetupTimerInterrupt+0x44>)
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb2e:	4b04      	ldr	r3, [pc, #16]	; (800cb40 <vPortSetupTimerInterrupt+0x34>)
 800cb30:	2207      	movs	r2, #7
 800cb32:	601a      	str	r2, [r3, #0]
}
 800cb34:	bf00      	nop
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	e000e010 	.word	0xe000e010
 800cb44:	e000e018 	.word	0xe000e018
 800cb48:	2000006c 	.word	0x2000006c
 800cb4c:	10624dd3 	.word	0x10624dd3
 800cb50:	e000e014 	.word	0xe000e014

0800cb54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb64 <vPortEnableVFP+0x10>
 800cb58:	6801      	ldr	r1, [r0, #0]
 800cb5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb5e:	6001      	str	r1, [r0, #0]
 800cb60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb62:	bf00      	nop
 800cb64:	e000ed88 	.word	0xe000ed88

0800cb68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb6e:	f3ef 8305 	mrs	r3, IPSR
 800cb72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2b0f      	cmp	r3, #15
 800cb78:	d914      	bls.n	800cba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb7a:	4a17      	ldr	r2, [pc, #92]	; (800cbd8 <vPortValidateInterruptPriority+0x70>)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4413      	add	r3, r2
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb84:	4b15      	ldr	r3, [pc, #84]	; (800cbdc <vPortValidateInterruptPriority+0x74>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	7afa      	ldrb	r2, [r7, #11]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d20a      	bcs.n	800cba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb92:	f383 8811 	msr	BASEPRI, r3
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	607b      	str	r3, [r7, #4]
}
 800cba0:	bf00      	nop
 800cba2:	e7fe      	b.n	800cba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cba4:	4b0e      	ldr	r3, [pc, #56]	; (800cbe0 <vPortValidateInterruptPriority+0x78>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cbac:	4b0d      	ldr	r3, [pc, #52]	; (800cbe4 <vPortValidateInterruptPriority+0x7c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d90a      	bls.n	800cbca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	603b      	str	r3, [r7, #0]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <vPortValidateInterruptPriority+0x60>
	}
 800cbca:	bf00      	nop
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	e000e3f0 	.word	0xe000e3f0
 800cbdc:	20001488 	.word	0x20001488
 800cbe0:	e000ed0c 	.word	0xe000ed0c
 800cbe4:	2000148c 	.word	0x2000148c

0800cbe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b08a      	sub	sp, #40	; 0x28
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cbf4:	f7fe f978 	bl	800aee8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cbf8:	4b5b      	ldr	r3, [pc, #364]	; (800cd68 <pvPortMalloc+0x180>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d101      	bne.n	800cc04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc00:	f000 f920 	bl	800ce44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc04:	4b59      	ldr	r3, [pc, #356]	; (800cd6c <pvPortMalloc+0x184>)
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4013      	ands	r3, r2
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f040 8093 	bne.w	800cd38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01d      	beq.n	800cc54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cc18:	2208      	movs	r2, #8
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f003 0307 	and.w	r3, r3, #7
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d014      	beq.n	800cc54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f023 0307 	bic.w	r3, r3, #7
 800cc30:	3308      	adds	r3, #8
 800cc32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f003 0307 	and.w	r3, r3, #7
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00a      	beq.n	800cc54 <pvPortMalloc+0x6c>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	617b      	str	r3, [r7, #20]
}
 800cc50:	bf00      	nop
 800cc52:	e7fe      	b.n	800cc52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d06e      	beq.n	800cd38 <pvPortMalloc+0x150>
 800cc5a:	4b45      	ldr	r3, [pc, #276]	; (800cd70 <pvPortMalloc+0x188>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d869      	bhi.n	800cd38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc64:	4b43      	ldr	r3, [pc, #268]	; (800cd74 <pvPortMalloc+0x18c>)
 800cc66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc68:	4b42      	ldr	r3, [pc, #264]	; (800cd74 <pvPortMalloc+0x18c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc6e:	e004      	b.n	800cc7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d903      	bls.n	800cc8c <pvPortMalloc+0xa4>
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1f1      	bne.n	800cc70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc8c:	4b36      	ldr	r3, [pc, #216]	; (800cd68 <pvPortMalloc+0x180>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d050      	beq.n	800cd38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2208      	movs	r2, #8
 800cc9c:	4413      	add	r3, r2
 800cc9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	6a3b      	ldr	r3, [r7, #32]
 800cca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	1ad2      	subs	r2, r2, r3
 800ccb0:	2308      	movs	r3, #8
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d91f      	bls.n	800ccf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	f003 0307 	and.w	r3, r3, #7
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00a      	beq.n	800cce0 <pvPortMalloc+0xf8>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	613b      	str	r3, [r7, #16]
}
 800ccdc:	bf00      	nop
 800ccde:	e7fe      	b.n	800ccde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	685a      	ldr	r2, [r3, #4]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	1ad2      	subs	r2, r2, r3
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ccf2:	69b8      	ldr	r0, [r7, #24]
 800ccf4:	f000 f908 	bl	800cf08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ccf8:	4b1d      	ldr	r3, [pc, #116]	; (800cd70 <pvPortMalloc+0x188>)
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	4a1b      	ldr	r2, [pc, #108]	; (800cd70 <pvPortMalloc+0x188>)
 800cd04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd06:	4b1a      	ldr	r3, [pc, #104]	; (800cd70 <pvPortMalloc+0x188>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	4b1b      	ldr	r3, [pc, #108]	; (800cd78 <pvPortMalloc+0x190>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d203      	bcs.n	800cd1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd12:	4b17      	ldr	r3, [pc, #92]	; (800cd70 <pvPortMalloc+0x188>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a18      	ldr	r2, [pc, #96]	; (800cd78 <pvPortMalloc+0x190>)
 800cd18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	4b13      	ldr	r3, [pc, #76]	; (800cd6c <pvPortMalloc+0x184>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	431a      	orrs	r2, r3
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd2e:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <pvPortMalloc+0x194>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	3301      	adds	r3, #1
 800cd34:	4a11      	ldr	r2, [pc, #68]	; (800cd7c <pvPortMalloc+0x194>)
 800cd36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd38:	f7fe f8e4 	bl	800af04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	f003 0307 	and.w	r3, r3, #7
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00a      	beq.n	800cd5c <pvPortMalloc+0x174>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	60fb      	str	r3, [r7, #12]
}
 800cd58:	bf00      	nop
 800cd5a:	e7fe      	b.n	800cd5a <pvPortMalloc+0x172>
	return pvReturn;
 800cd5c:	69fb      	ldr	r3, [r7, #28]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3728      	adds	r7, #40	; 0x28
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	20002098 	.word	0x20002098
 800cd6c:	200020ac 	.word	0x200020ac
 800cd70:	2000209c 	.word	0x2000209c
 800cd74:	20002090 	.word	0x20002090
 800cd78:	200020a0 	.word	0x200020a0
 800cd7c:	200020a4 	.word	0x200020a4

0800cd80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d04d      	beq.n	800ce2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd92:	2308      	movs	r3, #8
 800cd94:	425b      	negs	r3, r3
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	4413      	add	r3, r2
 800cd9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	685a      	ldr	r2, [r3, #4]
 800cda4:	4b24      	ldr	r3, [pc, #144]	; (800ce38 <vPortFree+0xb8>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4013      	ands	r3, r2
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10a      	bne.n	800cdc4 <vPortFree+0x44>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	60fb      	str	r3, [r7, #12]
}
 800cdc0:	bf00      	nop
 800cdc2:	e7fe      	b.n	800cdc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00a      	beq.n	800cde2 <vPortFree+0x62>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	60bb      	str	r3, [r7, #8]
}
 800cdde:	bf00      	nop
 800cde0:	e7fe      	b.n	800cde0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	685a      	ldr	r2, [r3, #4]
 800cde6:	4b14      	ldr	r3, [pc, #80]	; (800ce38 <vPortFree+0xb8>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4013      	ands	r3, r2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d01e      	beq.n	800ce2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d11a      	bne.n	800ce2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	685a      	ldr	r2, [r3, #4]
 800cdfc:	4b0e      	ldr	r3, [pc, #56]	; (800ce38 <vPortFree+0xb8>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	43db      	mvns	r3, r3
 800ce02:	401a      	ands	r2, r3
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce08:	f7fe f86e 	bl	800aee8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	685a      	ldr	r2, [r3, #4]
 800ce10:	4b0a      	ldr	r3, [pc, #40]	; (800ce3c <vPortFree+0xbc>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4413      	add	r3, r2
 800ce16:	4a09      	ldr	r2, [pc, #36]	; (800ce3c <vPortFree+0xbc>)
 800ce18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce1a:	6938      	ldr	r0, [r7, #16]
 800ce1c:	f000 f874 	bl	800cf08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce20:	4b07      	ldr	r3, [pc, #28]	; (800ce40 <vPortFree+0xc0>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	3301      	adds	r3, #1
 800ce26:	4a06      	ldr	r2, [pc, #24]	; (800ce40 <vPortFree+0xc0>)
 800ce28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce2a:	f7fe f86b 	bl	800af04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce2e:	bf00      	nop
 800ce30:	3718      	adds	r7, #24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	200020ac 	.word	0x200020ac
 800ce3c:	2000209c 	.word	0x2000209c
 800ce40:	200020a8 	.word	0x200020a8

0800ce44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ce4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce50:	4b27      	ldr	r3, [pc, #156]	; (800cef0 <prvHeapInit+0xac>)
 800ce52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f003 0307 	and.w	r3, r3, #7
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00c      	beq.n	800ce78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	3307      	adds	r3, #7
 800ce62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f023 0307 	bic.w	r3, r3, #7
 800ce6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	4a1f      	ldr	r2, [pc, #124]	; (800cef0 <prvHeapInit+0xac>)
 800ce74:	4413      	add	r3, r2
 800ce76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce7c:	4a1d      	ldr	r2, [pc, #116]	; (800cef4 <prvHeapInit+0xb0>)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce82:	4b1c      	ldr	r3, [pc, #112]	; (800cef4 <prvHeapInit+0xb0>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce90:	2208      	movs	r2, #8
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	1a9b      	subs	r3, r3, r2
 800ce96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f023 0307 	bic.w	r3, r3, #7
 800ce9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	4a15      	ldr	r2, [pc, #84]	; (800cef8 <prvHeapInit+0xb4>)
 800cea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cea6:	4b14      	ldr	r3, [pc, #80]	; (800cef8 <prvHeapInit+0xb4>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ceae:	4b12      	ldr	r3, [pc, #72]	; (800cef8 <prvHeapInit+0xb4>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	1ad2      	subs	r2, r2, r3
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cec4:	4b0c      	ldr	r3, [pc, #48]	; (800cef8 <prvHeapInit+0xb4>)
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	4a0a      	ldr	r2, [pc, #40]	; (800cefc <prvHeapInit+0xb8>)
 800ced2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	4a09      	ldr	r2, [pc, #36]	; (800cf00 <prvHeapInit+0xbc>)
 800ceda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cedc:	4b09      	ldr	r3, [pc, #36]	; (800cf04 <prvHeapInit+0xc0>)
 800cede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cee2:	601a      	str	r2, [r3, #0]
}
 800cee4:	bf00      	nop
 800cee6:	3714      	adds	r7, #20
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr
 800cef0:	20001490 	.word	0x20001490
 800cef4:	20002090 	.word	0x20002090
 800cef8:	20002098 	.word	0x20002098
 800cefc:	200020a0 	.word	0x200020a0
 800cf00:	2000209c 	.word	0x2000209c
 800cf04:	200020ac 	.word	0x200020ac

0800cf08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf10:	4b28      	ldr	r3, [pc, #160]	; (800cfb4 <prvInsertBlockIntoFreeList+0xac>)
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	e002      	b.n	800cf1c <prvInsertBlockIntoFreeList+0x14>
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	60fb      	str	r3, [r7, #12]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d8f7      	bhi.n	800cf16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	4413      	add	r3, r2
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d108      	bne.n	800cf4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	685a      	ldr	r2, [r3, #4]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	441a      	add	r2, r3
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	441a      	add	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d118      	bne.n	800cf90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	4b15      	ldr	r3, [pc, #84]	; (800cfb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d00d      	beq.n	800cf86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	441a      	add	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	e008      	b.n	800cf98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf86:	4b0c      	ldr	r3, [pc, #48]	; (800cfb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	e003      	b.n	800cf98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d002      	beq.n	800cfa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfa6:	bf00      	nop
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	20002090 	.word	0x20002090
 800cfb8:	20002098 	.word	0x20002098

0800cfbc <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cfce:	4619      	mov	r1, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	78fa      	ldrb	r2, [r7, #3]
 800cfd4:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cfdc:	3301      	adds	r3, #1
 800cfde:	425a      	negs	r2, r3
 800cfe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfe4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cfe8:	bf58      	it	pl
 800cfea:	4253      	negpl	r3, r2
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800cffa:	2b80      	cmp	r3, #128	; 0x80
 800cffc:	d113      	bne.n	800d026 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d00c:	3301      	adds	r3, #1
 800d00e:	425a      	negs	r2, r3
 800d010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d014:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d018:	bf58      	it	pl
 800d01a:	4253      	negpl	r3, r2
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800d024:	e00b      	b.n	800d03e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d034:	3301      	adds	r3, #1
 800d036:	b2da      	uxtb	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800d03e:	bf00      	nop
 800d040:	370c      	adds	r7, #12
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b082      	sub	sp, #8
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
 800d052:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d05a:	461a      	mov	r2, r3
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 f805 	bl	800d06e <RingGetNBytes>
 800d064:	4603      	mov	r3, r0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3708      	adds	r7, #8
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b086      	sub	sp, #24
 800d072:	af00      	add	r7, sp, #0
 800d074:	60f8      	str	r0, [r7, #12]
 800d076:	60b9      	str	r1, [r7, #8]
 800d078:	4613      	mov	r3, r2
 800d07a:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d082:	2b00      	cmp	r3, #0
 800d084:	d002      	beq.n	800d08c <RingGetNBytes+0x1e>
 800d086:	79fb      	ldrb	r3, [r7, #7]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <RingGetNBytes+0x22>
 800d08c:	2300      	movs	r3, #0
 800d08e:	e03e      	b.n	800d10e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	2b80      	cmp	r3, #128	; 0x80
 800d094:	d901      	bls.n	800d09a <RingGetNBytes+0x2c>
 800d096:	2300      	movs	r3, #0
 800d098:	e039      	b.n	800d10e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d09a:	2300      	movs	r3, #0
 800d09c:	75fb      	strb	r3, [r7, #23]
 800d09e:	e01b      	b.n	800d0d8 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	7dfb      	ldrb	r3, [r7, #23]
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	5c52      	ldrb	r2, [r2, r1]
 800d0b2:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	425a      	negs	r2, r3
 800d0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d0c6:	bf58      	it	pl
 800d0c8:	4253      	negpl	r3, r2
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d0d2:	7dfb      	ldrb	r3, [r7, #23]
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	75fb      	strb	r3, [r7, #23]
 800d0d8:	7dfa      	ldrb	r2, [r7, #23]
 800d0da:	79fb      	ldrb	r3, [r7, #7]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d205      	bcs.n	800d0ec <RingGetNBytes+0x7e>
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d0e6:	7dfa      	ldrb	r2, [r7, #23]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d3d9      	bcc.n	800d0a0 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800d0f2:	7dfb      	ldrb	r3, [r7, #23]
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	b2da      	uxtb	r2, r3
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f000 f805 	bl	800d116 <RingClear>

	return uCounter;
 800d10c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3718      	adds	r7, #24
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800d116:	b480      	push	{r7}
 800d118:	b083      	sub	sp, #12
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800d13e:	bf00      	nop
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
	...

0800d14c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af02      	add	r7, sp, #8
 800d152:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800d154:	4b42      	ldr	r3, [pc, #264]	; (800d260 <ModbusInit+0x114>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d87d      	bhi.n	800d258 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	33bc      	adds	r3, #188	; 0xbc
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff ffd8 	bl	800d116 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d109      	bne.n	800d182 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800d16e:	4a3d      	ldr	r2, [pc, #244]	; (800d264 <ModbusInit+0x118>)
 800d170:	6879      	ldr	r1, [r7, #4]
 800d172:	483d      	ldr	r0, [pc, #244]	; (800d268 <ModbusInit+0x11c>)
 800d174:	f7fc f812 	bl	800919c <osThreadNew>
 800d178:	4602      	mov	r2, r0
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800d180:	e033      	b.n	800d1ea <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	2b04      	cmp	r3, #4
 800d188:	d12e      	bne.n	800d1e8 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800d18a:	4a38      	ldr	r2, [pc, #224]	; (800d26c <ModbusInit+0x120>)
 800d18c:	6879      	ldr	r1, [r7, #4]
 800d18e:	4838      	ldr	r0, [pc, #224]	; (800d270 <ModbusInit+0x124>)
 800d190:	f7fc f804 	bl	800919c <osThreadNew>
 800d194:	4602      	mov	r2, r0
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d1a2:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d1aa:	4a32      	ldr	r2, [pc, #200]	; (800d274 <ModbusInit+0x128>)
 800d1ac:	9200      	str	r2, [sp, #0]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	4831      	ldr	r0, [pc, #196]	; (800d278 <ModbusInit+0x12c>)
 800d1b2:	f7fe ff45 	bl	800c040 <xTimerCreate>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d100      	bne.n	800d1ca <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800d1c8:	e7fe      	b.n	800d1c8 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800d1ca:	4a2c      	ldr	r2, [pc, #176]	; (800d27c <ModbusInit+0x130>)
 800d1cc:	2110      	movs	r1, #16
 800d1ce:	2002      	movs	r0, #2
 800d1d0:	f7fc fa03 	bl	80095da <osMessageQueueNew>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d101      	bne.n	800d1ea <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800d1e6:	e7fe      	b.n	800d1e6 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800d1e8:	e7fe      	b.n	800d1e8 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d100      	bne.n	800d1f6 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800d1f4:	e7fe      	b.n	800d1f4 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800d1fc:	4a20      	ldr	r2, [pc, #128]	; (800d280 <ModbusInit+0x134>)
 800d1fe:	9200      	str	r2, [sp, #0]
 800d200:	2200      	movs	r2, #0
 800d202:	2105      	movs	r1, #5
 800d204:	481f      	ldr	r0, [pc, #124]	; (800d284 <ModbusInit+0x138>)
 800d206:	f7fe ff1b 	bl	800c040 <xTimerCreate>
 800d20a:	4602      	mov	r2, r0
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d100      	bne.n	800d21e <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800d21c:	e7fe      	b.n	800d21c <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800d21e:	4a1a      	ldr	r2, [pc, #104]	; (800d288 <ModbusInit+0x13c>)
 800d220:	2101      	movs	r1, #1
 800d222:	2001      	movs	r0, #1
 800d224:	f7fc f950 	bl	80094c8 <osSemaphoreNew>
 800d228:	4602      	mov	r2, r0
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d236:	2b00      	cmp	r3, #0
 800d238:	d100      	bne.n	800d23c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800d23a:	e7fe      	b.n	800d23a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800d23c:	4b08      	ldr	r3, [pc, #32]	; (800d260 <ModbusInit+0x114>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	4619      	mov	r1, r3
 800d242:	4a12      	ldr	r2, [pc, #72]	; (800d28c <ModbusInit+0x140>)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800d24a:	4b05      	ldr	r3, [pc, #20]	; (800d260 <ModbusInit+0x114>)
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	3301      	adds	r3, #1
 800d250:	b2da      	uxtb	r2, r3
 800d252:	4b03      	ldr	r3, [pc, #12]	; (800d260 <ModbusInit+0x114>)
 800d254:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800d256:	e000      	b.n	800d25a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800d258:	e7fe      	b.n	800d258 <ModbusInit+0x10c>
}
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	200020b8 	.word	0x200020b8
 800d264:	0800ecc8 	.word	0x0800ecc8
 800d268:	0800d499 	.word	0x0800d499
 800d26c:	0800ecec 	.word	0x0800ecec
 800d270:	0800d90d 	.word	0x0800d90d
 800d274:	0800d43d 	.word	0x0800d43d
 800d278:	0800eb74 	.word	0x0800eb74
 800d27c:	0800ecb0 	.word	0x0800ecb0
 800d280:	0800d3b9 	.word	0x0800d3b9
 800d284:	0800eb84 	.word	0x0800eb84
 800d288:	0800ed10 	.word	0x0800ed10
 800d28c:	200020b0 	.word	0x200020b0

0800d290 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d005      	beq.n	800d2ae <ModbusStart+0x1e>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d2a8:	2b04      	cmp	r3, #4
 800d2aa:	d000      	beq.n	800d2ae <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800d2ac:	e7fe      	b.n	800d2ac <ModbusStart+0x1c>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d004      	beq.n	800d2c2 <ModbusStart+0x32>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d2be:	2b04      	cmp	r3, #4
 800d2c0:	d15c      	bne.n	800d37c <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d007      	beq.n	800d2da <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	68d8      	ldr	r0, [r3, #12]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	8a1b      	ldrh	r3, [r3, #16]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	f7f6 fd97 	bl	8003e08 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2b03      	cmp	r3, #3
 800d2e0:	d105      	bne.n	800d2ee <ModbusStart+0x5e>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d100      	bne.n	800d2ee <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800d2ec:	e7fe      	b.n	800d2ec <ModbusStart+0x5c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800d2ee:	bf00      	nop
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7f9 fe3b 	bl	8006f70 <HAL_UART_GetState>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b20      	cmp	r3, #32
 800d2fe:	d1f7      	bne.n	800d2f0 <ModbusStart+0x60>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d306:	2b04      	cmp	r3, #4
 800d308:	d11a      	bne.n	800d340 <ModbusStart+0xb0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6858      	ldr	r0, [r3, #4]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	33bc      	adds	r3, #188	; 0xbc
 800d312:	2280      	movs	r2, #128	; 0x80
 800d314:	4619      	mov	r1, r3
 800d316:	f7fb fdd4 	bl	8008ec2 <HAL_UARTEx_ReceiveToIdle_DMA>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d000      	beq.n	800d322 <ModbusStart+0x92>
        	   {
        	         while(1)
 800d320:	e7fe      	b.n	800d320 <ModbusStart+0x90>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f022 0204 	bic.w	r2, r2, #4
 800d33c:	601a      	str	r2, [r3, #0]
 800d33e:	e00b      	b.n	800d358 <ModbusStart+0xc8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6858      	ldr	r0, [r3, #4]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	33a6      	adds	r3, #166	; 0xa6
 800d348:	2201      	movs	r2, #1
 800d34a:	4619      	mov	r1, r3
 800d34c:	f7f8 fff6 	bl	800633c <HAL_UART_Receive_IT>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d000      	beq.n	800d358 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800d356:	e7fe      	b.n	800d356 <ModbusStart+0xc6>
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	7a1b      	ldrb	r3, [r3, #8]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d004      	beq.n	800d36a <ModbusStart+0xda>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b04      	cmp	r3, #4
 800d366:	d100      	bne.n	800d36a <ModbusStart+0xda>
          {
        	  while(1)
 800d368:	e7fe      	b.n	800d368 <ModbusStart+0xd8>
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	7a1b      	ldrb	r3, [r3, #8]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d104      	bne.n	800d37c <ModbusStart+0xec>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	2b03      	cmp	r3, #3
 800d378:	d100      	bne.n	800d37c <ModbusStart+0xec>
          {
             	  while(1)
 800d37a:	e7fe      	b.n	800d37a <ModbusStart+0xea>
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b086      	sub	sp, #24
 800d3bc:	af02      	add	r7, sp, #8
 800d3be:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	60fb      	str	r3, [r7, #12]
 800d3c4:	e02a      	b.n	800d41c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800d3c6:	4a1b      	ldr	r2, [pc, #108]	; (800d434 <vTimerCallbackT35+0x7c>)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d11e      	bne.n	800d416 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800d3d8:	4a16      	ldr	r2, [pc, #88]	; (800d434 <vTimerCallbackT35+0x7c>)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2b04      	cmp	r3, #4
 800d3e4:	d10c      	bne.n	800d400 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800d3e6:	4a13      	ldr	r2, [pc, #76]	; (800d434 <vTimerCallbackT35+0x7c>)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3ee:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	2103      	movs	r1, #3
 800d3fc:	f7fe fe7c 	bl	800c0f8 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800d400:	4a0c      	ldr	r2, [pc, #48]	; (800d434 <vTimerCallbackT35+0x7c>)
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d408:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800d40c:	2300      	movs	r3, #0
 800d40e:	2203      	movs	r2, #3
 800d410:	2100      	movs	r1, #0
 800d412:	f7fe fbe5 	bl	800bbe0 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	3301      	adds	r3, #1
 800d41a:	60fb      	str	r3, [r7, #12]
 800d41c:	4b06      	ldr	r3, [pc, #24]	; (800d438 <vTimerCallbackT35+0x80>)
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	461a      	mov	r2, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	4293      	cmp	r3, r2
 800d426:	dbce      	blt.n	800d3c6 <vTimerCallbackT35+0xe>
		}

	}
}
 800d428:	bf00      	nop
 800d42a:	bf00      	nop
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	200020b0 	.word	0x200020b0
 800d438:	200020b8 	.word	0x200020b8

0800d43c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d444:	2300      	movs	r3, #0
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	e017      	b.n	800d47a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800d44a:	4a11      	ldr	r2, [pc, #68]	; (800d490 <vTimerCallbackTimeout+0x54>)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d452:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d10b      	bne.n	800d474 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800d45c:	4a0c      	ldr	r2, [pc, #48]	; (800d490 <vTimerCallbackTimeout+0x54>)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d464:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800d468:	2300      	movs	r3, #0
 800d46a:	2203      	movs	r2, #3
 800d46c:	f06f 0107 	mvn.w	r1, #7
 800d470:	f7fe fbb6 	bl	800bbe0 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	3301      	adds	r3, #1
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	4b06      	ldr	r3, [pc, #24]	; (800d494 <vTimerCallbackTimeout+0x58>)
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	461a      	mov	r2, r3
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	4293      	cmp	r3, r2
 800d484:	dbe1      	blt.n	800d44a <vTimerCallbackTimeout+0xe>
		}

	}

}
 800d486:	bf00      	nop
 800d488:	bf00      	nop
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	200020b0 	.word	0x200020b0
 800d494:	200020b8 	.word	0x200020b8

0800d498 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d004      	beq.n	800d4be <StartTaskModbusSlave+0x26>
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d4ba:	2b04      	cmp	r3, #4
 800d4bc:	d117      	bne.n	800d4ee <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800d4be:	f04f 31ff 	mov.w	r1, #4294967295
 800d4c2:	2001      	movs	r0, #1
 800d4c4:	f7fe fb44 	bl	800bb50 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f000 fbed 	bl	800dca8 <getRxBuffer>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	f113 0f03 	cmn.w	r3, #3
 800d4d4:	d10b      	bne.n	800d4ee <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	22fd      	movs	r2, #253	; 0xfd
 800d4da:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 800d4ec:	e0a1      	b.n	800d632 <StartTaskModbusSlave+0x19a>
	  }
   }

   if (modH->u8BufferSize < 7)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d4f4:	2b06      	cmp	r3, #6
 800d4f6:	d80b      	bhi.n	800d510 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	22fa      	movs	r2, #250	; 0xfa
 800d4fc:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d504:	3301      	adds	r3, #1
 800d506:	b29a      	uxth	r2, r3
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 800d50e:	e090      	b.n	800d632 <StartTaskModbusSlave+0x19a>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	7cda      	ldrb	r2, [r3, #19]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	7a1b      	ldrb	r3, [r3, #8]
 800d518:	429a      	cmp	r2, r3
 800d51a:	f040 8089 	bne.w	800d630 <StartTaskModbusSlave+0x198>
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	f000 fc0c 	bl	800dd3c <validateRequest>
 800d524:	4603      	mov	r3, r0
 800d526:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800d528:	7afb      	ldrb	r3, [r7, #11]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00c      	beq.n	800d548 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800d52e:	7afb      	ldrb	r3, [r7, #11]
 800d530:	68f9      	ldr	r1, [r7, #12]
 800d532:	4618      	mov	r0, r3
 800d534:	f000 fda6 	bl	800e084 <buildException>
			sendTxBuffer(modH);
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f000 fdc2 	bl	800e0c2 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800d53e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800d546:	e074      	b.n	800d632 <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2200      	movs	r2, #0
 800d54c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d554:	f04f 31ff 	mov.w	r1, #4294967295
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fc ffa9 	bl	800a4b0 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	7d1b      	ldrb	r3, [r3, #20]
 800d562:	3b01      	subs	r3, #1
 800d564:	2b0f      	cmp	r3, #15
 800d566:	d859      	bhi.n	800d61c <StartTaskModbusSlave+0x184>
 800d568:	a201      	add	r2, pc, #4	; (adr r2, 800d570 <StartTaskModbusSlave+0xd8>)
 800d56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d56e:	bf00      	nop
 800d570:	0800d5b1 	.word	0x0800d5b1
 800d574:	0800d5b1 	.word	0x0800d5b1
 800d578:	0800d5c3 	.word	0x0800d5c3
 800d57c:	0800d5c3 	.word	0x0800d5c3
 800d580:	0800d5d5 	.word	0x0800d5d5
 800d584:	0800d5e7 	.word	0x0800d5e7
 800d588:	0800d61d 	.word	0x0800d61d
 800d58c:	0800d61d 	.word	0x0800d61d
 800d590:	0800d61d 	.word	0x0800d61d
 800d594:	0800d61d 	.word	0x0800d61d
 800d598:	0800d61d 	.word	0x0800d61d
 800d59c:	0800d61d 	.word	0x0800d61d
 800d5a0:	0800d61d 	.word	0x0800d61d
 800d5a4:	0800d61d 	.word	0x0800d61d
 800d5a8:	0800d5f9 	.word	0x0800d5f9
 800d5ac:	0800d60b 	.word	0x0800d60b
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f000 fe28 	bl	800e206 <process_FC1>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d5c0:	e02d      	b.n	800d61e <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f000 fed4 	bl	800e370 <process_FC3>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d5d2:	e024      	b.n	800d61e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f000 ff36 	bl	800e446 <process_FC5>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	461a      	mov	r2, r3
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d5e4:	e01b      	b.n	800d61e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f000 ff86 	bl	800e4f8 <process_FC6>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d5f6:	e012      	b.n	800d61e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f000 ffaf 	bl	800e55c <process_FC15>
 800d5fe:	4603      	mov	r3, r0
 800d600:	461a      	mov	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d608:	e009      	b.n	800d61e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800d60a:	68f8      	ldr	r0, [r7, #12]
 800d60c:	f001 f834 	bl	800e678 <process_FC16>
 800d610:	4603      	mov	r3, r0
 800d612:	461a      	mov	r2, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d61a:	e000      	b.n	800d61e <StartTaskModbusSlave+0x186>
			default:
				break;
 800d61c:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d624:	2300      	movs	r3, #0
 800d626:	2200      	movs	r2, #0
 800d628:	2100      	movs	r1, #0
 800d62a:	f7fc fcc7 	bl	8009fbc <xQueueGenericSend>

	 continue;
 800d62e:	e000      	b.n	800d632 <StartTaskModbusSlave+0x19a>
    	continue;
 800d630:	bf00      	nop
  {
 800d632:	e737      	b.n	800d4a4 <StartTaskModbusSlave+0xc>

0800d634 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 800d634:	b084      	sub	sp, #16
 800d636:	b580      	push	{r7, lr}
 800d638:	b084      	sub	sp, #16
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
 800d63e:	f107 001c 	add.w	r0, r7, #28
 800d642:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d650:	f04f 31ff 	mov.w	r1, #4294967295
 800d654:	4618      	mov	r0, r3
 800d656:	f7fc ff2b 	bl	800a4b0 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	7a1b      	ldrb	r3, [r3, #8]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <SendQuery+0x32>
 800d662:	23ff      	movs	r3, #255	; 0xff
 800d664:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d001      	beq.n	800d674 <SendQuery+0x40>
 800d670:	23fe      	movs	r3, #254	; 0xfe
 800d672:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800d674:	7f3b      	ldrb	r3, [r7, #28]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d002      	beq.n	800d680 <SendQuery+0x4c>
 800d67a:	7f3b      	ldrb	r3, [r7, #28]
 800d67c:	2bf7      	cmp	r3, #247	; 0xf7
 800d67e:	d901      	bls.n	800d684 <SendQuery+0x50>
 800d680:	23f7      	movs	r3, #247	; 0xf7
 800d682:	73bb      	strb	r3, [r7, #14]


	if(error)
 800d684:	7bbb      	ldrb	r3, [r7, #14]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00e      	beq.n	800d6a8 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800d68a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d698:	2300      	movs	r3, #0
 800d69a:	2200      	movs	r2, #0
 800d69c:	2100      	movs	r1, #0
 800d69e:	f7fc fc8d 	bl	8009fbc <xQueueGenericSend>
		 return error;
 800d6a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6a6:	e129      	b.n	800d8fc <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 800d6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800d6b0:	7f3a      	ldrb	r2, [r7, #28]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800d6b6:	7f7a      	ldrb	r2, [r7, #29]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800d6bc:	8bfb      	ldrh	r3, [r7, #30]
 800d6be:	0a1b      	lsrs	r3, r3, #8
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800d6c8:	8bfb      	ldrh	r3, [r7, #30]
 800d6ca:	b2da      	uxtb	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800d6d0:	7f7b      	ldrb	r3, [r7, #29]
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	2b0f      	cmp	r3, #15
 800d6d6:	f200 80fe 	bhi.w	800d8d6 <SendQuery+0x2a2>
 800d6da:	a201      	add	r2, pc, #4	; (adr r2, 800d6e0 <SendQuery+0xac>)
 800d6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e0:	0800d721 	.word	0x0800d721
 800d6e4:	0800d721 	.word	0x0800d721
 800d6e8:	0800d721 	.word	0x0800d721
 800d6ec:	0800d721 	.word	0x0800d721
 800d6f0:	0800d73f 	.word	0x0800d73f
 800d6f4:	0800d761 	.word	0x0800d761
 800d6f8:	0800d8d7 	.word	0x0800d8d7
 800d6fc:	0800d8d7 	.word	0x0800d8d7
 800d700:	0800d8d7 	.word	0x0800d8d7
 800d704:	0800d8d7 	.word	0x0800d8d7
 800d708:	0800d8d7 	.word	0x0800d8d7
 800d70c:	0800d8d7 	.word	0x0800d8d7
 800d710:	0800d8d7 	.word	0x0800d8d7
 800d714:	0800d8d7 	.word	0x0800d8d7
 800d718:	0800d783 	.word	0x0800d783
 800d71c:	0800d841 	.word	0x0800d841
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800d720:	8c3b      	ldrh	r3, [r7, #32]
 800d722:	0a1b      	lsrs	r3, r3, #8
 800d724:	b29b      	uxth	r3, r3
 800d726:	b2da      	uxtb	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800d72c:	8c3b      	ldrh	r3, [r7, #32]
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2206      	movs	r2, #6
 800d738:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800d73c:	e0cb      	b.n	800d8d6 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d740:	881b      	ldrh	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <SendQuery+0x116>
 800d746:	22ff      	movs	r2, #255	; 0xff
 800d748:	e000      	b.n	800d74c <SendQuery+0x118>
 800d74a:	2200      	movs	r2, #0
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2200      	movs	r2, #0
 800d754:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2206      	movs	r2, #6
 800d75a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800d75e:	e0ba      	b.n	800d8d6 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	881b      	ldrh	r3, [r3, #0]
 800d764:	0a1b      	lsrs	r3, r3, #8
 800d766:	b29b      	uxth	r3, r3
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	881b      	ldrh	r3, [r3, #0]
 800d772:	b2da      	uxtb	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2206      	movs	r2, #6
 800d77c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800d780:	e0a9      	b.n	800d8d6 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800d782:	8c3b      	ldrh	r3, [r7, #32]
 800d784:	091b      	lsrs	r3, r3, #4
 800d786:	b29b      	uxth	r3, r3
 800d788:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800d78a:	7a7b      	ldrb	r3, [r7, #9]
 800d78c:	005b      	lsls	r3, r3, #1
 800d78e:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800d790:	8c3b      	ldrh	r3, [r7, #32]
 800d792:	f003 030f 	and.w	r3, r3, #15
 800d796:	b29b      	uxth	r3, r3
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d005      	beq.n	800d7a8 <SendQuery+0x174>
	    {
	        u8bytesno++;
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800d7a2:	7a7b      	ldrb	r3, [r7, #9]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800d7a8:	8c3b      	ldrh	r3, [r7, #32]
 800d7aa:	0a1b      	lsrs	r3, r3, #8
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800d7b4:	8c3b      	ldrh	r3, [r7, #32]
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	7bfa      	ldrb	r2, [r7, #15]
 800d7c0:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2207      	movs	r2, #7
 800d7c6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	81bb      	strh	r3, [r7, #12]
 800d7ce:	e031      	b.n	800d834 <SendQuery+0x200>
	    {
	        if(i%2)
 800d7d0:	89bb      	ldrh	r3, [r7, #12]
 800d7d2:	f003 0301 	and.w	r3, r3, #1
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00f      	beq.n	800d7fc <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800d7dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7de:	89bb      	ldrh	r3, [r7, #12]
 800d7e0:	085b      	lsrs	r3, r3, #1
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	005b      	lsls	r3, r3, #1
 800d7e6:	4413      	add	r3, r2
 800d7e8:	881a      	ldrh	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	b2d2      	uxtb	r2, r2
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	440b      	add	r3, r1
 800d7f8:	74da      	strb	r2, [r3, #19]
 800d7fa:	e010      	b.n	800d81e <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800d7fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7fe:	89bb      	ldrh	r3, [r7, #12]
 800d800:	085b      	lsrs	r3, r3, #1
 800d802:	b29b      	uxth	r3, r3
 800d804:	005b      	lsls	r3, r3, #1
 800d806:	4413      	add	r3, r2
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	0a1b      	lsrs	r3, r3, #8
 800d80c:	b29a      	uxth	r2, r3
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d814:	4619      	mov	r1, r3
 800d816:	b2d2      	uxtb	r2, r2
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	440b      	add	r3, r1
 800d81c:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d824:	3301      	adds	r3, #1
 800d826:	b2da      	uxtb	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800d82e:	89bb      	ldrh	r3, [r7, #12]
 800d830:	3301      	adds	r3, #1
 800d832:	81bb      	strh	r3, [r7, #12]
 800d834:	7bfb      	ldrb	r3, [r7, #15]
 800d836:	b29b      	uxth	r3, r3
 800d838:	89ba      	ldrh	r2, [r7, #12]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d3c8      	bcc.n	800d7d0 <SendQuery+0x19c>
	    }
	    break;
 800d83e:	e04a      	b.n	800d8d6 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800d840:	8c3b      	ldrh	r3, [r7, #32]
 800d842:	0a1b      	lsrs	r3, r3, #8
 800d844:	b29b      	uxth	r3, r3
 800d846:	b2da      	uxtb	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800d84c:	8c3b      	ldrh	r3, [r7, #32]
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800d854:	8c3b      	ldrh	r3, [r7, #32]
 800d856:	b2db      	uxtb	r3, r3
 800d858:	005b      	lsls	r3, r3, #1
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2207      	movs	r2, #7
 800d864:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800d868:	2300      	movs	r3, #0
 800d86a:	817b      	strh	r3, [r7, #10]
 800d86c:	e02e      	b.n	800d8cc <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800d86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d870:	897b      	ldrh	r3, [r7, #10]
 800d872:	005b      	lsls	r3, r3, #1
 800d874:	4413      	add	r3, r2
 800d876:	881b      	ldrh	r3, [r3, #0]
 800d878:	0a1b      	lsrs	r3, r3, #8
 800d87a:	b29a      	uxth	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d882:	4619      	mov	r1, r3
 800d884:	b2d2      	uxtb	r2, r2
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	440b      	add	r3, r1
 800d88a:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d892:	3301      	adds	r3, #1
 800d894:	b2da      	uxtb	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800d89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d89e:	897b      	ldrh	r3, [r7, #10]
 800d8a0:	005b      	lsls	r3, r3, #1
 800d8a2:	4413      	add	r3, r2
 800d8a4:	881a      	ldrh	r2, [r3, #0]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	b2d2      	uxtb	r2, r2
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	440b      	add	r3, r1
 800d8b4:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d8bc:	3301      	adds	r3, #1
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800d8c6:	897b      	ldrh	r3, [r7, #10]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	817b      	strh	r3, [r7, #10]
 800d8cc:	8c3b      	ldrh	r3, [r7, #32]
 800d8ce:	897a      	ldrh	r2, [r7, #10]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d3cc      	bcc.n	800d86e <SendQuery+0x23a>
	    }
	    break;
 800d8d4:	bf00      	nop
	}


	sendTxBuffer(modH);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fbf3 	bl	800e0c2 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	f7fc fb68 	bl	8009fbc <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	749a      	strb	r2, [r3, #18]
	return 0;
 800d8fa:	2300      	movs	r3, #0


}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3710      	adds	r7, #16
 800d900:	46bd      	mov	sp, r7
 800d902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d906:	b004      	add	sp, #16
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop

0800d90c <StartTaskModbusMaster>:


void StartTaskModbusMaster(void *argument)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b08c      	sub	sp, #48	; 0x30
 800d910:	af02      	add	r7, sp, #8
 800d912:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800d918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d91e:	f107 010c 	add.w	r1, r7, #12
 800d922:	f04f 32ff 	mov.w	r2, #4294967295
 800d926:	4618      	mov	r0, r3
 800d928:	f7fc fce2 	bl	800a2f0 <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	f107 030c 	add.w	r3, r7, #12
 800d934:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d938:	f7ff fe7c 	bl	800d634 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800d93c:	f04f 31ff 	mov.w	r1, #4294967295
 800d940:	2001      	movs	r0, #1
 800d942:	f7fe f905 	bl	800bb50 <ulTaskNotifyTake>
 800d946:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94a:	2200      	movs	r2, #0
 800d94c:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800d94e:	6a3b      	ldr	r3, [r7, #32]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d018      	beq.n	800d986 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	2200      	movs	r2, #0
 800d958:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 800d95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95e:	22f8      	movs	r2, #248	; 0xf8
 800d960:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800d962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d964:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d968:	3301      	adds	r3, #1
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800d972:	69b8      	ldr	r0, [r7, #24]
 800d974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d976:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800d97a:	4619      	mov	r1, r3
 800d97c:	2300      	movs	r3, #0
 800d97e:	2203      	movs	r2, #3
 800d980:	f7fe f92e 	bl	800bbe0 <xTaskGenericNotify>
    	  continue;
 800d984:	e09a      	b.n	800dabc <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800d986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d988:	f000 f98e 	bl	800dca8 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d992:	2b05      	cmp	r3, #5
 800d994:	d818      	bhi.n	800d9c8 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800d996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 800d99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a0:	22fa      	movs	r2, #250	; 0xfa
 800d9a2:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800d9b4:	69b8      	ldr	r0, [r7, #24]
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800d9bc:	4619      	mov	r1, r3
 800d9be:	2300      	movs	r3, #0
 800d9c0:	2203      	movs	r2, #3
 800d9c2:	f7fe f90d 	bl	800bbe0 <xTaskGenericNotify>
		  continue;
 800d9c6:	e079      	b.n	800dabc <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2103      	movs	r1, #3
 800d9d8:	f7fe fb8e 	bl	800c0f8 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800d9dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9de:	f000 f8f5 	bl	800dbcc <validateAnswer>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800d9e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d010      	beq.n	800da10 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	7ffa      	ldrb	r2, [r7, #31]
 800d9fa:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800d9fc:	69b8      	ldr	r0, [r7, #24]
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800da04:	4619      	mov	r1, r3
 800da06:	2300      	movs	r3, #0
 800da08:	2203      	movs	r2, #3
 800da0a:	f7fe f8e9 	bl	800bbe0 <xTaskGenericNotify>
	     continue;
 800da0e:	e055      	b.n	800dabc <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	7ffa      	ldrb	r2, [r7, #31]
 800da14:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800da16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800da1c:	f04f 31ff 	mov.w	r1, #4294967295
 800da20:	4618      	mov	r0, r3
 800da22:	f7fc fd45 	bl	800a4b0 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	7d1b      	ldrb	r3, [r3, #20]
 800da2a:	3b01      	subs	r3, #1
 800da2c:	2b0f      	cmp	r3, #15
 800da2e:	d82b      	bhi.n	800da88 <StartTaskModbusMaster+0x17c>
 800da30:	a201      	add	r2, pc, #4	; (adr r2, 800da38 <StartTaskModbusMaster+0x12c>)
 800da32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da36:	bf00      	nop
 800da38:	0800da79 	.word	0x0800da79
 800da3c:	0800da79 	.word	0x0800da79
 800da40:	0800da81 	.word	0x0800da81
 800da44:	0800da81 	.word	0x0800da81
 800da48:	0800da89 	.word	0x0800da89
 800da4c:	0800da89 	.word	0x0800da89
 800da50:	0800da89 	.word	0x0800da89
 800da54:	0800da89 	.word	0x0800da89
 800da58:	0800da89 	.word	0x0800da89
 800da5c:	0800da89 	.word	0x0800da89
 800da60:	0800da89 	.word	0x0800da89
 800da64:	0800da89 	.word	0x0800da89
 800da68:	0800da89 	.word	0x0800da89
 800da6c:	0800da89 	.word	0x0800da89
 800da70:	0800da89 	.word	0x0800da89
 800da74:	0800da89 	.word	0x0800da89
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 800da78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da7a:	f000 f821 	bl	800dac0 <get_FC1>
	      break;
 800da7e:	e004      	b.n	800da8a <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800da80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da82:	f000 f874 	bl	800db6e <get_FC3>
	      break;
 800da86:	e000      	b.n	800da8a <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 800da88:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800da8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8c:	2200      	movs	r2, #0
 800da8e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800da92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da94:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10e      	bne.n	800daba <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800daa2:	2300      	movs	r3, #0
 800daa4:	2200      	movs	r2, #0
 800daa6:	2100      	movs	r1, #0
 800daa8:	f7fc fa88 	bl	8009fbc <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800daac:	69b8      	ldr	r0, [r7, #24]
 800daae:	2300      	movs	r3, #0
 800dab0:	2203      	movs	r2, #3
 800dab2:	f06f 010a 	mvn.w	r1, #10
 800dab6:	f7fe f893 	bl	800bbe0 <xTaskGenericNotify>
	  }


	  continue;
 800daba:	bf00      	nop
  {
 800dabc:	e72c      	b.n	800d918 <StartTaskModbusMaster+0xc>
 800dabe:	bf00      	nop

0800dac0 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800dac0:	b590      	push	{r4, r7, lr}
 800dac2:	b085      	sub	sp, #20
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800dac8:	2303      	movs	r3, #3
 800daca:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800dacc:	2300      	movs	r3, #0
 800dace:	73fb      	strb	r3, [r7, #15]
 800dad0:	e043      	b.n	800db5a <get_FC1+0x9a>

        if(i%2)
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
 800dad4:	f003 0301 	and.w	r3, r3, #1
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d01c      	beq.n	800db18 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 800dade:	7bfa      	ldrb	r2, [r7, #15]
 800dae0:	7bbb      	ldrb	r3, [r7, #14]
 800dae2:	4413      	add	r3, r2
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	4413      	add	r3, r2
 800dae8:	7cd8      	ldrb	r0, [r3, #19]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
 800daf2:	085b      	lsrs	r3, r3, #1
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	005b      	lsls	r3, r3, #1
 800daf8:	4413      	add	r3, r2
 800dafa:	881b      	ldrh	r3, [r3, #0]
 800dafc:	b2d9      	uxtb	r1, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db04:	7bfb      	ldrb	r3, [r7, #15]
 800db06:	085b      	lsrs	r3, r3, #1
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	005b      	lsls	r3, r3, #1
 800db0c:	18d4      	adds	r4, r2, r3
 800db0e:	f000 fa5f 	bl	800dfd0 <word>
 800db12:	4603      	mov	r3, r0
 800db14:	8023      	strh	r3, [r4, #0]
 800db16:	e01d      	b.n	800db54 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
 800db20:	085b      	lsrs	r3, r3, #1
 800db22:	b2db      	uxtb	r3, r3
 800db24:	005b      	lsls	r3, r3, #1
 800db26:	4413      	add	r3, r2
 800db28:	881b      	ldrh	r3, [r3, #0]
 800db2a:	0a1b      	lsrs	r3, r3, #8
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	b2d8      	uxtb	r0, r3
 800db30:	7bfa      	ldrb	r2, [r7, #15]
 800db32:	7bbb      	ldrb	r3, [r7, #14]
 800db34:	4413      	add	r3, r2
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	4413      	add	r3, r2
 800db3a:	7cd9      	ldrb	r1, [r3, #19]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db42:	7bfb      	ldrb	r3, [r7, #15]
 800db44:	085b      	lsrs	r3, r3, #1
 800db46:	b2db      	uxtb	r3, r3
 800db48:	005b      	lsls	r3, r3, #1
 800db4a:	18d4      	adds	r4, r2, r3
 800db4c:	f000 fa40 	bl	800dfd0 <word>
 800db50:	4603      	mov	r3, r0
 800db52:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800db54:	7bfb      	ldrb	r3, [r7, #15]
 800db56:	3301      	adds	r3, #1
 800db58:	73fb      	strb	r3, [r7, #15]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	7d5b      	ldrb	r3, [r3, #21]
 800db5e:	7bfa      	ldrb	r2, [r7, #15]
 800db60:	429a      	cmp	r2, r3
 800db62:	d3b6      	bcc.n	800dad2 <get_FC1+0x12>
        }

     }
}
 800db64:	bf00      	nop
 800db66:	bf00      	nop
 800db68:	3714      	adds	r7, #20
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd90      	pop	{r4, r7, pc}

0800db6e <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800db6e:	b590      	push	{r4, r7, lr}
 800db70:	b085      	sub	sp, #20
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800db76:	2303      	movs	r3, #3
 800db78:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800db7a:	2300      	movs	r3, #0
 800db7c:	73bb      	strb	r3, [r7, #14]
 800db7e:	e018      	b.n	800dbb2 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800db80:	7bfb      	ldrb	r3, [r7, #15]
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	4413      	add	r3, r2
 800db86:	7cd8      	ldrb	r0, [r3, #19]
 800db88:	7bfb      	ldrb	r3, [r7, #15]
 800db8a:	3301      	adds	r3, #1
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	4413      	add	r3, r2
 800db90:	7cd9      	ldrb	r1, [r3, #19]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800db98:	7bbb      	ldrb	r3, [r7, #14]
 800db9a:	005b      	lsls	r3, r3, #1
 800db9c:	18d4      	adds	r4, r2, r3
 800db9e:	f000 fa17 	bl	800dfd0 <word>
 800dba2:	4603      	mov	r3, r0
 800dba4:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800dba6:	7bfb      	ldrb	r3, [r7, #15]
 800dba8:	3302      	adds	r3, #2
 800dbaa:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800dbac:	7bbb      	ldrb	r3, [r7, #14]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	73bb      	strb	r3, [r7, #14]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	7d5b      	ldrb	r3, [r3, #21]
 800dbb6:	085b      	lsrs	r3, r3, #1
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	7bba      	ldrb	r2, [r7, #14]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d3df      	bcc.n	800db80 <get_FC3+0x12>
    }
}
 800dbc0:	bf00      	nop
 800dbc2:	bf00      	nop
 800dbc4:	3714      	adds	r7, #20
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd90      	pop	{r4, r7, pc}
	...

0800dbcc <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbda:	3b02      	subs	r3, #2
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	4413      	add	r3, r2
 800dbe0:	7cdb      	ldrb	r3, [r3, #19]
 800dbe2:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800dbe4:	b21a      	sxth	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbec:	3b01      	subs	r3, #1
 800dbee:	6879      	ldr	r1, [r7, #4]
 800dbf0:	440b      	add	r3, r1
 800dbf2:	7cdb      	ldrb	r3, [r3, #19]
 800dbf4:	b21b      	sxth	r3, r3
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800dbfa:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f103 0213 	add.w	r2, r3, #19
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc08:	3b02      	subs	r3, #2
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	4610      	mov	r0, r2
 800dc10:	f000 f9f1 	bl	800dff6 <calcCRC>
 800dc14:	4603      	mov	r3, r0
 800dc16:	461a      	mov	r2, r3
 800dc18:	89bb      	ldrh	r3, [r7, #12]
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d009      	beq.n	800dc32 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800dc24:	3301      	adds	r3, #1
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 800dc2e:	23fc      	movs	r3, #252	; 0xfc
 800dc30:	e034      	b.n	800dc9c <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	7d1b      	ldrb	r3, [r3, #20]
 800dc36:	b25b      	sxtb	r3, r3
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	da09      	bge.n	800dc50 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800dc42:	3301      	adds	r3, #1
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 800dc4c:	23fb      	movs	r3, #251	; 0xfb
 800dc4e:	e025      	b.n	800dc9c <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 800dc50:	2300      	movs	r3, #0
 800dc52:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800dc54:	2300      	movs	r3, #0
 800dc56:	73bb      	strb	r3, [r7, #14]
 800dc58:	e00c      	b.n	800dc74 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800dc5a:	7bbb      	ldrb	r3, [r7, #14]
 800dc5c:	4a11      	ldr	r2, [pc, #68]	; (800dca4 <validateAnswer+0xd8>)
 800dc5e:	5cd2      	ldrb	r2, [r2, r3]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	7d1b      	ldrb	r3, [r3, #20]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d102      	bne.n	800dc6e <validateAnswer+0xa2>
        {
            isSupported = 1;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	73fb      	strb	r3, [r7, #15]
            break;
 800dc6c:	e005      	b.n	800dc7a <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800dc6e:	7bbb      	ldrb	r3, [r7, #14]
 800dc70:	3301      	adds	r3, #1
 800dc72:	73bb      	strb	r3, [r7, #14]
 800dc74:	7bbb      	ldrb	r3, [r7, #14]
 800dc76:	2b07      	cmp	r3, #7
 800dc78:	d9ef      	bls.n	800dc5a <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800dc7a:	7bfb      	ldrb	r3, [r7, #15]
 800dc7c:	f083 0301 	eor.w	r3, r3, #1
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d009      	beq.n	800dc9a <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 800dc96:	2301      	movs	r3, #1
 800dc98:	e000      	b.n	800dc9c <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3710      	adds	r7, #16
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	0800ed20 	.word	0x0800ed20

0800dca8 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d104      	bne.n	800dcc4 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7f8 fc9e 	bl	8006600 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d008      	beq.n	800dce0 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	33bc      	adds	r3, #188	; 0xbc
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff fa1f 	bl	800d116 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800dcd8:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800dcdc:	81fb      	strh	r3, [r7, #14]
 800dcde:	e019      	b.n	800dd14 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	3313      	adds	r3, #19
 800dcea:	4619      	mov	r1, r3
 800dcec:	4610      	mov	r0, r2
 800dcee:	f7ff f9ac 	bl	800d04a <RingGetAllBytes>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800dd02:	3301      	adds	r3, #1
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd12:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d107      	bne.n	800dd2e <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6858      	ldr	r0, [r3, #4]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	33a6      	adds	r3, #166	; 0xa6
 800dd26:	2201      	movs	r2, #1
 800dd28:	4619      	mov	r1, r3
 800dd2a:	f7f8 fb07 	bl	800633c <HAL_UART_Receive_IT>
	}

    return i16result;
 800dd2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
	...

0800dd3c <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd4a:	3b02      	subs	r3, #2
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	4413      	add	r3, r2
 800dd50:	7cdb      	ldrb	r3, [r3, #19]
 800dd52:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800dd54:	b21a      	sxth	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	6879      	ldr	r1, [r7, #4]
 800dd60:	440b      	add	r3, r1
 800dd62:	7cdb      	ldrb	r3, [r3, #19]
 800dd64:	b21b      	sxth	r3, r3
 800dd66:	4313      	orrs	r3, r2
 800dd68:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800dd6a:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f103 0213 	add.w	r2, r3, #19
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd78:	3b02      	subs	r3, #2
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	4610      	mov	r0, r2
 800dd80:	f000 f939 	bl	800dff6 <calcCRC>
 800dd84:	4603      	mov	r3, r0
 800dd86:	461a      	mov	r2, r3
 800dd88:	893b      	ldrh	r3, [r7, #8]
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d009      	beq.n	800dda2 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800dd94:	3301      	adds	r3, #1
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 800dd9e:	23fc      	movs	r3, #252	; 0xfc
 800dda0:	e10f      	b.n	800dfc2 <validateRequest+0x286>
	    }



	    // check fct code
	    bool isSupported = false;
 800dda2:	2300      	movs	r3, #0
 800dda4:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800dda6:	2300      	movs	r3, #0
 800dda8:	73bb      	strb	r3, [r7, #14]
 800ddaa:	e00c      	b.n	800ddc6 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800ddac:	7bbb      	ldrb	r3, [r7, #14]
 800ddae:	4a87      	ldr	r2, [pc, #540]	; (800dfcc <validateRequest+0x290>)
 800ddb0:	5cd2      	ldrb	r2, [r2, r3]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	7d1b      	ldrb	r3, [r3, #20]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d102      	bne.n	800ddc0 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	73fb      	strb	r3, [r7, #15]
	            break;
 800ddbe:	e005      	b.n	800ddcc <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800ddc0:	7bbb      	ldrb	r3, [r7, #14]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	73bb      	strb	r3, [r7, #14]
 800ddc6:	7bbb      	ldrb	r3, [r7, #14]
 800ddc8:	2b07      	cmp	r3, #7
 800ddca:	d9ef      	bls.n	800ddac <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
 800ddce:	f083 0301 	eor.w	r3, r3, #1
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d009      	beq.n	800ddec <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800ddde:	3301      	adds	r3, #1
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 800dde8:	2301      	movs	r3, #1
 800ddea:	e0ea      	b.n	800dfc2 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 800ddec:	2300      	movs	r3, #0
 800ddee:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	7d1b      	ldrb	r3, [r3, #20]
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	2b0f      	cmp	r3, #15
 800ddfc:	f200 80e0 	bhi.w	800dfc0 <validateRequest+0x284>
 800de00:	a201      	add	r2, pc, #4	; (adr r2, 800de08 <validateRequest+0xcc>)
 800de02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de06:	bf00      	nop
 800de08:	0800de49 	.word	0x0800de49
 800de0c:	0800de49 	.word	0x0800de49
 800de10:	0800df61 	.word	0x0800df61
 800de14:	0800df61 	.word	0x0800df61
 800de18:	0800def5 	.word	0x0800def5
 800de1c:	0800df3d 	.word	0x0800df3d
 800de20:	0800dfc1 	.word	0x0800dfc1
 800de24:	0800dfc1 	.word	0x0800dfc1
 800de28:	0800dfc1 	.word	0x0800dfc1
 800de2c:	0800dfc1 	.word	0x0800dfc1
 800de30:	0800dfc1 	.word	0x0800dfc1
 800de34:	0800dfc1 	.word	0x0800dfc1
 800de38:	0800dfc1 	.word	0x0800dfc1
 800de3c:	0800dfc1 	.word	0x0800dfc1
 800de40:	0800de49 	.word	0x0800de49
 800de44:	0800df61 	.word	0x0800df61
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	7d5a      	ldrb	r2, [r3, #21]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	7d9b      	ldrb	r3, [r3, #22]
 800de50:	4619      	mov	r1, r3
 800de52:	4610      	mov	r0, r2
 800de54:	f000 f8bc 	bl	800dfd0 <word>
 800de58:	4603      	mov	r3, r0
 800de5a:	091b      	lsrs	r3, r3, #4
 800de5c:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	7dda      	ldrb	r2, [r3, #23]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	7e1b      	ldrb	r3, [r3, #24]
 800de66:	4619      	mov	r1, r3
 800de68:	4610      	mov	r0, r2
 800de6a:	f000 f8b1 	bl	800dfd0 <word>
 800de6e:	4603      	mov	r3, r0
 800de70:	091b      	lsrs	r3, r3, #4
 800de72:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	7dda      	ldrb	r2, [r3, #23]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7e1b      	ldrb	r3, [r3, #24]
 800de7c:	4619      	mov	r1, r3
 800de7e:	4610      	mov	r0, r2
 800de80:	f000 f8a6 	bl	800dfd0 <word>
 800de84:	4603      	mov	r3, r0
 800de86:	f003 030f 	and.w	r3, r3, #15
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d002      	beq.n	800de96 <validateRequest+0x15a>
 800de90:	897b      	ldrh	r3, [r7, #10]
 800de92:	3301      	adds	r3, #1
 800de94:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 800de96:	89ba      	ldrh	r2, [r7, #12]
 800de98:	897b      	ldrh	r3, [r7, #10]
 800de9a:	4413      	add	r3, r2
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 800dea2:	4293      	cmp	r3, r2
 800dea4:	dd01      	ble.n	800deaa <validateRequest+0x16e>
 800dea6:	2302      	movs	r3, #2
 800dea8:	e08b      	b.n	800dfc2 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	7dda      	ldrb	r2, [r3, #23]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	7e1b      	ldrb	r3, [r3, #24]
 800deb2:	4619      	mov	r1, r3
 800deb4:	4610      	mov	r0, r2
 800deb6:	f000 f88b 	bl	800dfd0 <word>
 800deba:	4603      	mov	r3, r0
 800debc:	08db      	lsrs	r3, r3, #3
 800debe:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	7dda      	ldrb	r2, [r3, #23]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	7e1b      	ldrb	r3, [r3, #24]
 800dec8:	4619      	mov	r1, r3
 800deca:	4610      	mov	r0, r2
 800decc:	f000 f880 	bl	800dfd0 <word>
 800ded0:	4603      	mov	r3, r0
 800ded2:	f003 0307 	and.w	r3, r3, #7
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d002      	beq.n	800dee2 <validateRequest+0x1a6>
 800dedc:	897b      	ldrh	r3, [r7, #10]
 800dede:	3301      	adds	r3, #1
 800dee0:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800dee2:	897b      	ldrh	r3, [r7, #10]
 800dee4:	3305      	adds	r3, #5
 800dee6:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800dee8:	897b      	ldrh	r3, [r7, #10]
 800deea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800deee:	d960      	bls.n	800dfb2 <validateRequest+0x276>
 800def0:	2303      	movs	r3, #3
 800def2:	e066      	b.n	800dfc2 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	7d5a      	ldrb	r2, [r3, #21]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	7d9b      	ldrb	r3, [r3, #22]
 800defc:	4619      	mov	r1, r3
 800defe:	4610      	mov	r0, r2
 800df00:	f000 f866 	bl	800dfd0 <word>
 800df04:	4603      	mov	r3, r0
 800df06:	091b      	lsrs	r3, r3, #4
 800df08:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	7d5a      	ldrb	r2, [r3, #21]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	7d9b      	ldrb	r3, [r3, #22]
 800df12:	4619      	mov	r1, r3
 800df14:	4610      	mov	r0, r2
 800df16:	f000 f85b 	bl	800dfd0 <word>
 800df1a:	4603      	mov	r3, r0
 800df1c:	f003 030f 	and.w	r3, r3, #15
 800df20:	b29b      	uxth	r3, r3
 800df22:	2b00      	cmp	r3, #0
 800df24:	d002      	beq.n	800df2c <validateRequest+0x1f0>
 800df26:	89bb      	ldrh	r3, [r7, #12]
 800df28:	3301      	adds	r3, #1
 800df2a:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800df32:	89ba      	ldrh	r2, [r7, #12]
 800df34:	429a      	cmp	r2, r3
 800df36:	d93e      	bls.n	800dfb6 <validateRequest+0x27a>
 800df38:	2302      	movs	r3, #2
 800df3a:	e042      	b.n	800dfc2 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	7d5a      	ldrb	r2, [r3, #21]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	7d9b      	ldrb	r3, [r3, #22]
 800df44:	4619      	mov	r1, r3
 800df46:	4610      	mov	r0, r2
 800df48:	f000 f842 	bl	800dfd0 <word>
 800df4c:	4603      	mov	r3, r0
 800df4e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800df56:	89ba      	ldrh	r2, [r7, #12]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d92e      	bls.n	800dfba <validateRequest+0x27e>
 800df5c:	2302      	movs	r3, #2
 800df5e:	e030      	b.n	800dfc2 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	7d5a      	ldrb	r2, [r3, #21]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	7d9b      	ldrb	r3, [r3, #22]
 800df68:	4619      	mov	r1, r3
 800df6a:	4610      	mov	r0, r2
 800df6c:	f000 f830 	bl	800dfd0 <word>
 800df70:	4603      	mov	r3, r0
 800df72:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	7dda      	ldrb	r2, [r3, #23]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	7e1b      	ldrb	r3, [r3, #24]
 800df7c:	4619      	mov	r1, r3
 800df7e:	4610      	mov	r0, r2
 800df80:	f000 f826 	bl	800dfd0 <word>
 800df84:	4603      	mov	r3, r0
 800df86:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 800df88:	89ba      	ldrh	r2, [r7, #12]
 800df8a:	897b      	ldrh	r3, [r7, #10]
 800df8c:	4413      	add	r3, r2
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 800df94:	4293      	cmp	r3, r2
 800df96:	dd01      	ble.n	800df9c <validateRequest+0x260>
 800df98:	2302      	movs	r3, #2
 800df9a:	e012      	b.n	800dfc2 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800df9c:	897b      	ldrh	r3, [r7, #10]
 800df9e:	005b      	lsls	r3, r3, #1
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	3305      	adds	r3, #5
 800dfa4:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800dfa6:	897b      	ldrh	r3, [r7, #10]
 800dfa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfac:	d907      	bls.n	800dfbe <validateRequest+0x282>
 800dfae:	2303      	movs	r3, #3
 800dfb0:	e007      	b.n	800dfc2 <validateRequest+0x286>
	        break;
 800dfb2:	bf00      	nop
 800dfb4:	e004      	b.n	800dfc0 <validateRequest+0x284>
	        break;
 800dfb6:	bf00      	nop
 800dfb8:	e002      	b.n	800dfc0 <validateRequest+0x284>
	        break;
 800dfba:	bf00      	nop
 800dfbc:	e000      	b.n	800dfc0 <validateRequest+0x284>
	        break;
 800dfbe:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800dfc0:	2300      	movs	r3, #0

}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3710      	adds	r7, #16
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	0800ed20 	.word	0x0800ed20

0800dfd0 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	460a      	mov	r2, r1
 800dfda:	71fb      	strb	r3, [r7, #7]
 800dfdc:	4613      	mov	r3, r2
 800dfde:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800dfe0:	79bb      	ldrb	r3, [r7, #6]
 800dfe2:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800dfe4:	79fb      	ldrb	r3, [r7, #7]
 800dfe6:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800dfe8:	89bb      	ldrh	r3, [r7, #12]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3714      	adds	r7, #20
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr

0800dff6 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 800dff6:	b480      	push	{r7}
 800dff8:	b087      	sub	sp, #28
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
 800dffe:	460b      	mov	r3, r1
 800e000:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800e002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e006:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800e008:	2300      	movs	r3, #0
 800e00a:	74fb      	strb	r3, [r7, #19]
 800e00c:	e023      	b.n	800e056 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800e00e:	7cfb      	ldrb	r3, [r7, #19]
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	4413      	add	r3, r2
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	461a      	mov	r2, r3
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	4053      	eors	r3, r2
 800e01c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e01e:	2301      	movs	r3, #1
 800e020:	74bb      	strb	r3, [r7, #18]
 800e022:	e012      	b.n	800e04a <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	085b      	lsrs	r3, r3, #1
 800e030:	617b      	str	r3, [r7, #20]
            if (flag)
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d005      	beq.n	800e044 <calcCRC+0x4e>
                temp ^= 0xA001;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800e03e:	f083 0301 	eor.w	r3, r3, #1
 800e042:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e044:	7cbb      	ldrb	r3, [r7, #18]
 800e046:	3301      	adds	r3, #1
 800e048:	74bb      	strb	r3, [r7, #18]
 800e04a:	7cbb      	ldrb	r3, [r7, #18]
 800e04c:	2b08      	cmp	r3, #8
 800e04e:	d9e9      	bls.n	800e024 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800e050:	7cfb      	ldrb	r3, [r7, #19]
 800e052:	3301      	adds	r3, #1
 800e054:	74fb      	strb	r3, [r7, #19]
 800e056:	7cfa      	ldrb	r2, [r7, #19]
 800e058:	78fb      	ldrb	r3, [r7, #3]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d3d7      	bcc.n	800e00e <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	0a1b      	lsrs	r3, r3, #8
 800e062:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	021b      	lsls	r3, r3, #8
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	4313      	orrs	r3, r2
 800e06c:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	b29b      	uxth	r3, r3
 800e072:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	b29b      	uxth	r3, r3

}
 800e078:	4618      	mov	r0, r3
 800e07a:	371c      	adds	r7, #28
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	4603      	mov	r3, r0
 800e08c:	6039      	str	r1, [r7, #0]
 800e08e:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	7d1b      	ldrb	r3, [r3, #20]
 800e094:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	7a1a      	ldrb	r2, [r3, #8]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800e09e:	7bfb      	ldrb	r3, [r7, #15]
 800e0a0:	3b80      	subs	r3, #128	; 0x80
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	79fa      	ldrb	r2, [r7, #7]
 800e0ac:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	2203      	movs	r2, #3
 800e0b2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800e0b6:	bf00      	nop
 800e0b8:	3714      	adds	r7, #20
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 800e0c2:	b590      	push	{r4, r7, lr}
 800e0c4:	b087      	sub	sp, #28
 800e0c6:	af02      	add	r7, sp, #8
 800e0c8:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f103 0213 	add.w	r2, r3, #19
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	4610      	mov	r0, r2
 800e0da:	f7ff ff8c 	bl	800dff6 <calcCRC>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800e0e2:	89fb      	ldrh	r3, [r7, #14]
 800e0e4:	0a1b      	lsrs	r3, r3, #8
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	b2d2      	uxtb	r2, r2
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	440b      	add	r3, r1
 800e0f6:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e0fe:	3301      	adds	r3, #1
 800e100:	b2da      	uxtb	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e10e:	4619      	mov	r1, r3
 800e110:	89fb      	ldrh	r3, [r7, #14]
 800e112:	b2da      	uxtb	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	440b      	add	r3, r1
 800e118:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e120:	3301      	adds	r3, #1
 800e122:	b2da      	uxtb	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00c      	beq.n	800e14c <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	4618      	mov	r0, r3
 800e138:	f7f8 fe72 	bl	8006e20 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	68d8      	ldr	r0, [r3, #12]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	8a1b      	ldrh	r3, [r3, #16]
 800e144:	2201      	movs	r2, #1
 800e146:	4619      	mov	r1, r3
 800e148:	f7f5 fe5e 	bl	8003e08 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e152:	2b01      	cmp	r3, #1
 800e154:	d10c      	bne.n	800e170 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6858      	ldr	r0, [r3, #4]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f103 0113 	add.w	r1, r3, #19
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e166:	b29b      	uxth	r3, r3
 800e168:	461a      	mov	r2, r3
 800e16a:	f7f8 f853 	bl	8006214 <HAL_UART_Transmit_IT>
 800e16e:	e00b      	b.n	800e188 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6858      	ldr	r0, [r3, #4]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f103 0113 	add.w	r1, r3, #19
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e180:	b29b      	uxth	r3, r3
 800e182:	461a      	mov	r2, r3
 800e184:	f7f8 f926 	bl	80063d4 <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800e188:	21fa      	movs	r1, #250	; 0xfa
 800e18a:	2001      	movs	r0, #1
 800e18c:	f7fd fce0 	bl	800bb50 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800e190:	bf00      	nop
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	69db      	ldr	r3, [r3, #28]
 800e19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d0f7      	beq.n	800e192 <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00c      	beq.n	800e1c4 <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	68d8      	ldr	r0, [r3, #12]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	8a1b      	ldrh	r3, [r3, #16]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	f7f5 fe27 	bl	8003e08 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7f8 fe82 	bl	8006ec8 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	2b04      	cmp	r3, #4
 800e1ca:	d10c      	bne.n	800e1e6 <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 800e1d2:	f7fc ff35 	bl	800b040 <xTaskGetTickCount>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	2300      	movs	r3, #0
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	2300      	movs	r3, #0
 800e1de:	2102      	movs	r1, #2
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	f7fd ff89 	bl	800c0f8 <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 800e1fe:	bf00      	nop
 800e200:	3714      	adds	r7, #20
 800e202:	46bd      	mov	sp, r7
 800e204:	bd90      	pop	{r4, r7, pc}

0800e206 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b086      	sub	sp, #24
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	7d5a      	ldrb	r2, [r3, #21]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	7d9b      	ldrb	r3, [r3, #22]
 800e216:	4619      	mov	r1, r3
 800e218:	4610      	mov	r0, r2
 800e21a:	f7ff fed9 	bl	800dfd0 <word>
 800e21e:	4603      	mov	r3, r0
 800e220:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	7dda      	ldrb	r2, [r3, #23]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	7e1b      	ldrb	r3, [r3, #24]
 800e22a:	4619      	mov	r1, r3
 800e22c:	4610      	mov	r0, r2
 800e22e:	f7ff fecf 	bl	800dfd0 <word>
 800e232:	4603      	mov	r3, r0
 800e234:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800e236:	8a3b      	ldrh	r3, [r7, #16]
 800e238:	08db      	lsrs	r3, r3, #3
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800e23e:	8a3b      	ldrh	r3, [r7, #16]
 800e240:	f003 0307 	and.w	r3, r3, #7
 800e244:	b29b      	uxth	r3, r3
 800e246:	2b00      	cmp	r3, #0
 800e248:	d002      	beq.n	800e250 <process_FC1+0x4a>
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	3301      	adds	r3, #1
 800e24e:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	7dfa      	ldrb	r2, [r7, #23]
 800e254:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2203      	movs	r2, #3
 800e25a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e264:	461a      	mov	r2, r3
 800e266:	7dfb      	ldrb	r3, [r7, #23]
 800e268:	4413      	add	r3, r2
 800e26a:	3b01      	subs	r3, #1
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	4413      	add	r3, r2
 800e270:	2200      	movs	r2, #0
 800e272:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e274:	2300      	movs	r3, #0
 800e276:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e278:	2300      	movs	r3, #0
 800e27a:	82bb      	strh	r3, [r7, #20]
 800e27c:	e058      	b.n	800e330 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800e27e:	8a7a      	ldrh	r2, [r7, #18]
 800e280:	8abb      	ldrh	r3, [r7, #20]
 800e282:	4413      	add	r3, r2
 800e284:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 800e286:	89bb      	ldrh	r3, [r7, #12]
 800e288:	091b      	lsrs	r3, r3, #4
 800e28a:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e28c:	89bb      	ldrh	r3, [r7, #12]
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	f003 030f 	and.w	r3, r3, #15
 800e294:	727b      	strb	r3, [r7, #9]

        bitWrite(
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e29c:	897b      	ldrh	r3, [r7, #10]
 800e29e:	005b      	lsls	r3, r3, #1
 800e2a0:	4413      	add	r3, r2
 800e2a2:	881b      	ldrh	r3, [r3, #0]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	7a7b      	ldrb	r3, [r7, #9]
 800e2a8:	fa42 f303 	asr.w	r3, r2, r3
 800e2ac:	f003 0301 	and.w	r3, r3, #1
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d014      	beq.n	800e2de <process_FC1+0xd8>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4413      	add	r3, r2
 800e2c0:	7cda      	ldrb	r2, [r3, #19]
 800e2c2:	7dbb      	ldrb	r3, [r7, #22]
 800e2c4:	2101      	movs	r1, #1
 800e2c6:	fa01 f303 	lsl.w	r3, r1, r3
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	6879      	ldr	r1, [r7, #4]
 800e2ce:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	b2da      	uxtb	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	440b      	add	r3, r1
 800e2da:	74da      	strb	r2, [r3, #19]
 800e2dc:	e015      	b.n	800e30a <process_FC1+0x104>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	7cda      	ldrb	r2, [r3, #19]
 800e2ec:	7dbb      	ldrb	r3, [r7, #22]
 800e2ee:	2101      	movs	r1, #1
 800e2f0:	fa01 f303 	lsl.w	r3, r1, r3
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	43db      	mvns	r3, r3
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	6879      	ldr	r1, [r7, #4]
 800e2fc:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e300:	4013      	ands	r3, r2
 800e302:	b2da      	uxtb	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	440b      	add	r3, r1
 800e308:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800e30a:	7dbb      	ldrb	r3, [r7, #22]
 800e30c:	3301      	adds	r3, #1
 800e30e:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800e310:	7dbb      	ldrb	r3, [r7, #22]
 800e312:	2b07      	cmp	r3, #7
 800e314:	d909      	bls.n	800e32a <process_FC1+0x124>
        {
            u8bitsno = 0;
 800e316:	2300      	movs	r3, #0
 800e318:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e320:	3301      	adds	r3, #1
 800e322:	b2da      	uxtb	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e32a:	8abb      	ldrh	r3, [r7, #20]
 800e32c:	3301      	adds	r3, #1
 800e32e:	82bb      	strh	r3, [r7, #20]
 800e330:	8aba      	ldrh	r2, [r7, #20]
 800e332:	8a3b      	ldrh	r3, [r7, #16]
 800e334:	429a      	cmp	r2, r3
 800e336:	d3a2      	bcc.n	800e27e <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800e338:	8a3b      	ldrh	r3, [r7, #16]
 800e33a:	f003 0307 	and.w	r3, r3, #7
 800e33e:	b29b      	uxth	r3, r3
 800e340:	2b00      	cmp	r3, #0
 800e342:	d007      	beq.n	800e354 <process_FC1+0x14e>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e34a:	3301      	adds	r3, #1
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e35a:	3302      	adds	r3, #2
 800e35c:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7ff feaf 	bl	800e0c2 <sendTxBuffer>
    return u8CopyBufferSize;
 800e364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3718      	adds	r7, #24
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	7d5a      	ldrb	r2, [r3, #21]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	7d9b      	ldrb	r3, [r3, #22]
 800e380:	4619      	mov	r1, r3
 800e382:	4610      	mov	r0, r2
 800e384:	f7ff fe24 	bl	800dfd0 <word>
 800e388:	4603      	mov	r3, r0
 800e38a:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	7dda      	ldrb	r2, [r3, #23]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	7e1b      	ldrb	r3, [r3, #24]
 800e394:	4619      	mov	r1, r3
 800e396:	4610      	mov	r0, r2
 800e398:	f7ff fe1a 	bl	800dfd0 <word>
 800e39c:	4603      	mov	r3, r0
 800e39e:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800e3a0:	7afb      	ldrb	r3, [r7, #11]
 800e3a2:	005b      	lsls	r3, r3, #1
 800e3a4:	b2da      	uxtb	r2, r3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2203      	movs	r2, #3
 800e3ae:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e3b2:	89bb      	ldrh	r3, [r7, #12]
 800e3b4:	81fb      	strh	r3, [r7, #14]
 800e3b6:	e032      	b.n	800e41e <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e3be:	89fb      	ldrh	r3, [r7, #14]
 800e3c0:	005b      	lsls	r3, r3, #1
 800e3c2:	4413      	add	r3, r2
 800e3c4:	881b      	ldrh	r3, [r3, #0]
 800e3c6:	0a1b      	lsrs	r3, r3, #8
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	b2d2      	uxtb	r2, r2
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	440b      	add	r3, r1
 800e3d8:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	b2da      	uxtb	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e3f0:	89fb      	ldrh	r3, [r7, #14]
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	4413      	add	r3, r2
 800e3f6:	881a      	ldrh	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3fe:	4619      	mov	r1, r3
 800e400:	b2d2      	uxtb	r2, r2
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	440b      	add	r3, r1
 800e406:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e40e:	3301      	adds	r3, #1
 800e410:	b2da      	uxtb	r2, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e418:	89fb      	ldrh	r3, [r7, #14]
 800e41a:	3301      	adds	r3, #1
 800e41c:	81fb      	strh	r3, [r7, #14]
 800e41e:	89fa      	ldrh	r2, [r7, #14]
 800e420:	89b9      	ldrh	r1, [r7, #12]
 800e422:	7afb      	ldrb	r3, [r7, #11]
 800e424:	440b      	add	r3, r1
 800e426:	429a      	cmp	r2, r3
 800e428:	dbc6      	blt.n	800e3b8 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e430:	3302      	adds	r3, #2
 800e432:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f7ff fe44 	bl	800e0c2 <sendTxBuffer>

    return u8CopyBufferSize;
 800e43a:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800e446:	b580      	push	{r7, lr}
 800e448:	b084      	sub	sp, #16
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	7d5a      	ldrb	r2, [r3, #21]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	7d9b      	ldrb	r3, [r3, #22]
 800e456:	4619      	mov	r1, r3
 800e458:	4610      	mov	r0, r2
 800e45a:	f7ff fdb9 	bl	800dfd0 <word>
 800e45e:	4603      	mov	r3, r0
 800e460:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800e462:	89fb      	ldrh	r3, [r7, #14]
 800e464:	091b      	lsrs	r3, r3, #4
 800e466:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800e468:	89fb      	ldrh	r3, [r7, #14]
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	f003 030f 	and.w	r3, r3, #15
 800e470:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	7ddb      	ldrb	r3, [r3, #23]
 800e476:	2bff      	cmp	r3, #255	; 0xff
 800e478:	d115      	bne.n	800e4a6 <process_FC5+0x60>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e480:	89bb      	ldrh	r3, [r7, #12]
 800e482:	005b      	lsls	r3, r3, #1
 800e484:	4413      	add	r3, r2
 800e486:	8819      	ldrh	r1, [r3, #0]
 800e488:	7afb      	ldrb	r3, [r7, #11]
 800e48a:	2201      	movs	r2, #1
 800e48c:	fa02 f303 	lsl.w	r3, r2, r3
 800e490:	b29a      	uxth	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e498:	89bb      	ldrh	r3, [r7, #12]
 800e49a:	005b      	lsls	r3, r3, #1
 800e49c:	4403      	add	r3, r0
 800e49e:	430a      	orrs	r2, r1
 800e4a0:	b292      	uxth	r2, r2
 800e4a2:	801a      	strh	r2, [r3, #0]
 800e4a4:	e016      	b.n	800e4d4 <process_FC5+0x8e>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e4ac:	89bb      	ldrh	r3, [r7, #12]
 800e4ae:	005b      	lsls	r3, r3, #1
 800e4b0:	4413      	add	r3, r2
 800e4b2:	8819      	ldrh	r1, [r3, #0]
 800e4b4:	7afb      	ldrb	r3, [r7, #11]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	43db      	mvns	r3, r3
 800e4c0:	b29a      	uxth	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e4c8:	89bb      	ldrh	r3, [r7, #12]
 800e4ca:	005b      	lsls	r3, r3, #1
 800e4cc:	4403      	add	r3, r0
 800e4ce:	400a      	ands	r2, r1
 800e4d0:	b292      	uxth	r2, r2
 800e4d2:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2206      	movs	r2, #6
 800e4d8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4e2:	3302      	adds	r3, #2
 800e4e4:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f7ff fdeb 	bl	800e0c2 <sendTxBuffer>

    return u8CopyBufferSize;
 800e4ec:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3710      	adds	r7, #16
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b084      	sub	sp, #16
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	7d5a      	ldrb	r2, [r3, #21]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	7d9b      	ldrb	r3, [r3, #22]
 800e508:	4619      	mov	r1, r3
 800e50a:	4610      	mov	r0, r2
 800e50c:	f7ff fd60 	bl	800dfd0 <word>
 800e510:	4603      	mov	r3, r0
 800e512:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	7dda      	ldrb	r2, [r3, #23]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	7e1b      	ldrb	r3, [r3, #24]
 800e51c:	4619      	mov	r1, r3
 800e51e:	4610      	mov	r0, r2
 800e520:	f7ff fd56 	bl	800dfd0 <word>
 800e524:	4603      	mov	r3, r0
 800e526:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e52e:	89fb      	ldrh	r3, [r7, #14]
 800e530:	005b      	lsls	r3, r3, #1
 800e532:	4413      	add	r3, r2
 800e534:	89ba      	ldrh	r2, [r7, #12]
 800e536:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2206      	movs	r2, #6
 800e53c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e546:	3302      	adds	r3, #2
 800e548:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7ff fdb9 	bl	800e0c2 <sendTxBuffer>

    return u8CopyBufferSize;
 800e550:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e554:	4618      	mov	r0, r3
 800e556:	3710      	adds	r7, #16
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	7d5a      	ldrb	r2, [r3, #21]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	7d9b      	ldrb	r3, [r3, #22]
 800e56c:	4619      	mov	r1, r3
 800e56e:	4610      	mov	r0, r2
 800e570:	f7ff fd2e 	bl	800dfd0 <word>
 800e574:	4603      	mov	r3, r0
 800e576:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	7dda      	ldrb	r2, [r3, #23]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	7e1b      	ldrb	r3, [r3, #24]
 800e580:	4619      	mov	r1, r3
 800e582:	4610      	mov	r0, r2
 800e584:	f7ff fd24 	bl	800dfd0 <word>
 800e588:	4603      	mov	r3, r0
 800e58a:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e58c:	2300      	movs	r3, #0
 800e58e:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800e590:	2307      	movs	r3, #7
 800e592:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e594:	2300      	movs	r3, #0
 800e596:	82bb      	strh	r3, [r7, #20]
 800e598:	e058      	b.n	800e64c <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800e59a:	8a7a      	ldrh	r2, [r7, #18]
 800e59c:	8abb      	ldrh	r3, [r7, #20]
 800e59e:	4413      	add	r3, r2
 800e5a0:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800e5a2:	89bb      	ldrh	r3, [r7, #12]
 800e5a4:	091b      	lsrs	r3, r3, #4
 800e5a6:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e5a8:	89bb      	ldrh	r3, [r7, #12]
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	f003 030f 	and.w	r3, r3, #15
 800e5b0:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800e5b2:	7dfb      	ldrb	r3, [r7, #23]
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	7cdb      	ldrb	r3, [r3, #19]
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	7dbb      	ldrb	r3, [r7, #22]
 800e5be:	fa42 f303 	asr.w	r3, r2, r3
 800e5c2:	f003 0301 	and.w	r3, r3, #1
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	bf14      	ite	ne
 800e5ca:	2301      	movne	r3, #1
 800e5cc:	2300      	moveq	r3, #0
 800e5ce:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800e5d0:	7a3b      	ldrb	r3, [r7, #8]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d015      	beq.n	800e602 <process_FC15+0xa6>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e5dc:	897b      	ldrh	r3, [r7, #10]
 800e5de:	005b      	lsls	r3, r3, #1
 800e5e0:	4413      	add	r3, r2
 800e5e2:	8819      	ldrh	r1, [r3, #0]
 800e5e4:	7a7b      	ldrb	r3, [r7, #9]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e5f4:	897b      	ldrh	r3, [r7, #10]
 800e5f6:	005b      	lsls	r3, r3, #1
 800e5f8:	4403      	add	r3, r0
 800e5fa:	430a      	orrs	r2, r1
 800e5fc:	b292      	uxth	r2, r2
 800e5fe:	801a      	strh	r2, [r3, #0]
 800e600:	e016      	b.n	800e630 <process_FC15+0xd4>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e608:	897b      	ldrh	r3, [r7, #10]
 800e60a:	005b      	lsls	r3, r3, #1
 800e60c:	4413      	add	r3, r2
 800e60e:	8819      	ldrh	r1, [r3, #0]
 800e610:	7a7b      	ldrb	r3, [r7, #9]
 800e612:	2201      	movs	r2, #1
 800e614:	fa02 f303 	lsl.w	r3, r2, r3
 800e618:	b29b      	uxth	r3, r3
 800e61a:	43db      	mvns	r3, r3
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e624:	897b      	ldrh	r3, [r7, #10]
 800e626:	005b      	lsls	r3, r3, #1
 800e628:	4403      	add	r3, r0
 800e62a:	400a      	ands	r2, r1
 800e62c:	b292      	uxth	r2, r2
 800e62e:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800e630:	7dbb      	ldrb	r3, [r7, #22]
 800e632:	3301      	adds	r3, #1
 800e634:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800e636:	7dbb      	ldrb	r3, [r7, #22]
 800e638:	2b07      	cmp	r3, #7
 800e63a:	d904      	bls.n	800e646 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800e63c:	2300      	movs	r3, #0
 800e63e:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800e640:	7dfb      	ldrb	r3, [r7, #23]
 800e642:	3301      	adds	r3, #1
 800e644:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e646:	8abb      	ldrh	r3, [r7, #20]
 800e648:	3301      	adds	r3, #1
 800e64a:	82bb      	strh	r3, [r7, #20]
 800e64c:	8aba      	ldrh	r2, [r7, #20]
 800e64e:	8a3b      	ldrh	r3, [r7, #16]
 800e650:	429a      	cmp	r2, r3
 800e652:	d3a2      	bcc.n	800e59a <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2206      	movs	r2, #6
 800e658:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e662:	3302      	adds	r3, #2
 800e664:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7ff fd2b 	bl	800e0c2 <sendTxBuffer>
    return u8CopyBufferSize;
 800e66c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3718      	adds	r7, #24
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b086      	sub	sp, #24
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	7d5b      	ldrb	r3, [r3, #21]
 800e684:	021b      	lsls	r3, r3, #8
 800e686:	b21a      	sxth	r2, r3
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	7d9b      	ldrb	r3, [r3, #22]
 800e68c:	b21b      	sxth	r3, r3
 800e68e:	4313      	orrs	r3, r2
 800e690:	b21b      	sxth	r3, r3
 800e692:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	7ddb      	ldrb	r3, [r3, #23]
 800e698:	021b      	lsls	r3, r3, #8
 800e69a:	b21a      	sxth	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	7e1b      	ldrb	r3, [r3, #24]
 800e6a0:	b21b      	sxth	r3, r3
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	b21b      	sxth	r3, r3
 800e6a6:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800e6ae:	8a7b      	ldrh	r3, [r7, #18]
 800e6b0:	b2da      	uxtb	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2206      	movs	r2, #6
 800e6ba:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800e6be:	2300      	movs	r3, #0
 800e6c0:	82fb      	strh	r3, [r7, #22]
 800e6c2:	e01d      	b.n	800e700 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800e6c4:	8afb      	ldrh	r3, [r7, #22]
 800e6c6:	005b      	lsls	r3, r3, #1
 800e6c8:	3307      	adds	r3, #7
        temp = word(
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800e6d0:	8afb      	ldrh	r3, [r7, #22]
 800e6d2:	3304      	adds	r3, #4
 800e6d4:	005b      	lsls	r3, r3, #1
        temp = word(
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	4413      	add	r3, r2
 800e6da:	7cdb      	ldrb	r3, [r3, #19]
 800e6dc:	4619      	mov	r1, r3
 800e6de:	f7ff fc77 	bl	800dfd0 <word>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e6ec:	8ab9      	ldrh	r1, [r7, #20]
 800e6ee:	8afb      	ldrh	r3, [r7, #22]
 800e6f0:	440b      	add	r3, r1
 800e6f2:	005b      	lsls	r3, r3, #1
 800e6f4:	4413      	add	r3, r2
 800e6f6:	89fa      	ldrh	r2, [r7, #14]
 800e6f8:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800e6fa:	8afb      	ldrh	r3, [r7, #22]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	82fb      	strh	r3, [r7, #22]
 800e700:	8afa      	ldrh	r2, [r7, #22]
 800e702:	8a7b      	ldrh	r3, [r7, #18]
 800e704:	429a      	cmp	r2, r3
 800e706:	d3dd      	bcc.n	800e6c4 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e70e:	3302      	adds	r3, #2
 800e710:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7ff fcd5 	bl	800e0c2 <sendTxBuffer>

    return u8CopyBufferSize;
 800e718:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3718      	adds	r7, #24
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af02      	add	r7, sp, #8
 800e72a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e72c:	2300      	movs	r3, #0
 800e72e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800e730:	2300      	movs	r3, #0
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	e019      	b.n	800e76a <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800e736:	4a17      	ldr	r2, [pc, #92]	; (800e794 <HAL_UART_TxCpltCallback+0x70>)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	429a      	cmp	r2, r3
 800e744:	d10e      	bne.n	800e764 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800e746:	4a13      	ldr	r2, [pc, #76]	; (800e794 <HAL_UART_TxCpltCallback+0x70>)
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e74e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800e752:	f107 0308 	add.w	r3, r7, #8
 800e756:	9300      	str	r3, [sp, #0]
 800e758:	2300      	movs	r3, #0
 800e75a:	2200      	movs	r2, #0
 800e75c:	2100      	movs	r1, #0
 800e75e:	f7fd faf7 	bl	800bd50 <xTaskGenericNotifyFromISR>
	   		break;
 800e762:	e008      	b.n	800e776 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	3301      	adds	r3, #1
 800e768:	60fb      	str	r3, [r7, #12]
 800e76a:	4b0b      	ldr	r3, [pc, #44]	; (800e798 <HAL_UART_TxCpltCallback+0x74>)
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	461a      	mov	r2, r3
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	4293      	cmp	r3, r2
 800e774:	dbdf      	blt.n	800e736 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d007      	beq.n	800e78c <HAL_UART_TxCpltCallback+0x68>
 800e77c:	4b07      	ldr	r3, [pc, #28]	; (800e79c <HAL_UART_TxCpltCallback+0x78>)
 800e77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e782:	601a      	str	r2, [r3, #0]
 800e784:	f3bf 8f4f 	dsb	sy
 800e788:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800e78c:	bf00      	nop
 800e78e:	3710      	adds	r7, #16
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	200020b0 	.word	0x200020b0
 800e798:	200020b8 	.word	0x200020b8
 800e79c:	e000ed04 	.word	0xe000ed04

0800e7a0 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800e7a0:	b590      	push	{r4, r7, lr}
 800e7a2:	b087      	sub	sp, #28
 800e7a4:	af02      	add	r7, sp, #8
 800e7a6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	60fb      	str	r3, [r7, #12]
 800e7b0:	e042      	b.n	800e838 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800e7b2:	4a2d      	ldr	r2, [pc, #180]	; (800e868 <HAL_UART_RxCpltCallback+0xc8>)
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d137      	bne.n	800e832 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800e7c2:	4a29      	ldr	r2, [pc, #164]	; (800e868 <HAL_UART_RxCpltCallback+0xc8>)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7ca:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d139      	bne.n	800e846 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800e7d2:	4a25      	ldr	r2, [pc, #148]	; (800e868 <HAL_UART_RxCpltCallback+0xc8>)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7da:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800e7de:	4922      	ldr	r1, [pc, #136]	; (800e868 <HAL_UART_RxCpltCallback+0xc8>)
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e7e6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	f7fe fbe5 	bl	800cfbc <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800e7f2:	4a1d      	ldr	r2, [pc, #116]	; (800e868 <HAL_UART_RxCpltCallback+0xc8>)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7fa:	6858      	ldr	r0, [r3, #4]
 800e7fc:	4a1a      	ldr	r2, [pc, #104]	; (800e868 <HAL_UART_RxCpltCallback+0xc8>)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e804:	33a6      	adds	r3, #166	; 0xa6
 800e806:	2201      	movs	r2, #1
 800e808:	4619      	mov	r1, r3
 800e80a:	f7f7 fd97 	bl	800633c <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800e80e:	4a16      	ldr	r2, [pc, #88]	; (800e868 <HAL_UART_RxCpltCallback+0xc8>)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e816:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800e81a:	f7fc fc21 	bl	800b060 <xTaskGetTickCountFromISR>
 800e81e:	4602      	mov	r2, r0
 800e820:	f107 0308 	add.w	r3, r7, #8
 800e824:	2100      	movs	r1, #0
 800e826:	9100      	str	r1, [sp, #0]
 800e828:	2107      	movs	r1, #7
 800e82a:	4620      	mov	r0, r4
 800e82c:	f7fd fc64 	bl	800c0f8 <xTimerGenericCommand>
    		}
    		break;
 800e830:	e009      	b.n	800e846 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	3301      	adds	r3, #1
 800e836:	60fb      	str	r3, [r7, #12]
 800e838:	4b0c      	ldr	r3, [pc, #48]	; (800e86c <HAL_UART_RxCpltCallback+0xcc>)
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	461a      	mov	r2, r3
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	4293      	cmp	r3, r2
 800e842:	dbb6      	blt.n	800e7b2 <HAL_UART_RxCpltCallback+0x12>
 800e844:	e000      	b.n	800e848 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800e846:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d007      	beq.n	800e85e <HAL_UART_RxCpltCallback+0xbe>
 800e84e:	4b08      	ldr	r3, [pc, #32]	; (800e870 <HAL_UART_RxCpltCallback+0xd0>)
 800e850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e854:	601a      	str	r2, [r3, #0]
 800e856:	f3bf 8f4f 	dsb	sy
 800e85a:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800e85e:	bf00      	nop
 800e860:	3714      	adds	r7, #20
 800e862:	46bd      	mov	sp, r7
 800e864:	bd90      	pop	{r4, r7, pc}
 800e866:	bf00      	nop
 800e868:	200020b0 	.word	0x200020b0
 800e86c:	200020b8 	.word	0x200020b8
 800e870:	e000ed04 	.word	0xe000ed04

0800e874 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 800e87c:	2300      	movs	r3, #0
 800e87e:	60fb      	str	r3, [r7, #12]
 800e880:	e041      	b.n	800e906 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800e882:	4a27      	ldr	r2, [pc, #156]	; (800e920 <HAL_UART_ErrorCallback+0xac>)
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d136      	bne.n	800e900 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800e892:	4a23      	ldr	r2, [pc, #140]	; (800e920 <HAL_UART_ErrorCallback+0xac>)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e89a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e89e:	2b04      	cmp	r3, #4
 800e8a0:	d138      	bne.n	800e914 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e8a2:	e007      	b.n	800e8b4 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800e8a4:	4a1e      	ldr	r2, [pc, #120]	; (800e920 <HAL_UART_ErrorCallback+0xac>)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7f7 fe10 	bl	80064d4 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e8b4:	4a1a      	ldr	r2, [pc, #104]	; (800e920 <HAL_UART_ErrorCallback+0xac>)
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8bc:	6858      	ldr	r0, [r3, #4]
 800e8be:	4a18      	ldr	r2, [pc, #96]	; (800e920 <HAL_UART_ErrorCallback+0xac>)
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8c6:	33bc      	adds	r3, #188	; 0xbc
 800e8c8:	2280      	movs	r2, #128	; 0x80
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	f7fa faf9 	bl	8008ec2 <HAL_UARTEx_ReceiveToIdle_DMA>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d1e6      	bne.n	800e8a4 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800e8d6:	4a12      	ldr	r2, [pc, #72]	; (800e920 <HAL_UART_ErrorCallback+0xac>)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	490d      	ldr	r1, [pc, #52]	; (800e920 <HAL_UART_ErrorCallback+0xac>)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f022 0204 	bic.w	r2, r2, #4
 800e8fc:	601a      	str	r2, [r3, #0]

    		}

    		break;
 800e8fe:	e009      	b.n	800e914 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	3301      	adds	r3, #1
 800e904:	60fb      	str	r3, [r7, #12]
 800e906:	4b07      	ldr	r3, [pc, #28]	; (800e924 <HAL_UART_ErrorCallback+0xb0>)
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	461a      	mov	r2, r3
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	4293      	cmp	r3, r2
 800e910:	dbb7      	blt.n	800e882 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800e912:	e000      	b.n	800e916 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800e914:	bf00      	nop
}
 800e916:	bf00      	nop
 800e918:	3710      	adds	r7, #16
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	200020b0 	.word	0x200020b0
 800e924:	200020b8 	.word	0x200020b8

0800e928 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b086      	sub	sp, #24
 800e92c:	af02      	add	r7, sp, #8
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	460b      	mov	r3, r1
 800e932:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e934:	2300      	movs	r3, #0
 800e936:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800e938:	2300      	movs	r3, #0
 800e93a:	60fb      	str	r3, [r7, #12]
 800e93c:	e061      	b.n	800ea02 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800e93e:	4a3c      	ldr	r2, [pc, #240]	; (800ea30 <HAL_UARTEx_RxEventCallback+0x108>)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d156      	bne.n	800e9fc <HAL_UARTEx_RxEventCallback+0xd4>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800e94e:	4a38      	ldr	r2, [pc, #224]	; (800ea30 <HAL_UARTEx_RxEventCallback+0x108>)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e956:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e95a:	2b04      	cmp	r3, #4
 800e95c:	d158      	bne.n	800ea10 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800e95e:	887b      	ldrh	r3, [r7, #2]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d055      	beq.n	800ea10 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800e964:	4a32      	ldr	r2, [pc, #200]	; (800ea30 <HAL_UARTEx_RxEventCallback+0x108>)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e96c:	887a      	ldrh	r2, [r7, #2]
 800e96e:	b2d2      	uxtb	r2, r2
 800e970:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 800e974:	4a2e      	ldr	r2, [pc, #184]	; (800ea30 <HAL_UARTEx_RxEventCallback+0x108>)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e97c:	2200      	movs	r2, #0
 800e97e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e982:	e007      	b.n	800e994 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800e984:	4a2a      	ldr	r2, [pc, #168]	; (800ea30 <HAL_UARTEx_RxEventCallback+0x108>)
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	4618      	mov	r0, r3
 800e990:	f7f7 fda0 	bl	80064d4 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e994:	4a26      	ldr	r2, [pc, #152]	; (800ea30 <HAL_UARTEx_RxEventCallback+0x108>)
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e99c:	6858      	ldr	r0, [r3, #4]
 800e99e:	4a24      	ldr	r2, [pc, #144]	; (800ea30 <HAL_UARTEx_RxEventCallback+0x108>)
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9a6:	33bc      	adds	r3, #188	; 0xbc
 800e9a8:	2280      	movs	r2, #128	; 0x80
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	f7fa fa89 	bl	8008ec2 <HAL_UARTEx_ReceiveToIdle_DMA>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1e6      	bne.n	800e984 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800e9b6:	4a1e      	ldr	r2, [pc, #120]	; (800ea30 <HAL_UARTEx_RxEventCallback+0x108>)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	4919      	ldr	r1, [pc, #100]	; (800ea30 <HAL_UARTEx_RxEventCallback+0x108>)
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f022 0204 	bic.w	r2, r2, #4
 800e9dc:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800e9de:	4a14      	ldr	r2, [pc, #80]	; (800ea30 <HAL_UARTEx_RxEventCallback+0x108>)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9e6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800e9ea:	f107 0308 	add.w	r3, r7, #8
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	2203      	movs	r2, #3
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	f7fd f9ab 	bl	800bd50 <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 800e9fa:	e009      	b.n	800ea10 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	3301      	adds	r3, #1
 800ea00:	60fb      	str	r3, [r7, #12]
 800ea02:	4b0c      	ldr	r3, [pc, #48]	; (800ea34 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	461a      	mov	r2, r3
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	db97      	blt.n	800e93e <HAL_UARTEx_RxEventCallback+0x16>
 800ea0e:	e000      	b.n	800ea12 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800ea10:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d007      	beq.n	800ea28 <HAL_UARTEx_RxEventCallback+0x100>
 800ea18:	4b07      	ldr	r3, [pc, #28]	; (800ea38 <HAL_UARTEx_RxEventCallback+0x110>)
 800ea1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea1e:	601a      	str	r2, [r3, #0]
 800ea20:	f3bf 8f4f 	dsb	sy
 800ea24:	f3bf 8f6f 	isb	sy
}
 800ea28:	bf00      	nop
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	200020b0 	.word	0x200020b0
 800ea34:	200020b8 	.word	0x200020b8
 800ea38:	e000ed04 	.word	0xe000ed04

0800ea3c <memset>:
 800ea3c:	4402      	add	r2, r0
 800ea3e:	4603      	mov	r3, r0
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d100      	bne.n	800ea46 <memset+0xa>
 800ea44:	4770      	bx	lr
 800ea46:	f803 1b01 	strb.w	r1, [r3], #1
 800ea4a:	e7f9      	b.n	800ea40 <memset+0x4>

0800ea4c <__libc_init_array>:
 800ea4c:	b570      	push	{r4, r5, r6, lr}
 800ea4e:	4d0d      	ldr	r5, [pc, #52]	; (800ea84 <__libc_init_array+0x38>)
 800ea50:	4c0d      	ldr	r4, [pc, #52]	; (800ea88 <__libc_init_array+0x3c>)
 800ea52:	1b64      	subs	r4, r4, r5
 800ea54:	10a4      	asrs	r4, r4, #2
 800ea56:	2600      	movs	r6, #0
 800ea58:	42a6      	cmp	r6, r4
 800ea5a:	d109      	bne.n	800ea70 <__libc_init_array+0x24>
 800ea5c:	4d0b      	ldr	r5, [pc, #44]	; (800ea8c <__libc_init_array+0x40>)
 800ea5e:	4c0c      	ldr	r4, [pc, #48]	; (800ea90 <__libc_init_array+0x44>)
 800ea60:	f000 f826 	bl	800eab0 <_init>
 800ea64:	1b64      	subs	r4, r4, r5
 800ea66:	10a4      	asrs	r4, r4, #2
 800ea68:	2600      	movs	r6, #0
 800ea6a:	42a6      	cmp	r6, r4
 800ea6c:	d105      	bne.n	800ea7a <__libc_init_array+0x2e>
 800ea6e:	bd70      	pop	{r4, r5, r6, pc}
 800ea70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea74:	4798      	blx	r3
 800ea76:	3601      	adds	r6, #1
 800ea78:	e7ee      	b.n	800ea58 <__libc_init_array+0xc>
 800ea7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea7e:	4798      	blx	r3
 800ea80:	3601      	adds	r6, #1
 800ea82:	e7f2      	b.n	800ea6a <__libc_init_array+0x1e>
 800ea84:	0800ed30 	.word	0x0800ed30
 800ea88:	0800ed30 	.word	0x0800ed30
 800ea8c:	0800ed30 	.word	0x0800ed30
 800ea90:	0800ed34 	.word	0x0800ed34

0800ea94 <memcpy>:
 800ea94:	440a      	add	r2, r1
 800ea96:	4291      	cmp	r1, r2
 800ea98:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea9c:	d100      	bne.n	800eaa0 <memcpy+0xc>
 800ea9e:	4770      	bx	lr
 800eaa0:	b510      	push	{r4, lr}
 800eaa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaaa:	4291      	cmp	r1, r2
 800eaac:	d1f9      	bne.n	800eaa2 <memcpy+0xe>
 800eaae:	bd10      	pop	{r4, pc}

0800eab0 <_init>:
 800eab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eab2:	bf00      	nop
 800eab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eab6:	bc08      	pop	{r3}
 800eab8:	469e      	mov	lr, r3
 800eaba:	4770      	bx	lr

0800eabc <_fini>:
 800eabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eabe:	bf00      	nop
 800eac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eac2:	bc08      	pop	{r3}
 800eac4:	469e      	mov	lr, r3
 800eac6:	4770      	bx	lr
